/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the DexpFilterCriterion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DexpFilterCriterion{}

// DexpFilterCriterion Criterion for data explorer filters.
type DexpFilterCriterion struct {
	Evaluator *string `json:"evaluator,omitempty"`
	MatchExactly *bool `json:"matchExactly,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewDexpFilterCriterion instantiates a new DexpFilterCriterion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDexpFilterCriterion() *DexpFilterCriterion {
	this := DexpFilterCriterion{}
	return &this
}

// NewDexpFilterCriterionWithDefaults instantiates a new DexpFilterCriterion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDexpFilterCriterionWithDefaults() *DexpFilterCriterion {
	this := DexpFilterCriterion{}
	return &this
}

// GetEvaluator returns the Evaluator field value if set, zero value otherwise.
func (o *DexpFilterCriterion) GetEvaluator() string {
	if o == nil || IsNil(o.Evaluator) {
		var ret string
		return ret
	}
	return *o.Evaluator
}

// GetEvaluatorOk returns a tuple with the Evaluator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexpFilterCriterion) GetEvaluatorOk() (*string, bool) {
	if o == nil || IsNil(o.Evaluator) {
		return nil, false
	}
	return o.Evaluator, true
}

// HasEvaluator returns a boolean if a field has been set.
func (o *DexpFilterCriterion) HasEvaluator() bool {
	if o != nil && !IsNil(o.Evaluator) {
		return true
	}

	return false
}

// SetEvaluator gets a reference to the given string and assigns it to the Evaluator field.
func (o *DexpFilterCriterion) SetEvaluator(v string) {
	o.Evaluator = &v
}

// GetMatchExactly returns the MatchExactly field value if set, zero value otherwise.
func (o *DexpFilterCriterion) GetMatchExactly() bool {
	if o == nil || IsNil(o.MatchExactly) {
		var ret bool
		return ret
	}
	return *o.MatchExactly
}

// GetMatchExactlyOk returns a tuple with the MatchExactly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexpFilterCriterion) GetMatchExactlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MatchExactly) {
		return nil, false
	}
	return o.MatchExactly, true
}

// HasMatchExactly returns a boolean if a field has been set.
func (o *DexpFilterCriterion) HasMatchExactly() bool {
	if o != nil && !IsNil(o.MatchExactly) {
		return true
	}

	return false
}

// SetMatchExactly gets a reference to the given bool and assigns it to the MatchExactly field.
func (o *DexpFilterCriterion) SetMatchExactly(v bool) {
	o.MatchExactly = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DexpFilterCriterion) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexpFilterCriterion) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DexpFilterCriterion) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DexpFilterCriterion) SetValue(v string) {
	o.Value = &v
}

func (o DexpFilterCriterion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DexpFilterCriterion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Evaluator) {
		toSerialize["evaluator"] = o.Evaluator
	}
	if !IsNil(o.MatchExactly) {
		toSerialize["matchExactly"] = o.MatchExactly
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDexpFilterCriterion struct {
	value *DexpFilterCriterion
	isSet bool
}

func (v NullableDexpFilterCriterion) Get() *DexpFilterCriterion {
	return v.value
}

func (v *NullableDexpFilterCriterion) Set(val *DexpFilterCriterion) {
	v.value = val
	v.isSet = true
}

func (v NullableDexpFilterCriterion) IsSet() bool {
	return v.isSet
}

func (v *NullableDexpFilterCriterion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDexpFilterCriterion(val *DexpFilterCriterion) *NullableDexpFilterCriterion {
	return &NullableDexpFilterCriterion{value: val, isSet: true}
}

func (v NullableDexpFilterCriterion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDexpFilterCriterion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


