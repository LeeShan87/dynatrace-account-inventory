/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the Tile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tile{}

// Tile Configuration of a tile.   The actual set of fields depends on the type of the tile. Find the list of actual objects in the description of the **tileType** field or see [Dashboards API - Tile JSON models](https://dt-url.net/2wc3spx).
type Tile struct {
	Bounds TileBounds `json:"bounds"`
	// The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`).
	Configured *bool `json:"configured,omitempty"`
	// The tile auto refresh is disabled. Only works for certain tile types.
	IsAutoRefreshDisabled *bool `json:"isAutoRefreshDisabled,omitempty"`
	// The name of the tile.
	Name string `json:"name"`
	// The size of the tile name. Default value is null.
	NameSize *string `json:"nameSize,omitempty"`
	TileFilter *TileFilter `json:"tileFilter,omitempty"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `DATA_EXPLORER` -> DataExplorerTile  * `CUSTOM_CHARTING` -> CustomChartingTile  * `DTAQL` -> UserSessionQueryTile  * `MARKDOWN` -> MarkdownTile  * `IMAGE` -> ImageTile  * `HOSTS` -> FilterableEntityTile  * `APPLICATIONS` -> FilterableEntityTile  * `SERVICES` -> FilterableEntityTile  * `DATABASES_OVERVIEW` -> FilterableEntityTile  * `SYNTHETIC_TESTS` -> FilterableEntityTile  * `APPLICATION_WORLDMAP` -> AssignedEntitiesWithMetricTile  * `RESOURCES` -> AssignedEntitiesWithMetricTile  * `THIRD_PARTY_MOST_ACTIVE` -> AssignedEntitiesWithMetricTile  * `UEM_CONVERSIONS_PER_GOAL` -> AssignedEntitiesWithMetricTile  * `HOST` -> AssignedEntitiesWithMetricTile  * `PROCESS_GROUPS_ONE` -> AssignedEntitiesWithMetricTile  * `SYNTHETIC_SINGLE_WEBCHECK` -> SyntheticSingleWebcheckTile  * `APPLICATION` -> AssignedEntitiesTile  * `VIRTUALIZATION` -> AssignedEntitiesTile  * `AWS` -> AssignedEntitiesTile  * `SERVICE_VERSATILE` -> AssignedEntitiesTile  * `SESSION_METRICS` -> AssignedEntitiesTile  * `USERS` -> AssignedEntitiesTile  * `UEM_KEY_USER_ACTIONS` -> AssignedEntitiesTile  * `BOUNCE_RATE` -> AssignedEntitiesTile  * `UEM_CONVERSIONS_OVERALL` -> AssignedEntitiesTile  * `UEM_JSERRORS_OVERALL` -> AssignedEntitiesTile  * `MOBILE_APPLICATION` -> AssignedEntitiesTile  * `SYNTHETIC_SINGLE_EXT_TEST` -> AssignedEntitiesTile  * `SYNTHETIC_HTTP_MONITOR` -> AssignedEntitiesTile  * `DATABASE` -> AssignedEntitiesTile  * `CUSTOM_APPLICATION` -> AssignedEntitiesTile  * `APPLICATION_METHOD` -> AssignedEntitiesTile  * `LOG_ANALYTICS` -> AssignedEntitiesTile  * `OPENSTACK` -> AssignedEntitiesTile  * `OPENSTACK_PROJECT` -> AssignedEntitiesTile  * `OPENSTACK_AV_ZONE` -> AssignedEntitiesTile  * `DEVICE_APPLICATION_METHOD` -> AssignedEntitiesTile  * `DEM_KEY_USER_ACTION` -> AssignedEntitiesTile  * `SLO` -> AssignedEntitiesWithMetricTile  * `SCALABLE_LIST` -> ScalableListTile  * `HEADER` -> Tile  * `OPEN_PROBLEMS` -> ProblemTile  * `PURE_MODEL` -> Tile  * `DOCKER` -> Tile  * `NETWORK_MEDIUM` -> Tile  * `APPLICATIONS_MOST_ACTIVE` -> Tile  * `NETWORK` -> Tile  * `UEM_ACTIVE_SESSIONS` -> Tile  * `DCRUM_SERVICES` -> Tile  
	TileType string `json:"tileType"`
}

// NewTile instantiates a new Tile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTile(bounds TileBounds, name string, tileType string) *Tile {
	this := Tile{}
	this.Bounds = bounds
	this.Name = name
	this.TileType = tileType
	return &this
}

// NewTileWithDefaults instantiates a new Tile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTileWithDefaults() *Tile {
	this := Tile{}
	return &this
}

// GetBounds returns the Bounds field value
func (o *Tile) GetBounds() TileBounds {
	if o == nil {
		var ret TileBounds
		return ret
	}

	return o.Bounds
}

// GetBoundsOk returns a tuple with the Bounds field value
// and a boolean to check if the value has been set.
func (o *Tile) GetBoundsOk() (*TileBounds, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bounds, true
}

// SetBounds sets field value
func (o *Tile) SetBounds(v TileBounds) {
	o.Bounds = v
}

// GetConfigured returns the Configured field value if set, zero value otherwise.
func (o *Tile) GetConfigured() bool {
	if o == nil || IsNil(o.Configured) {
		var ret bool
		return ret
	}
	return *o.Configured
}

// GetConfiguredOk returns a tuple with the Configured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.Configured) {
		return nil, false
	}
	return o.Configured, true
}

// HasConfigured returns a boolean if a field has been set.
func (o *Tile) HasConfigured() bool {
	if o != nil && !IsNil(o.Configured) {
		return true
	}

	return false
}

// SetConfigured gets a reference to the given bool and assigns it to the Configured field.
func (o *Tile) SetConfigured(v bool) {
	o.Configured = &v
}

// GetIsAutoRefreshDisabled returns the IsAutoRefreshDisabled field value if set, zero value otherwise.
func (o *Tile) GetIsAutoRefreshDisabled() bool {
	if o == nil || IsNil(o.IsAutoRefreshDisabled) {
		var ret bool
		return ret
	}
	return *o.IsAutoRefreshDisabled
}

// GetIsAutoRefreshDisabledOk returns a tuple with the IsAutoRefreshDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetIsAutoRefreshDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutoRefreshDisabled) {
		return nil, false
	}
	return o.IsAutoRefreshDisabled, true
}

// HasIsAutoRefreshDisabled returns a boolean if a field has been set.
func (o *Tile) HasIsAutoRefreshDisabled() bool {
	if o != nil && !IsNil(o.IsAutoRefreshDisabled) {
		return true
	}

	return false
}

// SetIsAutoRefreshDisabled gets a reference to the given bool and assigns it to the IsAutoRefreshDisabled field.
func (o *Tile) SetIsAutoRefreshDisabled(v bool) {
	o.IsAutoRefreshDisabled = &v
}

// GetName returns the Name field value
func (o *Tile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tile) SetName(v string) {
	o.Name = v
}

// GetNameSize returns the NameSize field value if set, zero value otherwise.
func (o *Tile) GetNameSize() string {
	if o == nil || IsNil(o.NameSize) {
		var ret string
		return ret
	}
	return *o.NameSize
}

// GetNameSizeOk returns a tuple with the NameSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetNameSizeOk() (*string, bool) {
	if o == nil || IsNil(o.NameSize) {
		return nil, false
	}
	return o.NameSize, true
}

// HasNameSize returns a boolean if a field has been set.
func (o *Tile) HasNameSize() bool {
	if o != nil && !IsNil(o.NameSize) {
		return true
	}

	return false
}

// SetNameSize gets a reference to the given string and assigns it to the NameSize field.
func (o *Tile) SetNameSize(v string) {
	o.NameSize = &v
}

// GetTileFilter returns the TileFilter field value if set, zero value otherwise.
func (o *Tile) GetTileFilter() TileFilter {
	if o == nil || IsNil(o.TileFilter) {
		var ret TileFilter
		return ret
	}
	return *o.TileFilter
}

// GetTileFilterOk returns a tuple with the TileFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetTileFilterOk() (*TileFilter, bool) {
	if o == nil || IsNil(o.TileFilter) {
		return nil, false
	}
	return o.TileFilter, true
}

// HasTileFilter returns a boolean if a field has been set.
func (o *Tile) HasTileFilter() bool {
	if o != nil && !IsNil(o.TileFilter) {
		return true
	}

	return false
}

// SetTileFilter gets a reference to the given TileFilter and assigns it to the TileFilter field.
func (o *Tile) SetTileFilter(v TileFilter) {
	o.TileFilter = &v
}

// GetTileType returns the TileType field value
func (o *Tile) GetTileType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TileType
}

// GetTileTypeOk returns a tuple with the TileType field value
// and a boolean to check if the value has been set.
func (o *Tile) GetTileTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TileType, true
}

// SetTileType sets field value
func (o *Tile) SetTileType(v string) {
	o.TileType = v
}

func (o Tile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bounds"] = o.Bounds
	if !IsNil(o.Configured) {
		toSerialize["configured"] = o.Configured
	}
	if !IsNil(o.IsAutoRefreshDisabled) {
		toSerialize["isAutoRefreshDisabled"] = o.IsAutoRefreshDisabled
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NameSize) {
		toSerialize["nameSize"] = o.NameSize
	}
	if !IsNil(o.TileFilter) {
		toSerialize["tileFilter"] = o.TileFilter
	}
	toSerialize["tileType"] = o.TileType
	return toSerialize, nil
}

type NullableTile struct {
	value *Tile
	isSet bool
}

func (v NullableTile) Get() *Tile {
	return v.value
}

func (v *NullableTile) Set(val *Tile) {
	v.value = val
	v.isSet = true
}

func (v NullableTile) IsSet() bool {
	return v.isSet
}

func (v *NullableTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTile(val *Tile) *NullableTile {
	return &NullableTile{value: val, isSet: true}
}

func (v NullableTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


