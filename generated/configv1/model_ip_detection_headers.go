/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the IpDetectionHeaders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpDetectionHeaders{}

// IpDetectionHeaders Configuration of the custom client IP headers.
type IpDetectionHeaders struct {
	// A list of custom client IP headers.   Headers are evaluated from top to bottom; the first matching header applies.
	IpDetectionHeaders []string `json:"ipDetectionHeaders,omitempty"`
}

// NewIpDetectionHeaders instantiates a new IpDetectionHeaders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpDetectionHeaders() *IpDetectionHeaders {
	this := IpDetectionHeaders{}
	return &this
}

// NewIpDetectionHeadersWithDefaults instantiates a new IpDetectionHeaders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpDetectionHeadersWithDefaults() *IpDetectionHeaders {
	this := IpDetectionHeaders{}
	return &this
}

// GetIpDetectionHeaders returns the IpDetectionHeaders field value if set, zero value otherwise.
func (o *IpDetectionHeaders) GetIpDetectionHeaders() []string {
	if o == nil || IsNil(o.IpDetectionHeaders) {
		var ret []string
		return ret
	}
	return o.IpDetectionHeaders
}

// GetIpDetectionHeadersOk returns a tuple with the IpDetectionHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpDetectionHeaders) GetIpDetectionHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.IpDetectionHeaders) {
		return nil, false
	}
	return o.IpDetectionHeaders, true
}

// HasIpDetectionHeaders returns a boolean if a field has been set.
func (o *IpDetectionHeaders) HasIpDetectionHeaders() bool {
	if o != nil && !IsNil(o.IpDetectionHeaders) {
		return true
	}

	return false
}

// SetIpDetectionHeaders gets a reference to the given []string and assigns it to the IpDetectionHeaders field.
func (o *IpDetectionHeaders) SetIpDetectionHeaders(v []string) {
	o.IpDetectionHeaders = v
}

func (o IpDetectionHeaders) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpDetectionHeaders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IpDetectionHeaders) {
		toSerialize["ipDetectionHeaders"] = o.IpDetectionHeaders
	}
	return toSerialize, nil
}

type NullableIpDetectionHeaders struct {
	value *IpDetectionHeaders
	isSet bool
}

func (v NullableIpDetectionHeaders) Get() *IpDetectionHeaders {
	return v.value
}

func (v *NullableIpDetectionHeaders) Set(val *IpDetectionHeaders) {
	v.value = val
	v.isSet = true
}

func (v NullableIpDetectionHeaders) IsSet() bool {
	return v.isSet
}

func (v *NullableIpDetectionHeaders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpDetectionHeaders(val *IpDetectionHeaders) *NullableIpDetectionHeaders {
	return &NullableIpDetectionHeaders{value: val, isSet: true}
}

func (v NullableIpDetectionHeaders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpDetectionHeaders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


