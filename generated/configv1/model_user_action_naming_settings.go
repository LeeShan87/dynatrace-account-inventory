/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the UserActionNamingSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserActionNamingSettings{}

// UserActionNamingSettings The settings of user action naming.
type UserActionNamingSettings struct {
	// User action naming rules for custom actions.
	CustomActionNamingRules []UserActionNamingRule `json:"customActionNamingRules,omitempty"`
	// Case insensitive naming.
	IgnoreCase *bool `json:"ignoreCase,omitempty"`
	// User action naming rules for loading actions.
	LoadActionNamingRules []UserActionNamingRule `json:"loadActionNamingRules,omitempty"`
	// User action placeholders.
	Placeholders []UserActionNamingPlaceholder `json:"placeholders,omitempty"`
	// List of parameters that should be removed from the query before using the query in the user action name.
	QueryParameterCleanups []string `json:"queryParameterCleanups,omitempty"`
	// Deactivate this setting if different domains should not result in separate user actions.
	SplitUserActionsByDomain *bool `json:"splitUserActionsByDomain,omitempty"`
	// First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
	UseFirstDetectedLoadAction *bool `json:"useFirstDetectedLoadAction,omitempty"`
	// User action naming rules for xhr actions.
	XhrActionNamingRules []UserActionNamingRule `json:"xhrActionNamingRules,omitempty"`
}

// NewUserActionNamingSettings instantiates a new UserActionNamingSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserActionNamingSettings() *UserActionNamingSettings {
	this := UserActionNamingSettings{}
	return &this
}

// NewUserActionNamingSettingsWithDefaults instantiates a new UserActionNamingSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserActionNamingSettingsWithDefaults() *UserActionNamingSettings {
	this := UserActionNamingSettings{}
	return &this
}

// GetCustomActionNamingRules returns the CustomActionNamingRules field value if set, zero value otherwise.
func (o *UserActionNamingSettings) GetCustomActionNamingRules() []UserActionNamingRule {
	if o == nil || IsNil(o.CustomActionNamingRules) {
		var ret []UserActionNamingRule
		return ret
	}
	return o.CustomActionNamingRules
}

// GetCustomActionNamingRulesOk returns a tuple with the CustomActionNamingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingSettings) GetCustomActionNamingRulesOk() ([]UserActionNamingRule, bool) {
	if o == nil || IsNil(o.CustomActionNamingRules) {
		return nil, false
	}
	return o.CustomActionNamingRules, true
}

// HasCustomActionNamingRules returns a boolean if a field has been set.
func (o *UserActionNamingSettings) HasCustomActionNamingRules() bool {
	if o != nil && !IsNil(o.CustomActionNamingRules) {
		return true
	}

	return false
}

// SetCustomActionNamingRules gets a reference to the given []UserActionNamingRule and assigns it to the CustomActionNamingRules field.
func (o *UserActionNamingSettings) SetCustomActionNamingRules(v []UserActionNamingRule) {
	o.CustomActionNamingRules = v
}

// GetIgnoreCase returns the IgnoreCase field value if set, zero value otherwise.
func (o *UserActionNamingSettings) GetIgnoreCase() bool {
	if o == nil || IsNil(o.IgnoreCase) {
		var ret bool
		return ret
	}
	return *o.IgnoreCase
}

// GetIgnoreCaseOk returns a tuple with the IgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingSettings) GetIgnoreCaseOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreCase) {
		return nil, false
	}
	return o.IgnoreCase, true
}

// HasIgnoreCase returns a boolean if a field has been set.
func (o *UserActionNamingSettings) HasIgnoreCase() bool {
	if o != nil && !IsNil(o.IgnoreCase) {
		return true
	}

	return false
}

// SetIgnoreCase gets a reference to the given bool and assigns it to the IgnoreCase field.
func (o *UserActionNamingSettings) SetIgnoreCase(v bool) {
	o.IgnoreCase = &v
}

// GetLoadActionNamingRules returns the LoadActionNamingRules field value if set, zero value otherwise.
func (o *UserActionNamingSettings) GetLoadActionNamingRules() []UserActionNamingRule {
	if o == nil || IsNil(o.LoadActionNamingRules) {
		var ret []UserActionNamingRule
		return ret
	}
	return o.LoadActionNamingRules
}

// GetLoadActionNamingRulesOk returns a tuple with the LoadActionNamingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingSettings) GetLoadActionNamingRulesOk() ([]UserActionNamingRule, bool) {
	if o == nil || IsNil(o.LoadActionNamingRules) {
		return nil, false
	}
	return o.LoadActionNamingRules, true
}

// HasLoadActionNamingRules returns a boolean if a field has been set.
func (o *UserActionNamingSettings) HasLoadActionNamingRules() bool {
	if o != nil && !IsNil(o.LoadActionNamingRules) {
		return true
	}

	return false
}

// SetLoadActionNamingRules gets a reference to the given []UserActionNamingRule and assigns it to the LoadActionNamingRules field.
func (o *UserActionNamingSettings) SetLoadActionNamingRules(v []UserActionNamingRule) {
	o.LoadActionNamingRules = v
}

// GetPlaceholders returns the Placeholders field value if set, zero value otherwise.
func (o *UserActionNamingSettings) GetPlaceholders() []UserActionNamingPlaceholder {
	if o == nil || IsNil(o.Placeholders) {
		var ret []UserActionNamingPlaceholder
		return ret
	}
	return o.Placeholders
}

// GetPlaceholdersOk returns a tuple with the Placeholders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingSettings) GetPlaceholdersOk() ([]UserActionNamingPlaceholder, bool) {
	if o == nil || IsNil(o.Placeholders) {
		return nil, false
	}
	return o.Placeholders, true
}

// HasPlaceholders returns a boolean if a field has been set.
func (o *UserActionNamingSettings) HasPlaceholders() bool {
	if o != nil && !IsNil(o.Placeholders) {
		return true
	}

	return false
}

// SetPlaceholders gets a reference to the given []UserActionNamingPlaceholder and assigns it to the Placeholders field.
func (o *UserActionNamingSettings) SetPlaceholders(v []UserActionNamingPlaceholder) {
	o.Placeholders = v
}

// GetQueryParameterCleanups returns the QueryParameterCleanups field value if set, zero value otherwise.
func (o *UserActionNamingSettings) GetQueryParameterCleanups() []string {
	if o == nil || IsNil(o.QueryParameterCleanups) {
		var ret []string
		return ret
	}
	return o.QueryParameterCleanups
}

// GetQueryParameterCleanupsOk returns a tuple with the QueryParameterCleanups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingSettings) GetQueryParameterCleanupsOk() ([]string, bool) {
	if o == nil || IsNil(o.QueryParameterCleanups) {
		return nil, false
	}
	return o.QueryParameterCleanups, true
}

// HasQueryParameterCleanups returns a boolean if a field has been set.
func (o *UserActionNamingSettings) HasQueryParameterCleanups() bool {
	if o != nil && !IsNil(o.QueryParameterCleanups) {
		return true
	}

	return false
}

// SetQueryParameterCleanups gets a reference to the given []string and assigns it to the QueryParameterCleanups field.
func (o *UserActionNamingSettings) SetQueryParameterCleanups(v []string) {
	o.QueryParameterCleanups = v
}

// GetSplitUserActionsByDomain returns the SplitUserActionsByDomain field value if set, zero value otherwise.
func (o *UserActionNamingSettings) GetSplitUserActionsByDomain() bool {
	if o == nil || IsNil(o.SplitUserActionsByDomain) {
		var ret bool
		return ret
	}
	return *o.SplitUserActionsByDomain
}

// GetSplitUserActionsByDomainOk returns a tuple with the SplitUserActionsByDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingSettings) GetSplitUserActionsByDomainOk() (*bool, bool) {
	if o == nil || IsNil(o.SplitUserActionsByDomain) {
		return nil, false
	}
	return o.SplitUserActionsByDomain, true
}

// HasSplitUserActionsByDomain returns a boolean if a field has been set.
func (o *UserActionNamingSettings) HasSplitUserActionsByDomain() bool {
	if o != nil && !IsNil(o.SplitUserActionsByDomain) {
		return true
	}

	return false
}

// SetSplitUserActionsByDomain gets a reference to the given bool and assigns it to the SplitUserActionsByDomain field.
func (o *UserActionNamingSettings) SetSplitUserActionsByDomain(v bool) {
	o.SplitUserActionsByDomain = &v
}

// GetUseFirstDetectedLoadAction returns the UseFirstDetectedLoadAction field value if set, zero value otherwise.
func (o *UserActionNamingSettings) GetUseFirstDetectedLoadAction() bool {
	if o == nil || IsNil(o.UseFirstDetectedLoadAction) {
		var ret bool
		return ret
	}
	return *o.UseFirstDetectedLoadAction
}

// GetUseFirstDetectedLoadActionOk returns a tuple with the UseFirstDetectedLoadAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingSettings) GetUseFirstDetectedLoadActionOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFirstDetectedLoadAction) {
		return nil, false
	}
	return o.UseFirstDetectedLoadAction, true
}

// HasUseFirstDetectedLoadAction returns a boolean if a field has been set.
func (o *UserActionNamingSettings) HasUseFirstDetectedLoadAction() bool {
	if o != nil && !IsNil(o.UseFirstDetectedLoadAction) {
		return true
	}

	return false
}

// SetUseFirstDetectedLoadAction gets a reference to the given bool and assigns it to the UseFirstDetectedLoadAction field.
func (o *UserActionNamingSettings) SetUseFirstDetectedLoadAction(v bool) {
	o.UseFirstDetectedLoadAction = &v
}

// GetXhrActionNamingRules returns the XhrActionNamingRules field value if set, zero value otherwise.
func (o *UserActionNamingSettings) GetXhrActionNamingRules() []UserActionNamingRule {
	if o == nil || IsNil(o.XhrActionNamingRules) {
		var ret []UserActionNamingRule
		return ret
	}
	return o.XhrActionNamingRules
}

// GetXhrActionNamingRulesOk returns a tuple with the XhrActionNamingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingSettings) GetXhrActionNamingRulesOk() ([]UserActionNamingRule, bool) {
	if o == nil || IsNil(o.XhrActionNamingRules) {
		return nil, false
	}
	return o.XhrActionNamingRules, true
}

// HasXhrActionNamingRules returns a boolean if a field has been set.
func (o *UserActionNamingSettings) HasXhrActionNamingRules() bool {
	if o != nil && !IsNil(o.XhrActionNamingRules) {
		return true
	}

	return false
}

// SetXhrActionNamingRules gets a reference to the given []UserActionNamingRule and assigns it to the XhrActionNamingRules field.
func (o *UserActionNamingSettings) SetXhrActionNamingRules(v []UserActionNamingRule) {
	o.XhrActionNamingRules = v
}

func (o UserActionNamingSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserActionNamingSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomActionNamingRules) {
		toSerialize["customActionNamingRules"] = o.CustomActionNamingRules
	}
	if !IsNil(o.IgnoreCase) {
		toSerialize["ignoreCase"] = o.IgnoreCase
	}
	if !IsNil(o.LoadActionNamingRules) {
		toSerialize["loadActionNamingRules"] = o.LoadActionNamingRules
	}
	if !IsNil(o.Placeholders) {
		toSerialize["placeholders"] = o.Placeholders
	}
	if !IsNil(o.QueryParameterCleanups) {
		toSerialize["queryParameterCleanups"] = o.QueryParameterCleanups
	}
	if !IsNil(o.SplitUserActionsByDomain) {
		toSerialize["splitUserActionsByDomain"] = o.SplitUserActionsByDomain
	}
	if !IsNil(o.UseFirstDetectedLoadAction) {
		toSerialize["useFirstDetectedLoadAction"] = o.UseFirstDetectedLoadAction
	}
	if !IsNil(o.XhrActionNamingRules) {
		toSerialize["xhrActionNamingRules"] = o.XhrActionNamingRules
	}
	return toSerialize, nil
}

type NullableUserActionNamingSettings struct {
	value *UserActionNamingSettings
	isSet bool
}

func (v NullableUserActionNamingSettings) Get() *UserActionNamingSettings {
	return v.value
}

func (v *NullableUserActionNamingSettings) Set(val *UserActionNamingSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserActionNamingSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserActionNamingSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserActionNamingSettings(val *UserActionNamingSettings) *NullableUserActionNamingSettings {
	return &NullableUserActionNamingSettings{value: val, isSet: true}
}

func (v NullableUserActionNamingSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserActionNamingSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


