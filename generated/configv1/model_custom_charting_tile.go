/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the CustomChartingTile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomChartingTile{}

// CustomChartingTile Configuration of a custom chart tile.
type CustomChartingTile struct {
	FilterConfig *CustomFilterConfig `json:"filterConfig,omitempty"`
}

// NewCustomChartingTile instantiates a new CustomChartingTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomChartingTile(bounds TileBounds, name string, tileType string) *CustomChartingTile {
	this := CustomChartingTile{}
	this.Bounds = bounds
	this.Name = name
	this.TileType = tileType
	return &this
}

// NewCustomChartingTileWithDefaults instantiates a new CustomChartingTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomChartingTileWithDefaults() *CustomChartingTile {
	this := CustomChartingTile{}
	return &this
}

// GetFilterConfig returns the FilterConfig field value if set, zero value otherwise.
func (o *CustomChartingTile) GetFilterConfig() CustomFilterConfig {
	if o == nil || IsNil(o.FilterConfig) {
		var ret CustomFilterConfig
		return ret
	}
	return *o.FilterConfig
}

// GetFilterConfigOk returns a tuple with the FilterConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChartingTile) GetFilterConfigOk() (*CustomFilterConfig, bool) {
	if o == nil || IsNil(o.FilterConfig) {
		return nil, false
	}
	return o.FilterConfig, true
}

// HasFilterConfig returns a boolean if a field has been set.
func (o *CustomChartingTile) HasFilterConfig() bool {
	if o != nil && !IsNil(o.FilterConfig) {
		return true
	}

	return false
}

// SetFilterConfig gets a reference to the given CustomFilterConfig and assigns it to the FilterConfig field.
func (o *CustomChartingTile) SetFilterConfig(v CustomFilterConfig) {
	o.FilterConfig = &v
}

func (o CustomChartingTile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomChartingTile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterConfig) {
		toSerialize["filterConfig"] = o.FilterConfig
	}
	return toSerialize, nil
}

type NullableCustomChartingTile struct {
	value *CustomChartingTile
	isSet bool
}

func (v NullableCustomChartingTile) Get() *CustomChartingTile {
	return v.value
}

func (v *NullableCustomChartingTile) Set(val *CustomChartingTile) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomChartingTile) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomChartingTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomChartingTile(val *CustomChartingTile) *NullableCustomChartingTile {
	return &NullableCustomChartingTile{value: val, isSet: true}
}

func (v NullableCustomChartingTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomChartingTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


