/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// RUMMobileDeobfuscationAndSymbolicationAPIService RUMMobileDeobfuscationAndSymbolicationAPI service
type RUMMobileDeobfuscationAndSymbolicationAPIService service

type ApiCreateOrUpdateRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
	applicationId string
	packageName string
	os string
	versionCode string
	versionName string
	body *os.File
	contentType *string
}

// The file to be uploaded: a proguard file (*.txt) for Android or the zip file produced by the DTXDssClient provided with the OneAgent for iOS. 
func (r ApiCreateOrUpdateRequest) Body(body *os.File) ApiCreateOrUpdateRequest {
	r.body = body
	return r
}

func (r ApiCreateOrUpdateRequest) ContentType(contentType string) ApiCreateOrUpdateRequest {
	r.contentType = &contentType
	return r
}

func (r ApiCreateOrUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateOrUpdateExecute(r)
}

/*
CreateOrUpdate Upload a symbol file

The file should be either a ProGuard file for Android or a zip file containing all the iOS dSYM files.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The ID of the required mobile app.
 @param packageName The CFBundleIdentifier (iOS) or the package name (Android) of the required mobile app.
 @param os The operating system of the required app.
 @param versionCode The version code (Android) / CFBundleVersion (iOS) of the required app.
 @param versionName The version name (Android) / CFBundleShortVersionString (iOS) of the required app.
 @return ApiCreateOrUpdateRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) CreateOrUpdate(ctx context.Context, applicationId string, packageName string, os string, versionCode string, versionName string) ApiCreateOrUpdateRequest {
	return ApiCreateOrUpdateRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		packageName: packageName,
		os: os,
		versionCode: versionCode,
		versionName: versionName,
	}
}

// Execute executes the request
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) CreateOrUpdateExecute(r ApiCreateOrUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.CreateOrUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"packageName"+"}", url.PathEscape(parameterValueToString(r.packageName, "packageName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"os"+"}", url.PathEscape(parameterValueToString(r.os, "os")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionCode"+"}", url.PathEscape(parameterValueToString(r.versionCode, "versionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionName"+"}", url.PathEscape(parameterValueToString(r.versionName, "versionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageName) < 1 {
		return nil, reportError("packageName must have at least 1 elements")
	}
	if strlen(r.packageName) > 2147483647 {
		return nil, reportError("packageName must have less than 2147483647 elements")
	}
	if strlen(r.versionCode) < 1 {
		return nil, reportError("versionCode must have at least 1 elements")
	}
	if strlen(r.versionCode) > 2147483647 {
		return nil, reportError("versionCode must have less than 2147483647 elements")
	}
	if strlen(r.versionName) < 1 {
		return nil, reportError("versionName must have at least 1 elements")
	}
	if strlen(r.versionName) > 2147483647 {
		return nil, reportError("versionName must have less than 2147483647 elements")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-compressed", "application/x-zip-compressed", "application/zip", "text/plain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "content-type", r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateOrUpdatePinningRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
	applicationId string
	packageName string
	os string
	versionCode string
	versionName string
	symbolFilePinning *SymbolFilePinning
}

// The JSON body of the request. Contains the pinning status to set.
func (r ApiCreateOrUpdatePinningRequest) SymbolFilePinning(symbolFilePinning SymbolFilePinning) ApiCreateOrUpdatePinningRequest {
	r.symbolFilePinning = &symbolFilePinning
	return r
}

func (r ApiCreateOrUpdatePinningRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateOrUpdatePinningExecute(r)
}

/*
CreateOrUpdatePinning Pins/unpins all symbol files of an app version

A pinned file will not be deleted automatically, when running out of space.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The operating system of the required app.
 @param packageName The CFBundleIdentifier (iOS) or the package name (Android) of the required mobile app.
 @param os The operating system of the required app.
 @param versionCode The version code (Android) / CFBundleVersion (iOS) of the required app.
 @param versionName The version name (Android) / CFBundleShortVersionString (iOS) of the required app.
 @return ApiCreateOrUpdatePinningRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) CreateOrUpdatePinning(ctx context.Context, applicationId string, packageName string, os string, versionCode string, versionName string) ApiCreateOrUpdatePinningRequest {
	return ApiCreateOrUpdatePinningRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		packageName: packageName,
		os: os,
		versionCode: versionCode,
		versionName: versionName,
	}
}

// Execute executes the request
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) CreateOrUpdatePinningExecute(r ApiCreateOrUpdatePinningRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.CreateOrUpdatePinning")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}/pinning"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"packageName"+"}", url.PathEscape(parameterValueToString(r.packageName, "packageName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"os"+"}", url.PathEscape(parameterValueToString(r.os, "os")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionCode"+"}", url.PathEscape(parameterValueToString(r.versionCode, "versionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionName"+"}", url.PathEscape(parameterValueToString(r.versionName, "versionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageName) < 1 {
		return nil, reportError("packageName must have at least 1 elements")
	}
	if strlen(r.packageName) > 2147483647 {
		return nil, reportError("packageName must have less than 2147483647 elements")
	}
	if strlen(r.versionCode) < 1 {
		return nil, reportError("versionCode must have at least 1 elements")
	}
	if strlen(r.versionCode) > 2147483647 {
		return nil, reportError("versionCode must have less than 2147483647 elements")
	}
	if strlen(r.versionName) < 1 {
		return nil, reportError("versionName must have at least 1 elements")
	}
	if strlen(r.versionName) > 2147483647 {
		return nil, reportError("versionName must have less than 2147483647 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.symbolFilePinning
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteAppRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
	applicationId string
}

func (r ApiDeleteAppRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAppExecute(r)
}

/*
DeleteApp Deletes all symbol file belonging for a mobile app

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The ID of the required mobile app.
 @return ApiDeleteAppRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) DeleteApp(ctx context.Context, applicationId string) ApiDeleteAppRequest {
	return ApiDeleteAppRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
	}
}

// Execute executes the request
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) DeleteAppExecute(r ApiDeleteAppRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.DeleteApp")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/{applicationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSingleFileRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
	applicationId string
	packageName string
	os string
	versionCode string
	versionName string
}

func (r ApiDeleteSingleFileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSingleFileExecute(r)
}

/*
DeleteSingleFile Deletes the symbol file belonging to the specified app, OS, and an app version

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The ID of the required mobile app.
 @param packageName The CFBundleIdentifier (iOS) or the package name (Android) of the required mobile app.
 @param os The operating system of the required app.
 @param versionCode The version code (Android) / CFBundleVersion (iOS) of the required app.
 @param versionName The version name (Android) / CFBundleShortVersionString (iOS) of the required app.
 @return ApiDeleteSingleFileRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) DeleteSingleFile(ctx context.Context, applicationId string, packageName string, os string, versionCode string, versionName string) ApiDeleteSingleFileRequest {
	return ApiDeleteSingleFileRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		packageName: packageName,
		os: os,
		versionCode: versionCode,
		versionName: versionName,
	}
}

// Execute executes the request
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) DeleteSingleFileExecute(r ApiDeleteSingleFileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.DeleteSingleFile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"packageName"+"}", url.PathEscape(parameterValueToString(r.packageName, "packageName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"os"+"}", url.PathEscape(parameterValueToString(r.os, "os")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionCode"+"}", url.PathEscape(parameterValueToString(r.versionCode, "versionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionName"+"}", url.PathEscape(parameterValueToString(r.versionName, "versionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageName) < 1 {
		return nil, reportError("packageName must have at least 1 elements")
	}
	if strlen(r.packageName) > 2147483647 {
		return nil, reportError("packageName must have less than 2147483647 elements")
	}
	if strlen(r.versionCode) < 1 {
		return nil, reportError("versionCode must have at least 1 elements")
	}
	if strlen(r.versionCode) > 2147483647 {
		return nil, reportError("versionCode must have less than 2147483647 elements")
	}
	if strlen(r.versionName) < 1 {
		return nil, reportError("versionName must have at least 1 elements")
	}
	if strlen(r.versionName) > 2147483647 {
		return nil, reportError("versionName must have less than 2147483647 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
}

func (r ApiGetAllRequest) Execute() (*SymbolFileList, *http.Response, error) {
	return r.ApiService.GetAllExecute(r)
}

/*
GetAll Lists metadata of all symbol files from the Symbol File Store

Symbol files are ProGuard files for Android or dSYM files for iOS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetAll(ctx context.Context) ApiGetAllRequest {
	return ApiGetAllRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SymbolFileList
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetAllExecute(r ApiGetAllRequest) (*SymbolFileList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SymbolFileList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.GetAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllPerApplicationRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
	applicationId string
}

func (r ApiGetAllPerApplicationRequest) Execute() (*SymbolFileList, *http.Response, error) {
	return r.ApiService.GetAllPerApplicationExecute(r)
}

/*
GetAllPerApplication Lists metadata of all symbol files for a mobile app from the Symbol File Store

Symbol files are ProGuard files for Android or dSYM files for iOS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The Dynatrace entity ID of the required mobile app.
 @return ApiGetAllPerApplicationRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetAllPerApplication(ctx context.Context, applicationId string) ApiGetAllPerApplicationRequest {
	return ApiGetAllPerApplicationRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
	}
}

// Execute executes the request
//  @return SymbolFileList
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetAllPerApplicationExecute(r ApiGetAllPerApplicationRequest) (*SymbolFileList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SymbolFileList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.GetAllPerApplication")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/{applicationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDssClientUrlRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
}

func (r ApiGetDssClientUrlRequest) Execute() (*SymbolFileClientLinkDto, *http.Response, error) {
	return r.ApiService.GetDssClientUrlExecute(r)
}

/*
GetDssClientUrl Gets a download link for the latest version of the DTXDssClient

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDssClientUrlRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetDssClientUrl(ctx context.Context) ApiGetDssClientUrlRequest {
	return ApiGetDssClientUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SymbolFileClientLinkDto
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetDssClientUrlExecute(r ApiGetDssClientUrlRequest) (*SymbolFileClientLinkDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SymbolFileClientLinkDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.GetDssClientUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/dtxdss-download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInfoRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
}

func (r ApiGetInfoRequest) Execute() (*SymbolFileStorageInfo, *http.Response, error) {
	return r.ApiService.GetInfoExecute(r)
}

/*
GetInfo Gets information about symbol files storage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetInfoRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetInfo(ctx context.Context) ApiGetInfoRequest {
	return ApiGetInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SymbolFileStorageInfo
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetInfoExecute(r ApiGetInfoRequest) (*SymbolFileStorageInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SymbolFileStorageInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.GetInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSingleRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
	applicationId string
	packageName string
	os string
	versionCode string
	versionName string
}

func (r ApiGetSingleRequest) Execute() (*SymbolFile, *http.Response, error) {
	return r.ApiService.GetSingleExecute(r)
}

/*
GetSingle Gets metadata of the symbol file for an app version

Only one file per OS and version can exist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The ID of the required mobile app.
 @param packageName The CFBundleIdentifier (iOS) or the package name (Android) of the required mobile app.
 @param os The operating system of the required app.
 @param versionCode The version code (Android) / CFBundleVersion (iOS) of the required app.
 @param versionName The version name (Android) / CFBundleShortVersionString (iOS) of the required app.
 @return ApiGetSingleRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetSingle(ctx context.Context, applicationId string, packageName string, os string, versionCode string, versionName string) ApiGetSingleRequest {
	return ApiGetSingleRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		packageName: packageName,
		os: os,
		versionCode: versionCode,
		versionName: versionName,
	}
}

// Execute executes the request
//  @return SymbolFile
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetSingleExecute(r ApiGetSingleRequest) (*SymbolFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SymbolFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.GetSingle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"packageName"+"}", url.PathEscape(parameterValueToString(r.packageName, "packageName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"os"+"}", url.PathEscape(parameterValueToString(r.os, "os")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionCode"+"}", url.PathEscape(parameterValueToString(r.versionCode, "versionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionName"+"}", url.PathEscape(parameterValueToString(r.versionName, "versionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageName) < 1 {
		return localVarReturnValue, nil, reportError("packageName must have at least 1 elements")
	}
	if strlen(r.packageName) > 2147483647 {
		return localVarReturnValue, nil, reportError("packageName must have less than 2147483647 elements")
	}
	if strlen(r.versionCode) < 1 {
		return localVarReturnValue, nil, reportError("versionCode must have at least 1 elements")
	}
	if strlen(r.versionCode) > 2147483647 {
		return localVarReturnValue, nil, reportError("versionCode must have less than 2147483647 elements")
	}
	if strlen(r.versionName) < 1 {
		return localVarReturnValue, nil, reportError("versionName must have at least 1 elements")
	}
	if strlen(r.versionName) > 2147483647 {
		return localVarReturnValue, nil, reportError("versionName must have less than 2147483647 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSupportedVersionRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
}

func (r ApiGetSupportedVersionRequest) Execute() (*SupportedVersion, *http.Response, error) {
	return r.ApiService.GetSupportedVersionExecute(r)
}

/*
GetSupportedVersion Gets the supported file format version for iOS symbol files

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSupportedVersionRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetSupportedVersion(ctx context.Context) ApiGetSupportedVersionRequest {
	return ApiGetSupportedVersionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SupportedVersion
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) GetSupportedVersionExecute(r ApiGetSupportedVersionRequest) (*SupportedVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportedVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.GetSupportedVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/ios/supportedversion"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiValidatePinningRequest struct {
	ctx context.Context
	ApiService *RUMMobileDeobfuscationAndSymbolicationAPIService
	applicationId string
	packageName string
	os string
	versionCode string
	versionName string
	symbolFilePinning *SymbolFilePinning
}

// The JSON body of the request. Contains the pinning status to set.
func (r ApiValidatePinningRequest) SymbolFilePinning(symbolFilePinning SymbolFilePinning) ApiValidatePinningRequest {
	r.symbolFilePinning = &symbolFilePinning
	return r
}

func (r ApiValidatePinningRequest) Execute() (*http.Response, error) {
	return r.ApiService.ValidatePinningExecute(r)
}

/*
ValidatePinning Validates the payload for the `PUT /{applicationId}/{packageName}/{os}/{versionName}/pinning` request

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The ID of the required mobile app.
 @param packageName The CFBundleIdentifier (iOS) or the package name (Android) of the required mobile app.
 @param os The operating system of the required app.
 @param versionCode The version code (Android) / CFBundleVersion (iOS) of the required app.
 @param versionName The version name (Android) / CFBundleShortVersionString (iOS) of the required app.
 @return ApiValidatePinningRequest
*/
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) ValidatePinning(ctx context.Context, applicationId string, packageName string, os string, versionCode string, versionName string) ApiValidatePinningRequest {
	return ApiValidatePinningRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		packageName: packageName,
		os: os,
		versionCode: versionCode,
		versionName: versionName,
	}
}

// Execute executes the request
func (a *RUMMobileDeobfuscationAndSymbolicationAPIService) ValidatePinningExecute(r ApiValidatePinningRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMMobileDeobfuscationAndSymbolicationAPIService.ValidatePinning")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}/pinning/validator"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"packageName"+"}", url.PathEscape(parameterValueToString(r.packageName, "packageName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"os"+"}", url.PathEscape(parameterValueToString(r.os, "os")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionCode"+"}", url.PathEscape(parameterValueToString(r.versionCode, "versionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionName"+"}", url.PathEscape(parameterValueToString(r.versionName, "versionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageName) < 1 {
		return nil, reportError("packageName must have at least 1 elements")
	}
	if strlen(r.packageName) > 2147483647 {
		return nil, reportError("packageName must have less than 2147483647 elements")
	}
	if strlen(r.versionCode) < 1 {
		return nil, reportError("versionCode must have at least 1 elements")
	}
	if strlen(r.versionCode) > 2147483647 {
		return nil, reportError("versionCode must have less than 2147483647 elements")
	}
	if strlen(r.versionName) < 1 {
		return nil, reportError("versionName must have at least 1 elements")
	}
	if strlen(r.versionName) > 2147483647 {
		return nil, reportError("versionName must have less than 2147483647 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.symbolFilePinning
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
