/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SessionReplayDataPrivacySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionReplayDataPrivacySettings{}

// SessionReplayDataPrivacySettings Data privacy settings for Session Replay.
type SessionReplayDataPrivacySettings struct {
	ContentMaskingSettings *SessionReplayContentMaskingSettings `json:"contentMaskingSettings,omitempty"`
	// If `true`, session recording is disabled until JavaScriptAPI `dtrum.enableSessionReplay()` is called.
	OptInModeEnabled *bool `json:"optInModeEnabled,omitempty"`
	// A list of URLs to be excluded from recording.
	UrlExclusionRules []string `json:"urlExclusionRules,omitempty"`
}

// NewSessionReplayDataPrivacySettings instantiates a new SessionReplayDataPrivacySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionReplayDataPrivacySettings() *SessionReplayDataPrivacySettings {
	this := SessionReplayDataPrivacySettings{}
	return &this
}

// NewSessionReplayDataPrivacySettingsWithDefaults instantiates a new SessionReplayDataPrivacySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionReplayDataPrivacySettingsWithDefaults() *SessionReplayDataPrivacySettings {
	this := SessionReplayDataPrivacySettings{}
	return &this
}

// GetContentMaskingSettings returns the ContentMaskingSettings field value if set, zero value otherwise.
func (o *SessionReplayDataPrivacySettings) GetContentMaskingSettings() SessionReplayContentMaskingSettings {
	if o == nil || IsNil(o.ContentMaskingSettings) {
		var ret SessionReplayContentMaskingSettings
		return ret
	}
	return *o.ContentMaskingSettings
}

// GetContentMaskingSettingsOk returns a tuple with the ContentMaskingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionReplayDataPrivacySettings) GetContentMaskingSettingsOk() (*SessionReplayContentMaskingSettings, bool) {
	if o == nil || IsNil(o.ContentMaskingSettings) {
		return nil, false
	}
	return o.ContentMaskingSettings, true
}

// HasContentMaskingSettings returns a boolean if a field has been set.
func (o *SessionReplayDataPrivacySettings) HasContentMaskingSettings() bool {
	if o != nil && !IsNil(o.ContentMaskingSettings) {
		return true
	}

	return false
}

// SetContentMaskingSettings gets a reference to the given SessionReplayContentMaskingSettings and assigns it to the ContentMaskingSettings field.
func (o *SessionReplayDataPrivacySettings) SetContentMaskingSettings(v SessionReplayContentMaskingSettings) {
	o.ContentMaskingSettings = &v
}

// GetOptInModeEnabled returns the OptInModeEnabled field value if set, zero value otherwise.
func (o *SessionReplayDataPrivacySettings) GetOptInModeEnabled() bool {
	if o == nil || IsNil(o.OptInModeEnabled) {
		var ret bool
		return ret
	}
	return *o.OptInModeEnabled
}

// GetOptInModeEnabledOk returns a tuple with the OptInModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionReplayDataPrivacySettings) GetOptInModeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.OptInModeEnabled) {
		return nil, false
	}
	return o.OptInModeEnabled, true
}

// HasOptInModeEnabled returns a boolean if a field has been set.
func (o *SessionReplayDataPrivacySettings) HasOptInModeEnabled() bool {
	if o != nil && !IsNil(o.OptInModeEnabled) {
		return true
	}

	return false
}

// SetOptInModeEnabled gets a reference to the given bool and assigns it to the OptInModeEnabled field.
func (o *SessionReplayDataPrivacySettings) SetOptInModeEnabled(v bool) {
	o.OptInModeEnabled = &v
}

// GetUrlExclusionRules returns the UrlExclusionRules field value if set, zero value otherwise.
func (o *SessionReplayDataPrivacySettings) GetUrlExclusionRules() []string {
	if o == nil || IsNil(o.UrlExclusionRules) {
		var ret []string
		return ret
	}
	return o.UrlExclusionRules
}

// GetUrlExclusionRulesOk returns a tuple with the UrlExclusionRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionReplayDataPrivacySettings) GetUrlExclusionRulesOk() ([]string, bool) {
	if o == nil || IsNil(o.UrlExclusionRules) {
		return nil, false
	}
	return o.UrlExclusionRules, true
}

// HasUrlExclusionRules returns a boolean if a field has been set.
func (o *SessionReplayDataPrivacySettings) HasUrlExclusionRules() bool {
	if o != nil && !IsNil(o.UrlExclusionRules) {
		return true
	}

	return false
}

// SetUrlExclusionRules gets a reference to the given []string and assigns it to the UrlExclusionRules field.
func (o *SessionReplayDataPrivacySettings) SetUrlExclusionRules(v []string) {
	o.UrlExclusionRules = v
}

func (o SessionReplayDataPrivacySettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionReplayDataPrivacySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentMaskingSettings) {
		toSerialize["contentMaskingSettings"] = o.ContentMaskingSettings
	}
	if !IsNil(o.OptInModeEnabled) {
		toSerialize["optInModeEnabled"] = o.OptInModeEnabled
	}
	if !IsNil(o.UrlExclusionRules) {
		toSerialize["urlExclusionRules"] = o.UrlExclusionRules
	}
	return toSerialize, nil
}

type NullableSessionReplayDataPrivacySettings struct {
	value *SessionReplayDataPrivacySettings
	isSet bool
}

func (v NullableSessionReplayDataPrivacySettings) Get() *SessionReplayDataPrivacySettings {
	return v.value
}

func (v *NullableSessionReplayDataPrivacySettings) Set(val *SessionReplayDataPrivacySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionReplayDataPrivacySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionReplayDataPrivacySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionReplayDataPrivacySettings(val *SessionReplayDataPrivacySettings) *NullableSessionReplayDataPrivacySettings {
	return &NullableSessionReplayDataPrivacySettings{value: val, isSet: true}
}

func (v NullableSessionReplayDataPrivacySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionReplayDataPrivacySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


