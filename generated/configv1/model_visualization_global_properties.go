/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the VisualizationGlobalProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationGlobalProperties{}

// VisualizationGlobalProperties Visualization global configuration
type VisualizationGlobalProperties struct {
	HasTrendline *bool `json:"hasTrendline,omitempty"`
	HideLegend *bool `json:"hideLegend,omitempty"`
	SeriesType *string `json:"seriesType,omitempty"`
	Theme *string `json:"theme,omitempty"`
	Threshold *VisualizationThreshold `json:"threshold,omitempty"`
}

// NewVisualizationGlobalProperties instantiates a new VisualizationGlobalProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationGlobalProperties() *VisualizationGlobalProperties {
	this := VisualizationGlobalProperties{}
	return &this
}

// NewVisualizationGlobalPropertiesWithDefaults instantiates a new VisualizationGlobalProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationGlobalPropertiesWithDefaults() *VisualizationGlobalProperties {
	this := VisualizationGlobalProperties{}
	return &this
}

// GetHasTrendline returns the HasTrendline field value if set, zero value otherwise.
func (o *VisualizationGlobalProperties) GetHasTrendline() bool {
	if o == nil || IsNil(o.HasTrendline) {
		var ret bool
		return ret
	}
	return *o.HasTrendline
}

// GetHasTrendlineOk returns a tuple with the HasTrendline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationGlobalProperties) GetHasTrendlineOk() (*bool, bool) {
	if o == nil || IsNil(o.HasTrendline) {
		return nil, false
	}
	return o.HasTrendline, true
}

// HasHasTrendline returns a boolean if a field has been set.
func (o *VisualizationGlobalProperties) HasHasTrendline() bool {
	if o != nil && !IsNil(o.HasTrendline) {
		return true
	}

	return false
}

// SetHasTrendline gets a reference to the given bool and assigns it to the HasTrendline field.
func (o *VisualizationGlobalProperties) SetHasTrendline(v bool) {
	o.HasTrendline = &v
}

// GetHideLegend returns the HideLegend field value if set, zero value otherwise.
func (o *VisualizationGlobalProperties) GetHideLegend() bool {
	if o == nil || IsNil(o.HideLegend) {
		var ret bool
		return ret
	}
	return *o.HideLegend
}

// GetHideLegendOk returns a tuple with the HideLegend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationGlobalProperties) GetHideLegendOk() (*bool, bool) {
	if o == nil || IsNil(o.HideLegend) {
		return nil, false
	}
	return o.HideLegend, true
}

// HasHideLegend returns a boolean if a field has been set.
func (o *VisualizationGlobalProperties) HasHideLegend() bool {
	if o != nil && !IsNil(o.HideLegend) {
		return true
	}

	return false
}

// SetHideLegend gets a reference to the given bool and assigns it to the HideLegend field.
func (o *VisualizationGlobalProperties) SetHideLegend(v bool) {
	o.HideLegend = &v
}

// GetSeriesType returns the SeriesType field value if set, zero value otherwise.
func (o *VisualizationGlobalProperties) GetSeriesType() string {
	if o == nil || IsNil(o.SeriesType) {
		var ret string
		return ret
	}
	return *o.SeriesType
}

// GetSeriesTypeOk returns a tuple with the SeriesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationGlobalProperties) GetSeriesTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesType) {
		return nil, false
	}
	return o.SeriesType, true
}

// HasSeriesType returns a boolean if a field has been set.
func (o *VisualizationGlobalProperties) HasSeriesType() bool {
	if o != nil && !IsNil(o.SeriesType) {
		return true
	}

	return false
}

// SetSeriesType gets a reference to the given string and assigns it to the SeriesType field.
func (o *VisualizationGlobalProperties) SetSeriesType(v string) {
	o.SeriesType = &v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *VisualizationGlobalProperties) GetTheme() string {
	if o == nil || IsNil(o.Theme) {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationGlobalProperties) GetThemeOk() (*string, bool) {
	if o == nil || IsNil(o.Theme) {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *VisualizationGlobalProperties) HasTheme() bool {
	if o != nil && !IsNil(o.Theme) {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *VisualizationGlobalProperties) SetTheme(v string) {
	o.Theme = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *VisualizationGlobalProperties) GetThreshold() VisualizationThreshold {
	if o == nil || IsNil(o.Threshold) {
		var ret VisualizationThreshold
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationGlobalProperties) GetThresholdOk() (*VisualizationThreshold, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *VisualizationGlobalProperties) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given VisualizationThreshold and assigns it to the Threshold field.
func (o *VisualizationGlobalProperties) SetThreshold(v VisualizationThreshold) {
	o.Threshold = &v
}

func (o VisualizationGlobalProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationGlobalProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasTrendline) {
		toSerialize["hasTrendline"] = o.HasTrendline
	}
	if !IsNil(o.HideLegend) {
		toSerialize["hideLegend"] = o.HideLegend
	}
	if !IsNil(o.SeriesType) {
		toSerialize["seriesType"] = o.SeriesType
	}
	if !IsNil(o.Theme) {
		toSerialize["theme"] = o.Theme
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	return toSerialize, nil
}

type NullableVisualizationGlobalProperties struct {
	value *VisualizationGlobalProperties
	isSet bool
}

func (v NullableVisualizationGlobalProperties) Get() *VisualizationGlobalProperties {
	return v.value
}

func (v *NullableVisualizationGlobalProperties) Set(val *VisualizationGlobalProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationGlobalProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationGlobalProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationGlobalProperties(val *VisualizationGlobalProperties) *NullableVisualizationGlobalProperties {
	return &NullableVisualizationGlobalProperties{value: val, isSet: true}
}

func (v NullableVisualizationGlobalProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationGlobalProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


