/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SymbolFileList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SymbolFileList{}

// SymbolFileList struct for SymbolFileList
type SymbolFileList struct {
	// A list of symbol files.
	SymbolFiles []SymbolFile `json:"symbolFiles,omitempty"`
}

// NewSymbolFileList instantiates a new SymbolFileList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolFileList() *SymbolFileList {
	this := SymbolFileList{}
	return &this
}

// NewSymbolFileListWithDefaults instantiates a new SymbolFileList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolFileListWithDefaults() *SymbolFileList {
	this := SymbolFileList{}
	return &this
}

// GetSymbolFiles returns the SymbolFiles field value if set, zero value otherwise.
func (o *SymbolFileList) GetSymbolFiles() []SymbolFile {
	if o == nil || IsNil(o.SymbolFiles) {
		var ret []SymbolFile
		return ret
	}
	return o.SymbolFiles
}

// GetSymbolFilesOk returns a tuple with the SymbolFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFileList) GetSymbolFilesOk() ([]SymbolFile, bool) {
	if o == nil || IsNil(o.SymbolFiles) {
		return nil, false
	}
	return o.SymbolFiles, true
}

// HasSymbolFiles returns a boolean if a field has been set.
func (o *SymbolFileList) HasSymbolFiles() bool {
	if o != nil && !IsNil(o.SymbolFiles) {
		return true
	}

	return false
}

// SetSymbolFiles gets a reference to the given []SymbolFile and assigns it to the SymbolFiles field.
func (o *SymbolFileList) SetSymbolFiles(v []SymbolFile) {
	o.SymbolFiles = v
}

func (o SymbolFileList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SymbolFileList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SymbolFiles) {
		toSerialize["symbolFiles"] = o.SymbolFiles
	}
	return toSerialize, nil
}

type NullableSymbolFileList struct {
	value *SymbolFileList
	isSet bool
}

func (v NullableSymbolFileList) Get() *SymbolFileList {
	return v.value
}

func (v *NullableSymbolFileList) Set(val *SymbolFileList) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolFileList) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolFileList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolFileList(val *SymbolFileList) *NullableSymbolFileList {
	return &NullableSymbolFileList{value: val, isSet: true}
}

func (v NullableSymbolFileList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolFileList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


