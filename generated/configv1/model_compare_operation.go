/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the CompareOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompareOperation{}

// CompareOperation The condition of the rule.   The actual set of fields depends on the type of the condition. Find the list of actual objects in the description of the **type** field or see [Service detection API - JSON models](https://dt-url.net/2ie3slq).
type CompareOperation struct {
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `EQUALS` -> EqualsCompareOperation  * `STRING_CONTAINS` -> StringContainsCompareOperation  * `STARTS_WITH` -> StartsWithCompareOperation  * `ENDS_WITH` -> EndsWithCompareOperation  * `EXISTS` -> ExistsCompareOperation  * `IP_IN_RANGE` -> IpInRangeCompareOperation  * `LESS_THAN` -> LessThanCompareOperation  * `GREATER_THAN` -> GreaterThanCompareOperation  * `INT_EQUALS` -> IntEqualsCompareOperation  * `STRING_EQUALS` -> StringEqualsCompareOperation  * `TAG` -> TagCompareOperation  
	Type string `json:"type"`
}

// NewCompareOperation instantiates a new CompareOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompareOperation(type_ string) *CompareOperation {
	this := CompareOperation{}
	this.Type = type_
	return &this
}

// NewCompareOperationWithDefaults instantiates a new CompareOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompareOperationWithDefaults() *CompareOperation {
	this := CompareOperation{}
	return &this
}

// GetType returns the Type field value
func (o *CompareOperation) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CompareOperation) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CompareOperation) SetType(v string) {
	o.Type = v
}

func (o CompareOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompareOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableCompareOperation struct {
	value *CompareOperation
	isSet bool
}

func (v NullableCompareOperation) Get() *CompareOperation {
	return v.value
}

func (v *NullableCompareOperation) Set(val *CompareOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableCompareOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableCompareOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompareOperation(val *CompareOperation) *NullableCompareOperation {
	return &NullableCompareOperation{value: val, isSet: true}
}

func (v NullableCompareOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompareOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


