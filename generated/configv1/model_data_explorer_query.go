/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the DataExplorerQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataExplorerQuery{}

// DataExplorerQuery Configuration of a data explorer query.
type DataExplorerQuery struct {
	// Replaces null data points with the provided value
	DefaultValue *float64 `json:"defaultValue,omitempty"`
	// Status of the query
	Enabled bool `json:"enabled"`
	FilterBy DataExplorerFilter `json:"filterBy"`
	// The fold transformation
	FoldTransformation *string `json:"foldTransformation,omitempty"`
	// Generated metric selector
	GeneratedMetricSelector *string `json:"generatedMetricSelector,omitempty"`
	// The id of the query
	Id string `json:"id"`
	// Limit the results of the query
	Limit *int32 `json:"limit,omitempty"`
	// The metric id
	Metric string `json:"metric"`
	// The metric selector
	MetricSelector *string `json:"metricSelector,omitempty"`
	// Converts a count-based metric (for example, bytes) into a rate-based metric (bytes per second)
	Rate *string `json:"rate,omitempty"`
	// The order of the sorting applied to the query
	SortBy *string `json:"sortBy,omitempty"`
	// The dimension where sorting is applied. Sorting by value if null
	SortByDimension *string `json:"sortByDimension,omitempty"`
	// Space aggregation applied to the query
	SpaceAggregation string `json:"spaceAggregation"`
	// The splittings applied to the query
	SplitBy []string `json:"splitBy"`
	// Time roll up applied to the query
	TimeAggregation string `json:"timeAggregation"`
	TimeShift *DataExplorerTimeShift `json:"timeShift,omitempty"`
}

// NewDataExplorerQuery instantiates a new DataExplorerQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataExplorerQuery(enabled bool, filterBy DataExplorerFilter, id string, metric string, spaceAggregation string, splitBy []string, timeAggregation string) *DataExplorerQuery {
	this := DataExplorerQuery{}
	this.Enabled = enabled
	this.FilterBy = filterBy
	this.Id = id
	this.Metric = metric
	this.SpaceAggregation = spaceAggregation
	this.SplitBy = splitBy
	this.TimeAggregation = timeAggregation
	return &this
}

// NewDataExplorerQueryWithDefaults instantiates a new DataExplorerQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataExplorerQueryWithDefaults() *DataExplorerQuery {
	this := DataExplorerQuery{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *DataExplorerQuery) GetDefaultValue() float64 {
	if o == nil || IsNil(o.DefaultValue) {
		var ret float64
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetDefaultValueOk() (*float64, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *DataExplorerQuery) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given float64 and assigns it to the DefaultValue field.
func (o *DataExplorerQuery) SetDefaultValue(v float64) {
	o.DefaultValue = &v
}

// GetEnabled returns the Enabled field value
func (o *DataExplorerQuery) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DataExplorerQuery) SetEnabled(v bool) {
	o.Enabled = v
}

// GetFilterBy returns the FilterBy field value
func (o *DataExplorerQuery) GetFilterBy() DataExplorerFilter {
	if o == nil {
		var ret DataExplorerFilter
		return ret
	}

	return o.FilterBy
}

// GetFilterByOk returns a tuple with the FilterBy field value
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetFilterByOk() (*DataExplorerFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterBy, true
}

// SetFilterBy sets field value
func (o *DataExplorerQuery) SetFilterBy(v DataExplorerFilter) {
	o.FilterBy = v
}

// GetFoldTransformation returns the FoldTransformation field value if set, zero value otherwise.
func (o *DataExplorerQuery) GetFoldTransformation() string {
	if o == nil || IsNil(o.FoldTransformation) {
		var ret string
		return ret
	}
	return *o.FoldTransformation
}

// GetFoldTransformationOk returns a tuple with the FoldTransformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetFoldTransformationOk() (*string, bool) {
	if o == nil || IsNil(o.FoldTransformation) {
		return nil, false
	}
	return o.FoldTransformation, true
}

// HasFoldTransformation returns a boolean if a field has been set.
func (o *DataExplorerQuery) HasFoldTransformation() bool {
	if o != nil && !IsNil(o.FoldTransformation) {
		return true
	}

	return false
}

// SetFoldTransformation gets a reference to the given string and assigns it to the FoldTransformation field.
func (o *DataExplorerQuery) SetFoldTransformation(v string) {
	o.FoldTransformation = &v
}

// GetGeneratedMetricSelector returns the GeneratedMetricSelector field value if set, zero value otherwise.
func (o *DataExplorerQuery) GetGeneratedMetricSelector() string {
	if o == nil || IsNil(o.GeneratedMetricSelector) {
		var ret string
		return ret
	}
	return *o.GeneratedMetricSelector
}

// GetGeneratedMetricSelectorOk returns a tuple with the GeneratedMetricSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetGeneratedMetricSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.GeneratedMetricSelector) {
		return nil, false
	}
	return o.GeneratedMetricSelector, true
}

// HasGeneratedMetricSelector returns a boolean if a field has been set.
func (o *DataExplorerQuery) HasGeneratedMetricSelector() bool {
	if o != nil && !IsNil(o.GeneratedMetricSelector) {
		return true
	}

	return false
}

// SetGeneratedMetricSelector gets a reference to the given string and assigns it to the GeneratedMetricSelector field.
func (o *DataExplorerQuery) SetGeneratedMetricSelector(v string) {
	o.GeneratedMetricSelector = &v
}

// GetId returns the Id field value
func (o *DataExplorerQuery) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataExplorerQuery) SetId(v string) {
	o.Id = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *DataExplorerQuery) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *DataExplorerQuery) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *DataExplorerQuery) SetLimit(v int32) {
	o.Limit = &v
}

// GetMetric returns the Metric field value
func (o *DataExplorerQuery) GetMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *DataExplorerQuery) SetMetric(v string) {
	o.Metric = v
}

// GetMetricSelector returns the MetricSelector field value if set, zero value otherwise.
func (o *DataExplorerQuery) GetMetricSelector() string {
	if o == nil || IsNil(o.MetricSelector) {
		var ret string
		return ret
	}
	return *o.MetricSelector
}

// GetMetricSelectorOk returns a tuple with the MetricSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetMetricSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.MetricSelector) {
		return nil, false
	}
	return o.MetricSelector, true
}

// HasMetricSelector returns a boolean if a field has been set.
func (o *DataExplorerQuery) HasMetricSelector() bool {
	if o != nil && !IsNil(o.MetricSelector) {
		return true
	}

	return false
}

// SetMetricSelector gets a reference to the given string and assigns it to the MetricSelector field.
func (o *DataExplorerQuery) SetMetricSelector(v string) {
	o.MetricSelector = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *DataExplorerQuery) GetRate() string {
	if o == nil || IsNil(o.Rate) {
		var ret string
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetRateOk() (*string, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *DataExplorerQuery) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given string and assigns it to the Rate field.
func (o *DataExplorerQuery) SetRate(v string) {
	o.Rate = &v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *DataExplorerQuery) GetSortBy() string {
	if o == nil || IsNil(o.SortBy) {
		var ret string
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetSortByOk() (*string, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *DataExplorerQuery) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given string and assigns it to the SortBy field.
func (o *DataExplorerQuery) SetSortBy(v string) {
	o.SortBy = &v
}

// GetSortByDimension returns the SortByDimension field value if set, zero value otherwise.
func (o *DataExplorerQuery) GetSortByDimension() string {
	if o == nil || IsNil(o.SortByDimension) {
		var ret string
		return ret
	}
	return *o.SortByDimension
}

// GetSortByDimensionOk returns a tuple with the SortByDimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetSortByDimensionOk() (*string, bool) {
	if o == nil || IsNil(o.SortByDimension) {
		return nil, false
	}
	return o.SortByDimension, true
}

// HasSortByDimension returns a boolean if a field has been set.
func (o *DataExplorerQuery) HasSortByDimension() bool {
	if o != nil && !IsNil(o.SortByDimension) {
		return true
	}

	return false
}

// SetSortByDimension gets a reference to the given string and assigns it to the SortByDimension field.
func (o *DataExplorerQuery) SetSortByDimension(v string) {
	o.SortByDimension = &v
}

// GetSpaceAggregation returns the SpaceAggregation field value
func (o *DataExplorerQuery) GetSpaceAggregation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpaceAggregation
}

// GetSpaceAggregationOk returns a tuple with the SpaceAggregation field value
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetSpaceAggregationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpaceAggregation, true
}

// SetSpaceAggregation sets field value
func (o *DataExplorerQuery) SetSpaceAggregation(v string) {
	o.SpaceAggregation = v
}

// GetSplitBy returns the SplitBy field value
func (o *DataExplorerQuery) GetSplitBy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SplitBy
}

// GetSplitByOk returns a tuple with the SplitBy field value
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetSplitByOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SplitBy, true
}

// SetSplitBy sets field value
func (o *DataExplorerQuery) SetSplitBy(v []string) {
	o.SplitBy = v
}

// GetTimeAggregation returns the TimeAggregation field value
func (o *DataExplorerQuery) GetTimeAggregation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeAggregation
}

// GetTimeAggregationOk returns a tuple with the TimeAggregation field value
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetTimeAggregationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeAggregation, true
}

// SetTimeAggregation sets field value
func (o *DataExplorerQuery) SetTimeAggregation(v string) {
	o.TimeAggregation = v
}

// GetTimeShift returns the TimeShift field value if set, zero value otherwise.
func (o *DataExplorerQuery) GetTimeShift() DataExplorerTimeShift {
	if o == nil || IsNil(o.TimeShift) {
		var ret DataExplorerTimeShift
		return ret
	}
	return *o.TimeShift
}

// GetTimeShiftOk returns a tuple with the TimeShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuery) GetTimeShiftOk() (*DataExplorerTimeShift, bool) {
	if o == nil || IsNil(o.TimeShift) {
		return nil, false
	}
	return o.TimeShift, true
}

// HasTimeShift returns a boolean if a field has been set.
func (o *DataExplorerQuery) HasTimeShift() bool {
	if o != nil && !IsNil(o.TimeShift) {
		return true
	}

	return false
}

// SetTimeShift gets a reference to the given DataExplorerTimeShift and assigns it to the TimeShift field.
func (o *DataExplorerQuery) SetTimeShift(v DataExplorerTimeShift) {
	o.TimeShift = &v
}

func (o DataExplorerQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataExplorerQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["filterBy"] = o.FilterBy
	if !IsNil(o.FoldTransformation) {
		toSerialize["foldTransformation"] = o.FoldTransformation
	}
	if !IsNil(o.GeneratedMetricSelector) {
		toSerialize["generatedMetricSelector"] = o.GeneratedMetricSelector
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	toSerialize["metric"] = o.Metric
	if !IsNil(o.MetricSelector) {
		toSerialize["metricSelector"] = o.MetricSelector
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.SortBy) {
		toSerialize["sortBy"] = o.SortBy
	}
	if !IsNil(o.SortByDimension) {
		toSerialize["sortByDimension"] = o.SortByDimension
	}
	toSerialize["spaceAggregation"] = o.SpaceAggregation
	toSerialize["splitBy"] = o.SplitBy
	toSerialize["timeAggregation"] = o.TimeAggregation
	if !IsNil(o.TimeShift) {
		toSerialize["timeShift"] = o.TimeShift
	}
	return toSerialize, nil
}

type NullableDataExplorerQuery struct {
	value *DataExplorerQuery
	isSet bool
}

func (v NullableDataExplorerQuery) Get() *DataExplorerQuery {
	return v.value
}

func (v *NullableDataExplorerQuery) Set(val *DataExplorerQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDataExplorerQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDataExplorerQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataExplorerQuery(val *DataExplorerQuery) *NullableDataExplorerQuery {
	return &NullableDataExplorerQuery{value: val, isSet: true}
}

func (v NullableDataExplorerQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataExplorerQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


