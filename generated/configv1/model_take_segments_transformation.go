/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the TakeSegmentsTransformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TakeSegmentsTransformation{}

// TakeSegmentsTransformation The transformation of the `TAKE_SEGMENTS` type.   The transformation splits the detected value into an array and keeps the specified number of first or last elements.
type TakeSegmentsTransformation struct {
	// The delimiter for splitting the detected value. The delimiter itself is not kept.
	Delimiter string `json:"delimiter"`
	// The number of elements to be kept.
	SegmentCount int32 `json:"segmentCount"`
	// Keeps the first (`false`) or last (`true`) elements.    If not set, then `false` is used, keeping the first elements.
	TakeFromEnd *bool `json:"takeFromEnd,omitempty"`
}

// NewTakeSegmentsTransformation instantiates a new TakeSegmentsTransformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTakeSegmentsTransformation(delimiter string, segmentCount int32, type_ string) *TakeSegmentsTransformation {
	this := TakeSegmentsTransformation{}
	this.Type = type_
	this.Delimiter = delimiter
	this.SegmentCount = segmentCount
	return &this
}

// NewTakeSegmentsTransformationWithDefaults instantiates a new TakeSegmentsTransformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTakeSegmentsTransformationWithDefaults() *TakeSegmentsTransformation {
	this := TakeSegmentsTransformation{}
	return &this
}

// GetDelimiter returns the Delimiter field value
func (o *TakeSegmentsTransformation) GetDelimiter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value
// and a boolean to check if the value has been set.
func (o *TakeSegmentsTransformation) GetDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delimiter, true
}

// SetDelimiter sets field value
func (o *TakeSegmentsTransformation) SetDelimiter(v string) {
	o.Delimiter = v
}

// GetSegmentCount returns the SegmentCount field value
func (o *TakeSegmentsTransformation) GetSegmentCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SegmentCount
}

// GetSegmentCountOk returns a tuple with the SegmentCount field value
// and a boolean to check if the value has been set.
func (o *TakeSegmentsTransformation) GetSegmentCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SegmentCount, true
}

// SetSegmentCount sets field value
func (o *TakeSegmentsTransformation) SetSegmentCount(v int32) {
	o.SegmentCount = v
}

// GetTakeFromEnd returns the TakeFromEnd field value if set, zero value otherwise.
func (o *TakeSegmentsTransformation) GetTakeFromEnd() bool {
	if o == nil || IsNil(o.TakeFromEnd) {
		var ret bool
		return ret
	}
	return *o.TakeFromEnd
}

// GetTakeFromEndOk returns a tuple with the TakeFromEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TakeSegmentsTransformation) GetTakeFromEndOk() (*bool, bool) {
	if o == nil || IsNil(o.TakeFromEnd) {
		return nil, false
	}
	return o.TakeFromEnd, true
}

// HasTakeFromEnd returns a boolean if a field has been set.
func (o *TakeSegmentsTransformation) HasTakeFromEnd() bool {
	if o != nil && !IsNil(o.TakeFromEnd) {
		return true
	}

	return false
}

// SetTakeFromEnd gets a reference to the given bool and assigns it to the TakeFromEnd field.
func (o *TakeSegmentsTransformation) SetTakeFromEnd(v bool) {
	o.TakeFromEnd = &v
}

func (o TakeSegmentsTransformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TakeSegmentsTransformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delimiter"] = o.Delimiter
	toSerialize["segmentCount"] = o.SegmentCount
	if !IsNil(o.TakeFromEnd) {
		toSerialize["takeFromEnd"] = o.TakeFromEnd
	}
	return toSerialize, nil
}

type NullableTakeSegmentsTransformation struct {
	value *TakeSegmentsTransformation
	isSet bool
}

func (v NullableTakeSegmentsTransformation) Get() *TakeSegmentsTransformation {
	return v.value
}

func (v *NullableTakeSegmentsTransformation) Set(val *TakeSegmentsTransformation) {
	v.value = val
	v.isSet = true
}

func (v NullableTakeSegmentsTransformation) IsSet() bool {
	return v.isSet
}

func (v *NullableTakeSegmentsTransformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTakeSegmentsTransformation(val *TakeSegmentsTransformation) *NullableTakeSegmentsTransformation {
	return &NullableTakeSegmentsTransformation{value: val, isSet: true}
}

func (v NullableTakeSegmentsTransformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTakeSegmentsTransformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


