/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the KeyBasedAuthentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyBasedAuthentication{}

// KeyBasedAuthentication **Deprecated**. The credentials for the key-based authentication.
type KeyBasedAuthentication struct {
	// The ID of the access key.
	AccessKey string `json:"accessKey"`
	// The secret access key.
	SecretKey string `json:"secretKey"`
}

// NewKeyBasedAuthentication instantiates a new KeyBasedAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyBasedAuthentication(accessKey string, secretKey string) *KeyBasedAuthentication {
	this := KeyBasedAuthentication{}
	this.AccessKey = accessKey
	this.SecretKey = secretKey
	return &this
}

// NewKeyBasedAuthenticationWithDefaults instantiates a new KeyBasedAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyBasedAuthenticationWithDefaults() *KeyBasedAuthentication {
	this := KeyBasedAuthentication{}
	return &this
}

// GetAccessKey returns the AccessKey field value
func (o *KeyBasedAuthentication) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *KeyBasedAuthentication) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *KeyBasedAuthentication) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetSecretKey returns the SecretKey field value
func (o *KeyBasedAuthentication) GetSecretKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value
// and a boolean to check if the value has been set.
func (o *KeyBasedAuthentication) GetSecretKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretKey, true
}

// SetSecretKey sets field value
func (o *KeyBasedAuthentication) SetSecretKey(v string) {
	o.SecretKey = v
}

func (o KeyBasedAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyBasedAuthentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessKey"] = o.AccessKey
	toSerialize["secretKey"] = o.SecretKey
	return toSerialize, nil
}

type NullableKeyBasedAuthentication struct {
	value *KeyBasedAuthentication
	isSet bool
}

func (v NullableKeyBasedAuthentication) Get() *KeyBasedAuthentication {
	return v.value
}

func (v *NullableKeyBasedAuthentication) Set(val *KeyBasedAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyBasedAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyBasedAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyBasedAuthentication(val *KeyBasedAuthentication) *NullableKeyBasedAuthentication {
	return &NullableKeyBasedAuthentication{value: val, isSet: true}
}

func (v NullableKeyBasedAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyBasedAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


