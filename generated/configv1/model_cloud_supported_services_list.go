/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the CloudSupportedServicesList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudSupportedServicesList{}

// CloudSupportedServicesList A supported services metadata list
type CloudSupportedServicesList struct {
	// List of supported services metadata
	Services []CloudSupportedService `json:"services,omitempty"`
}

// NewCloudSupportedServicesList instantiates a new CloudSupportedServicesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudSupportedServicesList() *CloudSupportedServicesList {
	this := CloudSupportedServicesList{}
	return &this
}

// NewCloudSupportedServicesListWithDefaults instantiates a new CloudSupportedServicesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudSupportedServicesListWithDefaults() *CloudSupportedServicesList {
	this := CloudSupportedServicesList{}
	return &this
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *CloudSupportedServicesList) GetServices() []CloudSupportedService {
	if o == nil || IsNil(o.Services) {
		var ret []CloudSupportedService
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSupportedServicesList) GetServicesOk() ([]CloudSupportedService, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *CloudSupportedServicesList) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []CloudSupportedService and assigns it to the Services field.
func (o *CloudSupportedServicesList) SetServices(v []CloudSupportedService) {
	o.Services = v
}

func (o CloudSupportedServicesList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudSupportedServicesList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	return toSerialize, nil
}

type NullableCloudSupportedServicesList struct {
	value *CloudSupportedServicesList
	isSet bool
}

func (v NullableCloudSupportedServicesList) Get() *CloudSupportedServicesList {
	return v.value
}

func (v *NullableCloudSupportedServicesList) Set(val *CloudSupportedServicesList) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudSupportedServicesList) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudSupportedServicesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudSupportedServicesList(val *CloudSupportedServicesList) *NullableCloudSupportedServicesList {
	return &NullableCloudSupportedServicesList{value: val, isSet: true}
}

func (v NullableCloudSupportedServicesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudSupportedServicesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


