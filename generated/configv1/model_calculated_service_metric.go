/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the CalculatedServiceMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalculatedServiceMetric{}

// CalculatedServiceMetric Descriptor of a calculated service metric.
type CalculatedServiceMetric struct {
	// The set of conditions for the metric usage.    **All** the specified conditions must be fulfilled to use the metric.
	Conditions []Condition `json:"conditions,omitempty"`
	DimensionDefinition *DimensionDefinition `json:"dimensionDefinition,omitempty"`
	// The metric is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// Restricts the metric usage to the specified service.    This field is mutually exclusive with the **managementZones** field.
	EntityId *string `json:"entityId,omitempty"`
	// Metric should (`true`) or not (`false`) ignore muted requests.
	IgnoreMutedRequests *bool `json:"ignoreMutedRequests,omitempty"`
	// Restricts the metric usage to specified management zones.    This field is mutually exclusive with the **entityId** field.
	ManagementZones []string `json:"managementZones,omitempty"`
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	MetricDefinition CalculatedMetricDefinition `json:"metricDefinition"`
	// The displayed name of the metric.
	Name string `json:"name"`
	// The key of the calculated service metric.
	TsmMetricKey string `json:"tsmMetricKey"`
	// The unit of the metric.
	Unit string `json:"unit"`
	// The display name of the metric's unit.    Only applicable when the **unit** parameter is set to `UNSPECIFIED`.
	UnitDisplayName *string `json:"unitDisplayName,omitempty"`
}

// NewCalculatedServiceMetric instantiates a new CalculatedServiceMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculatedServiceMetric(enabled bool, metricDefinition CalculatedMetricDefinition, name string, tsmMetricKey string, unit string) *CalculatedServiceMetric {
	this := CalculatedServiceMetric{}
	this.Enabled = enabled
	this.MetricDefinition = metricDefinition
	this.Name = name
	this.TsmMetricKey = tsmMetricKey
	this.Unit = unit
	return &this
}

// NewCalculatedServiceMetricWithDefaults instantiates a new CalculatedServiceMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculatedServiceMetricWithDefaults() *CalculatedServiceMetric {
	this := CalculatedServiceMetric{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *CalculatedServiceMetric) GetConditions() []Condition {
	if o == nil || IsNil(o.Conditions) {
		var ret []Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetConditionsOk() ([]Condition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *CalculatedServiceMetric) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *CalculatedServiceMetric) SetConditions(v []Condition) {
	o.Conditions = v
}

// GetDimensionDefinition returns the DimensionDefinition field value if set, zero value otherwise.
func (o *CalculatedServiceMetric) GetDimensionDefinition() DimensionDefinition {
	if o == nil || IsNil(o.DimensionDefinition) {
		var ret DimensionDefinition
		return ret
	}
	return *o.DimensionDefinition
}

// GetDimensionDefinitionOk returns a tuple with the DimensionDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetDimensionDefinitionOk() (*DimensionDefinition, bool) {
	if o == nil || IsNil(o.DimensionDefinition) {
		return nil, false
	}
	return o.DimensionDefinition, true
}

// HasDimensionDefinition returns a boolean if a field has been set.
func (o *CalculatedServiceMetric) HasDimensionDefinition() bool {
	if o != nil && !IsNil(o.DimensionDefinition) {
		return true
	}

	return false
}

// SetDimensionDefinition gets a reference to the given DimensionDefinition and assigns it to the DimensionDefinition field.
func (o *CalculatedServiceMetric) SetDimensionDefinition(v DimensionDefinition) {
	o.DimensionDefinition = &v
}

// GetEnabled returns the Enabled field value
func (o *CalculatedServiceMetric) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CalculatedServiceMetric) SetEnabled(v bool) {
	o.Enabled = v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *CalculatedServiceMetric) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *CalculatedServiceMetric) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *CalculatedServiceMetric) SetEntityId(v string) {
	o.EntityId = &v
}

// GetIgnoreMutedRequests returns the IgnoreMutedRequests field value if set, zero value otherwise.
func (o *CalculatedServiceMetric) GetIgnoreMutedRequests() bool {
	if o == nil || IsNil(o.IgnoreMutedRequests) {
		var ret bool
		return ret
	}
	return *o.IgnoreMutedRequests
}

// GetIgnoreMutedRequestsOk returns a tuple with the IgnoreMutedRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetIgnoreMutedRequestsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreMutedRequests) {
		return nil, false
	}
	return o.IgnoreMutedRequests, true
}

// HasIgnoreMutedRequests returns a boolean if a field has been set.
func (o *CalculatedServiceMetric) HasIgnoreMutedRequests() bool {
	if o != nil && !IsNil(o.IgnoreMutedRequests) {
		return true
	}

	return false
}

// SetIgnoreMutedRequests gets a reference to the given bool and assigns it to the IgnoreMutedRequests field.
func (o *CalculatedServiceMetric) SetIgnoreMutedRequests(v bool) {
	o.IgnoreMutedRequests = &v
}

// GetManagementZones returns the ManagementZones field value if set, zero value otherwise.
func (o *CalculatedServiceMetric) GetManagementZones() []string {
	if o == nil || IsNil(o.ManagementZones) {
		var ret []string
		return ret
	}
	return o.ManagementZones
}

// GetManagementZonesOk returns a tuple with the ManagementZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetManagementZonesOk() ([]string, bool) {
	if o == nil || IsNil(o.ManagementZones) {
		return nil, false
	}
	return o.ManagementZones, true
}

// HasManagementZones returns a boolean if a field has been set.
func (o *CalculatedServiceMetric) HasManagementZones() bool {
	if o != nil && !IsNil(o.ManagementZones) {
		return true
	}

	return false
}

// SetManagementZones gets a reference to the given []string and assigns it to the ManagementZones field.
func (o *CalculatedServiceMetric) SetManagementZones(v []string) {
	o.ManagementZones = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CalculatedServiceMetric) GetMetadata() ConfigurationMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CalculatedServiceMetric) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *CalculatedServiceMetric) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

// GetMetricDefinition returns the MetricDefinition field value
func (o *CalculatedServiceMetric) GetMetricDefinition() CalculatedMetricDefinition {
	if o == nil {
		var ret CalculatedMetricDefinition
		return ret
	}

	return o.MetricDefinition
}

// GetMetricDefinitionOk returns a tuple with the MetricDefinition field value
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetMetricDefinitionOk() (*CalculatedMetricDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricDefinition, true
}

// SetMetricDefinition sets field value
func (o *CalculatedServiceMetric) SetMetricDefinition(v CalculatedMetricDefinition) {
	o.MetricDefinition = v
}

// GetName returns the Name field value
func (o *CalculatedServiceMetric) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CalculatedServiceMetric) SetName(v string) {
	o.Name = v
}

// GetTsmMetricKey returns the TsmMetricKey field value
func (o *CalculatedServiceMetric) GetTsmMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TsmMetricKey
}

// GetTsmMetricKeyOk returns a tuple with the TsmMetricKey field value
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetTsmMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TsmMetricKey, true
}

// SetTsmMetricKey sets field value
func (o *CalculatedServiceMetric) SetTsmMetricKey(v string) {
	o.TsmMetricKey = v
}

// GetUnit returns the Unit field value
func (o *CalculatedServiceMetric) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *CalculatedServiceMetric) SetUnit(v string) {
	o.Unit = v
}

// GetUnitDisplayName returns the UnitDisplayName field value if set, zero value otherwise.
func (o *CalculatedServiceMetric) GetUnitDisplayName() string {
	if o == nil || IsNil(o.UnitDisplayName) {
		var ret string
		return ret
	}
	return *o.UnitDisplayName
}

// GetUnitDisplayNameOk returns a tuple with the UnitDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedServiceMetric) GetUnitDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.UnitDisplayName) {
		return nil, false
	}
	return o.UnitDisplayName, true
}

// HasUnitDisplayName returns a boolean if a field has been set.
func (o *CalculatedServiceMetric) HasUnitDisplayName() bool {
	if o != nil && !IsNil(o.UnitDisplayName) {
		return true
	}

	return false
}

// SetUnitDisplayName gets a reference to the given string and assigns it to the UnitDisplayName field.
func (o *CalculatedServiceMetric) SetUnitDisplayName(v string) {
	o.UnitDisplayName = &v
}

func (o CalculatedServiceMetric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalculatedServiceMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.DimensionDefinition) {
		toSerialize["dimensionDefinition"] = o.DimensionDefinition
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.IgnoreMutedRequests) {
		toSerialize["ignoreMutedRequests"] = o.IgnoreMutedRequests
	}
	if !IsNil(o.ManagementZones) {
		toSerialize["managementZones"] = o.ManagementZones
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["metricDefinition"] = o.MetricDefinition
	toSerialize["name"] = o.Name
	toSerialize["tsmMetricKey"] = o.TsmMetricKey
	toSerialize["unit"] = o.Unit
	if !IsNil(o.UnitDisplayName) {
		toSerialize["unitDisplayName"] = o.UnitDisplayName
	}
	return toSerialize, nil
}

type NullableCalculatedServiceMetric struct {
	value *CalculatedServiceMetric
	isSet bool
}

func (v NullableCalculatedServiceMetric) Get() *CalculatedServiceMetric {
	return v.value
}

func (v *NullableCalculatedServiceMetric) Set(val *CalculatedServiceMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatedServiceMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatedServiceMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatedServiceMetric(val *CalculatedServiceMetric) *NullableCalculatedServiceMetric {
	return &NullableCalculatedServiceMetric{value: val, isSet: true}
}

func (v NullableCalculatedServiceMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatedServiceMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


