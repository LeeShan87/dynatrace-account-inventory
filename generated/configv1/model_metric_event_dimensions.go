/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the MetricEventDimensions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricEventDimensions{}

// MetricEventDimensions A single filter for the metrics dimensions.  The actual set of fields depends on type of the filter. Find the list of actual objects in the description of the **filterType** field or see [Metric events anomaly detection API - JSON models](https://dt-url.net/ql63sap).
type MetricEventDimensions struct {
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `ENTITY` -> MetricEventEntityDimensions  * `STRING` -> MetricEventStringDimensions  
	FilterType string `json:"filterType"`
	// The dimensions key on the metric.
	Key *string `json:"key,omitempty"`
}

// NewMetricEventDimensions instantiates a new MetricEventDimensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEventDimensions(filterType string) *MetricEventDimensions {
	this := MetricEventDimensions{}
	this.FilterType = filterType
	return &this
}

// NewMetricEventDimensionsWithDefaults instantiates a new MetricEventDimensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEventDimensionsWithDefaults() *MetricEventDimensions {
	this := MetricEventDimensions{}
	return &this
}

// GetFilterType returns the FilterType field value
func (o *MetricEventDimensions) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *MetricEventDimensions) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *MetricEventDimensions) SetFilterType(v string) {
	o.FilterType = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MetricEventDimensions) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEventDimensions) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MetricEventDimensions) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MetricEventDimensions) SetKey(v string) {
	o.Key = &v
}

func (o MetricEventDimensions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricEventDimensions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterType"] = o.FilterType
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	return toSerialize, nil
}

type NullableMetricEventDimensions struct {
	value *MetricEventDimensions
	isSet bool
}

func (v NullableMetricEventDimensions) Get() *MetricEventDimensions {
	return v.value
}

func (v *NullableMetricEventDimensions) Set(val *MetricEventDimensions) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEventDimensions) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEventDimensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEventDimensions(val *MetricEventDimensions) *NullableMetricEventDimensions {
	return &NullableMetricEventDimensions{value: val, isSet: true}
}

func (v NullableMetricEventDimensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEventDimensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


