/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ManagementZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementZone{}

// ManagementZone The configuration of the management zone. It defines how the management zone applies.
type ManagementZone struct {
	// The description of the management zone.
	Description *string `json:"description,omitempty"`
	// A list of dimensional data rules for management zone usage.   If several rules are specified, the **OR** logic applies.
	DimensionalRules []MzDimensionalRule `json:"dimensionalRules,omitempty"`
	// A list of entity-selector based rules for management zone usage.  If several rules are specified, the **OR** logic applies.
	EntitySelectorBasedRules []EntitySelectorBasedMzRule `json:"entitySelectorBasedRules,omitempty"`
	// The ID of the management zone.
	Id *string `json:"id,omitempty"`
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	// The name of the management zone.
	Name string `json:"name"`
	// A list of rules for management zone usage.   If several rules are specified, the **OR** logic applies.
	Rules []MzRule `json:"rules,omitempty"`
}

// NewManagementZone instantiates a new ManagementZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementZone(name string) *ManagementZone {
	this := ManagementZone{}
	this.Name = name
	return &this
}

// NewManagementZoneWithDefaults instantiates a new ManagementZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementZoneWithDefaults() *ManagementZone {
	this := ManagementZone{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ManagementZone) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZone) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ManagementZone) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ManagementZone) SetDescription(v string) {
	o.Description = &v
}

// GetDimensionalRules returns the DimensionalRules field value if set, zero value otherwise.
func (o *ManagementZone) GetDimensionalRules() []MzDimensionalRule {
	if o == nil || IsNil(o.DimensionalRules) {
		var ret []MzDimensionalRule
		return ret
	}
	return o.DimensionalRules
}

// GetDimensionalRulesOk returns a tuple with the DimensionalRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZone) GetDimensionalRulesOk() ([]MzDimensionalRule, bool) {
	if o == nil || IsNil(o.DimensionalRules) {
		return nil, false
	}
	return o.DimensionalRules, true
}

// HasDimensionalRules returns a boolean if a field has been set.
func (o *ManagementZone) HasDimensionalRules() bool {
	if o != nil && !IsNil(o.DimensionalRules) {
		return true
	}

	return false
}

// SetDimensionalRules gets a reference to the given []MzDimensionalRule and assigns it to the DimensionalRules field.
func (o *ManagementZone) SetDimensionalRules(v []MzDimensionalRule) {
	o.DimensionalRules = v
}

// GetEntitySelectorBasedRules returns the EntitySelectorBasedRules field value if set, zero value otherwise.
func (o *ManagementZone) GetEntitySelectorBasedRules() []EntitySelectorBasedMzRule {
	if o == nil || IsNil(o.EntitySelectorBasedRules) {
		var ret []EntitySelectorBasedMzRule
		return ret
	}
	return o.EntitySelectorBasedRules
}

// GetEntitySelectorBasedRulesOk returns a tuple with the EntitySelectorBasedRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZone) GetEntitySelectorBasedRulesOk() ([]EntitySelectorBasedMzRule, bool) {
	if o == nil || IsNil(o.EntitySelectorBasedRules) {
		return nil, false
	}
	return o.EntitySelectorBasedRules, true
}

// HasEntitySelectorBasedRules returns a boolean if a field has been set.
func (o *ManagementZone) HasEntitySelectorBasedRules() bool {
	if o != nil && !IsNil(o.EntitySelectorBasedRules) {
		return true
	}

	return false
}

// SetEntitySelectorBasedRules gets a reference to the given []EntitySelectorBasedMzRule and assigns it to the EntitySelectorBasedRules field.
func (o *ManagementZone) SetEntitySelectorBasedRules(v []EntitySelectorBasedMzRule) {
	o.EntitySelectorBasedRules = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManagementZone) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZone) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManagementZone) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ManagementZone) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ManagementZone) GetMetadata() ConfigurationMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZone) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ManagementZone) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *ManagementZone) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

// GetName returns the Name field value
func (o *ManagementZone) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ManagementZone) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ManagementZone) SetName(v string) {
	o.Name = v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *ManagementZone) GetRules() []MzRule {
	if o == nil || IsNil(o.Rules) {
		var ret []MzRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZone) GetRulesOk() ([]MzRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *ManagementZone) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []MzRule and assigns it to the Rules field.
func (o *ManagementZone) SetRules(v []MzRule) {
	o.Rules = v
}

func (o ManagementZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DimensionalRules) {
		toSerialize["dimensionalRules"] = o.DimensionalRules
	}
	if !IsNil(o.EntitySelectorBasedRules) {
		toSerialize["entitySelectorBasedRules"] = o.EntitySelectorBasedRules
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableManagementZone struct {
	value *ManagementZone
	isSet bool
}

func (v NullableManagementZone) Get() *ManagementZone {
	return v.value
}

func (v *NullableManagementZone) Set(val *ManagementZone) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementZone) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementZone(val *ManagementZone) *NullableManagementZone {
	return &NullableManagementZone{value: val, isSet: true}
}

func (v NullableManagementZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


