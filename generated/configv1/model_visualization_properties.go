/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the VisualizationProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationProperties{}

// VisualizationProperties struct for VisualizationProperties
type VisualizationProperties struct {
	Alias *string `json:"alias,omitempty"`
	Color *string `json:"color,omitempty"`
	SeriesType *string `json:"seriesType,omitempty"`
}

// NewVisualizationProperties instantiates a new VisualizationProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationProperties() *VisualizationProperties {
	this := VisualizationProperties{}
	return &this
}

// NewVisualizationPropertiesWithDefaults instantiates a new VisualizationProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationPropertiesWithDefaults() *VisualizationProperties {
	this := VisualizationProperties{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *VisualizationProperties) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationProperties) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *VisualizationProperties) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *VisualizationProperties) SetAlias(v string) {
	o.Alias = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *VisualizationProperties) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationProperties) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *VisualizationProperties) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *VisualizationProperties) SetColor(v string) {
	o.Color = &v
}

// GetSeriesType returns the SeriesType field value if set, zero value otherwise.
func (o *VisualizationProperties) GetSeriesType() string {
	if o == nil || IsNil(o.SeriesType) {
		var ret string
		return ret
	}
	return *o.SeriesType
}

// GetSeriesTypeOk returns a tuple with the SeriesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationProperties) GetSeriesTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesType) {
		return nil, false
	}
	return o.SeriesType, true
}

// HasSeriesType returns a boolean if a field has been set.
func (o *VisualizationProperties) HasSeriesType() bool {
	if o != nil && !IsNil(o.SeriesType) {
		return true
	}

	return false
}

// SetSeriesType gets a reference to the given string and assigns it to the SeriesType field.
func (o *VisualizationProperties) SetSeriesType(v string) {
	o.SeriesType = &v
}

func (o VisualizationProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.SeriesType) {
		toSerialize["seriesType"] = o.SeriesType
	}
	return toSerialize, nil
}

type NullableVisualizationProperties struct {
	value *VisualizationProperties
	isSet bool
}

func (v NullableVisualizationProperties) Get() *VisualizationProperties {
	return v.value
}

func (v *NullableVisualizationProperties) Set(val *VisualizationProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationProperties(val *VisualizationProperties) *NullableVisualizationProperties {
	return &NullableVisualizationProperties{value: val, isSet: true}
}

func (v NullableVisualizationProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


