/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the AssignedEntitiesTile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignedEntitiesTile{}

// AssignedEntitiesTile Configuration of a tile with an assigned Dynatrace entity.   An example is the Bounce rate tile, showing the data from an assigned application.
type AssignedEntitiesTile struct {
	// The list of Dynatrace entities, assigned to the tile.
	AssignedEntities []string `json:"assignedEntities"`
}

// NewAssignedEntitiesTile instantiates a new AssignedEntitiesTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignedEntitiesTile(assignedEntities []string, bounds TileBounds, name string, tileType string) *AssignedEntitiesTile {
	this := AssignedEntitiesTile{}
	this.Bounds = bounds
	this.Name = name
	this.TileType = tileType
	this.AssignedEntities = assignedEntities
	return &this
}

// NewAssignedEntitiesTileWithDefaults instantiates a new AssignedEntitiesTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignedEntitiesTileWithDefaults() *AssignedEntitiesTile {
	this := AssignedEntitiesTile{}
	return &this
}

// GetAssignedEntities returns the AssignedEntities field value
func (o *AssignedEntitiesTile) GetAssignedEntities() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AssignedEntities
}

// GetAssignedEntitiesOk returns a tuple with the AssignedEntities field value
// and a boolean to check if the value has been set.
func (o *AssignedEntitiesTile) GetAssignedEntitiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedEntities, true
}

// SetAssignedEntities sets field value
func (o *AssignedEntitiesTile) SetAssignedEntities(v []string) {
	o.AssignedEntities = v
}

func (o AssignedEntitiesTile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssignedEntitiesTile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assignedEntities"] = o.AssignedEntities
	return toSerialize, nil
}

type NullableAssignedEntitiesTile struct {
	value *AssignedEntitiesTile
	isSet bool
}

func (v NullableAssignedEntitiesTile) Get() *AssignedEntitiesTile {
	return v.value
}

func (v *NullableAssignedEntitiesTile) Set(val *AssignedEntitiesTile) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignedEntitiesTile) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignedEntitiesTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignedEntitiesTile(val *AssignedEntitiesTile) *NullableAssignedEntitiesTile {
	return &NullableAssignedEntitiesTile{value: val, isSet: true}
}

func (v NullableAssignedEntitiesTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignedEntitiesTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


