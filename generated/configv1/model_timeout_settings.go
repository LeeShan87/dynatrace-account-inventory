/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the TimeoutSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeoutSettings{}

// TimeoutSettings Settings for timed action capture.
type TimeoutSettings struct {
	// Defines how deep temporary actions may cascade. 0 disables temporary actions completely. Recommended value if enabled is 3.
	TemporaryActionLimit int32 `json:"temporaryActionLimit"`
	// The total timeout of all cascaded timeouts that should still be able to create a temporary action
	TemporaryActionTotalTimeout int32 `json:"temporaryActionTotalTimeout"`
	// Timed action support enabled/disabled.   Enable to detect actions that trigger sending of XHRs via *setTimout* methods.
	TimedActionSupport bool `json:"timedActionSupport"`
}

// NewTimeoutSettings instantiates a new TimeoutSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeoutSettings(temporaryActionLimit int32, temporaryActionTotalTimeout int32, timedActionSupport bool) *TimeoutSettings {
	this := TimeoutSettings{}
	this.TemporaryActionLimit = temporaryActionLimit
	this.TemporaryActionTotalTimeout = temporaryActionTotalTimeout
	this.TimedActionSupport = timedActionSupport
	return &this
}

// NewTimeoutSettingsWithDefaults instantiates a new TimeoutSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeoutSettingsWithDefaults() *TimeoutSettings {
	this := TimeoutSettings{}
	return &this
}

// GetTemporaryActionLimit returns the TemporaryActionLimit field value
func (o *TimeoutSettings) GetTemporaryActionLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TemporaryActionLimit
}

// GetTemporaryActionLimitOk returns a tuple with the TemporaryActionLimit field value
// and a boolean to check if the value has been set.
func (o *TimeoutSettings) GetTemporaryActionLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemporaryActionLimit, true
}

// SetTemporaryActionLimit sets field value
func (o *TimeoutSettings) SetTemporaryActionLimit(v int32) {
	o.TemporaryActionLimit = v
}

// GetTemporaryActionTotalTimeout returns the TemporaryActionTotalTimeout field value
func (o *TimeoutSettings) GetTemporaryActionTotalTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TemporaryActionTotalTimeout
}

// GetTemporaryActionTotalTimeoutOk returns a tuple with the TemporaryActionTotalTimeout field value
// and a boolean to check if the value has been set.
func (o *TimeoutSettings) GetTemporaryActionTotalTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemporaryActionTotalTimeout, true
}

// SetTemporaryActionTotalTimeout sets field value
func (o *TimeoutSettings) SetTemporaryActionTotalTimeout(v int32) {
	o.TemporaryActionTotalTimeout = v
}

// GetTimedActionSupport returns the TimedActionSupport field value
func (o *TimeoutSettings) GetTimedActionSupport() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TimedActionSupport
}

// GetTimedActionSupportOk returns a tuple with the TimedActionSupport field value
// and a boolean to check if the value has been set.
func (o *TimeoutSettings) GetTimedActionSupportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimedActionSupport, true
}

// SetTimedActionSupport sets field value
func (o *TimeoutSettings) SetTimedActionSupport(v bool) {
	o.TimedActionSupport = v
}

func (o TimeoutSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeoutSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["temporaryActionLimit"] = o.TemporaryActionLimit
	toSerialize["temporaryActionTotalTimeout"] = o.TemporaryActionTotalTimeout
	toSerialize["timedActionSupport"] = o.TimedActionSupport
	return toSerialize, nil
}

type NullableTimeoutSettings struct {
	value *TimeoutSettings
	isSet bool
}

func (v NullableTimeoutSettings) Get() *TimeoutSettings {
	return v.value
}

func (v *NullableTimeoutSettings) Set(val *TimeoutSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeoutSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeoutSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeoutSettings(val *TimeoutSettings) *NullableTimeoutSettings {
	return &NullableTimeoutSettings{value: val, isSet: true}
}

func (v NullableTimeoutSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeoutSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


