/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the HoneycombSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HoneycombSettings{}

// HoneycombSettings Settings for honeycomb visualization
type HoneycombSettings struct {
	ShowHive *bool `json:"showHive,omitempty"`
	ShowLabels *bool `json:"showLabels,omitempty"`
	ShowLegend *bool `json:"showLegend,omitempty"`
}

// NewHoneycombSettings instantiates a new HoneycombSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHoneycombSettings() *HoneycombSettings {
	this := HoneycombSettings{}
	return &this
}

// NewHoneycombSettingsWithDefaults instantiates a new HoneycombSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoneycombSettingsWithDefaults() *HoneycombSettings {
	this := HoneycombSettings{}
	return &this
}

// GetShowHive returns the ShowHive field value if set, zero value otherwise.
func (o *HoneycombSettings) GetShowHive() bool {
	if o == nil || IsNil(o.ShowHive) {
		var ret bool
		return ret
	}
	return *o.ShowHive
}

// GetShowHiveOk returns a tuple with the ShowHive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoneycombSettings) GetShowHiveOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowHive) {
		return nil, false
	}
	return o.ShowHive, true
}

// HasShowHive returns a boolean if a field has been set.
func (o *HoneycombSettings) HasShowHive() bool {
	if o != nil && !IsNil(o.ShowHive) {
		return true
	}

	return false
}

// SetShowHive gets a reference to the given bool and assigns it to the ShowHive field.
func (o *HoneycombSettings) SetShowHive(v bool) {
	o.ShowHive = &v
}

// GetShowLabels returns the ShowLabels field value if set, zero value otherwise.
func (o *HoneycombSettings) GetShowLabels() bool {
	if o == nil || IsNil(o.ShowLabels) {
		var ret bool
		return ret
	}
	return *o.ShowLabels
}

// GetShowLabelsOk returns a tuple with the ShowLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoneycombSettings) GetShowLabelsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLabels) {
		return nil, false
	}
	return o.ShowLabels, true
}

// HasShowLabels returns a boolean if a field has been set.
func (o *HoneycombSettings) HasShowLabels() bool {
	if o != nil && !IsNil(o.ShowLabels) {
		return true
	}

	return false
}

// SetShowLabels gets a reference to the given bool and assigns it to the ShowLabels field.
func (o *HoneycombSettings) SetShowLabels(v bool) {
	o.ShowLabels = &v
}

// GetShowLegend returns the ShowLegend field value if set, zero value otherwise.
func (o *HoneycombSettings) GetShowLegend() bool {
	if o == nil || IsNil(o.ShowLegend) {
		var ret bool
		return ret
	}
	return *o.ShowLegend
}

// GetShowLegendOk returns a tuple with the ShowLegend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoneycombSettings) GetShowLegendOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLegend) {
		return nil, false
	}
	return o.ShowLegend, true
}

// HasShowLegend returns a boolean if a field has been set.
func (o *HoneycombSettings) HasShowLegend() bool {
	if o != nil && !IsNil(o.ShowLegend) {
		return true
	}

	return false
}

// SetShowLegend gets a reference to the given bool and assigns it to the ShowLegend field.
func (o *HoneycombSettings) SetShowLegend(v bool) {
	o.ShowLegend = &v
}

func (o HoneycombSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HoneycombSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShowHive) {
		toSerialize["showHive"] = o.ShowHive
	}
	if !IsNil(o.ShowLabels) {
		toSerialize["showLabels"] = o.ShowLabels
	}
	if !IsNil(o.ShowLegend) {
		toSerialize["showLegend"] = o.ShowLegend
	}
	return toSerialize, nil
}

type NullableHoneycombSettings struct {
	value *HoneycombSettings
	isSet bool
}

func (v NullableHoneycombSettings) Get() *HoneycombSettings {
	return v.value
}

func (v *NullableHoneycombSettings) Set(val *HoneycombSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableHoneycombSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableHoneycombSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoneycombSettings(val *HoneycombSettings) *NullableHoneycombSettings {
	return &NullableHoneycombSettings{value: val, isSet: true}
}

func (v NullableHoneycombSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoneycombSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


