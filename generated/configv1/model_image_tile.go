/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ImageTile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageTile{}

// ImageTile Configuration of the Image tile.
type ImageTile struct {
	// The image-formatted content of the tile.
	Image string `json:"image"`
}

// NewImageTile instantiates a new ImageTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageTile(image string, bounds TileBounds, name string, tileType string) *ImageTile {
	this := ImageTile{}
	this.Bounds = bounds
	this.Name = name
	this.TileType = tileType
	this.Image = image
	return &this
}

// NewImageTileWithDefaults instantiates a new ImageTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageTileWithDefaults() *ImageTile {
	this := ImageTile{}
	return &this
}

// GetImage returns the Image field value
func (o *ImageTile) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ImageTile) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *ImageTile) SetImage(v string) {
	o.Image = v
}

func (o ImageTile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageTile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image
	return toSerialize, nil
}

type NullableImageTile struct {
	value *ImageTile
	isSet bool
}

func (v NullableImageTile) Get() *ImageTile {
	return v.value
}

func (v *NullableImageTile) Set(val *ImageTile) {
	v.value = val
	v.isSet = true
}

func (v NullableImageTile) IsSet() bool {
	return v.isSet
}

func (v *NullableImageTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageTile(val *ImageTile) *NullableImageTile {
	return &NullableImageTile{value: val, isSet: true}
}

func (v NullableImageTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


