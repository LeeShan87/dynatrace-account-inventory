/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the MetricEventAutoAdaptiveBaselineMonitoringStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricEventAutoAdaptiveBaselineMonitoringStrategy{}

// MetricEventAutoAdaptiveBaselineMonitoringStrategy An auto-adaptive baseline strategy to detect anomalies within metrics that show a regular change over time, as the baseline is also updated automatically. An example is to detect an anomaly in the number of received network packets or within the number of user actions over time.
type MetricEventAutoAdaptiveBaselineMonitoringStrategy struct {
	// The condition for the **threshold** value check: above or below.
	AlertCondition string `json:"alertCondition"`
	// If true, also one-minute samples without data are counted as violating samples.
	AlertingOnMissingData *bool `json:"alertingOnMissingData,omitempty"`
	// The number of one-minute samples within the evaluation window that must go back to normal to close the event.
	DealertingSamples int32 `json:"dealertingSamples"`
	// Defines the factor of how many signal fluctuations are valid. Values above the baseline plus the signal fluctuation times the number of tolerated signal fluctuations are alerted.
	NumberOfSignalFluctuations float64 `json:"numberOfSignalFluctuations"`
	// The number of one-minute samples that form the sliding evaluation window.
	Samples int32 `json:"samples"`
	// The number of one-minute samples within the evaluation window that must violate the threshold to trigger an event.
	ViolatingSamples int32 `json:"violatingSamples"`
}

// NewMetricEventAutoAdaptiveBaselineMonitoringStrategy instantiates a new MetricEventAutoAdaptiveBaselineMonitoringStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEventAutoAdaptiveBaselineMonitoringStrategy(alertCondition string, dealertingSamples int32, numberOfSignalFluctuations float64, samples int32, violatingSamples int32, type_ string) *MetricEventAutoAdaptiveBaselineMonitoringStrategy {
	this := MetricEventAutoAdaptiveBaselineMonitoringStrategy{}
	this.Type = type_
	this.AlertCondition = alertCondition
	this.DealertingSamples = dealertingSamples
	this.NumberOfSignalFluctuations = numberOfSignalFluctuations
	this.Samples = samples
	this.ViolatingSamples = violatingSamples
	return &this
}

// NewMetricEventAutoAdaptiveBaselineMonitoringStrategyWithDefaults instantiates a new MetricEventAutoAdaptiveBaselineMonitoringStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEventAutoAdaptiveBaselineMonitoringStrategyWithDefaults() *MetricEventAutoAdaptiveBaselineMonitoringStrategy {
	this := MetricEventAutoAdaptiveBaselineMonitoringStrategy{}
	return &this
}

// GetAlertCondition returns the AlertCondition field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetAlertCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlertCondition
}

// GetAlertConditionOk returns a tuple with the AlertCondition field value
// and a boolean to check if the value has been set.
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetAlertConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertCondition, true
}

// SetAlertCondition sets field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) SetAlertCondition(v string) {
	o.AlertCondition = v
}

// GetAlertingOnMissingData returns the AlertingOnMissingData field value if set, zero value otherwise.
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetAlertingOnMissingData() bool {
	if o == nil || IsNil(o.AlertingOnMissingData) {
		var ret bool
		return ret
	}
	return *o.AlertingOnMissingData
}

// GetAlertingOnMissingDataOk returns a tuple with the AlertingOnMissingData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetAlertingOnMissingDataOk() (*bool, bool) {
	if o == nil || IsNil(o.AlertingOnMissingData) {
		return nil, false
	}
	return o.AlertingOnMissingData, true
}

// HasAlertingOnMissingData returns a boolean if a field has been set.
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) HasAlertingOnMissingData() bool {
	if o != nil && !IsNil(o.AlertingOnMissingData) {
		return true
	}

	return false
}

// SetAlertingOnMissingData gets a reference to the given bool and assigns it to the AlertingOnMissingData field.
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) SetAlertingOnMissingData(v bool) {
	o.AlertingOnMissingData = &v
}

// GetDealertingSamples returns the DealertingSamples field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetDealertingSamples() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DealertingSamples
}

// GetDealertingSamplesOk returns a tuple with the DealertingSamples field value
// and a boolean to check if the value has been set.
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetDealertingSamplesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DealertingSamples, true
}

// SetDealertingSamples sets field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) SetDealertingSamples(v int32) {
	o.DealertingSamples = v
}

// GetNumberOfSignalFluctuations returns the NumberOfSignalFluctuations field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetNumberOfSignalFluctuations() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NumberOfSignalFluctuations
}

// GetNumberOfSignalFluctuationsOk returns a tuple with the NumberOfSignalFluctuations field value
// and a boolean to check if the value has been set.
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetNumberOfSignalFluctuationsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfSignalFluctuations, true
}

// SetNumberOfSignalFluctuations sets field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) SetNumberOfSignalFluctuations(v float64) {
	o.NumberOfSignalFluctuations = v
}

// GetSamples returns the Samples field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetSamples() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value
// and a boolean to check if the value has been set.
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetSamplesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Samples, true
}

// SetSamples sets field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) SetSamples(v int32) {
	o.Samples = v
}

// GetViolatingSamples returns the ViolatingSamples field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetViolatingSamples() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ViolatingSamples
}

// GetViolatingSamplesOk returns a tuple with the ViolatingSamples field value
// and a boolean to check if the value has been set.
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) GetViolatingSamplesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViolatingSamples, true
}

// SetViolatingSamples sets field value
func (o *MetricEventAutoAdaptiveBaselineMonitoringStrategy) SetViolatingSamples(v int32) {
	o.ViolatingSamples = v
}

func (o MetricEventAutoAdaptiveBaselineMonitoringStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricEventAutoAdaptiveBaselineMonitoringStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alertCondition"] = o.AlertCondition
	if !IsNil(o.AlertingOnMissingData) {
		toSerialize["alertingOnMissingData"] = o.AlertingOnMissingData
	}
	toSerialize["dealertingSamples"] = o.DealertingSamples
	toSerialize["numberOfSignalFluctuations"] = o.NumberOfSignalFluctuations
	toSerialize["samples"] = o.Samples
	toSerialize["violatingSamples"] = o.ViolatingSamples
	return toSerialize, nil
}

type NullableMetricEventAutoAdaptiveBaselineMonitoringStrategy struct {
	value *MetricEventAutoAdaptiveBaselineMonitoringStrategy
	isSet bool
}

func (v NullableMetricEventAutoAdaptiveBaselineMonitoringStrategy) Get() *MetricEventAutoAdaptiveBaselineMonitoringStrategy {
	return v.value
}

func (v *NullableMetricEventAutoAdaptiveBaselineMonitoringStrategy) Set(val *MetricEventAutoAdaptiveBaselineMonitoringStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEventAutoAdaptiveBaselineMonitoringStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEventAutoAdaptiveBaselineMonitoringStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEventAutoAdaptiveBaselineMonitoringStrategy(val *MetricEventAutoAdaptiveBaselineMonitoringStrategy) *NullableMetricEventAutoAdaptiveBaselineMonitoringStrategy {
	return &NullableMetricEventAutoAdaptiveBaselineMonitoringStrategy{value: val, isSet: true}
}

func (v NullableMetricEventAutoAdaptiveBaselineMonitoringStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEventAutoAdaptiveBaselineMonitoringStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


