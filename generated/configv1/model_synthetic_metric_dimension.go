/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SyntheticMetricDimension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntheticMetricDimension{}

// SyntheticMetricDimension Dimension of the calculated synthetic metric.
type SyntheticMetricDimension struct {
	// The dimension of the metric.
	Dimension string `json:"dimension"`
	// The number of top values to be calculated.
	TopX *int32 `json:"topX,omitempty"`
}

// NewSyntheticMetricDimension instantiates a new SyntheticMetricDimension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticMetricDimension(dimension string) *SyntheticMetricDimension {
	this := SyntheticMetricDimension{}
	this.Dimension = dimension
	return &this
}

// NewSyntheticMetricDimensionWithDefaults instantiates a new SyntheticMetricDimension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticMetricDimensionWithDefaults() *SyntheticMetricDimension {
	this := SyntheticMetricDimension{}
	return &this
}

// GetDimension returns the Dimension field value
func (o *SyntheticMetricDimension) GetDimension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *SyntheticMetricDimension) GetDimensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *SyntheticMetricDimension) SetDimension(v string) {
	o.Dimension = v
}

// GetTopX returns the TopX field value if set, zero value otherwise.
func (o *SyntheticMetricDimension) GetTopX() int32 {
	if o == nil || IsNil(o.TopX) {
		var ret int32
		return ret
	}
	return *o.TopX
}

// GetTopXOk returns a tuple with the TopX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticMetricDimension) GetTopXOk() (*int32, bool) {
	if o == nil || IsNil(o.TopX) {
		return nil, false
	}
	return o.TopX, true
}

// HasTopX returns a boolean if a field has been set.
func (o *SyntheticMetricDimension) HasTopX() bool {
	if o != nil && !IsNil(o.TopX) {
		return true
	}

	return false
}

// SetTopX gets a reference to the given int32 and assigns it to the TopX field.
func (o *SyntheticMetricDimension) SetTopX(v int32) {
	o.TopX = &v
}

func (o SyntheticMetricDimension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntheticMetricDimension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dimension"] = o.Dimension
	if !IsNil(o.TopX) {
		toSerialize["topX"] = o.TopX
	}
	return toSerialize, nil
}

type NullableSyntheticMetricDimension struct {
	value *SyntheticMetricDimension
	isSet bool
}

func (v NullableSyntheticMetricDimension) Get() *SyntheticMetricDimension {
	return v.value
}

func (v *NullableSyntheticMetricDimension) Set(val *SyntheticMetricDimension) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticMetricDimension) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticMetricDimension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticMetricDimension(val *SyntheticMetricDimension) *NullableSyntheticMetricDimension {
	return &NullableSyntheticMetricDimension{value: val, isSet: true}
}

func (v NullableSyntheticMetricDimension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticMetricDimension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


