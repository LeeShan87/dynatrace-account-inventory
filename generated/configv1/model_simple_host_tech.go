/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SimpleHostTech type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimpleHostTech{}

// SimpleHostTech The value to compare to.
type SimpleHostTech struct {
	// Predefined technology, if technology is not predefined, then the verbatim type must be set
	Type *string `json:"type,omitempty"`
	// Non-predefined technology, use for custom technologies.
	VerbatimType *string `json:"verbatimType,omitempty"`
}

// NewSimpleHostTech instantiates a new SimpleHostTech object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleHostTech() *SimpleHostTech {
	this := SimpleHostTech{}
	return &this
}

// NewSimpleHostTechWithDefaults instantiates a new SimpleHostTech object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleHostTechWithDefaults() *SimpleHostTech {
	this := SimpleHostTech{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SimpleHostTech) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleHostTech) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SimpleHostTech) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SimpleHostTech) SetType(v string) {
	o.Type = &v
}

// GetVerbatimType returns the VerbatimType field value if set, zero value otherwise.
func (o *SimpleHostTech) GetVerbatimType() string {
	if o == nil || IsNil(o.VerbatimType) {
		var ret string
		return ret
	}
	return *o.VerbatimType
}

// GetVerbatimTypeOk returns a tuple with the VerbatimType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleHostTech) GetVerbatimTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VerbatimType) {
		return nil, false
	}
	return o.VerbatimType, true
}

// HasVerbatimType returns a boolean if a field has been set.
func (o *SimpleHostTech) HasVerbatimType() bool {
	if o != nil && !IsNil(o.VerbatimType) {
		return true
	}

	return false
}

// SetVerbatimType gets a reference to the given string and assigns it to the VerbatimType field.
func (o *SimpleHostTech) SetVerbatimType(v string) {
	o.VerbatimType = &v
}

func (o SimpleHostTech) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimpleHostTech) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VerbatimType) {
		toSerialize["verbatimType"] = o.VerbatimType
	}
	return toSerialize, nil
}

type NullableSimpleHostTech struct {
	value *SimpleHostTech
	isSet bool
}

func (v NullableSimpleHostTech) Get() *SimpleHostTech {
	return v.value
}

func (v *NullableSimpleHostTech) Set(val *SimpleHostTech) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleHostTech) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleHostTech) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleHostTech(val *SimpleHostTech) *NullableSimpleHostTech {
	return &NullableSimpleHostTech{value: val, isSet: true}
}

func (v NullableSimpleHostTech) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleHostTech) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


