/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the CloudSupportedService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudSupportedService{}

// CloudSupportedService A supported service metadata
type CloudSupportedService struct {
	// Name of service used by cloud provider.
	CloudProviderServiceType string `json:"cloudProviderServiceType"`
	// Display name for service on Dynatrace UI
	DisplayName string `json:"displayName"`
	// Entity type monitored by this service
	EntityType string `json:"entityType"`
	// Service unique name used by Dynatrace. 
	Name string `json:"name"`
}

// NewCloudSupportedService instantiates a new CloudSupportedService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudSupportedService(cloudProviderServiceType string, displayName string, entityType string, name string) *CloudSupportedService {
	this := CloudSupportedService{}
	this.CloudProviderServiceType = cloudProviderServiceType
	this.DisplayName = displayName
	this.EntityType = entityType
	this.Name = name
	return &this
}

// NewCloudSupportedServiceWithDefaults instantiates a new CloudSupportedService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudSupportedServiceWithDefaults() *CloudSupportedService {
	this := CloudSupportedService{}
	return &this
}

// GetCloudProviderServiceType returns the CloudProviderServiceType field value
func (o *CloudSupportedService) GetCloudProviderServiceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProviderServiceType
}

// GetCloudProviderServiceTypeOk returns a tuple with the CloudProviderServiceType field value
// and a boolean to check if the value has been set.
func (o *CloudSupportedService) GetCloudProviderServiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProviderServiceType, true
}

// SetCloudProviderServiceType sets field value
func (o *CloudSupportedService) SetCloudProviderServiceType(v string) {
	o.CloudProviderServiceType = v
}

// GetDisplayName returns the DisplayName field value
func (o *CloudSupportedService) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CloudSupportedService) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CloudSupportedService) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEntityType returns the EntityType field value
func (o *CloudSupportedService) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *CloudSupportedService) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *CloudSupportedService) SetEntityType(v string) {
	o.EntityType = v
}

// GetName returns the Name field value
func (o *CloudSupportedService) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CloudSupportedService) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CloudSupportedService) SetName(v string) {
	o.Name = v
}

func (o CloudSupportedService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudSupportedService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudProviderServiceType"] = o.CloudProviderServiceType
	toSerialize["displayName"] = o.DisplayName
	toSerialize["entityType"] = o.EntityType
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableCloudSupportedService struct {
	value *CloudSupportedService
	isSet bool
}

func (v NullableCloudSupportedService) Get() *CloudSupportedService {
	return v.value
}

func (v *NullableCloudSupportedService) Set(val *CloudSupportedService) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudSupportedService) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudSupportedService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudSupportedService(val *CloudSupportedService) *NullableCloudSupportedService {
	return &NullableCloudSupportedService{value: val, isSet: true}
}

func (v NullableCloudSupportedService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudSupportedService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


