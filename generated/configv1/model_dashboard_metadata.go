/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the DashboardMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardMetadata{}

// DashboardMetadata Parameters of a dashboard.
type DashboardMetadata struct {
	DashboardFilter *DashboardFilter `json:"dashboardFilter,omitempty"`
	DynamicFilters *DynamicFilters `json:"dynamicFilters,omitempty"`
	// The tile uses consistent colors when rendering its content.
	HasConsistentColors *bool `json:"hasConsistentColors,omitempty"`
	// The name of the dashboard.
	Name string `json:"name"`
	// The owner of the dashboard.
	Owner string `json:"owner"`
	// The dashboard is a preset (`true`) or a custom (`false`) dashboard.
	Preset *bool `json:"preset,omitempty"`
	// The dashboard is shared (`true`) or private (`false`).
	Shared *bool `json:"shared,omitempty"`
	// A set of tags assigned to the dashboard.
	Tags []string `json:"tags,omitempty"`
	// The general size of the tiles tile. Default value is medium
	TilesNameSize *string `json:"tilesNameSize,omitempty"`
}

// NewDashboardMetadata instantiates a new DashboardMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardMetadata(name string, owner string) *DashboardMetadata {
	this := DashboardMetadata{}
	this.Name = name
	this.Owner = owner
	return &this
}

// NewDashboardMetadataWithDefaults instantiates a new DashboardMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardMetadataWithDefaults() *DashboardMetadata {
	this := DashboardMetadata{}
	return &this
}

// GetDashboardFilter returns the DashboardFilter field value if set, zero value otherwise.
func (o *DashboardMetadata) GetDashboardFilter() DashboardFilter {
	if o == nil || IsNil(o.DashboardFilter) {
		var ret DashboardFilter
		return ret
	}
	return *o.DashboardFilter
}

// GetDashboardFilterOk returns a tuple with the DashboardFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMetadata) GetDashboardFilterOk() (*DashboardFilter, bool) {
	if o == nil || IsNil(o.DashboardFilter) {
		return nil, false
	}
	return o.DashboardFilter, true
}

// HasDashboardFilter returns a boolean if a field has been set.
func (o *DashboardMetadata) HasDashboardFilter() bool {
	if o != nil && !IsNil(o.DashboardFilter) {
		return true
	}

	return false
}

// SetDashboardFilter gets a reference to the given DashboardFilter and assigns it to the DashboardFilter field.
func (o *DashboardMetadata) SetDashboardFilter(v DashboardFilter) {
	o.DashboardFilter = &v
}

// GetDynamicFilters returns the DynamicFilters field value if set, zero value otherwise.
func (o *DashboardMetadata) GetDynamicFilters() DynamicFilters {
	if o == nil || IsNil(o.DynamicFilters) {
		var ret DynamicFilters
		return ret
	}
	return *o.DynamicFilters
}

// GetDynamicFiltersOk returns a tuple with the DynamicFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMetadata) GetDynamicFiltersOk() (*DynamicFilters, bool) {
	if o == nil || IsNil(o.DynamicFilters) {
		return nil, false
	}
	return o.DynamicFilters, true
}

// HasDynamicFilters returns a boolean if a field has been set.
func (o *DashboardMetadata) HasDynamicFilters() bool {
	if o != nil && !IsNil(o.DynamicFilters) {
		return true
	}

	return false
}

// SetDynamicFilters gets a reference to the given DynamicFilters and assigns it to the DynamicFilters field.
func (o *DashboardMetadata) SetDynamicFilters(v DynamicFilters) {
	o.DynamicFilters = &v
}

// GetHasConsistentColors returns the HasConsistentColors field value if set, zero value otherwise.
func (o *DashboardMetadata) GetHasConsistentColors() bool {
	if o == nil || IsNil(o.HasConsistentColors) {
		var ret bool
		return ret
	}
	return *o.HasConsistentColors
}

// GetHasConsistentColorsOk returns a tuple with the HasConsistentColors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMetadata) GetHasConsistentColorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasConsistentColors) {
		return nil, false
	}
	return o.HasConsistentColors, true
}

// HasHasConsistentColors returns a boolean if a field has been set.
func (o *DashboardMetadata) HasHasConsistentColors() bool {
	if o != nil && !IsNil(o.HasConsistentColors) {
		return true
	}

	return false
}

// SetHasConsistentColors gets a reference to the given bool and assigns it to the HasConsistentColors field.
func (o *DashboardMetadata) SetHasConsistentColors(v bool) {
	o.HasConsistentColors = &v
}

// GetName returns the Name field value
func (o *DashboardMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DashboardMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DashboardMetadata) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value
func (o *DashboardMetadata) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *DashboardMetadata) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *DashboardMetadata) SetOwner(v string) {
	o.Owner = v
}

// GetPreset returns the Preset field value if set, zero value otherwise.
func (o *DashboardMetadata) GetPreset() bool {
	if o == nil || IsNil(o.Preset) {
		var ret bool
		return ret
	}
	return *o.Preset
}

// GetPresetOk returns a tuple with the Preset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMetadata) GetPresetOk() (*bool, bool) {
	if o == nil || IsNil(o.Preset) {
		return nil, false
	}
	return o.Preset, true
}

// HasPreset returns a boolean if a field has been set.
func (o *DashboardMetadata) HasPreset() bool {
	if o != nil && !IsNil(o.Preset) {
		return true
	}

	return false
}

// SetPreset gets a reference to the given bool and assigns it to the Preset field.
func (o *DashboardMetadata) SetPreset(v bool) {
	o.Preset = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *DashboardMetadata) GetShared() bool {
	if o == nil || IsNil(o.Shared) {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMetadata) GetSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *DashboardMetadata) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *DashboardMetadata) SetShared(v bool) {
	o.Shared = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DashboardMetadata) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMetadata) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DashboardMetadata) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DashboardMetadata) SetTags(v []string) {
	o.Tags = v
}

// GetTilesNameSize returns the TilesNameSize field value if set, zero value otherwise.
func (o *DashboardMetadata) GetTilesNameSize() string {
	if o == nil || IsNil(o.TilesNameSize) {
		var ret string
		return ret
	}
	return *o.TilesNameSize
}

// GetTilesNameSizeOk returns a tuple with the TilesNameSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMetadata) GetTilesNameSizeOk() (*string, bool) {
	if o == nil || IsNil(o.TilesNameSize) {
		return nil, false
	}
	return o.TilesNameSize, true
}

// HasTilesNameSize returns a boolean if a field has been set.
func (o *DashboardMetadata) HasTilesNameSize() bool {
	if o != nil && !IsNil(o.TilesNameSize) {
		return true
	}

	return false
}

// SetTilesNameSize gets a reference to the given string and assigns it to the TilesNameSize field.
func (o *DashboardMetadata) SetTilesNameSize(v string) {
	o.TilesNameSize = &v
}

func (o DashboardMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DashboardFilter) {
		toSerialize["dashboardFilter"] = o.DashboardFilter
	}
	if !IsNil(o.DynamicFilters) {
		toSerialize["dynamicFilters"] = o.DynamicFilters
	}
	if !IsNil(o.HasConsistentColors) {
		toSerialize["hasConsistentColors"] = o.HasConsistentColors
	}
	toSerialize["name"] = o.Name
	toSerialize["owner"] = o.Owner
	if !IsNil(o.Preset) {
		toSerialize["preset"] = o.Preset
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.TilesNameSize) {
		toSerialize["tilesNameSize"] = o.TilesNameSize
	}
	return toSerialize, nil
}

type NullableDashboardMetadata struct {
	value *DashboardMetadata
	isSet bool
}

func (v NullableDashboardMetadata) Get() *DashboardMetadata {
	return v.value
}

func (v *NullableDashboardMetadata) Set(val *DashboardMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardMetadata(val *DashboardMetadata) *NullableDashboardMetadata {
	return &NullableDashboardMetadata{value: val, isSet: true}
}

func (v NullableDashboardMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


