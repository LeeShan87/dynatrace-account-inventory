/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the MobileSessionUserActionProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MobileSessionUserActionProperty{}

// MobileSessionUserActionProperty Configuration of the mobile session or user action property.
type MobileSessionUserActionProperty struct {
	// The aggregation type of the property.     It defines how multiple values of the property are aggregated.
	Aggregation *string `json:"aggregation,omitempty"`
	// The cleanup rule of the property.   Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there.
	CleanupRule *string `json:"cleanupRule,omitempty"`
	// The display name of the property.
	DisplayName *string `json:"displayName,omitempty"`
	// The unique key of the mobile session or user action property.
	Key string `json:"key"`
	// The name of the reported value.   Only applicable when the **origin** is set to `API`.
	Name *string `json:"name,omitempty"`
	// The origin of the property
	Origin string `json:"origin"`
	// The ID of the request attribute.   Only applicable when the **origin** is set to `SERVER_SIDE_REQUEST_ATTRIBUTE`.
	ServerSideRequestAttribute *string `json:"serverSideRequestAttribute,omitempty"`
	// If `true`, the property is stored as a session property
	StoreAsSessionProperty *bool `json:"storeAsSessionProperty,omitempty"`
	// If `true`, the property is stored as a user action property
	StoreAsUserActionProperty *bool `json:"storeAsUserActionProperty,omitempty"`
	// The data type of the property.
	Type string `json:"type"`
}

// NewMobileSessionUserActionProperty instantiates a new MobileSessionUserActionProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileSessionUserActionProperty(key string, origin string, type_ string) *MobileSessionUserActionProperty {
	this := MobileSessionUserActionProperty{}
	this.Key = key
	this.Origin = origin
	this.Type = type_
	return &this
}

// NewMobileSessionUserActionPropertyWithDefaults instantiates a new MobileSessionUserActionProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileSessionUserActionPropertyWithDefaults() *MobileSessionUserActionProperty {
	this := MobileSessionUserActionProperty{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *MobileSessionUserActionProperty) GetAggregation() string {
	if o == nil || IsNil(o.Aggregation) {
		var ret string
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetAggregationOk() (*string, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *MobileSessionUserActionProperty) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given string and assigns it to the Aggregation field.
func (o *MobileSessionUserActionProperty) SetAggregation(v string) {
	o.Aggregation = &v
}

// GetCleanupRule returns the CleanupRule field value if set, zero value otherwise.
func (o *MobileSessionUserActionProperty) GetCleanupRule() string {
	if o == nil || IsNil(o.CleanupRule) {
		var ret string
		return ret
	}
	return *o.CleanupRule
}

// GetCleanupRuleOk returns a tuple with the CleanupRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetCleanupRuleOk() (*string, bool) {
	if o == nil || IsNil(o.CleanupRule) {
		return nil, false
	}
	return o.CleanupRule, true
}

// HasCleanupRule returns a boolean if a field has been set.
func (o *MobileSessionUserActionProperty) HasCleanupRule() bool {
	if o != nil && !IsNil(o.CleanupRule) {
		return true
	}

	return false
}

// SetCleanupRule gets a reference to the given string and assigns it to the CleanupRule field.
func (o *MobileSessionUserActionProperty) SetCleanupRule(v string) {
	o.CleanupRule = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MobileSessionUserActionProperty) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MobileSessionUserActionProperty) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MobileSessionUserActionProperty) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetKey returns the Key field value
func (o *MobileSessionUserActionProperty) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *MobileSessionUserActionProperty) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MobileSessionUserActionProperty) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MobileSessionUserActionProperty) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MobileSessionUserActionProperty) SetName(v string) {
	o.Name = &v
}

// GetOrigin returns the Origin field value
func (o *MobileSessionUserActionProperty) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *MobileSessionUserActionProperty) SetOrigin(v string) {
	o.Origin = v
}

// GetServerSideRequestAttribute returns the ServerSideRequestAttribute field value if set, zero value otherwise.
func (o *MobileSessionUserActionProperty) GetServerSideRequestAttribute() string {
	if o == nil || IsNil(o.ServerSideRequestAttribute) {
		var ret string
		return ret
	}
	return *o.ServerSideRequestAttribute
}

// GetServerSideRequestAttributeOk returns a tuple with the ServerSideRequestAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetServerSideRequestAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerSideRequestAttribute) {
		return nil, false
	}
	return o.ServerSideRequestAttribute, true
}

// HasServerSideRequestAttribute returns a boolean if a field has been set.
func (o *MobileSessionUserActionProperty) HasServerSideRequestAttribute() bool {
	if o != nil && !IsNil(o.ServerSideRequestAttribute) {
		return true
	}

	return false
}

// SetServerSideRequestAttribute gets a reference to the given string and assigns it to the ServerSideRequestAttribute field.
func (o *MobileSessionUserActionProperty) SetServerSideRequestAttribute(v string) {
	o.ServerSideRequestAttribute = &v
}

// GetStoreAsSessionProperty returns the StoreAsSessionProperty field value if set, zero value otherwise.
func (o *MobileSessionUserActionProperty) GetStoreAsSessionProperty() bool {
	if o == nil || IsNil(o.StoreAsSessionProperty) {
		var ret bool
		return ret
	}
	return *o.StoreAsSessionProperty
}

// GetStoreAsSessionPropertyOk returns a tuple with the StoreAsSessionProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetStoreAsSessionPropertyOk() (*bool, bool) {
	if o == nil || IsNil(o.StoreAsSessionProperty) {
		return nil, false
	}
	return o.StoreAsSessionProperty, true
}

// HasStoreAsSessionProperty returns a boolean if a field has been set.
func (o *MobileSessionUserActionProperty) HasStoreAsSessionProperty() bool {
	if o != nil && !IsNil(o.StoreAsSessionProperty) {
		return true
	}

	return false
}

// SetStoreAsSessionProperty gets a reference to the given bool and assigns it to the StoreAsSessionProperty field.
func (o *MobileSessionUserActionProperty) SetStoreAsSessionProperty(v bool) {
	o.StoreAsSessionProperty = &v
}

// GetStoreAsUserActionProperty returns the StoreAsUserActionProperty field value if set, zero value otherwise.
func (o *MobileSessionUserActionProperty) GetStoreAsUserActionProperty() bool {
	if o == nil || IsNil(o.StoreAsUserActionProperty) {
		var ret bool
		return ret
	}
	return *o.StoreAsUserActionProperty
}

// GetStoreAsUserActionPropertyOk returns a tuple with the StoreAsUserActionProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetStoreAsUserActionPropertyOk() (*bool, bool) {
	if o == nil || IsNil(o.StoreAsUserActionProperty) {
		return nil, false
	}
	return o.StoreAsUserActionProperty, true
}

// HasStoreAsUserActionProperty returns a boolean if a field has been set.
func (o *MobileSessionUserActionProperty) HasStoreAsUserActionProperty() bool {
	if o != nil && !IsNil(o.StoreAsUserActionProperty) {
		return true
	}

	return false
}

// SetStoreAsUserActionProperty gets a reference to the given bool and assigns it to the StoreAsUserActionProperty field.
func (o *MobileSessionUserActionProperty) SetStoreAsUserActionProperty(v bool) {
	o.StoreAsUserActionProperty = &v
}

// GetType returns the Type field value
func (o *MobileSessionUserActionProperty) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MobileSessionUserActionProperty) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MobileSessionUserActionProperty) SetType(v string) {
	o.Type = v
}

func (o MobileSessionUserActionProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MobileSessionUserActionProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	if !IsNil(o.CleanupRule) {
		toSerialize["cleanupRule"] = o.CleanupRule
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["key"] = o.Key
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["origin"] = o.Origin
	if !IsNil(o.ServerSideRequestAttribute) {
		toSerialize["serverSideRequestAttribute"] = o.ServerSideRequestAttribute
	}
	if !IsNil(o.StoreAsSessionProperty) {
		toSerialize["storeAsSessionProperty"] = o.StoreAsSessionProperty
	}
	if !IsNil(o.StoreAsUserActionProperty) {
		toSerialize["storeAsUserActionProperty"] = o.StoreAsUserActionProperty
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableMobileSessionUserActionProperty struct {
	value *MobileSessionUserActionProperty
	isSet bool
}

func (v NullableMobileSessionUserActionProperty) Get() *MobileSessionUserActionProperty {
	return v.value
}

func (v *NullableMobileSessionUserActionProperty) Set(val *MobileSessionUserActionProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileSessionUserActionProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileSessionUserActionProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileSessionUserActionProperty(val *MobileSessionUserActionProperty) *NullableMobileSessionUserActionProperty {
	return &NullableMobileSessionUserActionProperty{value: val, isSet: true}
}

func (v NullableMobileSessionUserActionProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileSessionUserActionProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


