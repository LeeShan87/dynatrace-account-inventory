/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ResourceNaming type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceNaming{}

// ResourceNaming The resource naming rule.
type ResourceNaming struct {
	// The list of binary extensions that will be renamed to `Binary`.
	Binary []string `json:"binary"`
	// The list of image extensions that will be renamed to `Image`.
	Image []string `json:"image"`
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
}

// NewResourceNaming instantiates a new ResourceNaming object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceNaming(binary []string, image []string) *ResourceNaming {
	this := ResourceNaming{}
	this.Binary = binary
	this.Image = image
	return &this
}

// NewResourceNamingWithDefaults instantiates a new ResourceNaming object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceNamingWithDefaults() *ResourceNaming {
	this := ResourceNaming{}
	return &this
}

// GetBinary returns the Binary field value
func (o *ResourceNaming) GetBinary() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Binary
}

// GetBinaryOk returns a tuple with the Binary field value
// and a boolean to check if the value has been set.
func (o *ResourceNaming) GetBinaryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Binary, true
}

// SetBinary sets field value
func (o *ResourceNaming) SetBinary(v []string) {
	o.Binary = v
}

// GetImage returns the Image field value
func (o *ResourceNaming) GetImage() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ResourceNaming) GetImageOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image, true
}

// SetImage sets field value
func (o *ResourceNaming) SetImage(v []string) {
	o.Image = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ResourceNaming) GetMetadata() ConfigurationMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceNaming) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ResourceNaming) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *ResourceNaming) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

func (o ResourceNaming) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceNaming) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["binary"] = o.Binary
	toSerialize["image"] = o.Image
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableResourceNaming struct {
	value *ResourceNaming
	isSet bool
}

func (v NullableResourceNaming) Get() *ResourceNaming {
	return v.value
}

func (v *NullableResourceNaming) Set(val *ResourceNaming) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceNaming) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceNaming) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceNaming(val *ResourceNaming) *NullableResourceNaming {
	return &NullableResourceNaming{value: val, isSet: true}
}

func (v NullableResourceNaming) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceNaming) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


