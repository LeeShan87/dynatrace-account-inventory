/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ScopeConditions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeConditions{}

// ScopeConditions Conditions for data capturing.
type ScopeConditions struct {
	// Only applies to this host group.
	HostGroup *string `json:"hostGroup,omitempty"`
	// Only applies to this process group. Note that this can't be transferred between different clusters or environments.
	ProcessGroup *string `json:"processGroup,omitempty"`
	// Only applies to this service technology.
	ServiceTechnology *string `json:"serviceTechnology,omitempty"`
	// Only apply to process groups matching this tag.
	TagOfProcessGroup *string `json:"tagOfProcessGroup,omitempty"`
}

// NewScopeConditions instantiates a new ScopeConditions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeConditions() *ScopeConditions {
	this := ScopeConditions{}
	return &this
}

// NewScopeConditionsWithDefaults instantiates a new ScopeConditions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeConditionsWithDefaults() *ScopeConditions {
	this := ScopeConditions{}
	return &this
}

// GetHostGroup returns the HostGroup field value if set, zero value otherwise.
func (o *ScopeConditions) GetHostGroup() string {
	if o == nil || IsNil(o.HostGroup) {
		var ret string
		return ret
	}
	return *o.HostGroup
}

// GetHostGroupOk returns a tuple with the HostGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeConditions) GetHostGroupOk() (*string, bool) {
	if o == nil || IsNil(o.HostGroup) {
		return nil, false
	}
	return o.HostGroup, true
}

// HasHostGroup returns a boolean if a field has been set.
func (o *ScopeConditions) HasHostGroup() bool {
	if o != nil && !IsNil(o.HostGroup) {
		return true
	}

	return false
}

// SetHostGroup gets a reference to the given string and assigns it to the HostGroup field.
func (o *ScopeConditions) SetHostGroup(v string) {
	o.HostGroup = &v
}

// GetProcessGroup returns the ProcessGroup field value if set, zero value otherwise.
func (o *ScopeConditions) GetProcessGroup() string {
	if o == nil || IsNil(o.ProcessGroup) {
		var ret string
		return ret
	}
	return *o.ProcessGroup
}

// GetProcessGroupOk returns a tuple with the ProcessGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeConditions) GetProcessGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessGroup) {
		return nil, false
	}
	return o.ProcessGroup, true
}

// HasProcessGroup returns a boolean if a field has been set.
func (o *ScopeConditions) HasProcessGroup() bool {
	if o != nil && !IsNil(o.ProcessGroup) {
		return true
	}

	return false
}

// SetProcessGroup gets a reference to the given string and assigns it to the ProcessGroup field.
func (o *ScopeConditions) SetProcessGroup(v string) {
	o.ProcessGroup = &v
}

// GetServiceTechnology returns the ServiceTechnology field value if set, zero value otherwise.
func (o *ScopeConditions) GetServiceTechnology() string {
	if o == nil || IsNil(o.ServiceTechnology) {
		var ret string
		return ret
	}
	return *o.ServiceTechnology
}

// GetServiceTechnologyOk returns a tuple with the ServiceTechnology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeConditions) GetServiceTechnologyOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceTechnology) {
		return nil, false
	}
	return o.ServiceTechnology, true
}

// HasServiceTechnology returns a boolean if a field has been set.
func (o *ScopeConditions) HasServiceTechnology() bool {
	if o != nil && !IsNil(o.ServiceTechnology) {
		return true
	}

	return false
}

// SetServiceTechnology gets a reference to the given string and assigns it to the ServiceTechnology field.
func (o *ScopeConditions) SetServiceTechnology(v string) {
	o.ServiceTechnology = &v
}

// GetTagOfProcessGroup returns the TagOfProcessGroup field value if set, zero value otherwise.
func (o *ScopeConditions) GetTagOfProcessGroup() string {
	if o == nil || IsNil(o.TagOfProcessGroup) {
		var ret string
		return ret
	}
	return *o.TagOfProcessGroup
}

// GetTagOfProcessGroupOk returns a tuple with the TagOfProcessGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeConditions) GetTagOfProcessGroupOk() (*string, bool) {
	if o == nil || IsNil(o.TagOfProcessGroup) {
		return nil, false
	}
	return o.TagOfProcessGroup, true
}

// HasTagOfProcessGroup returns a boolean if a field has been set.
func (o *ScopeConditions) HasTagOfProcessGroup() bool {
	if o != nil && !IsNil(o.TagOfProcessGroup) {
		return true
	}

	return false
}

// SetTagOfProcessGroup gets a reference to the given string and assigns it to the TagOfProcessGroup field.
func (o *ScopeConditions) SetTagOfProcessGroup(v string) {
	o.TagOfProcessGroup = &v
}

func (o ScopeConditions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeConditions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HostGroup) {
		toSerialize["hostGroup"] = o.HostGroup
	}
	if !IsNil(o.ProcessGroup) {
		toSerialize["processGroup"] = o.ProcessGroup
	}
	if !IsNil(o.ServiceTechnology) {
		toSerialize["serviceTechnology"] = o.ServiceTechnology
	}
	if !IsNil(o.TagOfProcessGroup) {
		toSerialize["tagOfProcessGroup"] = o.TagOfProcessGroup
	}
	return toSerialize, nil
}

type NullableScopeConditions struct {
	value *ScopeConditions
	isSet bool
}

func (v NullableScopeConditions) Get() *ScopeConditions {
	return v.value
}

func (v *NullableScopeConditions) Set(val *ScopeConditions) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeConditions) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeConditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeConditions(val *ScopeConditions) *NullableScopeConditions {
	return &NullableScopeConditions{value: val, isSet: true}
}

func (v NullableScopeConditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeConditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


