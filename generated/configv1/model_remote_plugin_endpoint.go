/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the RemotePluginEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemotePluginEndpoint{}

// RemotePluginEndpoint Configuration of a plugin endpoint.
type RemotePluginEndpoint struct {
	ActiveGatePluginModule EntityShortRepresentation `json:"activeGatePluginModule"`
	// The endpoint is enabled (`true`) or disabled (`false`).
	Enabled *bool `json:"enabled,omitempty"`
	// The ID of the endpoint.
	Id *string `json:"id,omitempty"`
	// The name of the endpoint, displayed in Dynatrace.
	Name *string `json:"name,omitempty"`
	// The ID of the plugin to which the endpoint belongs.
	PluginId *string `json:"pluginId,omitempty"`
	// The list of endpoint parameters.    Each parameter is a property-value pair.
	Properties *map[string]string `json:"properties,omitempty"`
}

// NewRemotePluginEndpoint instantiates a new RemotePluginEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemotePluginEndpoint(activeGatePluginModule EntityShortRepresentation) *RemotePluginEndpoint {
	this := RemotePluginEndpoint{}
	this.ActiveGatePluginModule = activeGatePluginModule
	return &this
}

// NewRemotePluginEndpointWithDefaults instantiates a new RemotePluginEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemotePluginEndpointWithDefaults() *RemotePluginEndpoint {
	this := RemotePluginEndpoint{}
	return &this
}

// GetActiveGatePluginModule returns the ActiveGatePluginModule field value
func (o *RemotePluginEndpoint) GetActiveGatePluginModule() EntityShortRepresentation {
	if o == nil {
		var ret EntityShortRepresentation
		return ret
	}

	return o.ActiveGatePluginModule
}

// GetActiveGatePluginModuleOk returns a tuple with the ActiveGatePluginModule field value
// and a boolean to check if the value has been set.
func (o *RemotePluginEndpoint) GetActiveGatePluginModuleOk() (*EntityShortRepresentation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveGatePluginModule, true
}

// SetActiveGatePluginModule sets field value
func (o *RemotePluginEndpoint) SetActiveGatePluginModule(v EntityShortRepresentation) {
	o.ActiveGatePluginModule = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RemotePluginEndpoint) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemotePluginEndpoint) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RemotePluginEndpoint) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RemotePluginEndpoint) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RemotePluginEndpoint) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemotePluginEndpoint) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RemotePluginEndpoint) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RemotePluginEndpoint) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RemotePluginEndpoint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemotePluginEndpoint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RemotePluginEndpoint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RemotePluginEndpoint) SetName(v string) {
	o.Name = &v
}

// GetPluginId returns the PluginId field value if set, zero value otherwise.
func (o *RemotePluginEndpoint) GetPluginId() string {
	if o == nil || IsNil(o.PluginId) {
		var ret string
		return ret
	}
	return *o.PluginId
}

// GetPluginIdOk returns a tuple with the PluginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemotePluginEndpoint) GetPluginIdOk() (*string, bool) {
	if o == nil || IsNil(o.PluginId) {
		return nil, false
	}
	return o.PluginId, true
}

// HasPluginId returns a boolean if a field has been set.
func (o *RemotePluginEndpoint) HasPluginId() bool {
	if o != nil && !IsNil(o.PluginId) {
		return true
	}

	return false
}

// SetPluginId gets a reference to the given string and assigns it to the PluginId field.
func (o *RemotePluginEndpoint) SetPluginId(v string) {
	o.PluginId = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *RemotePluginEndpoint) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemotePluginEndpoint) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *RemotePluginEndpoint) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *RemotePluginEndpoint) SetProperties(v map[string]string) {
	o.Properties = &v
}

func (o RemotePluginEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemotePluginEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activeGatePluginModule"] = o.ActiveGatePluginModule
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PluginId) {
		toSerialize["pluginId"] = o.PluginId
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableRemotePluginEndpoint struct {
	value *RemotePluginEndpoint
	isSet bool
}

func (v NullableRemotePluginEndpoint) Get() *RemotePluginEndpoint {
	return v.value
}

func (v *NullableRemotePluginEndpoint) Set(val *RemotePluginEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableRemotePluginEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableRemotePluginEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemotePluginEndpoint(val *RemotePluginEndpoint) *NullableRemotePluginEndpoint {
	return &NullableRemotePluginEndpoint{value: val, isSet: true}
}

func (v NullableRemotePluginEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemotePluginEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


