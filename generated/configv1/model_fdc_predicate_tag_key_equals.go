/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the FdcPredicateTagKeyEquals type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FdcPredicateTagKeyEquals{}

// FdcPredicateTagKeyEquals The predicate of the `TAG_KEY_EQUALS` type. It checks whether the attribute (which is the key of a tag) equals one of the reference values.
type FdcPredicateTagKeyEquals struct {
	// A list of reference values. The condition is fulfilled when the attribute (which is the key of a tag) equals *any* of these.
	Keys []string `json:"keys,omitempty"`
}

// NewFdcPredicateTagKeyEquals instantiates a new FdcPredicateTagKeyEquals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFdcPredicateTagKeyEquals(type_ string) *FdcPredicateTagKeyEquals {
	this := FdcPredicateTagKeyEquals{}
	this.Type = type_
	return &this
}

// NewFdcPredicateTagKeyEqualsWithDefaults instantiates a new FdcPredicateTagKeyEquals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFdcPredicateTagKeyEqualsWithDefaults() *FdcPredicateTagKeyEquals {
	this := FdcPredicateTagKeyEquals{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *FdcPredicateTagKeyEquals) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FdcPredicateTagKeyEquals) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *FdcPredicateTagKeyEquals) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *FdcPredicateTagKeyEquals) SetKeys(v []string) {
	o.Keys = v
}

func (o FdcPredicateTagKeyEquals) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FdcPredicateTagKeyEquals) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableFdcPredicateTagKeyEquals struct {
	value *FdcPredicateTagKeyEquals
	isSet bool
}

func (v NullableFdcPredicateTagKeyEquals) Get() *FdcPredicateTagKeyEquals {
	return v.value
}

func (v *NullableFdcPredicateTagKeyEquals) Set(val *FdcPredicateTagKeyEquals) {
	v.value = val
	v.isSet = true
}

func (v NullableFdcPredicateTagKeyEquals) IsSet() bool {
	return v.isSet
}

func (v *NullableFdcPredicateTagKeyEquals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFdcPredicateTagKeyEquals(val *FdcPredicateTagKeyEquals) *NullableFdcPredicateTagKeyEquals {
	return &NullableFdcPredicateTagKeyEquals{value: val, isSet: true}
}

func (v NullableFdcPredicateTagKeyEquals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFdcPredicateTagKeyEquals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


