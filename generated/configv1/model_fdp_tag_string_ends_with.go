/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the FdpTagStringEndsWith type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FdpTagStringEndsWith{}

// FdpTagStringEndsWith The predicate of the `STRING_ENDS_WITH` type. It checks whether the tag (which is a string) ends with the reference value.
type FdpTagStringEndsWith struct {
	IgnoreCase *bool `json:"ignoreCase,omitempty"`
	Negated *bool `json:"negated,omitempty"`
	// The reference value. The condition is fulfilled when the tag (which is a string) ends with this value.
	Value *string `json:"value,omitempty"`
}

// NewFdpTagStringEndsWith instantiates a new FdpTagStringEndsWith object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFdpTagStringEndsWith(type_ string) *FdpTagStringEndsWith {
	this := FdpTagStringEndsWith{}
	this.Type = type_
	return &this
}

// NewFdpTagStringEndsWithWithDefaults instantiates a new FdpTagStringEndsWith object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFdpTagStringEndsWithWithDefaults() *FdpTagStringEndsWith {
	this := FdpTagStringEndsWith{}
	return &this
}

// GetIgnoreCase returns the IgnoreCase field value if set, zero value otherwise.
func (o *FdpTagStringEndsWith) GetIgnoreCase() bool {
	if o == nil || IsNil(o.IgnoreCase) {
		var ret bool
		return ret
	}
	return *o.IgnoreCase
}

// GetIgnoreCaseOk returns a tuple with the IgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FdpTagStringEndsWith) GetIgnoreCaseOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreCase) {
		return nil, false
	}
	return o.IgnoreCase, true
}

// HasIgnoreCase returns a boolean if a field has been set.
func (o *FdpTagStringEndsWith) HasIgnoreCase() bool {
	if o != nil && !IsNil(o.IgnoreCase) {
		return true
	}

	return false
}

// SetIgnoreCase gets a reference to the given bool and assigns it to the IgnoreCase field.
func (o *FdpTagStringEndsWith) SetIgnoreCase(v bool) {
	o.IgnoreCase = &v
}

// GetNegated returns the Negated field value if set, zero value otherwise.
func (o *FdpTagStringEndsWith) GetNegated() bool {
	if o == nil || IsNil(o.Negated) {
		var ret bool
		return ret
	}
	return *o.Negated
}

// GetNegatedOk returns a tuple with the Negated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FdpTagStringEndsWith) GetNegatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Negated) {
		return nil, false
	}
	return o.Negated, true
}

// HasNegated returns a boolean if a field has been set.
func (o *FdpTagStringEndsWith) HasNegated() bool {
	if o != nil && !IsNil(o.Negated) {
		return true
	}

	return false
}

// SetNegated gets a reference to the given bool and assigns it to the Negated field.
func (o *FdpTagStringEndsWith) SetNegated(v bool) {
	o.Negated = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FdpTagStringEndsWith) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FdpTagStringEndsWith) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FdpTagStringEndsWith) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FdpTagStringEndsWith) SetValue(v string) {
	o.Value = &v
}

func (o FdpTagStringEndsWith) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FdpTagStringEndsWith) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IgnoreCase) {
		toSerialize["ignoreCase"] = o.IgnoreCase
	}
	if !IsNil(o.Negated) {
		toSerialize["negated"] = o.Negated
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableFdpTagStringEndsWith struct {
	value *FdpTagStringEndsWith
	isSet bool
}

func (v NullableFdpTagStringEndsWith) Get() *FdpTagStringEndsWith {
	return v.value
}

func (v *NullableFdpTagStringEndsWith) Set(val *FdpTagStringEndsWith) {
	v.value = val
	v.isSet = true
}

func (v NullableFdpTagStringEndsWith) IsSet() bool {
	return v.isSet
}

func (v *NullableFdpTagStringEndsWith) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFdpTagStringEndsWith(val *FdpTagStringEndsWith) *NullableFdpTagStringEndsWith {
	return &NullableFdpTagStringEndsWith{value: val, isSet: true}
}

func (v NullableFdpTagStringEndsWith) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFdpTagStringEndsWith) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


