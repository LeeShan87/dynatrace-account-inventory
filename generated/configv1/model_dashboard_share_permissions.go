/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the DashboardSharePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardSharePermissions{}

// DashboardSharePermissions Access permissions of the dashboard.
type DashboardSharePermissions struct {
	// The ID of the user or group to whom the permission is granted.  Not applicable if the **type** is set to `ALL`.
	Id *string `json:"id,omitempty"`
	// The level of the permission:    * `VIEW`: The dashboard is shared with read permission.  * `EDIT`: The dashboard is shared with edit permission.  
	Permission string `json:"permission"`
	// The type of the permission:   * `USER`: The dashboard is shared with the specified user.  * `GROUP`: The dashboard is shared with all users of the specified group.  * `ALL`: The dashboard is shared via link. Any authenticated user with the link can view the dashboard.
	Type string `json:"type"`
}

// NewDashboardSharePermissions instantiates a new DashboardSharePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardSharePermissions(permission string, type_ string) *DashboardSharePermissions {
	this := DashboardSharePermissions{}
	this.Permission = permission
	this.Type = type_
	return &this
}

// NewDashboardSharePermissionsWithDefaults instantiates a new DashboardSharePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardSharePermissionsWithDefaults() *DashboardSharePermissions {
	this := DashboardSharePermissions{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DashboardSharePermissions) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSharePermissions) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DashboardSharePermissions) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DashboardSharePermissions) SetId(v string) {
	o.Id = &v
}

// GetPermission returns the Permission field value
func (o *DashboardSharePermissions) GetPermission() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value
// and a boolean to check if the value has been set.
func (o *DashboardSharePermissions) GetPermissionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permission, true
}

// SetPermission sets field value
func (o *DashboardSharePermissions) SetPermission(v string) {
	o.Permission = v
}

// GetType returns the Type field value
func (o *DashboardSharePermissions) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DashboardSharePermissions) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DashboardSharePermissions) SetType(v string) {
	o.Type = v
}

func (o DashboardSharePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardSharePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["permission"] = o.Permission
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableDashboardSharePermissions struct {
	value *DashboardSharePermissions
	isSet bool
}

func (v NullableDashboardSharePermissions) Get() *DashboardSharePermissions {
	return v.value
}

func (v *NullableDashboardSharePermissions) Set(val *DashboardSharePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardSharePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardSharePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardSharePermissions(val *DashboardSharePermissions) *NullableDashboardSharePermissions {
	return &NullableDashboardSharePermissions{value: val, isSet: true}
}

func (v NullableDashboardSharePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardSharePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


