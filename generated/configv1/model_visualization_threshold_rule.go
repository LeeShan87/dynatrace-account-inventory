/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the VisualizationThresholdRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationThresholdRule{}

// VisualizationThresholdRule struct for VisualizationThresholdRule
type VisualizationThresholdRule struct {
	Color string `json:"color"`
	Value *float64 `json:"value,omitempty"`
}

// NewVisualizationThresholdRule instantiates a new VisualizationThresholdRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationThresholdRule(color string) *VisualizationThresholdRule {
	this := VisualizationThresholdRule{}
	this.Color = color
	return &this
}

// NewVisualizationThresholdRuleWithDefaults instantiates a new VisualizationThresholdRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationThresholdRuleWithDefaults() *VisualizationThresholdRule {
	this := VisualizationThresholdRule{}
	return &this
}

// GetColor returns the Color field value
func (o *VisualizationThresholdRule) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *VisualizationThresholdRule) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *VisualizationThresholdRule) SetColor(v string) {
	o.Color = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VisualizationThresholdRule) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationThresholdRule) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VisualizationThresholdRule) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *VisualizationThresholdRule) SetValue(v float64) {
	o.Value = &v
}

func (o VisualizationThresholdRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationThresholdRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["color"] = o.Color
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableVisualizationThresholdRule struct {
	value *VisualizationThresholdRule
	isSet bool
}

func (v NullableVisualizationThresholdRule) Get() *VisualizationThresholdRule {
	return v.value
}

func (v *NullableVisualizationThresholdRule) Set(val *VisualizationThresholdRule) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationThresholdRule) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationThresholdRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationThresholdRule(val *VisualizationThresholdRule) *NullableVisualizationThresholdRule {
	return &NullableVisualizationThresholdRule{value: val, isSet: true}
}

func (v NullableVisualizationThresholdRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationThresholdRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


