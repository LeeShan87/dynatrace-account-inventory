/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the DataExplorerTimeShift type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataExplorerTimeShift{}

// DataExplorerTimeShift TimeShift for data explorer queries.
type DataExplorerTimeShift struct {
	Factor *int32 `json:"factor,omitempty"`
	Unit *string `json:"unit,omitempty"`
}

// NewDataExplorerTimeShift instantiates a new DataExplorerTimeShift object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataExplorerTimeShift() *DataExplorerTimeShift {
	this := DataExplorerTimeShift{}
	return &this
}

// NewDataExplorerTimeShiftWithDefaults instantiates a new DataExplorerTimeShift object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataExplorerTimeShiftWithDefaults() *DataExplorerTimeShift {
	this := DataExplorerTimeShift{}
	return &this
}

// GetFactor returns the Factor field value if set, zero value otherwise.
func (o *DataExplorerTimeShift) GetFactor() int32 {
	if o == nil || IsNil(o.Factor) {
		var ret int32
		return ret
	}
	return *o.Factor
}

// GetFactorOk returns a tuple with the Factor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerTimeShift) GetFactorOk() (*int32, bool) {
	if o == nil || IsNil(o.Factor) {
		return nil, false
	}
	return o.Factor, true
}

// HasFactor returns a boolean if a field has been set.
func (o *DataExplorerTimeShift) HasFactor() bool {
	if o != nil && !IsNil(o.Factor) {
		return true
	}

	return false
}

// SetFactor gets a reference to the given int32 and assigns it to the Factor field.
func (o *DataExplorerTimeShift) SetFactor(v int32) {
	o.Factor = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *DataExplorerTimeShift) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerTimeShift) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *DataExplorerTimeShift) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *DataExplorerTimeShift) SetUnit(v string) {
	o.Unit = &v
}

func (o DataExplorerTimeShift) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataExplorerTimeShift) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Factor) {
		toSerialize["factor"] = o.Factor
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableDataExplorerTimeShift struct {
	value *DataExplorerTimeShift
	isSet bool
}

func (v NullableDataExplorerTimeShift) Get() *DataExplorerTimeShift {
	return v.value
}

func (v *NullableDataExplorerTimeShift) Set(val *DataExplorerTimeShift) {
	v.value = val
	v.isSet = true
}

func (v NullableDataExplorerTimeShift) IsSet() bool {
	return v.isSet
}

func (v *NullableDataExplorerTimeShift) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataExplorerTimeShift(val *DataExplorerTimeShift) *NullableDataExplorerTimeShift {
	return &NullableDataExplorerTimeShift{value: val, isSet: true}
}

func (v NullableDataExplorerTimeShift) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataExplorerTimeShift) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


