/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SymbolFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SymbolFile{}

// SymbolFile struct for SymbolFile
type SymbolFile struct {
	AppId *AppIdentifier `json:"appId,omitempty"`
	// The name of the application to which the file belongs to.
	ApplicationName *string `json:"applicationName,omitempty"`
	// Whether the file pinned and therefore cannot be deleted.
	Pinned *bool `json:"pinned,omitempty"`
	// The size of the file, in KB.
	Size *int32 `json:"size,omitempty"`
	// The timestamp of the file upload, in UTC milliseconds
	UploadTimestamp *int64 `json:"uploadTimestamp,omitempty"`
}

// NewSymbolFile instantiates a new SymbolFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolFile() *SymbolFile {
	this := SymbolFile{}
	return &this
}

// NewSymbolFileWithDefaults instantiates a new SymbolFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolFileWithDefaults() *SymbolFile {
	this := SymbolFile{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *SymbolFile) GetAppId() AppIdentifier {
	if o == nil || IsNil(o.AppId) {
		var ret AppIdentifier
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFile) GetAppIdOk() (*AppIdentifier, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *SymbolFile) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given AppIdentifier and assigns it to the AppId field.
func (o *SymbolFile) SetAppId(v AppIdentifier) {
	o.AppId = &v
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *SymbolFile) GetApplicationName() string {
	if o == nil || IsNil(o.ApplicationName) {
		var ret string
		return ret
	}
	return *o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFile) GetApplicationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationName) {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *SymbolFile) HasApplicationName() bool {
	if o != nil && !IsNil(o.ApplicationName) {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given string and assigns it to the ApplicationName field.
func (o *SymbolFile) SetApplicationName(v string) {
	o.ApplicationName = &v
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *SymbolFile) GetPinned() bool {
	if o == nil || IsNil(o.Pinned) {
		var ret bool
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFile) GetPinnedOk() (*bool, bool) {
	if o == nil || IsNil(o.Pinned) {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *SymbolFile) HasPinned() bool {
	if o != nil && !IsNil(o.Pinned) {
		return true
	}

	return false
}

// SetPinned gets a reference to the given bool and assigns it to the Pinned field.
func (o *SymbolFile) SetPinned(v bool) {
	o.Pinned = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SymbolFile) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFile) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SymbolFile) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *SymbolFile) SetSize(v int32) {
	o.Size = &v
}

// GetUploadTimestamp returns the UploadTimestamp field value if set, zero value otherwise.
func (o *SymbolFile) GetUploadTimestamp() int64 {
	if o == nil || IsNil(o.UploadTimestamp) {
		var ret int64
		return ret
	}
	return *o.UploadTimestamp
}

// GetUploadTimestampOk returns a tuple with the UploadTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFile) GetUploadTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.UploadTimestamp) {
		return nil, false
	}
	return o.UploadTimestamp, true
}

// HasUploadTimestamp returns a boolean if a field has been set.
func (o *SymbolFile) HasUploadTimestamp() bool {
	if o != nil && !IsNil(o.UploadTimestamp) {
		return true
	}

	return false
}

// SetUploadTimestamp gets a reference to the given int64 and assigns it to the UploadTimestamp field.
func (o *SymbolFile) SetUploadTimestamp(v int64) {
	o.UploadTimestamp = &v
}

func (o SymbolFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SymbolFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.ApplicationName) {
		toSerialize["applicationName"] = o.ApplicationName
	}
	if !IsNil(o.Pinned) {
		toSerialize["pinned"] = o.Pinned
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.UploadTimestamp) {
		toSerialize["uploadTimestamp"] = o.UploadTimestamp
	}
	return toSerialize, nil
}

type NullableSymbolFile struct {
	value *SymbolFile
	isSet bool
}

func (v NullableSymbolFile) Get() *SymbolFile {
	return v.value
}

func (v *NullableSymbolFile) Set(val *SymbolFile) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolFile) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolFile(val *SymbolFile) *NullableSymbolFile {
	return &NullableSymbolFile{value: val, isSet: true}
}

func (v NullableSymbolFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


