/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the MzDimensionalRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MzDimensionalRule{}

// MzDimensionalRule The dimensional rule of the management zone usage. It defines how the management zone applies.    Each rule is evaluated independently of all other rules.
type MzDimensionalRule struct {
	// The target of the rule.
	AppliesTo string `json:"appliesTo"`
	// A list of conditions for the management zone.    The management zone applies only if **all** conditions are fulfilled.
	Conditions []MzDimensionalRuleCondition `json:"conditions"`
	// The rule is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
}

// NewMzDimensionalRule instantiates a new MzDimensionalRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMzDimensionalRule(appliesTo string, conditions []MzDimensionalRuleCondition, enabled bool) *MzDimensionalRule {
	this := MzDimensionalRule{}
	this.AppliesTo = appliesTo
	this.Conditions = conditions
	this.Enabled = enabled
	return &this
}

// NewMzDimensionalRuleWithDefaults instantiates a new MzDimensionalRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMzDimensionalRuleWithDefaults() *MzDimensionalRule {
	this := MzDimensionalRule{}
	return &this
}

// GetAppliesTo returns the AppliesTo field value
func (o *MzDimensionalRule) GetAppliesTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppliesTo
}

// GetAppliesToOk returns a tuple with the AppliesTo field value
// and a boolean to check if the value has been set.
func (o *MzDimensionalRule) GetAppliesToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppliesTo, true
}

// SetAppliesTo sets field value
func (o *MzDimensionalRule) SetAppliesTo(v string) {
	o.AppliesTo = v
}

// GetConditions returns the Conditions field value
func (o *MzDimensionalRule) GetConditions() []MzDimensionalRuleCondition {
	if o == nil {
		var ret []MzDimensionalRuleCondition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *MzDimensionalRule) GetConditionsOk() ([]MzDimensionalRuleCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *MzDimensionalRule) SetConditions(v []MzDimensionalRuleCondition) {
	o.Conditions = v
}

// GetEnabled returns the Enabled field value
func (o *MzDimensionalRule) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *MzDimensionalRule) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *MzDimensionalRule) SetEnabled(v bool) {
	o.Enabled = v
}

func (o MzDimensionalRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MzDimensionalRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appliesTo"] = o.AppliesTo
	toSerialize["conditions"] = o.Conditions
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

type NullableMzDimensionalRule struct {
	value *MzDimensionalRule
	isSet bool
}

func (v NullableMzDimensionalRule) Get() *MzDimensionalRule {
	return v.value
}

func (v *NullableMzDimensionalRule) Set(val *MzDimensionalRule) {
	v.value = val
	v.isSet = true
}

func (v NullableMzDimensionalRule) IsSet() bool {
	return v.isSet
}

func (v *NullableMzDimensionalRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMzDimensionalRule(val *MzDimensionalRule) *NullableMzDimensionalRule {
	return &NullableMzDimensionalRule{value: val, isSet: true}
}

func (v NullableMzDimensionalRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMzDimensionalRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


