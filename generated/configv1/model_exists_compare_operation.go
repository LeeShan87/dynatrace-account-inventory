/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ExistsCompareOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExistsCompareOperation{}

// ExistsCompareOperation The condition of the `EXISTS` type.   The condition checks whether the specified attribute exists.
type ExistsCompareOperation struct {
	// Inverts the operation of the condition. Set to `true` to turn **exists** into **does not exist**.    If not set, then `false` is used.
	Negate *bool `json:"negate,omitempty"`
}

// NewExistsCompareOperation instantiates a new ExistsCompareOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExistsCompareOperation(type_ string) *ExistsCompareOperation {
	this := ExistsCompareOperation{}
	this.Type = type_
	return &this
}

// NewExistsCompareOperationWithDefaults instantiates a new ExistsCompareOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExistsCompareOperationWithDefaults() *ExistsCompareOperation {
	this := ExistsCompareOperation{}
	return &this
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *ExistsCompareOperation) GetNegate() bool {
	if o == nil || IsNil(o.Negate) {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExistsCompareOperation) GetNegateOk() (*bool, bool) {
	if o == nil || IsNil(o.Negate) {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *ExistsCompareOperation) HasNegate() bool {
	if o != nil && !IsNil(o.Negate) {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *ExistsCompareOperation) SetNegate(v bool) {
	o.Negate = &v
}

func (o ExistsCompareOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExistsCompareOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Negate) {
		toSerialize["negate"] = o.Negate
	}
	return toSerialize, nil
}

type NullableExistsCompareOperation struct {
	value *ExistsCompareOperation
	isSet bool
}

func (v NullableExistsCompareOperation) Get() *ExistsCompareOperation {
	return v.value
}

func (v *NullableExistsCompareOperation) Set(val *ExistsCompareOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableExistsCompareOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableExistsCompareOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExistsCompareOperation(val *ExistsCompareOperation) *NullableExistsCompareOperation {
	return &NullableExistsCompareOperation{value: val, isSet: true}
}

func (v NullableExistsCompareOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExistsCompareOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


