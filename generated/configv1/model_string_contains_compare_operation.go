/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the StringContainsCompareOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StringContainsCompareOperation{}

// StringContainsCompareOperation The condition of the `STRING_CONTAINS` type.   The condition checks whether the string value contains the specified text.
type StringContainsCompareOperation struct {
	// The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive.
	IgnoreCase *bool `json:"ignoreCase,omitempty"`
	// Inverts the operation of the condition. Set to `true` to turn **contains** into **does not contain**.    If not set, then `false` is used.
	Negate *bool `json:"negate,omitempty"`
	// The value to compare to.   If several values are specified, the OR logic applies.
	Values []string `json:"values"`
}

// NewStringContainsCompareOperation instantiates a new StringContainsCompareOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStringContainsCompareOperation(values []string, type_ string) *StringContainsCompareOperation {
	this := StringContainsCompareOperation{}
	this.Type = type_
	this.Values = values
	return &this
}

// NewStringContainsCompareOperationWithDefaults instantiates a new StringContainsCompareOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStringContainsCompareOperationWithDefaults() *StringContainsCompareOperation {
	this := StringContainsCompareOperation{}
	return &this
}

// GetIgnoreCase returns the IgnoreCase field value if set, zero value otherwise.
func (o *StringContainsCompareOperation) GetIgnoreCase() bool {
	if o == nil || IsNil(o.IgnoreCase) {
		var ret bool
		return ret
	}
	return *o.IgnoreCase
}

// GetIgnoreCaseOk returns a tuple with the IgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringContainsCompareOperation) GetIgnoreCaseOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreCase) {
		return nil, false
	}
	return o.IgnoreCase, true
}

// HasIgnoreCase returns a boolean if a field has been set.
func (o *StringContainsCompareOperation) HasIgnoreCase() bool {
	if o != nil && !IsNil(o.IgnoreCase) {
		return true
	}

	return false
}

// SetIgnoreCase gets a reference to the given bool and assigns it to the IgnoreCase field.
func (o *StringContainsCompareOperation) SetIgnoreCase(v bool) {
	o.IgnoreCase = &v
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *StringContainsCompareOperation) GetNegate() bool {
	if o == nil || IsNil(o.Negate) {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringContainsCompareOperation) GetNegateOk() (*bool, bool) {
	if o == nil || IsNil(o.Negate) {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *StringContainsCompareOperation) HasNegate() bool {
	if o != nil && !IsNil(o.Negate) {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *StringContainsCompareOperation) SetNegate(v bool) {
	o.Negate = &v
}

// GetValues returns the Values field value
func (o *StringContainsCompareOperation) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *StringContainsCompareOperation) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *StringContainsCompareOperation) SetValues(v []string) {
	o.Values = v
}

func (o StringContainsCompareOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StringContainsCompareOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IgnoreCase) {
		toSerialize["ignoreCase"] = o.IgnoreCase
	}
	if !IsNil(o.Negate) {
		toSerialize["negate"] = o.Negate
	}
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

type NullableStringContainsCompareOperation struct {
	value *StringContainsCompareOperation
	isSet bool
}

func (v NullableStringContainsCompareOperation) Get() *StringContainsCompareOperation {
	return v.value
}

func (v *NullableStringContainsCompareOperation) Set(val *StringContainsCompareOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableStringContainsCompareOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableStringContainsCompareOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringContainsCompareOperation(val *StringContainsCompareOperation) *NullableStringContainsCompareOperation {
	return &NullableStringContainsCompareOperation{value: val, isSet: true}
}

func (v NullableStringContainsCompareOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringContainsCompareOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


