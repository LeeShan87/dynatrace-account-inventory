/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the FailureDetectionRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailureDetectionRule{}

// FailureDetectionRule Configuration of the failure detection rule.
type FailureDetectionRule struct {
	// A list of conditions of the rule.   The rule applies when **all** conditions are fulfilled.
	Conditions []FailureDetectionCondition `json:"conditions"`
	// A short description of the rule.
	Description *string `json:"description,omitempty"`
	// The rule is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// The failure detection parameter (FDP) set of the rule.   Specify the ID of the set here. The FDP set must exist at the time of rule creation.
	FdpId string `json:"fdpId"`
	// The ID of the rule.
	Id *string `json:"id,omitempty"`
	// The display name of the rule.   The length of the name is limited to 150 characters.
	Name *string `json:"name,omitempty"`
}

// NewFailureDetectionRule instantiates a new FailureDetectionRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailureDetectionRule(conditions []FailureDetectionCondition, enabled bool, fdpId string) *FailureDetectionRule {
	this := FailureDetectionRule{}
	this.Conditions = conditions
	this.Enabled = enabled
	this.FdpId = fdpId
	return &this
}

// NewFailureDetectionRuleWithDefaults instantiates a new FailureDetectionRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailureDetectionRuleWithDefaults() *FailureDetectionRule {
	this := FailureDetectionRule{}
	return &this
}

// GetConditions returns the Conditions field value
func (o *FailureDetectionRule) GetConditions() []FailureDetectionCondition {
	if o == nil {
		var ret []FailureDetectionCondition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *FailureDetectionRule) GetConditionsOk() ([]FailureDetectionCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *FailureDetectionRule) SetConditions(v []FailureDetectionCondition) {
	o.Conditions = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FailureDetectionRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FailureDetectionRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FailureDetectionRule) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *FailureDetectionRule) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *FailureDetectionRule) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *FailureDetectionRule) SetEnabled(v bool) {
	o.Enabled = v
}

// GetFdpId returns the FdpId field value
func (o *FailureDetectionRule) GetFdpId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FdpId
}

// GetFdpIdOk returns a tuple with the FdpId field value
// and a boolean to check if the value has been set.
func (o *FailureDetectionRule) GetFdpIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FdpId, true
}

// SetFdpId sets field value
func (o *FailureDetectionRule) SetFdpId(v string) {
	o.FdpId = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FailureDetectionRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FailureDetectionRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FailureDetectionRule) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FailureDetectionRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FailureDetectionRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FailureDetectionRule) SetName(v string) {
	o.Name = &v
}

func (o FailureDetectionRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailureDetectionRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conditions"] = o.Conditions
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["fdpId"] = o.FdpId
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableFailureDetectionRule struct {
	value *FailureDetectionRule
	isSet bool
}

func (v NullableFailureDetectionRule) Get() *FailureDetectionRule {
	return v.value
}

func (v *NullableFailureDetectionRule) Set(val *FailureDetectionRule) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureDetectionRule) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureDetectionRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureDetectionRule(val *FailureDetectionRule) *NullableFailureDetectionRule {
	return &NullableFailureDetectionRule{value: val, isSet: true}
}

func (v NullableFailureDetectionRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureDetectionRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


