/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the HeatmapSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeatmapSettings{}

// HeatmapSettings Settings for heatmap visualization
type HeatmapSettings struct {
	ShowLabels *bool `json:"showLabels,omitempty"`
	// Number of buckets in the X axis
	XAxisBuckets *int32 `json:"xAxisBuckets,omitempty"`
	// Y axis aggregation criteria
	YAxis string `json:"yAxis"`
	// Number of buckets in the Y axis
	YAxisBuckets *int32 `json:"yAxisBuckets,omitempty"`
}

// NewHeatmapSettings instantiates a new HeatmapSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeatmapSettings(yAxis string) *HeatmapSettings {
	this := HeatmapSettings{}
	this.YAxis = yAxis
	return &this
}

// NewHeatmapSettingsWithDefaults instantiates a new HeatmapSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeatmapSettingsWithDefaults() *HeatmapSettings {
	this := HeatmapSettings{}
	return &this
}

// GetShowLabels returns the ShowLabels field value if set, zero value otherwise.
func (o *HeatmapSettings) GetShowLabels() bool {
	if o == nil || IsNil(o.ShowLabels) {
		var ret bool
		return ret
	}
	return *o.ShowLabels
}

// GetShowLabelsOk returns a tuple with the ShowLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeatmapSettings) GetShowLabelsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLabels) {
		return nil, false
	}
	return o.ShowLabels, true
}

// HasShowLabels returns a boolean if a field has been set.
func (o *HeatmapSettings) HasShowLabels() bool {
	if o != nil && !IsNil(o.ShowLabels) {
		return true
	}

	return false
}

// SetShowLabels gets a reference to the given bool and assigns it to the ShowLabels field.
func (o *HeatmapSettings) SetShowLabels(v bool) {
	o.ShowLabels = &v
}

// GetXAxisBuckets returns the XAxisBuckets field value if set, zero value otherwise.
func (o *HeatmapSettings) GetXAxisBuckets() int32 {
	if o == nil || IsNil(o.XAxisBuckets) {
		var ret int32
		return ret
	}
	return *o.XAxisBuckets
}

// GetXAxisBucketsOk returns a tuple with the XAxisBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeatmapSettings) GetXAxisBucketsOk() (*int32, bool) {
	if o == nil || IsNil(o.XAxisBuckets) {
		return nil, false
	}
	return o.XAxisBuckets, true
}

// HasXAxisBuckets returns a boolean if a field has been set.
func (o *HeatmapSettings) HasXAxisBuckets() bool {
	if o != nil && !IsNil(o.XAxisBuckets) {
		return true
	}

	return false
}

// SetXAxisBuckets gets a reference to the given int32 and assigns it to the XAxisBuckets field.
func (o *HeatmapSettings) SetXAxisBuckets(v int32) {
	o.XAxisBuckets = &v
}

// GetYAxis returns the YAxis field value
func (o *HeatmapSettings) GetYAxis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.YAxis
}

// GetYAxisOk returns a tuple with the YAxis field value
// and a boolean to check if the value has been set.
func (o *HeatmapSettings) GetYAxisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.YAxis, true
}

// SetYAxis sets field value
func (o *HeatmapSettings) SetYAxis(v string) {
	o.YAxis = v
}

// GetYAxisBuckets returns the YAxisBuckets field value if set, zero value otherwise.
func (o *HeatmapSettings) GetYAxisBuckets() int32 {
	if o == nil || IsNil(o.YAxisBuckets) {
		var ret int32
		return ret
	}
	return *o.YAxisBuckets
}

// GetYAxisBucketsOk returns a tuple with the YAxisBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeatmapSettings) GetYAxisBucketsOk() (*int32, bool) {
	if o == nil || IsNil(o.YAxisBuckets) {
		return nil, false
	}
	return o.YAxisBuckets, true
}

// HasYAxisBuckets returns a boolean if a field has been set.
func (o *HeatmapSettings) HasYAxisBuckets() bool {
	if o != nil && !IsNil(o.YAxisBuckets) {
		return true
	}

	return false
}

// SetYAxisBuckets gets a reference to the given int32 and assigns it to the YAxisBuckets field.
func (o *HeatmapSettings) SetYAxisBuckets(v int32) {
	o.YAxisBuckets = &v
}

func (o HeatmapSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeatmapSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShowLabels) {
		toSerialize["showLabels"] = o.ShowLabels
	}
	if !IsNil(o.XAxisBuckets) {
		toSerialize["xAxisBuckets"] = o.XAxisBuckets
	}
	toSerialize["yAxis"] = o.YAxis
	if !IsNil(o.YAxisBuckets) {
		toSerialize["yAxisBuckets"] = o.YAxisBuckets
	}
	return toSerialize, nil
}

type NullableHeatmapSettings struct {
	value *HeatmapSettings
	isSet bool
}

func (v NullableHeatmapSettings) Get() *HeatmapSettings {
	return v.value
}

func (v *NullableHeatmapSettings) Set(val *HeatmapSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableHeatmapSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableHeatmapSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeatmapSettings(val *HeatmapSettings) *NullableHeatmapSettings {
	return &NullableHeatmapSettings{value: val, isSet: true}
}

func (v NullableHeatmapSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeatmapSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


