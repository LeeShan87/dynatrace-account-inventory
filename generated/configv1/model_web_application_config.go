/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the WebApplicationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebApplicationConfig{}

// WebApplicationConfig Configuration of a web application.
type WebApplicationConfig struct {
	// A list of conversion goals of the application.
	ConversionGoals []ConversionGoal `json:"conversionGoals,omitempty"`
	// Analize *X*% of user sessions.
	CostControlUserSessionPercentage float32 `json:"costControlUserSessionPercentage"`
	CustomActionApdexSettings Apdex `json:"customActionApdexSettings"`
	// Dynatrace entity ID of the web application.
	Identifier *string `json:"identifier,omitempty"`
	LoadActionApdexSettings Apdex `json:"loadActionApdexSettings"`
	// The key performance metric of load actions.
	LoadActionKeyPerformanceMetric string `json:"loadActionKeyPerformanceMetric"`
	// Java script agent meta data capture settings.
	MetaDataCaptureSettings []MetaDataCapturing `json:"metaDataCaptureSettings,omitempty"`
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	MonitoringSettings MonitoringSettings `json:"monitoringSettings"`
	// The name of the web application, displayed in the UI.
	Name string `json:"name"`
	// Real user monitoring enabled/disabled.
	RealUserMonitoringEnabled bool `json:"realUserMonitoringEnabled"`
	SessionReplayConfig *SessionReplaySetting `json:"sessionReplayConfig,omitempty"`
	// The type of the web application.
	Type *string `json:"type,omitempty"`
	// Url injection pattern for manual web application.
	UrlInjectionPattern *string `json:"urlInjectionPattern,omitempty"`
	// User action and session properties settings. Empty List means no change
	UserActionAndSessionProperties []UserActionAndSessionProperties `json:"userActionAndSessionProperties,omitempty"`
	UserActionNamingSettings *UserActionNamingSettings `json:"userActionNamingSettings,omitempty"`
	// User tags settings.
	UserTags []UserTag `json:"userTags,omitempty"`
	WaterfallSettings WaterfallSettings `json:"waterfallSettings"`
	XhrActionApdexSettings Apdex `json:"xhrActionApdexSettings"`
	// The key performance metric of XHR actions.
	XhrActionKeyPerformanceMetric string `json:"xhrActionKeyPerformanceMetric"`
}

// NewWebApplicationConfig instantiates a new WebApplicationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebApplicationConfig(costControlUserSessionPercentage float32, customActionApdexSettings Apdex, loadActionApdexSettings Apdex, loadActionKeyPerformanceMetric string, monitoringSettings MonitoringSettings, name string, realUserMonitoringEnabled bool, waterfallSettings WaterfallSettings, xhrActionApdexSettings Apdex, xhrActionKeyPerformanceMetric string) *WebApplicationConfig {
	this := WebApplicationConfig{}
	this.CostControlUserSessionPercentage = costControlUserSessionPercentage
	this.CustomActionApdexSettings = customActionApdexSettings
	this.LoadActionApdexSettings = loadActionApdexSettings
	this.LoadActionKeyPerformanceMetric = loadActionKeyPerformanceMetric
	this.MonitoringSettings = monitoringSettings
	this.Name = name
	this.RealUserMonitoringEnabled = realUserMonitoringEnabled
	this.WaterfallSettings = waterfallSettings
	this.XhrActionApdexSettings = xhrActionApdexSettings
	this.XhrActionKeyPerformanceMetric = xhrActionKeyPerformanceMetric
	return &this
}

// NewWebApplicationConfigWithDefaults instantiates a new WebApplicationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebApplicationConfigWithDefaults() *WebApplicationConfig {
	this := WebApplicationConfig{}
	return &this
}

// GetConversionGoals returns the ConversionGoals field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetConversionGoals() []ConversionGoal {
	if o == nil || IsNil(o.ConversionGoals) {
		var ret []ConversionGoal
		return ret
	}
	return o.ConversionGoals
}

// GetConversionGoalsOk returns a tuple with the ConversionGoals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetConversionGoalsOk() ([]ConversionGoal, bool) {
	if o == nil || IsNil(o.ConversionGoals) {
		return nil, false
	}
	return o.ConversionGoals, true
}

// HasConversionGoals returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasConversionGoals() bool {
	if o != nil && !IsNil(o.ConversionGoals) {
		return true
	}

	return false
}

// SetConversionGoals gets a reference to the given []ConversionGoal and assigns it to the ConversionGoals field.
func (o *WebApplicationConfig) SetConversionGoals(v []ConversionGoal) {
	o.ConversionGoals = v
}

// GetCostControlUserSessionPercentage returns the CostControlUserSessionPercentage field value
func (o *WebApplicationConfig) GetCostControlUserSessionPercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CostControlUserSessionPercentage
}

// GetCostControlUserSessionPercentageOk returns a tuple with the CostControlUserSessionPercentage field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetCostControlUserSessionPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CostControlUserSessionPercentage, true
}

// SetCostControlUserSessionPercentage sets field value
func (o *WebApplicationConfig) SetCostControlUserSessionPercentage(v float32) {
	o.CostControlUserSessionPercentage = v
}

// GetCustomActionApdexSettings returns the CustomActionApdexSettings field value
func (o *WebApplicationConfig) GetCustomActionApdexSettings() Apdex {
	if o == nil {
		var ret Apdex
		return ret
	}

	return o.CustomActionApdexSettings
}

// GetCustomActionApdexSettingsOk returns a tuple with the CustomActionApdexSettings field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetCustomActionApdexSettingsOk() (*Apdex, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomActionApdexSettings, true
}

// SetCustomActionApdexSettings sets field value
func (o *WebApplicationConfig) SetCustomActionApdexSettings(v Apdex) {
	o.CustomActionApdexSettings = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *WebApplicationConfig) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetLoadActionApdexSettings returns the LoadActionApdexSettings field value
func (o *WebApplicationConfig) GetLoadActionApdexSettings() Apdex {
	if o == nil {
		var ret Apdex
		return ret
	}

	return o.LoadActionApdexSettings
}

// GetLoadActionApdexSettingsOk returns a tuple with the LoadActionApdexSettings field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetLoadActionApdexSettingsOk() (*Apdex, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadActionApdexSettings, true
}

// SetLoadActionApdexSettings sets field value
func (o *WebApplicationConfig) SetLoadActionApdexSettings(v Apdex) {
	o.LoadActionApdexSettings = v
}

// GetLoadActionKeyPerformanceMetric returns the LoadActionKeyPerformanceMetric field value
func (o *WebApplicationConfig) GetLoadActionKeyPerformanceMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoadActionKeyPerformanceMetric
}

// GetLoadActionKeyPerformanceMetricOk returns a tuple with the LoadActionKeyPerformanceMetric field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetLoadActionKeyPerformanceMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadActionKeyPerformanceMetric, true
}

// SetLoadActionKeyPerformanceMetric sets field value
func (o *WebApplicationConfig) SetLoadActionKeyPerformanceMetric(v string) {
	o.LoadActionKeyPerformanceMetric = v
}

// GetMetaDataCaptureSettings returns the MetaDataCaptureSettings field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetMetaDataCaptureSettings() []MetaDataCapturing {
	if o == nil || IsNil(o.MetaDataCaptureSettings) {
		var ret []MetaDataCapturing
		return ret
	}
	return o.MetaDataCaptureSettings
}

// GetMetaDataCaptureSettingsOk returns a tuple with the MetaDataCaptureSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetMetaDataCaptureSettingsOk() ([]MetaDataCapturing, bool) {
	if o == nil || IsNil(o.MetaDataCaptureSettings) {
		return nil, false
	}
	return o.MetaDataCaptureSettings, true
}

// HasMetaDataCaptureSettings returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasMetaDataCaptureSettings() bool {
	if o != nil && !IsNil(o.MetaDataCaptureSettings) {
		return true
	}

	return false
}

// SetMetaDataCaptureSettings gets a reference to the given []MetaDataCapturing and assigns it to the MetaDataCaptureSettings field.
func (o *WebApplicationConfig) SetMetaDataCaptureSettings(v []MetaDataCapturing) {
	o.MetaDataCaptureSettings = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetMetadata() ConfigurationMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *WebApplicationConfig) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

// GetMonitoringSettings returns the MonitoringSettings field value
func (o *WebApplicationConfig) GetMonitoringSettings() MonitoringSettings {
	if o == nil {
		var ret MonitoringSettings
		return ret
	}

	return o.MonitoringSettings
}

// GetMonitoringSettingsOk returns a tuple with the MonitoringSettings field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetMonitoringSettingsOk() (*MonitoringSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonitoringSettings, true
}

// SetMonitoringSettings sets field value
func (o *WebApplicationConfig) SetMonitoringSettings(v MonitoringSettings) {
	o.MonitoringSettings = v
}

// GetName returns the Name field value
func (o *WebApplicationConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WebApplicationConfig) SetName(v string) {
	o.Name = v
}

// GetRealUserMonitoringEnabled returns the RealUserMonitoringEnabled field value
func (o *WebApplicationConfig) GetRealUserMonitoringEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RealUserMonitoringEnabled
}

// GetRealUserMonitoringEnabledOk returns a tuple with the RealUserMonitoringEnabled field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetRealUserMonitoringEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RealUserMonitoringEnabled, true
}

// SetRealUserMonitoringEnabled sets field value
func (o *WebApplicationConfig) SetRealUserMonitoringEnabled(v bool) {
	o.RealUserMonitoringEnabled = v
}

// GetSessionReplayConfig returns the SessionReplayConfig field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetSessionReplayConfig() SessionReplaySetting {
	if o == nil || IsNil(o.SessionReplayConfig) {
		var ret SessionReplaySetting
		return ret
	}
	return *o.SessionReplayConfig
}

// GetSessionReplayConfigOk returns a tuple with the SessionReplayConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetSessionReplayConfigOk() (*SessionReplaySetting, bool) {
	if o == nil || IsNil(o.SessionReplayConfig) {
		return nil, false
	}
	return o.SessionReplayConfig, true
}

// HasSessionReplayConfig returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasSessionReplayConfig() bool {
	if o != nil && !IsNil(o.SessionReplayConfig) {
		return true
	}

	return false
}

// SetSessionReplayConfig gets a reference to the given SessionReplaySetting and assigns it to the SessionReplayConfig field.
func (o *WebApplicationConfig) SetSessionReplayConfig(v SessionReplaySetting) {
	o.SessionReplayConfig = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WebApplicationConfig) SetType(v string) {
	o.Type = &v
}

// GetUrlInjectionPattern returns the UrlInjectionPattern field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetUrlInjectionPattern() string {
	if o == nil || IsNil(o.UrlInjectionPattern) {
		var ret string
		return ret
	}
	return *o.UrlInjectionPattern
}

// GetUrlInjectionPatternOk returns a tuple with the UrlInjectionPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetUrlInjectionPatternOk() (*string, bool) {
	if o == nil || IsNil(o.UrlInjectionPattern) {
		return nil, false
	}
	return o.UrlInjectionPattern, true
}

// HasUrlInjectionPattern returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasUrlInjectionPattern() bool {
	if o != nil && !IsNil(o.UrlInjectionPattern) {
		return true
	}

	return false
}

// SetUrlInjectionPattern gets a reference to the given string and assigns it to the UrlInjectionPattern field.
func (o *WebApplicationConfig) SetUrlInjectionPattern(v string) {
	o.UrlInjectionPattern = &v
}

// GetUserActionAndSessionProperties returns the UserActionAndSessionProperties field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetUserActionAndSessionProperties() []UserActionAndSessionProperties {
	if o == nil || IsNil(o.UserActionAndSessionProperties) {
		var ret []UserActionAndSessionProperties
		return ret
	}
	return o.UserActionAndSessionProperties
}

// GetUserActionAndSessionPropertiesOk returns a tuple with the UserActionAndSessionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetUserActionAndSessionPropertiesOk() ([]UserActionAndSessionProperties, bool) {
	if o == nil || IsNil(o.UserActionAndSessionProperties) {
		return nil, false
	}
	return o.UserActionAndSessionProperties, true
}

// HasUserActionAndSessionProperties returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasUserActionAndSessionProperties() bool {
	if o != nil && !IsNil(o.UserActionAndSessionProperties) {
		return true
	}

	return false
}

// SetUserActionAndSessionProperties gets a reference to the given []UserActionAndSessionProperties and assigns it to the UserActionAndSessionProperties field.
func (o *WebApplicationConfig) SetUserActionAndSessionProperties(v []UserActionAndSessionProperties) {
	o.UserActionAndSessionProperties = v
}

// GetUserActionNamingSettings returns the UserActionNamingSettings field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetUserActionNamingSettings() UserActionNamingSettings {
	if o == nil || IsNil(o.UserActionNamingSettings) {
		var ret UserActionNamingSettings
		return ret
	}
	return *o.UserActionNamingSettings
}

// GetUserActionNamingSettingsOk returns a tuple with the UserActionNamingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetUserActionNamingSettingsOk() (*UserActionNamingSettings, bool) {
	if o == nil || IsNil(o.UserActionNamingSettings) {
		return nil, false
	}
	return o.UserActionNamingSettings, true
}

// HasUserActionNamingSettings returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasUserActionNamingSettings() bool {
	if o != nil && !IsNil(o.UserActionNamingSettings) {
		return true
	}

	return false
}

// SetUserActionNamingSettings gets a reference to the given UserActionNamingSettings and assigns it to the UserActionNamingSettings field.
func (o *WebApplicationConfig) SetUserActionNamingSettings(v UserActionNamingSettings) {
	o.UserActionNamingSettings = &v
}

// GetUserTags returns the UserTags field value if set, zero value otherwise.
func (o *WebApplicationConfig) GetUserTags() []UserTag {
	if o == nil || IsNil(o.UserTags) {
		var ret []UserTag
		return ret
	}
	return o.UserTags
}

// GetUserTagsOk returns a tuple with the UserTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetUserTagsOk() ([]UserTag, bool) {
	if o == nil || IsNil(o.UserTags) {
		return nil, false
	}
	return o.UserTags, true
}

// HasUserTags returns a boolean if a field has been set.
func (o *WebApplicationConfig) HasUserTags() bool {
	if o != nil && !IsNil(o.UserTags) {
		return true
	}

	return false
}

// SetUserTags gets a reference to the given []UserTag and assigns it to the UserTags field.
func (o *WebApplicationConfig) SetUserTags(v []UserTag) {
	o.UserTags = v
}

// GetWaterfallSettings returns the WaterfallSettings field value
func (o *WebApplicationConfig) GetWaterfallSettings() WaterfallSettings {
	if o == nil {
		var ret WaterfallSettings
		return ret
	}

	return o.WaterfallSettings
}

// GetWaterfallSettingsOk returns a tuple with the WaterfallSettings field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetWaterfallSettingsOk() (*WaterfallSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WaterfallSettings, true
}

// SetWaterfallSettings sets field value
func (o *WebApplicationConfig) SetWaterfallSettings(v WaterfallSettings) {
	o.WaterfallSettings = v
}

// GetXhrActionApdexSettings returns the XhrActionApdexSettings field value
func (o *WebApplicationConfig) GetXhrActionApdexSettings() Apdex {
	if o == nil {
		var ret Apdex
		return ret
	}

	return o.XhrActionApdexSettings
}

// GetXhrActionApdexSettingsOk returns a tuple with the XhrActionApdexSettings field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetXhrActionApdexSettingsOk() (*Apdex, bool) {
	if o == nil {
		return nil, false
	}
	return &o.XhrActionApdexSettings, true
}

// SetXhrActionApdexSettings sets field value
func (o *WebApplicationConfig) SetXhrActionApdexSettings(v Apdex) {
	o.XhrActionApdexSettings = v
}

// GetXhrActionKeyPerformanceMetric returns the XhrActionKeyPerformanceMetric field value
func (o *WebApplicationConfig) GetXhrActionKeyPerformanceMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.XhrActionKeyPerformanceMetric
}

// GetXhrActionKeyPerformanceMetricOk returns a tuple with the XhrActionKeyPerformanceMetric field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfig) GetXhrActionKeyPerformanceMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.XhrActionKeyPerformanceMetric, true
}

// SetXhrActionKeyPerformanceMetric sets field value
func (o *WebApplicationConfig) SetXhrActionKeyPerformanceMetric(v string) {
	o.XhrActionKeyPerformanceMetric = v
}

func (o WebApplicationConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebApplicationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConversionGoals) {
		toSerialize["conversionGoals"] = o.ConversionGoals
	}
	toSerialize["costControlUserSessionPercentage"] = o.CostControlUserSessionPercentage
	toSerialize["customActionApdexSettings"] = o.CustomActionApdexSettings
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	toSerialize["loadActionApdexSettings"] = o.LoadActionApdexSettings
	toSerialize["loadActionKeyPerformanceMetric"] = o.LoadActionKeyPerformanceMetric
	if !IsNil(o.MetaDataCaptureSettings) {
		toSerialize["metaDataCaptureSettings"] = o.MetaDataCaptureSettings
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["monitoringSettings"] = o.MonitoringSettings
	toSerialize["name"] = o.Name
	toSerialize["realUserMonitoringEnabled"] = o.RealUserMonitoringEnabled
	if !IsNil(o.SessionReplayConfig) {
		toSerialize["sessionReplayConfig"] = o.SessionReplayConfig
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UrlInjectionPattern) {
		toSerialize["urlInjectionPattern"] = o.UrlInjectionPattern
	}
	if !IsNil(o.UserActionAndSessionProperties) {
		toSerialize["userActionAndSessionProperties"] = o.UserActionAndSessionProperties
	}
	if !IsNil(o.UserActionNamingSettings) {
		toSerialize["userActionNamingSettings"] = o.UserActionNamingSettings
	}
	if !IsNil(o.UserTags) {
		toSerialize["userTags"] = o.UserTags
	}
	toSerialize["waterfallSettings"] = o.WaterfallSettings
	toSerialize["xhrActionApdexSettings"] = o.XhrActionApdexSettings
	toSerialize["xhrActionKeyPerformanceMetric"] = o.XhrActionKeyPerformanceMetric
	return toSerialize, nil
}

type NullableWebApplicationConfig struct {
	value *WebApplicationConfig
	isSet bool
}

func (v NullableWebApplicationConfig) Get() *WebApplicationConfig {
	return v.value
}

func (v *NullableWebApplicationConfig) Set(val *WebApplicationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableWebApplicationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableWebApplicationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebApplicationConfig(val *WebApplicationConfig) *NullableWebApplicationConfig {
	return &NullableWebApplicationConfig{value: val, isSet: true}
}

func (v NullableWebApplicationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebApplicationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


