/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ResourceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceType{}

// ResourceType A rule for the resource type.
type ResourceType struct {
	// The primary type of the resource.
	PrimaryResourceType string `json:"primaryResourceType"`
	// The regular expression to detect the resource.
	RegularExpression string `json:"regularExpression"`
	// The secondary type of the resource.
	SecondaryResourceType *string `json:"secondaryResourceType,omitempty"`
}

// NewResourceType instantiates a new ResourceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceType(primaryResourceType string, regularExpression string) *ResourceType {
	this := ResourceType{}
	this.PrimaryResourceType = primaryResourceType
	this.RegularExpression = regularExpression
	return &this
}

// NewResourceTypeWithDefaults instantiates a new ResourceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeWithDefaults() *ResourceType {
	this := ResourceType{}
	return &this
}

// GetPrimaryResourceType returns the PrimaryResourceType field value
func (o *ResourceType) GetPrimaryResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrimaryResourceType
}

// GetPrimaryResourceTypeOk returns a tuple with the PrimaryResourceType field value
// and a boolean to check if the value has been set.
func (o *ResourceType) GetPrimaryResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryResourceType, true
}

// SetPrimaryResourceType sets field value
func (o *ResourceType) SetPrimaryResourceType(v string) {
	o.PrimaryResourceType = v
}

// GetRegularExpression returns the RegularExpression field value
func (o *ResourceType) GetRegularExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegularExpression
}

// GetRegularExpressionOk returns a tuple with the RegularExpression field value
// and a boolean to check if the value has been set.
func (o *ResourceType) GetRegularExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegularExpression, true
}

// SetRegularExpression sets field value
func (o *ResourceType) SetRegularExpression(v string) {
	o.RegularExpression = v
}

// GetSecondaryResourceType returns the SecondaryResourceType field value if set, zero value otherwise.
func (o *ResourceType) GetSecondaryResourceType() string {
	if o == nil || IsNil(o.SecondaryResourceType) {
		var ret string
		return ret
	}
	return *o.SecondaryResourceType
}

// GetSecondaryResourceTypeOk returns a tuple with the SecondaryResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetSecondaryResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryResourceType) {
		return nil, false
	}
	return o.SecondaryResourceType, true
}

// HasSecondaryResourceType returns a boolean if a field has been set.
func (o *ResourceType) HasSecondaryResourceType() bool {
	if o != nil && !IsNil(o.SecondaryResourceType) {
		return true
	}

	return false
}

// SetSecondaryResourceType gets a reference to the given string and assigns it to the SecondaryResourceType field.
func (o *ResourceType) SetSecondaryResourceType(v string) {
	o.SecondaryResourceType = &v
}

func (o ResourceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["primaryResourceType"] = o.PrimaryResourceType
	toSerialize["regularExpression"] = o.RegularExpression
	if !IsNil(o.SecondaryResourceType) {
		toSerialize["secondaryResourceType"] = o.SecondaryResourceType
	}
	return toSerialize, nil
}

type NullableResourceType struct {
	value *ResourceType
	isSet bool
}

func (v NullableResourceType) Get() *ResourceType {
	return v.value
}

func (v *NullableResourceType) Set(val *ResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceType(val *ResourceType) *NullableResourceType {
	return &NullableResourceType{value: val, isSet: true}
}

func (v NullableResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


