/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SessionReplayMaskingSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionReplayMaskingSetting{}

// SessionReplayMaskingSetting Configuration of the Session Replay masking.
type SessionReplayMaskingSetting struct {
	// The type of the masking:   * `MASK_ALL`: Mask all texts, user input, and images.  * `MASK_USER_INPUT`: Mask all data that is provided through user input  * `ALLOW_LIST`: Only elements, specified in **maskingRules** are shown, everything else is masked.  * `BLOCK_LIST`: Elements, specified in **maskingRules** are masked, everything else is shown.
	MaskingPreset string `json:"maskingPreset"`
	// A list of masking rules.
	MaskingRules []MaskingRule `json:"maskingRules,omitempty"`
}

// NewSessionReplayMaskingSetting instantiates a new SessionReplayMaskingSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionReplayMaskingSetting(maskingPreset string) *SessionReplayMaskingSetting {
	this := SessionReplayMaskingSetting{}
	this.MaskingPreset = maskingPreset
	return &this
}

// NewSessionReplayMaskingSettingWithDefaults instantiates a new SessionReplayMaskingSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionReplayMaskingSettingWithDefaults() *SessionReplayMaskingSetting {
	this := SessionReplayMaskingSetting{}
	return &this
}

// GetMaskingPreset returns the MaskingPreset field value
func (o *SessionReplayMaskingSetting) GetMaskingPreset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaskingPreset
}

// GetMaskingPresetOk returns a tuple with the MaskingPreset field value
// and a boolean to check if the value has been set.
func (o *SessionReplayMaskingSetting) GetMaskingPresetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaskingPreset, true
}

// SetMaskingPreset sets field value
func (o *SessionReplayMaskingSetting) SetMaskingPreset(v string) {
	o.MaskingPreset = v
}

// GetMaskingRules returns the MaskingRules field value if set, zero value otherwise.
func (o *SessionReplayMaskingSetting) GetMaskingRules() []MaskingRule {
	if o == nil || IsNil(o.MaskingRules) {
		var ret []MaskingRule
		return ret
	}
	return o.MaskingRules
}

// GetMaskingRulesOk returns a tuple with the MaskingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionReplayMaskingSetting) GetMaskingRulesOk() ([]MaskingRule, bool) {
	if o == nil || IsNil(o.MaskingRules) {
		return nil, false
	}
	return o.MaskingRules, true
}

// HasMaskingRules returns a boolean if a field has been set.
func (o *SessionReplayMaskingSetting) HasMaskingRules() bool {
	if o != nil && !IsNil(o.MaskingRules) {
		return true
	}

	return false
}

// SetMaskingRules gets a reference to the given []MaskingRule and assigns it to the MaskingRules field.
func (o *SessionReplayMaskingSetting) SetMaskingRules(v []MaskingRule) {
	o.MaskingRules = v
}

func (o SessionReplayMaskingSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionReplayMaskingSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["maskingPreset"] = o.MaskingPreset
	if !IsNil(o.MaskingRules) {
		toSerialize["maskingRules"] = o.MaskingRules
	}
	return toSerialize, nil
}

type NullableSessionReplayMaskingSetting struct {
	value *SessionReplayMaskingSetting
	isSet bool
}

func (v NullableSessionReplayMaskingSetting) Get() *SessionReplayMaskingSetting {
	return v.value
}

func (v *NullableSessionReplayMaskingSetting) Set(val *SessionReplayMaskingSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionReplayMaskingSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionReplayMaskingSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionReplayMaskingSetting(val *SessionReplayMaskingSetting) *NullableSessionReplayMaskingSetting {
	return &NullableSessionReplayMaskingSetting{value: val, isSet: true}
}

func (v NullableSessionReplayMaskingSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionReplayMaskingSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


