/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the DataExplorerQuerySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataExplorerQuerySettings{}

// DataExplorerQuerySettings Configuration for the queries
type DataExplorerQuerySettings struct {
	// The fold aggregation
	FoldAggregation *string `json:"foldAggregation,omitempty"`
	// The fold transformation
	FoldTransformation *string `json:"foldTransformation,omitempty"`
	// The resolution
	Resolution *string `json:"resolution,omitempty"`
}

// NewDataExplorerQuerySettings instantiates a new DataExplorerQuerySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataExplorerQuerySettings() *DataExplorerQuerySettings {
	this := DataExplorerQuerySettings{}
	return &this
}

// NewDataExplorerQuerySettingsWithDefaults instantiates a new DataExplorerQuerySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataExplorerQuerySettingsWithDefaults() *DataExplorerQuerySettings {
	this := DataExplorerQuerySettings{}
	return &this
}

// GetFoldAggregation returns the FoldAggregation field value if set, zero value otherwise.
func (o *DataExplorerQuerySettings) GetFoldAggregation() string {
	if o == nil || IsNil(o.FoldAggregation) {
		var ret string
		return ret
	}
	return *o.FoldAggregation
}

// GetFoldAggregationOk returns a tuple with the FoldAggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuerySettings) GetFoldAggregationOk() (*string, bool) {
	if o == nil || IsNil(o.FoldAggregation) {
		return nil, false
	}
	return o.FoldAggregation, true
}

// HasFoldAggregation returns a boolean if a field has been set.
func (o *DataExplorerQuerySettings) HasFoldAggregation() bool {
	if o != nil && !IsNil(o.FoldAggregation) {
		return true
	}

	return false
}

// SetFoldAggregation gets a reference to the given string and assigns it to the FoldAggregation field.
func (o *DataExplorerQuerySettings) SetFoldAggregation(v string) {
	o.FoldAggregation = &v
}

// GetFoldTransformation returns the FoldTransformation field value if set, zero value otherwise.
func (o *DataExplorerQuerySettings) GetFoldTransformation() string {
	if o == nil || IsNil(o.FoldTransformation) {
		var ret string
		return ret
	}
	return *o.FoldTransformation
}

// GetFoldTransformationOk returns a tuple with the FoldTransformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuerySettings) GetFoldTransformationOk() (*string, bool) {
	if o == nil || IsNil(o.FoldTransformation) {
		return nil, false
	}
	return o.FoldTransformation, true
}

// HasFoldTransformation returns a boolean if a field has been set.
func (o *DataExplorerQuerySettings) HasFoldTransformation() bool {
	if o != nil && !IsNil(o.FoldTransformation) {
		return true
	}

	return false
}

// SetFoldTransformation gets a reference to the given string and assigns it to the FoldTransformation field.
func (o *DataExplorerQuerySettings) SetFoldTransformation(v string) {
	o.FoldTransformation = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *DataExplorerQuerySettings) GetResolution() string {
	if o == nil || IsNil(o.Resolution) {
		var ret string
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerQuerySettings) GetResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.Resolution) {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *DataExplorerQuerySettings) HasResolution() bool {
	if o != nil && !IsNil(o.Resolution) {
		return true
	}

	return false
}

// SetResolution gets a reference to the given string and assigns it to the Resolution field.
func (o *DataExplorerQuerySettings) SetResolution(v string) {
	o.Resolution = &v
}

func (o DataExplorerQuerySettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataExplorerQuerySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FoldAggregation) {
		toSerialize["foldAggregation"] = o.FoldAggregation
	}
	if !IsNil(o.FoldTransformation) {
		toSerialize["foldTransformation"] = o.FoldTransformation
	}
	if !IsNil(o.Resolution) {
		toSerialize["resolution"] = o.Resolution
	}
	return toSerialize, nil
}

type NullableDataExplorerQuerySettings struct {
	value *DataExplorerQuerySettings
	isSet bool
}

func (v NullableDataExplorerQuerySettings) Get() *DataExplorerQuerySettings {
	return v.value
}

func (v *NullableDataExplorerQuerySettings) Set(val *DataExplorerQuerySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDataExplorerQuerySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDataExplorerQuerySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataExplorerQuerySettings(val *DataExplorerQuerySettings) *NullableDataExplorerQuerySettings {
	return &NullableDataExplorerQuerySettings{value: val, isSet: true}
}

func (v NullableDataExplorerQuerySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataExplorerQuerySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


