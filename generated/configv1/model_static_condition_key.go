/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the StaticConditionKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StaticConditionKey{}

// StaticConditionKey Key for attributes without dynamic key. Some fields are inherited from the parent `ConditionKey` model.
type StaticConditionKey struct {
}

// NewStaticConditionKey instantiates a new StaticConditionKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticConditionKey(attribute string) *StaticConditionKey {
	this := StaticConditionKey{}
	this.Attribute = attribute
	return &this
}

// NewStaticConditionKeyWithDefaults instantiates a new StaticConditionKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticConditionKeyWithDefaults() *StaticConditionKey {
	this := StaticConditionKey{}
	return &this
}

func (o StaticConditionKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StaticConditionKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableStaticConditionKey struct {
	value *StaticConditionKey
	isSet bool
}

func (v NullableStaticConditionKey) Get() *StaticConditionKey {
	return v.value
}

func (v *NullableStaticConditionKey) Set(val *StaticConditionKey) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticConditionKey) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticConditionKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticConditionKey(val *StaticConditionKey) *NullableStaticConditionKey {
	return &NullableStaticConditionKey{value: val, isSet: true}
}

func (v NullableStaticConditionKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticConditionKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


