/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the WebApplicationConfigBrowserRestrictionSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebApplicationConfigBrowserRestrictionSettings{}

// WebApplicationConfigBrowserRestrictionSettings Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode.
type WebApplicationConfigBrowserRestrictionSettings struct {
	// A list of browser restrictions.
	BrowserRestrictions []WebApplicationConfigBrowserRestriction `json:"browserRestrictions,omitempty"`
	// The mode of the list of browser restrictions.
	Mode string `json:"mode"`
}

// NewWebApplicationConfigBrowserRestrictionSettings instantiates a new WebApplicationConfigBrowserRestrictionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebApplicationConfigBrowserRestrictionSettings(mode string) *WebApplicationConfigBrowserRestrictionSettings {
	this := WebApplicationConfigBrowserRestrictionSettings{}
	this.Mode = mode
	return &this
}

// NewWebApplicationConfigBrowserRestrictionSettingsWithDefaults instantiates a new WebApplicationConfigBrowserRestrictionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebApplicationConfigBrowserRestrictionSettingsWithDefaults() *WebApplicationConfigBrowserRestrictionSettings {
	this := WebApplicationConfigBrowserRestrictionSettings{}
	return &this
}

// GetBrowserRestrictions returns the BrowserRestrictions field value if set, zero value otherwise.
func (o *WebApplicationConfigBrowserRestrictionSettings) GetBrowserRestrictions() []WebApplicationConfigBrowserRestriction {
	if o == nil || IsNil(o.BrowserRestrictions) {
		var ret []WebApplicationConfigBrowserRestriction
		return ret
	}
	return o.BrowserRestrictions
}

// GetBrowserRestrictionsOk returns a tuple with the BrowserRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfigBrowserRestrictionSettings) GetBrowserRestrictionsOk() ([]WebApplicationConfigBrowserRestriction, bool) {
	if o == nil || IsNil(o.BrowserRestrictions) {
		return nil, false
	}
	return o.BrowserRestrictions, true
}

// HasBrowserRestrictions returns a boolean if a field has been set.
func (o *WebApplicationConfigBrowserRestrictionSettings) HasBrowserRestrictions() bool {
	if o != nil && !IsNil(o.BrowserRestrictions) {
		return true
	}

	return false
}

// SetBrowserRestrictions gets a reference to the given []WebApplicationConfigBrowserRestriction and assigns it to the BrowserRestrictions field.
func (o *WebApplicationConfigBrowserRestrictionSettings) SetBrowserRestrictions(v []WebApplicationConfigBrowserRestriction) {
	o.BrowserRestrictions = v
}

// GetMode returns the Mode field value
func (o *WebApplicationConfigBrowserRestrictionSettings) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfigBrowserRestrictionSettings) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *WebApplicationConfigBrowserRestrictionSettings) SetMode(v string) {
	o.Mode = v
}

func (o WebApplicationConfigBrowserRestrictionSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebApplicationConfigBrowserRestrictionSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrowserRestrictions) {
		toSerialize["browserRestrictions"] = o.BrowserRestrictions
	}
	toSerialize["mode"] = o.Mode
	return toSerialize, nil
}

type NullableWebApplicationConfigBrowserRestrictionSettings struct {
	value *WebApplicationConfigBrowserRestrictionSettings
	isSet bool
}

func (v NullableWebApplicationConfigBrowserRestrictionSettings) Get() *WebApplicationConfigBrowserRestrictionSettings {
	return v.value
}

func (v *NullableWebApplicationConfigBrowserRestrictionSettings) Set(val *WebApplicationConfigBrowserRestrictionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableWebApplicationConfigBrowserRestrictionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableWebApplicationConfigBrowserRestrictionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebApplicationConfigBrowserRestrictionSettings(val *WebApplicationConfigBrowserRestrictionSettings) *NullableWebApplicationConfigBrowserRestrictionSettings {
	return &NullableWebApplicationConfigBrowserRestrictionSettings{value: val, isSet: true}
}

func (v NullableWebApplicationConfigBrowserRestrictionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebApplicationConfigBrowserRestrictionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


