/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the MethodReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MethodReference{}

// MethodReference Configuration of a method to be captured.
type MethodReference struct {
	// The list of argument types.
	ArgumentTypes []string `json:"argumentTypes"`
	// The class name where the method to capture resides.    Either this or the **fileName** must be set.
	ClassName *string `json:"className,omitempty"`
	// The file name where the method to capture resides.    Either this or **className** must be set.
	FileName *string `json:"fileName,omitempty"`
	// The operator of the comparison.    If not set, `EQUALS` is used.
	FileNameMatcher *string `json:"fileNameMatcher,omitempty"`
	// The name of the method to capture.
	MethodName string `json:"methodName"`
	// The modifiers of the method to capture.
	Modifiers []string `json:"modifiers"`
	// The return type.
	ReturnType string `json:"returnType"`
	// The visibility of the method to capture.
	Visibility string `json:"visibility"`
}

// NewMethodReference instantiates a new MethodReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMethodReference(argumentTypes []string, methodName string, modifiers []string, returnType string, visibility string) *MethodReference {
	this := MethodReference{}
	this.ArgumentTypes = argumentTypes
	this.MethodName = methodName
	this.Modifiers = modifiers
	this.ReturnType = returnType
	this.Visibility = visibility
	return &this
}

// NewMethodReferenceWithDefaults instantiates a new MethodReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMethodReferenceWithDefaults() *MethodReference {
	this := MethodReference{}
	return &this
}

// GetArgumentTypes returns the ArgumentTypes field value
func (o *MethodReference) GetArgumentTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ArgumentTypes
}

// GetArgumentTypesOk returns a tuple with the ArgumentTypes field value
// and a boolean to check if the value has been set.
func (o *MethodReference) GetArgumentTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArgumentTypes, true
}

// SetArgumentTypes sets field value
func (o *MethodReference) SetArgumentTypes(v []string) {
	o.ArgumentTypes = v
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *MethodReference) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodReference) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *MethodReference) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *MethodReference) SetClassName(v string) {
	o.ClassName = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *MethodReference) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodReference) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *MethodReference) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *MethodReference) SetFileName(v string) {
	o.FileName = &v
}

// GetFileNameMatcher returns the FileNameMatcher field value if set, zero value otherwise.
func (o *MethodReference) GetFileNameMatcher() string {
	if o == nil || IsNil(o.FileNameMatcher) {
		var ret string
		return ret
	}
	return *o.FileNameMatcher
}

// GetFileNameMatcherOk returns a tuple with the FileNameMatcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodReference) GetFileNameMatcherOk() (*string, bool) {
	if o == nil || IsNil(o.FileNameMatcher) {
		return nil, false
	}
	return o.FileNameMatcher, true
}

// HasFileNameMatcher returns a boolean if a field has been set.
func (o *MethodReference) HasFileNameMatcher() bool {
	if o != nil && !IsNil(o.FileNameMatcher) {
		return true
	}

	return false
}

// SetFileNameMatcher gets a reference to the given string and assigns it to the FileNameMatcher field.
func (o *MethodReference) SetFileNameMatcher(v string) {
	o.FileNameMatcher = &v
}

// GetMethodName returns the MethodName field value
func (o *MethodReference) GetMethodName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MethodName
}

// GetMethodNameOk returns a tuple with the MethodName field value
// and a boolean to check if the value has been set.
func (o *MethodReference) GetMethodNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MethodName, true
}

// SetMethodName sets field value
func (o *MethodReference) SetMethodName(v string) {
	o.MethodName = v
}

// GetModifiers returns the Modifiers field value
func (o *MethodReference) GetModifiers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Modifiers
}

// GetModifiersOk returns a tuple with the Modifiers field value
// and a boolean to check if the value has been set.
func (o *MethodReference) GetModifiersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Modifiers, true
}

// SetModifiers sets field value
func (o *MethodReference) SetModifiers(v []string) {
	o.Modifiers = v
}

// GetReturnType returns the ReturnType field value
func (o *MethodReference) GetReturnType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReturnType
}

// GetReturnTypeOk returns a tuple with the ReturnType field value
// and a boolean to check if the value has been set.
func (o *MethodReference) GetReturnTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReturnType, true
}

// SetReturnType sets field value
func (o *MethodReference) SetReturnType(v string) {
	o.ReturnType = v
}

// GetVisibility returns the Visibility field value
func (o *MethodReference) GetVisibility() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *MethodReference) GetVisibilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *MethodReference) SetVisibility(v string) {
	o.Visibility = v
}

func (o MethodReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MethodReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["argumentTypes"] = o.ArgumentTypes
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FileNameMatcher) {
		toSerialize["fileNameMatcher"] = o.FileNameMatcher
	}
	toSerialize["methodName"] = o.MethodName
	toSerialize["modifiers"] = o.Modifiers
	toSerialize["returnType"] = o.ReturnType
	toSerialize["visibility"] = o.Visibility
	return toSerialize, nil
}

type NullableMethodReference struct {
	value *MethodReference
	isSet bool
}

func (v NullableMethodReference) Get() *MethodReference {
	return v.value
}

func (v *NullableMethodReference) Set(val *MethodReference) {
	v.value = val
	v.isSet = true
}

func (v NullableMethodReference) IsSet() bool {
	return v.isSet
}

func (v *NullableMethodReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethodReference(val *MethodReference) *NullableMethodReference {
	return &NullableMethodReference{value: val, isSet: true}
}

func (v NullableMethodReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethodReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


