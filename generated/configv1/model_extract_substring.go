/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ExtractSubstring type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtractSubstring{}

// ExtractSubstring Preprocess by extracting a substring from the original value.
type ExtractSubstring struct {
	// The delimiter string.
	Delimiter string `json:"delimiter"`
	// The end-delimiter string.    Required if the **position** value is `BETWEEN`. Otherwise not allowed.
	EndDelimiter *string `json:"endDelimiter,omitempty"`
	// The position of the extracted string relative to delimiters.
	Position string `json:"position"`
}

// NewExtractSubstring instantiates a new ExtractSubstring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtractSubstring(delimiter string, position string) *ExtractSubstring {
	this := ExtractSubstring{}
	this.Delimiter = delimiter
	this.Position = position
	return &this
}

// NewExtractSubstringWithDefaults instantiates a new ExtractSubstring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtractSubstringWithDefaults() *ExtractSubstring {
	this := ExtractSubstring{}
	return &this
}

// GetDelimiter returns the Delimiter field value
func (o *ExtractSubstring) GetDelimiter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value
// and a boolean to check if the value has been set.
func (o *ExtractSubstring) GetDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delimiter, true
}

// SetDelimiter sets field value
func (o *ExtractSubstring) SetDelimiter(v string) {
	o.Delimiter = v
}

// GetEndDelimiter returns the EndDelimiter field value if set, zero value otherwise.
func (o *ExtractSubstring) GetEndDelimiter() string {
	if o == nil || IsNil(o.EndDelimiter) {
		var ret string
		return ret
	}
	return *o.EndDelimiter
}

// GetEndDelimiterOk returns a tuple with the EndDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractSubstring) GetEndDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.EndDelimiter) {
		return nil, false
	}
	return o.EndDelimiter, true
}

// HasEndDelimiter returns a boolean if a field has been set.
func (o *ExtractSubstring) HasEndDelimiter() bool {
	if o != nil && !IsNil(o.EndDelimiter) {
		return true
	}

	return false
}

// SetEndDelimiter gets a reference to the given string and assigns it to the EndDelimiter field.
func (o *ExtractSubstring) SetEndDelimiter(v string) {
	o.EndDelimiter = &v
}

// GetPosition returns the Position field value
func (o *ExtractSubstring) GetPosition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *ExtractSubstring) GetPositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *ExtractSubstring) SetPosition(v string) {
	o.Position = v
}

func (o ExtractSubstring) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtractSubstring) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delimiter"] = o.Delimiter
	if !IsNil(o.EndDelimiter) {
		toSerialize["endDelimiter"] = o.EndDelimiter
	}
	toSerialize["position"] = o.Position
	return toSerialize, nil
}

type NullableExtractSubstring struct {
	value *ExtractSubstring
	isSet bool
}

func (v NullableExtractSubstring) Get() *ExtractSubstring {
	return v.value
}

func (v *NullableExtractSubstring) Set(val *ExtractSubstring) {
	v.value = val
	v.isSet = true
}

func (v NullableExtractSubstring) IsSet() bool {
	return v.isSet
}

func (v *NullableExtractSubstring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtractSubstring(val *ExtractSubstring) *NullableExtractSubstring {
	return &NullableExtractSubstring{value: val, isSet: true}
}

func (v NullableExtractSubstring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtractSubstring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


