/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the JsonColumnDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonColumnDefinition{}

// JsonColumnDefinition Definition of a JSON column.
type JsonColumnDefinition struct {
}

// NewJsonColumnDefinition instantiates a new JsonColumnDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonColumnDefinition(name string, type_ string) *JsonColumnDefinition {
	this := JsonColumnDefinition{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewJsonColumnDefinitionWithDefaults instantiates a new JsonColumnDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonColumnDefinitionWithDefaults() *JsonColumnDefinition {
	this := JsonColumnDefinition{}
	return &this
}

func (o JsonColumnDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonColumnDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableJsonColumnDefinition struct {
	value *JsonColumnDefinition
	isSet bool
}

func (v NullableJsonColumnDefinition) Get() *JsonColumnDefinition {
	return v.value
}

func (v *NullableJsonColumnDefinition) Set(val *JsonColumnDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonColumnDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonColumnDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonColumnDefinition(val *JsonColumnDefinition) *NullableJsonColumnDefinition {
	return &NullableJsonColumnDefinition{value: val, isSet: true}
}

func (v NullableJsonColumnDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonColumnDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


