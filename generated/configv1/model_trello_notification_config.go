/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the TrelloNotificationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrelloNotificationConfig{}

// TrelloNotificationConfig Configuration of the Trello notification.
type TrelloNotificationConfig struct {
	// The application key for the Trello account.
	ApplicationKey string `json:"applicationKey"`
	// The application token for the Trello account.
	AuthorizationToken *string `json:"authorizationToken,omitempty"`
	// The Trello board to which the card should be assigned.
	BoardId string `json:"boardId"`
	// The description of the Trello card.    You can use same placeholders as in card text.
	Description string `json:"description"`
	// The Trello list to which the card should be assigned.
	ListId string `json:"listId"`
	// The Trello list to which the card of the resolved problem should be assigned.
	ResolvedListId string `json:"resolvedListId"`
	// The text of the generated Trello card.   You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://dt-url.net/1yk3kkq) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://dt-url.net/klg3k4q) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://dt-url.net/f1i3k5b) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Text string `json:"text"`
}

// NewTrelloNotificationConfig instantiates a new TrelloNotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrelloNotificationConfig(applicationKey string, boardId string, description string, listId string, resolvedListId string, text string, active bool, alertingProfile string, name string, type_ string) *TrelloNotificationConfig {
	this := TrelloNotificationConfig{}
	this.Active = active
	this.AlertingProfile = alertingProfile
	this.Name = name
	this.Type = type_
	this.ApplicationKey = applicationKey
	this.BoardId = boardId
	this.Description = description
	this.ListId = listId
	this.ResolvedListId = resolvedListId
	this.Text = text
	return &this
}

// NewTrelloNotificationConfigWithDefaults instantiates a new TrelloNotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrelloNotificationConfigWithDefaults() *TrelloNotificationConfig {
	this := TrelloNotificationConfig{}
	return &this
}

// GetApplicationKey returns the ApplicationKey field value
func (o *TrelloNotificationConfig) GetApplicationKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationKey
}

// GetApplicationKeyOk returns a tuple with the ApplicationKey field value
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfig) GetApplicationKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationKey, true
}

// SetApplicationKey sets field value
func (o *TrelloNotificationConfig) SetApplicationKey(v string) {
	o.ApplicationKey = v
}

// GetAuthorizationToken returns the AuthorizationToken field value if set, zero value otherwise.
func (o *TrelloNotificationConfig) GetAuthorizationToken() string {
	if o == nil || IsNil(o.AuthorizationToken) {
		var ret string
		return ret
	}
	return *o.AuthorizationToken
}

// GetAuthorizationTokenOk returns a tuple with the AuthorizationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfig) GetAuthorizationTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationToken) {
		return nil, false
	}
	return o.AuthorizationToken, true
}

// HasAuthorizationToken returns a boolean if a field has been set.
func (o *TrelloNotificationConfig) HasAuthorizationToken() bool {
	if o != nil && !IsNil(o.AuthorizationToken) {
		return true
	}

	return false
}

// SetAuthorizationToken gets a reference to the given string and assigns it to the AuthorizationToken field.
func (o *TrelloNotificationConfig) SetAuthorizationToken(v string) {
	o.AuthorizationToken = &v
}

// GetBoardId returns the BoardId field value
func (o *TrelloNotificationConfig) GetBoardId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BoardId
}

// GetBoardIdOk returns a tuple with the BoardId field value
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfig) GetBoardIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BoardId, true
}

// SetBoardId sets field value
func (o *TrelloNotificationConfig) SetBoardId(v string) {
	o.BoardId = v
}

// GetDescription returns the Description field value
func (o *TrelloNotificationConfig) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfig) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TrelloNotificationConfig) SetDescription(v string) {
	o.Description = v
}

// GetListId returns the ListId field value
func (o *TrelloNotificationConfig) GetListId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListId
}

// GetListIdOk returns a tuple with the ListId field value
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfig) GetListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListId, true
}

// SetListId sets field value
func (o *TrelloNotificationConfig) SetListId(v string) {
	o.ListId = v
}

// GetResolvedListId returns the ResolvedListId field value
func (o *TrelloNotificationConfig) GetResolvedListId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResolvedListId
}

// GetResolvedListIdOk returns a tuple with the ResolvedListId field value
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfig) GetResolvedListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResolvedListId, true
}

// SetResolvedListId sets field value
func (o *TrelloNotificationConfig) SetResolvedListId(v string) {
	o.ResolvedListId = v
}

// GetText returns the Text field value
func (o *TrelloNotificationConfig) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfig) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TrelloNotificationConfig) SetText(v string) {
	o.Text = v
}

func (o TrelloNotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrelloNotificationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicationKey"] = o.ApplicationKey
	if !IsNil(o.AuthorizationToken) {
		toSerialize["authorizationToken"] = o.AuthorizationToken
	}
	toSerialize["boardId"] = o.BoardId
	toSerialize["description"] = o.Description
	toSerialize["listId"] = o.ListId
	toSerialize["resolvedListId"] = o.ResolvedListId
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

type NullableTrelloNotificationConfig struct {
	value *TrelloNotificationConfig
	isSet bool
}

func (v NullableTrelloNotificationConfig) Get() *TrelloNotificationConfig {
	return v.value
}

func (v *NullableTrelloNotificationConfig) Set(val *TrelloNotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTrelloNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTrelloNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrelloNotificationConfig(val *TrelloNotificationConfig) *NullableTrelloNotificationConfig {
	return &NullableTrelloNotificationConfig{value: val, isSet: true}
}

func (v NullableTrelloNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrelloNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


