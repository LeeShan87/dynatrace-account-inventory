/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SymbolFileStorageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SymbolFileStorageInfo{}

// SymbolFileStorageInfo struct for SymbolFileStorageInfo
type SymbolFileStorageInfo struct {
	// The available storage space for symbol files, in KB. Has the value of `-1` for an unlimited quota.
	AvailableStorage *int64 `json:"availableStorage,omitempty"`
	FileCount *int64 `json:"fileCount,omitempty"`
	// The total storage quota for symbol files, in KB. Has the value of `-1` for an unlimited quota.
	StorageQuota *int64 `json:"storageQuota,omitempty"`
	// The size of the used storage by symbol files, in KB.
	UsedStorage *int64 `json:"usedStorage,omitempty"`
}

// NewSymbolFileStorageInfo instantiates a new SymbolFileStorageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolFileStorageInfo() *SymbolFileStorageInfo {
	this := SymbolFileStorageInfo{}
	return &this
}

// NewSymbolFileStorageInfoWithDefaults instantiates a new SymbolFileStorageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolFileStorageInfoWithDefaults() *SymbolFileStorageInfo {
	this := SymbolFileStorageInfo{}
	return &this
}

// GetAvailableStorage returns the AvailableStorage field value if set, zero value otherwise.
func (o *SymbolFileStorageInfo) GetAvailableStorage() int64 {
	if o == nil || IsNil(o.AvailableStorage) {
		var ret int64
		return ret
	}
	return *o.AvailableStorage
}

// GetAvailableStorageOk returns a tuple with the AvailableStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFileStorageInfo) GetAvailableStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.AvailableStorage) {
		return nil, false
	}
	return o.AvailableStorage, true
}

// HasAvailableStorage returns a boolean if a field has been set.
func (o *SymbolFileStorageInfo) HasAvailableStorage() bool {
	if o != nil && !IsNil(o.AvailableStorage) {
		return true
	}

	return false
}

// SetAvailableStorage gets a reference to the given int64 and assigns it to the AvailableStorage field.
func (o *SymbolFileStorageInfo) SetAvailableStorage(v int64) {
	o.AvailableStorage = &v
}

// GetFileCount returns the FileCount field value if set, zero value otherwise.
func (o *SymbolFileStorageInfo) GetFileCount() int64 {
	if o == nil || IsNil(o.FileCount) {
		var ret int64
		return ret
	}
	return *o.FileCount
}

// GetFileCountOk returns a tuple with the FileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFileStorageInfo) GetFileCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FileCount) {
		return nil, false
	}
	return o.FileCount, true
}

// HasFileCount returns a boolean if a field has been set.
func (o *SymbolFileStorageInfo) HasFileCount() bool {
	if o != nil && !IsNil(o.FileCount) {
		return true
	}

	return false
}

// SetFileCount gets a reference to the given int64 and assigns it to the FileCount field.
func (o *SymbolFileStorageInfo) SetFileCount(v int64) {
	o.FileCount = &v
}

// GetStorageQuota returns the StorageQuota field value if set, zero value otherwise.
func (o *SymbolFileStorageInfo) GetStorageQuota() int64 {
	if o == nil || IsNil(o.StorageQuota) {
		var ret int64
		return ret
	}
	return *o.StorageQuota
}

// GetStorageQuotaOk returns a tuple with the StorageQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFileStorageInfo) GetStorageQuotaOk() (*int64, bool) {
	if o == nil || IsNil(o.StorageQuota) {
		return nil, false
	}
	return o.StorageQuota, true
}

// HasStorageQuota returns a boolean if a field has been set.
func (o *SymbolFileStorageInfo) HasStorageQuota() bool {
	if o != nil && !IsNil(o.StorageQuota) {
		return true
	}

	return false
}

// SetStorageQuota gets a reference to the given int64 and assigns it to the StorageQuota field.
func (o *SymbolFileStorageInfo) SetStorageQuota(v int64) {
	o.StorageQuota = &v
}

// GetUsedStorage returns the UsedStorage field value if set, zero value otherwise.
func (o *SymbolFileStorageInfo) GetUsedStorage() int64 {
	if o == nil || IsNil(o.UsedStorage) {
		var ret int64
		return ret
	}
	return *o.UsedStorage
}

// GetUsedStorageOk returns a tuple with the UsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolFileStorageInfo) GetUsedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedStorage) {
		return nil, false
	}
	return o.UsedStorage, true
}

// HasUsedStorage returns a boolean if a field has been set.
func (o *SymbolFileStorageInfo) HasUsedStorage() bool {
	if o != nil && !IsNil(o.UsedStorage) {
		return true
	}

	return false
}

// SetUsedStorage gets a reference to the given int64 and assigns it to the UsedStorage field.
func (o *SymbolFileStorageInfo) SetUsedStorage(v int64) {
	o.UsedStorage = &v
}

func (o SymbolFileStorageInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SymbolFileStorageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableStorage) {
		toSerialize["availableStorage"] = o.AvailableStorage
	}
	if !IsNil(o.FileCount) {
		toSerialize["fileCount"] = o.FileCount
	}
	if !IsNil(o.StorageQuota) {
		toSerialize["storageQuota"] = o.StorageQuota
	}
	if !IsNil(o.UsedStorage) {
		toSerialize["usedStorage"] = o.UsedStorage
	}
	return toSerialize, nil
}

type NullableSymbolFileStorageInfo struct {
	value *SymbolFileStorageInfo
	isSet bool
}

func (v NullableSymbolFileStorageInfo) Get() *SymbolFileStorageInfo {
	return v.value
}

func (v *NullableSymbolFileStorageInfo) Set(val *SymbolFileStorageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolFileStorageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolFileStorageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolFileStorageInfo(val *SymbolFileStorageInfo) *NullableSymbolFileStorageInfo {
	return &NullableSymbolFileStorageInfo{value: val, isSet: true}
}

func (v NullableSymbolFileStorageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolFileStorageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


