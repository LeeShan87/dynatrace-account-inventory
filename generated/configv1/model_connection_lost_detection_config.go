/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ConnectionLostDetectionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionLostDetectionConfig{}

// ConnectionLostDetectionConfig Configuration of lost connection detection.
type ConnectionLostDetectionConfig struct {
	// The detection is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// Alert (`true`) on graceful host shutdowns.
	EnabledOnGracefulShutdowns bool `json:"enabledOnGracefulShutdowns"`
}

// NewConnectionLostDetectionConfig instantiates a new ConnectionLostDetectionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionLostDetectionConfig(enabled bool, enabledOnGracefulShutdowns bool) *ConnectionLostDetectionConfig {
	this := ConnectionLostDetectionConfig{}
	this.Enabled = enabled
	this.EnabledOnGracefulShutdowns = enabledOnGracefulShutdowns
	return &this
}

// NewConnectionLostDetectionConfigWithDefaults instantiates a new ConnectionLostDetectionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionLostDetectionConfigWithDefaults() *ConnectionLostDetectionConfig {
	this := ConnectionLostDetectionConfig{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *ConnectionLostDetectionConfig) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ConnectionLostDetectionConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ConnectionLostDetectionConfig) SetEnabled(v bool) {
	o.Enabled = v
}

// GetEnabledOnGracefulShutdowns returns the EnabledOnGracefulShutdowns field value
func (o *ConnectionLostDetectionConfig) GetEnabledOnGracefulShutdowns() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnabledOnGracefulShutdowns
}

// GetEnabledOnGracefulShutdownsOk returns a tuple with the EnabledOnGracefulShutdowns field value
// and a boolean to check if the value has been set.
func (o *ConnectionLostDetectionConfig) GetEnabledOnGracefulShutdownsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnabledOnGracefulShutdowns, true
}

// SetEnabledOnGracefulShutdowns sets field value
func (o *ConnectionLostDetectionConfig) SetEnabledOnGracefulShutdowns(v bool) {
	o.EnabledOnGracefulShutdowns = v
}

func (o ConnectionLostDetectionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionLostDetectionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["enabledOnGracefulShutdowns"] = o.EnabledOnGracefulShutdowns
	return toSerialize, nil
}

type NullableConnectionLostDetectionConfig struct {
	value *ConnectionLostDetectionConfig
	isSet bool
}

func (v NullableConnectionLostDetectionConfig) Get() *ConnectionLostDetectionConfig {
	return v.value
}

func (v *NullableConnectionLostDetectionConfig) Set(val *ConnectionLostDetectionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionLostDetectionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionLostDetectionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionLostDetectionConfig(val *ConnectionLostDetectionConfig) *NullableConnectionLostDetectionConfig {
	return &NullableConnectionLostDetectionConfig{value: val, isSet: true}
}

func (v NullableConnectionLostDetectionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionLostDetectionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


