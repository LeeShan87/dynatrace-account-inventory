/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the FdcPredicate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FdcPredicate{}

// FdcPredicate The predicate that tests the value of the attribute.   The actual set of fields depends on the type of the predicate. Find the list of actual objects in the description of the **type** field or see [Failure detection API - JSON models](https://dt-url.net/9sg3swf).
type FdcPredicate struct {
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `STRING_EQUALS` -> FdcPredicateStringEquals  * `STRING_STARTS_WITH` -> FdcPredicateStringStartsWith  * `STRING_ENDS_WITH` -> FdcPredicateStringEndsWith  * `STRING_CONTAINS_SUBSTRING` -> FdcPredicateStringContains  * `INTEGER_EQUALS` -> FdcPredicateIntegerEquals  * `INTEGER_LESS_THAN` -> FdcPredicateIntegerLessThan  * `INTEGER_LESS_THAN_OR_EQUAL` -> FdcPredicateIntegerLessThanOrEqual  * `INTEGER_GREATER_THAN` -> FdcPredicateIntegerGreaterThan  * `INTEGER_GREATER_THAN_OR_EQUAL` -> FdcPredicateIntegerGreaterThanOrEqual  * `LONG_EQUALS` -> FdcPredicateLongEquals  * `LONG_LESS_THAN` -> FdcPredicateLongLessThan  * `LONG_LESS_THAN_OR_EQUAL` -> FdcPredicateLongLessThanOrEqual  * `LONG_GREATER_THAN` -> FdcPredicateLongGreaterThan  * `LONG_GREATER_THAN_OR_EQUAL` -> FdcPredicateLongGreaterThanOrEqual  * `TAG_KEY_EQUALS` -> FdcPredicateTagKeyEquals  * `TAG_EQUALS` -> FdcPredicateTagEquals  * `SERVICE_TYPE_EQUALS` -> FdcPredicateServiceTypeEquals  * `MANAGEMENT_ZONES_CONTAINS_ALL` -> FdcPredicateManagementZonesContainsAll  * `SET_OF_INTEGERS_CONTAINS_ANY` -> FdcPredicateSetOfIntegersContainsAny  * `SET_OF_INTEGERS_CONTAINS_ALL` -> FdcPredicateSetOfIntegersContainsAll  
	Type string `json:"type"`
}

// NewFdcPredicate instantiates a new FdcPredicate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFdcPredicate(type_ string) *FdcPredicate {
	this := FdcPredicate{}
	this.Type = type_
	return &this
}

// NewFdcPredicateWithDefaults instantiates a new FdcPredicate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFdcPredicateWithDefaults() *FdcPredicate {
	this := FdcPredicate{}
	return &this
}

// GetType returns the Type field value
func (o *FdcPredicate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FdcPredicate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FdcPredicate) SetType(v string) {
	o.Type = v
}

func (o FdcPredicate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FdcPredicate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableFdcPredicate struct {
	value *FdcPredicate
	isSet bool
}

func (v NullableFdcPredicate) Get() *FdcPredicate {
	return v.value
}

func (v *NullableFdcPredicate) Set(val *FdcPredicate) {
	v.value = val
	v.isSet = true
}

func (v NullableFdcPredicate) IsSet() bool {
	return v.isSet
}

func (v *NullableFdcPredicate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFdcPredicate(val *FdcPredicate) *NullableFdcPredicate {
	return &NullableFdcPredicate{value: val, isSet: true}
}

func (v NullableFdcPredicate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFdcPredicate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


