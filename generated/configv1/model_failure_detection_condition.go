/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the FailureDetectionCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailureDetectionCondition{}

// FailureDetectionCondition The condition of the failure detection rule.
type FailureDetectionCondition struct {
	// The attribute to be checked.
	Attribute *string `json:"attribute,omitempty"`
	Predicate *FdcPredicate `json:"predicate,omitempty"`
}

// NewFailureDetectionCondition instantiates a new FailureDetectionCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailureDetectionCondition() *FailureDetectionCondition {
	this := FailureDetectionCondition{}
	return &this
}

// NewFailureDetectionConditionWithDefaults instantiates a new FailureDetectionCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailureDetectionConditionWithDefaults() *FailureDetectionCondition {
	this := FailureDetectionCondition{}
	return &this
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *FailureDetectionCondition) GetAttribute() string {
	if o == nil || IsNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionCondition) GetAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *FailureDetectionCondition) HasAttribute() bool {
	if o != nil && !IsNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *FailureDetectionCondition) SetAttribute(v string) {
	o.Attribute = &v
}

// GetPredicate returns the Predicate field value if set, zero value otherwise.
func (o *FailureDetectionCondition) GetPredicate() FdcPredicate {
	if o == nil || IsNil(o.Predicate) {
		var ret FdcPredicate
		return ret
	}
	return *o.Predicate
}

// GetPredicateOk returns a tuple with the Predicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionCondition) GetPredicateOk() (*FdcPredicate, bool) {
	if o == nil || IsNil(o.Predicate) {
		return nil, false
	}
	return o.Predicate, true
}

// HasPredicate returns a boolean if a field has been set.
func (o *FailureDetectionCondition) HasPredicate() bool {
	if o != nil && !IsNil(o.Predicate) {
		return true
	}

	return false
}

// SetPredicate gets a reference to the given FdcPredicate and assigns it to the Predicate field.
func (o *FailureDetectionCondition) SetPredicate(v FdcPredicate) {
	o.Predicate = &v
}

func (o FailureDetectionCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailureDetectionCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !IsNil(o.Predicate) {
		toSerialize["predicate"] = o.Predicate
	}
	return toSerialize, nil
}

type NullableFailureDetectionCondition struct {
	value *FailureDetectionCondition
	isSet bool
}

func (v NullableFailureDetectionCondition) Get() *FailureDetectionCondition {
	return v.value
}

func (v *NullableFailureDetectionCondition) Set(val *FailureDetectionCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureDetectionCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureDetectionCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureDetectionCondition(val *FailureDetectionCondition) *NullableFailureDetectionCondition {
	return &NullableFailureDetectionCondition{value: val, isSet: true}
}

func (v NullableFailureDetectionCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureDetectionCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


