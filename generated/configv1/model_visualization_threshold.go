/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the VisualizationThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationThreshold{}

// VisualizationThreshold Thresholds for Visualization
type VisualizationThreshold struct {
	AxisTarget *string `json:"axisTarget,omitempty"`
	ColumnId *string `json:"columnId,omitempty"`
	QueryId *string `json:"queryId,omitempty"`
	Rules []VisualizationThresholdRule `json:"rules"`
	Visible *bool `json:"visible,omitempty"`
}

// NewVisualizationThreshold instantiates a new VisualizationThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationThreshold(rules []VisualizationThresholdRule) *VisualizationThreshold {
	this := VisualizationThreshold{}
	this.Rules = rules
	return &this
}

// NewVisualizationThresholdWithDefaults instantiates a new VisualizationThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationThresholdWithDefaults() *VisualizationThreshold {
	this := VisualizationThreshold{}
	return &this
}

// GetAxisTarget returns the AxisTarget field value if set, zero value otherwise.
func (o *VisualizationThreshold) GetAxisTarget() string {
	if o == nil || IsNil(o.AxisTarget) {
		var ret string
		return ret
	}
	return *o.AxisTarget
}

// GetAxisTargetOk returns a tuple with the AxisTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationThreshold) GetAxisTargetOk() (*string, bool) {
	if o == nil || IsNil(o.AxisTarget) {
		return nil, false
	}
	return o.AxisTarget, true
}

// HasAxisTarget returns a boolean if a field has been set.
func (o *VisualizationThreshold) HasAxisTarget() bool {
	if o != nil && !IsNil(o.AxisTarget) {
		return true
	}

	return false
}

// SetAxisTarget gets a reference to the given string and assigns it to the AxisTarget field.
func (o *VisualizationThreshold) SetAxisTarget(v string) {
	o.AxisTarget = &v
}

// GetColumnId returns the ColumnId field value if set, zero value otherwise.
func (o *VisualizationThreshold) GetColumnId() string {
	if o == nil || IsNil(o.ColumnId) {
		var ret string
		return ret
	}
	return *o.ColumnId
}

// GetColumnIdOk returns a tuple with the ColumnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationThreshold) GetColumnIdOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnId) {
		return nil, false
	}
	return o.ColumnId, true
}

// HasColumnId returns a boolean if a field has been set.
func (o *VisualizationThreshold) HasColumnId() bool {
	if o != nil && !IsNil(o.ColumnId) {
		return true
	}

	return false
}

// SetColumnId gets a reference to the given string and assigns it to the ColumnId field.
func (o *VisualizationThreshold) SetColumnId(v string) {
	o.ColumnId = &v
}

// GetQueryId returns the QueryId field value if set, zero value otherwise.
func (o *VisualizationThreshold) GetQueryId() string {
	if o == nil || IsNil(o.QueryId) {
		var ret string
		return ret
	}
	return *o.QueryId
}

// GetQueryIdOk returns a tuple with the QueryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationThreshold) GetQueryIdOk() (*string, bool) {
	if o == nil || IsNil(o.QueryId) {
		return nil, false
	}
	return o.QueryId, true
}

// HasQueryId returns a boolean if a field has been set.
func (o *VisualizationThreshold) HasQueryId() bool {
	if o != nil && !IsNil(o.QueryId) {
		return true
	}

	return false
}

// SetQueryId gets a reference to the given string and assigns it to the QueryId field.
func (o *VisualizationThreshold) SetQueryId(v string) {
	o.QueryId = &v
}

// GetRules returns the Rules field value
func (o *VisualizationThreshold) GetRules() []VisualizationThresholdRule {
	if o == nil {
		var ret []VisualizationThresholdRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *VisualizationThreshold) GetRulesOk() ([]VisualizationThresholdRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *VisualizationThreshold) SetRules(v []VisualizationThresholdRule) {
	o.Rules = v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *VisualizationThreshold) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationThreshold) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *VisualizationThreshold) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *VisualizationThreshold) SetVisible(v bool) {
	o.Visible = &v
}

func (o VisualizationThreshold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AxisTarget) {
		toSerialize["axisTarget"] = o.AxisTarget
	}
	if !IsNil(o.ColumnId) {
		toSerialize["columnId"] = o.ColumnId
	}
	if !IsNil(o.QueryId) {
		toSerialize["queryId"] = o.QueryId
	}
	toSerialize["rules"] = o.Rules
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	return toSerialize, nil
}

type NullableVisualizationThreshold struct {
	value *VisualizationThreshold
	isSet bool
}

func (v NullableVisualizationThreshold) Get() *VisualizationThreshold {
	return v.value
}

func (v *NullableVisualizationThreshold) Set(val *VisualizationThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationThreshold(val *VisualizationThreshold) *NullableVisualizationThreshold {
	return &NullableVisualizationThreshold{value: val, isSet: true}
}

func (v NullableVisualizationThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


