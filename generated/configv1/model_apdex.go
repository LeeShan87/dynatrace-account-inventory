/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the Apdex type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Apdex{}

// Apdex Defines the Apdex settings of an application.
type Apdex struct {
	// Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available.
	FrustratingFallbackThreshold *float32 `json:"frustratingFallbackThreshold,omitempty"`
	// Maximal value of apdex, which is considered as tolerable user experience.
	FrustratingThreshold *float32 `json:"frustratingThreshold,omitempty"`
	// Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available.
	ToleratedFallbackThreshold *float32 `json:"toleratedFallbackThreshold,omitempty"`
	// Maximal value of apdex, which is considered as satisfied user experience.
	ToleratedThreshold *float32 `json:"toleratedThreshold,omitempty"`
}

// NewApdex instantiates a new Apdex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApdex() *Apdex {
	this := Apdex{}
	return &this
}

// NewApdexWithDefaults instantiates a new Apdex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApdexWithDefaults() *Apdex {
	this := Apdex{}
	return &this
}

// GetFrustratingFallbackThreshold returns the FrustratingFallbackThreshold field value if set, zero value otherwise.
func (o *Apdex) GetFrustratingFallbackThreshold() float32 {
	if o == nil || IsNil(o.FrustratingFallbackThreshold) {
		var ret float32
		return ret
	}
	return *o.FrustratingFallbackThreshold
}

// GetFrustratingFallbackThresholdOk returns a tuple with the FrustratingFallbackThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apdex) GetFrustratingFallbackThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.FrustratingFallbackThreshold) {
		return nil, false
	}
	return o.FrustratingFallbackThreshold, true
}

// HasFrustratingFallbackThreshold returns a boolean if a field has been set.
func (o *Apdex) HasFrustratingFallbackThreshold() bool {
	if o != nil && !IsNil(o.FrustratingFallbackThreshold) {
		return true
	}

	return false
}

// SetFrustratingFallbackThreshold gets a reference to the given float32 and assigns it to the FrustratingFallbackThreshold field.
func (o *Apdex) SetFrustratingFallbackThreshold(v float32) {
	o.FrustratingFallbackThreshold = &v
}

// GetFrustratingThreshold returns the FrustratingThreshold field value if set, zero value otherwise.
func (o *Apdex) GetFrustratingThreshold() float32 {
	if o == nil || IsNil(o.FrustratingThreshold) {
		var ret float32
		return ret
	}
	return *o.FrustratingThreshold
}

// GetFrustratingThresholdOk returns a tuple with the FrustratingThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apdex) GetFrustratingThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.FrustratingThreshold) {
		return nil, false
	}
	return o.FrustratingThreshold, true
}

// HasFrustratingThreshold returns a boolean if a field has been set.
func (o *Apdex) HasFrustratingThreshold() bool {
	if o != nil && !IsNil(o.FrustratingThreshold) {
		return true
	}

	return false
}

// SetFrustratingThreshold gets a reference to the given float32 and assigns it to the FrustratingThreshold field.
func (o *Apdex) SetFrustratingThreshold(v float32) {
	o.FrustratingThreshold = &v
}

// GetToleratedFallbackThreshold returns the ToleratedFallbackThreshold field value if set, zero value otherwise.
func (o *Apdex) GetToleratedFallbackThreshold() float32 {
	if o == nil || IsNil(o.ToleratedFallbackThreshold) {
		var ret float32
		return ret
	}
	return *o.ToleratedFallbackThreshold
}

// GetToleratedFallbackThresholdOk returns a tuple with the ToleratedFallbackThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apdex) GetToleratedFallbackThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.ToleratedFallbackThreshold) {
		return nil, false
	}
	return o.ToleratedFallbackThreshold, true
}

// HasToleratedFallbackThreshold returns a boolean if a field has been set.
func (o *Apdex) HasToleratedFallbackThreshold() bool {
	if o != nil && !IsNil(o.ToleratedFallbackThreshold) {
		return true
	}

	return false
}

// SetToleratedFallbackThreshold gets a reference to the given float32 and assigns it to the ToleratedFallbackThreshold field.
func (o *Apdex) SetToleratedFallbackThreshold(v float32) {
	o.ToleratedFallbackThreshold = &v
}

// GetToleratedThreshold returns the ToleratedThreshold field value if set, zero value otherwise.
func (o *Apdex) GetToleratedThreshold() float32 {
	if o == nil || IsNil(o.ToleratedThreshold) {
		var ret float32
		return ret
	}
	return *o.ToleratedThreshold
}

// GetToleratedThresholdOk returns a tuple with the ToleratedThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apdex) GetToleratedThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.ToleratedThreshold) {
		return nil, false
	}
	return o.ToleratedThreshold, true
}

// HasToleratedThreshold returns a boolean if a field has been set.
func (o *Apdex) HasToleratedThreshold() bool {
	if o != nil && !IsNil(o.ToleratedThreshold) {
		return true
	}

	return false
}

// SetToleratedThreshold gets a reference to the given float32 and assigns it to the ToleratedThreshold field.
func (o *Apdex) SetToleratedThreshold(v float32) {
	o.ToleratedThreshold = &v
}

func (o Apdex) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Apdex) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FrustratingFallbackThreshold) {
		toSerialize["frustratingFallbackThreshold"] = o.FrustratingFallbackThreshold
	}
	if !IsNil(o.FrustratingThreshold) {
		toSerialize["frustratingThreshold"] = o.FrustratingThreshold
	}
	if !IsNil(o.ToleratedFallbackThreshold) {
		toSerialize["toleratedFallbackThreshold"] = o.ToleratedFallbackThreshold
	}
	if !IsNil(o.ToleratedThreshold) {
		toSerialize["toleratedThreshold"] = o.ToleratedThreshold
	}
	return toSerialize, nil
}

type NullableApdex struct {
	value *Apdex
	isSet bool
}

func (v NullableApdex) Get() *Apdex {
	return v.value
}

func (v *NullableApdex) Set(val *Apdex) {
	v.value = val
	v.isSet = true
}

func (v NullableApdex) IsSet() bool {
	return v.isSet
}

func (v *NullableApdex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApdex(val *Apdex) *NullableApdex {
	return &NullableApdex{value: val, isSet: true}
}

func (v NullableApdex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApdex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


