/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the MetaDataCapturing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaDataCapturing{}

// MetaDataCapturing Configuration to capture meta data with the JavaScript agent.
type MetaDataCapturing struct {
	// The name of the meta data to capture.
	CapturingName string `json:"capturingName"`
	// Name for displaying the captured values in Dynatrace.
	Name string `json:"name"`
	// True if this metadata should be captured regardless of the privacy settings
	PublicMetadata *bool `json:"publicMetadata,omitempty"`
	// The type of the meta data to capture.
	Type string `json:"type"`
	// The unique id of the meta data to capture.
	UniqueId *int32 `json:"uniqueId,omitempty"`
	// True if the last captured value should be used for this metadata. By default the first value will be used.
	UseLastValue *bool `json:"useLastValue,omitempty"`
}

// NewMetaDataCapturing instantiates a new MetaDataCapturing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaDataCapturing(capturingName string, name string, type_ string) *MetaDataCapturing {
	this := MetaDataCapturing{}
	this.CapturingName = capturingName
	this.Name = name
	this.Type = type_
	return &this
}

// NewMetaDataCapturingWithDefaults instantiates a new MetaDataCapturing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaDataCapturingWithDefaults() *MetaDataCapturing {
	this := MetaDataCapturing{}
	return &this
}

// GetCapturingName returns the CapturingName field value
func (o *MetaDataCapturing) GetCapturingName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CapturingName
}

// GetCapturingNameOk returns a tuple with the CapturingName field value
// and a boolean to check if the value has been set.
func (o *MetaDataCapturing) GetCapturingNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CapturingName, true
}

// SetCapturingName sets field value
func (o *MetaDataCapturing) SetCapturingName(v string) {
	o.CapturingName = v
}

// GetName returns the Name field value
func (o *MetaDataCapturing) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetaDataCapturing) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MetaDataCapturing) SetName(v string) {
	o.Name = v
}

// GetPublicMetadata returns the PublicMetadata field value if set, zero value otherwise.
func (o *MetaDataCapturing) GetPublicMetadata() bool {
	if o == nil || IsNil(o.PublicMetadata) {
		var ret bool
		return ret
	}
	return *o.PublicMetadata
}

// GetPublicMetadataOk returns a tuple with the PublicMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaDataCapturing) GetPublicMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.PublicMetadata) {
		return nil, false
	}
	return o.PublicMetadata, true
}

// HasPublicMetadata returns a boolean if a field has been set.
func (o *MetaDataCapturing) HasPublicMetadata() bool {
	if o != nil && !IsNil(o.PublicMetadata) {
		return true
	}

	return false
}

// SetPublicMetadata gets a reference to the given bool and assigns it to the PublicMetadata field.
func (o *MetaDataCapturing) SetPublicMetadata(v bool) {
	o.PublicMetadata = &v
}

// GetType returns the Type field value
func (o *MetaDataCapturing) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MetaDataCapturing) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MetaDataCapturing) SetType(v string) {
	o.Type = v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *MetaDataCapturing) GetUniqueId() int32 {
	if o == nil || IsNil(o.UniqueId) {
		var ret int32
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaDataCapturing) GetUniqueIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *MetaDataCapturing) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given int32 and assigns it to the UniqueId field.
func (o *MetaDataCapturing) SetUniqueId(v int32) {
	o.UniqueId = &v
}

// GetUseLastValue returns the UseLastValue field value if set, zero value otherwise.
func (o *MetaDataCapturing) GetUseLastValue() bool {
	if o == nil || IsNil(o.UseLastValue) {
		var ret bool
		return ret
	}
	return *o.UseLastValue
}

// GetUseLastValueOk returns a tuple with the UseLastValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaDataCapturing) GetUseLastValueOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLastValue) {
		return nil, false
	}
	return o.UseLastValue, true
}

// HasUseLastValue returns a boolean if a field has been set.
func (o *MetaDataCapturing) HasUseLastValue() bool {
	if o != nil && !IsNil(o.UseLastValue) {
		return true
	}

	return false
}

// SetUseLastValue gets a reference to the given bool and assigns it to the UseLastValue field.
func (o *MetaDataCapturing) SetUseLastValue(v bool) {
	o.UseLastValue = &v
}

func (o MetaDataCapturing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaDataCapturing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capturingName"] = o.CapturingName
	toSerialize["name"] = o.Name
	if !IsNil(o.PublicMetadata) {
		toSerialize["publicMetadata"] = o.PublicMetadata
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UniqueId) {
		toSerialize["uniqueId"] = o.UniqueId
	}
	if !IsNil(o.UseLastValue) {
		toSerialize["useLastValue"] = o.UseLastValue
	}
	return toSerialize, nil
}

type NullableMetaDataCapturing struct {
	value *MetaDataCapturing
	isSet bool
}

func (v NullableMetaDataCapturing) Get() *MetaDataCapturing {
	return v.value
}

func (v *NullableMetaDataCapturing) Set(val *MetaDataCapturing) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaDataCapturing) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaDataCapturing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaDataCapturing(val *MetaDataCapturing) *NullableMetaDataCapturing {
	return &NullableMetaDataCapturing{value: val, isSet: true}
}

func (v NullableMetaDataCapturing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaDataCapturing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


