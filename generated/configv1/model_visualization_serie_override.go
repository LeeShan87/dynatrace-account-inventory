/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the VisualizationSerieOverride type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationSerieOverride{}

// VisualizationSerieOverride struct for VisualizationSerieOverride
type VisualizationSerieOverride struct {
	Color string `json:"color"`
	Name string `json:"name"`
}

// NewVisualizationSerieOverride instantiates a new VisualizationSerieOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationSerieOverride(color string, name string) *VisualizationSerieOverride {
	this := VisualizationSerieOverride{}
	this.Color = color
	this.Name = name
	return &this
}

// NewVisualizationSerieOverrideWithDefaults instantiates a new VisualizationSerieOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationSerieOverrideWithDefaults() *VisualizationSerieOverride {
	this := VisualizationSerieOverride{}
	return &this
}

// GetColor returns the Color field value
func (o *VisualizationSerieOverride) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *VisualizationSerieOverride) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *VisualizationSerieOverride) SetColor(v string) {
	o.Color = v
}

// GetName returns the Name field value
func (o *VisualizationSerieOverride) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VisualizationSerieOverride) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VisualizationSerieOverride) SetName(v string) {
	o.Name = v
}

func (o VisualizationSerieOverride) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationSerieOverride) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["color"] = o.Color
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableVisualizationSerieOverride struct {
	value *VisualizationSerieOverride
	isSet bool
}

func (v NullableVisualizationSerieOverride) Get() *VisualizationSerieOverride {
	return v.value
}

func (v *NullableVisualizationSerieOverride) Set(val *VisualizationSerieOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationSerieOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationSerieOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationSerieOverride(val *VisualizationSerieOverride) *NullableVisualizationSerieOverride {
	return &NullableVisualizationSerieOverride{value: val, isSet: true}
}

func (v NullableVisualizationSerieOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationSerieOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


