/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SymbolFilePinning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SymbolFilePinning{}

// SymbolFilePinning struct for SymbolFilePinning
type SymbolFilePinning struct {
	// The pinning status of the file: `true` to pin the file, `false` to unpin the file.
	Pinned bool `json:"pinned"`
}

// NewSymbolFilePinning instantiates a new SymbolFilePinning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolFilePinning(pinned bool) *SymbolFilePinning {
	this := SymbolFilePinning{}
	this.Pinned = pinned
	return &this
}

// NewSymbolFilePinningWithDefaults instantiates a new SymbolFilePinning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolFilePinningWithDefaults() *SymbolFilePinning {
	this := SymbolFilePinning{}
	return &this
}

// GetPinned returns the Pinned field value
func (o *SymbolFilePinning) GetPinned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value
// and a boolean to check if the value has been set.
func (o *SymbolFilePinning) GetPinnedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pinned, true
}

// SetPinned sets field value
func (o *SymbolFilePinning) SetPinned(v bool) {
	o.Pinned = v
}

func (o SymbolFilePinning) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SymbolFilePinning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pinned"] = o.Pinned
	return toSerialize, nil
}

type NullableSymbolFilePinning struct {
	value *SymbolFilePinning
	isSet bool
}

func (v NullableSymbolFilePinning) Get() *SymbolFilePinning {
	return v.value
}

func (v *NullableSymbolFilePinning) Set(val *SymbolFilePinning) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolFilePinning) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolFilePinning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolFilePinning(val *SymbolFilePinning) *NullableSymbolFilePinning {
	return &NullableSymbolFilePinning{value: val, isSet: true}
}

func (v NullableSymbolFilePinning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolFilePinning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


