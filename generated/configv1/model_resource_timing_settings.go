/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ResourceTimingSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceTimingSettings{}

// ResourceTimingSettings Settings for resource timings capture.
type ResourceTimingSettings struct {
	// Timing for JavaScript files and images on non-W3C supported browsers enabled/disabled.
	NonW3cResourceTimings bool `json:"nonW3cResourceTimings"`
	// Instrumentation delay for monitoring resource and image resource impact in browsers that don't offer W3C resource timings.   Valid values range from 0 to 9999.  Only effective if **nonW3cResourceTimings** is enabled.
	NonW3cResourceTimingsInstrumentationDelay int32 `json:"nonW3cResourceTimingsInstrumentationDelay"`
	// Defines how detailed resource timings are captured.  Only effective if **w3cResourceTimings** or **nonW3cResourceTimings** is enabled.
	ResourceTimingCaptureType *string `json:"resourceTimingCaptureType,omitempty"`
	// Limits the number of domains for which W3C resource timings are captured.  Only effective if **resourceTimingCaptureType** is `CAPTURE_LIMITED_SUMMARIES`.
	ResourceTimingsDomainLimit *int32 `json:"resourceTimingsDomainLimit,omitempty"`
	// W3C resource timings for third party/CDN enabled/disabled.
	W3cResourceTimings bool `json:"w3cResourceTimings"`
}

// NewResourceTimingSettings instantiates a new ResourceTimingSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTimingSettings(nonW3cResourceTimings bool, nonW3cResourceTimingsInstrumentationDelay int32, w3cResourceTimings bool) *ResourceTimingSettings {
	this := ResourceTimingSettings{}
	this.NonW3cResourceTimings = nonW3cResourceTimings
	this.NonW3cResourceTimingsInstrumentationDelay = nonW3cResourceTimingsInstrumentationDelay
	this.W3cResourceTimings = w3cResourceTimings
	return &this
}

// NewResourceTimingSettingsWithDefaults instantiates a new ResourceTimingSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTimingSettingsWithDefaults() *ResourceTimingSettings {
	this := ResourceTimingSettings{}
	return &this
}

// GetNonW3cResourceTimings returns the NonW3cResourceTimings field value
func (o *ResourceTimingSettings) GetNonW3cResourceTimings() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NonW3cResourceTimings
}

// GetNonW3cResourceTimingsOk returns a tuple with the NonW3cResourceTimings field value
// and a boolean to check if the value has been set.
func (o *ResourceTimingSettings) GetNonW3cResourceTimingsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NonW3cResourceTimings, true
}

// SetNonW3cResourceTimings sets field value
func (o *ResourceTimingSettings) SetNonW3cResourceTimings(v bool) {
	o.NonW3cResourceTimings = v
}

// GetNonW3cResourceTimingsInstrumentationDelay returns the NonW3cResourceTimingsInstrumentationDelay field value
func (o *ResourceTimingSettings) GetNonW3cResourceTimingsInstrumentationDelay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NonW3cResourceTimingsInstrumentationDelay
}

// GetNonW3cResourceTimingsInstrumentationDelayOk returns a tuple with the NonW3cResourceTimingsInstrumentationDelay field value
// and a boolean to check if the value has been set.
func (o *ResourceTimingSettings) GetNonW3cResourceTimingsInstrumentationDelayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NonW3cResourceTimingsInstrumentationDelay, true
}

// SetNonW3cResourceTimingsInstrumentationDelay sets field value
func (o *ResourceTimingSettings) SetNonW3cResourceTimingsInstrumentationDelay(v int32) {
	o.NonW3cResourceTimingsInstrumentationDelay = v
}

// GetResourceTimingCaptureType returns the ResourceTimingCaptureType field value if set, zero value otherwise.
func (o *ResourceTimingSettings) GetResourceTimingCaptureType() string {
	if o == nil || IsNil(o.ResourceTimingCaptureType) {
		var ret string
		return ret
	}
	return *o.ResourceTimingCaptureType
}

// GetResourceTimingCaptureTypeOk returns a tuple with the ResourceTimingCaptureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTimingSettings) GetResourceTimingCaptureTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceTimingCaptureType) {
		return nil, false
	}
	return o.ResourceTimingCaptureType, true
}

// HasResourceTimingCaptureType returns a boolean if a field has been set.
func (o *ResourceTimingSettings) HasResourceTimingCaptureType() bool {
	if o != nil && !IsNil(o.ResourceTimingCaptureType) {
		return true
	}

	return false
}

// SetResourceTimingCaptureType gets a reference to the given string and assigns it to the ResourceTimingCaptureType field.
func (o *ResourceTimingSettings) SetResourceTimingCaptureType(v string) {
	o.ResourceTimingCaptureType = &v
}

// GetResourceTimingsDomainLimit returns the ResourceTimingsDomainLimit field value if set, zero value otherwise.
func (o *ResourceTimingSettings) GetResourceTimingsDomainLimit() int32 {
	if o == nil || IsNil(o.ResourceTimingsDomainLimit) {
		var ret int32
		return ret
	}
	return *o.ResourceTimingsDomainLimit
}

// GetResourceTimingsDomainLimitOk returns a tuple with the ResourceTimingsDomainLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTimingSettings) GetResourceTimingsDomainLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourceTimingsDomainLimit) {
		return nil, false
	}
	return o.ResourceTimingsDomainLimit, true
}

// HasResourceTimingsDomainLimit returns a boolean if a field has been set.
func (o *ResourceTimingSettings) HasResourceTimingsDomainLimit() bool {
	if o != nil && !IsNil(o.ResourceTimingsDomainLimit) {
		return true
	}

	return false
}

// SetResourceTimingsDomainLimit gets a reference to the given int32 and assigns it to the ResourceTimingsDomainLimit field.
func (o *ResourceTimingSettings) SetResourceTimingsDomainLimit(v int32) {
	o.ResourceTimingsDomainLimit = &v
}

// GetW3cResourceTimings returns the W3cResourceTimings field value
func (o *ResourceTimingSettings) GetW3cResourceTimings() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.W3cResourceTimings
}

// GetW3cResourceTimingsOk returns a tuple with the W3cResourceTimings field value
// and a boolean to check if the value has been set.
func (o *ResourceTimingSettings) GetW3cResourceTimingsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.W3cResourceTimings, true
}

// SetW3cResourceTimings sets field value
func (o *ResourceTimingSettings) SetW3cResourceTimings(v bool) {
	o.W3cResourceTimings = v
}

func (o ResourceTimingSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceTimingSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nonW3cResourceTimings"] = o.NonW3cResourceTimings
	toSerialize["nonW3cResourceTimingsInstrumentationDelay"] = o.NonW3cResourceTimingsInstrumentationDelay
	if !IsNil(o.ResourceTimingCaptureType) {
		toSerialize["resourceTimingCaptureType"] = o.ResourceTimingCaptureType
	}
	if !IsNil(o.ResourceTimingsDomainLimit) {
		toSerialize["resourceTimingsDomainLimit"] = o.ResourceTimingsDomainLimit
	}
	toSerialize["w3cResourceTimings"] = o.W3cResourceTimings
	return toSerialize, nil
}

type NullableResourceTimingSettings struct {
	value *ResourceTimingSettings
	isSet bool
}

func (v NullableResourceTimingSettings) Get() *ResourceTimingSettings {
	return v.value
}

func (v *NullableResourceTimingSettings) Set(val *ResourceTimingSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTimingSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTimingSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTimingSettings(val *ResourceTimingSettings) *NullableResourceTimingSettings {
	return &NullableResourceTimingSettings{value: val, isSet: true}
}

func (v NullableResourceTimingSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTimingSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


