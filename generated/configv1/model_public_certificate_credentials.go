/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the PublicCertificateCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicCertificateCredentials{}

// PublicCertificateCredentials A credentials set of the `PUBLIC_CERTIFICATE` type.
type PublicCertificateCredentials struct {
	// The certificate in the string format.
	Certificate string `json:"certificate"`
	// The certificate format.
	CertificateFormat string `json:"certificateFormat"`
	// The password of the credential (not supported).
	Password string `json:"password"`
}

// NewPublicCertificateCredentials instantiates a new PublicCertificateCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicCertificateCredentials(certificate string, certificateFormat string, password string, name string, scope string, scopes []string) *PublicCertificateCredentials {
	this := PublicCertificateCredentials{}
	this.Name = name
	this.Scope = scope
	this.Scopes = scopes
	this.Certificate = certificate
	this.CertificateFormat = certificateFormat
	this.Password = password
	return &this
}

// NewPublicCertificateCredentialsWithDefaults instantiates a new PublicCertificateCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicCertificateCredentialsWithDefaults() *PublicCertificateCredentials {
	this := PublicCertificateCredentials{}
	return &this
}

// GetCertificate returns the Certificate field value
func (o *PublicCertificateCredentials) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *PublicCertificateCredentials) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *PublicCertificateCredentials) SetCertificate(v string) {
	o.Certificate = v
}

// GetCertificateFormat returns the CertificateFormat field value
func (o *PublicCertificateCredentials) GetCertificateFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateFormat
}

// GetCertificateFormatOk returns a tuple with the CertificateFormat field value
// and a boolean to check if the value has been set.
func (o *PublicCertificateCredentials) GetCertificateFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateFormat, true
}

// SetCertificateFormat sets field value
func (o *PublicCertificateCredentials) SetCertificateFormat(v string) {
	o.CertificateFormat = v
}

// GetPassword returns the Password field value
func (o *PublicCertificateCredentials) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *PublicCertificateCredentials) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *PublicCertificateCredentials) SetPassword(v string) {
	o.Password = v
}

func (o PublicCertificateCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicCertificateCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate
	toSerialize["certificateFormat"] = o.CertificateFormat
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullablePublicCertificateCredentials struct {
	value *PublicCertificateCredentials
	isSet bool
}

func (v NullablePublicCertificateCredentials) Get() *PublicCertificateCredentials {
	return v.value
}

func (v *NullablePublicCertificateCredentials) Set(val *PublicCertificateCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicCertificateCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicCertificateCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicCertificateCredentials(val *PublicCertificateCredentials) *NullablePublicCertificateCredentials {
	return &NullablePublicCertificateCredentials{value: val, isSet: true}
}

func (v NullablePublicCertificateCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicCertificateCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


