/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ConversionGoal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionGoal{}

// ConversionGoal A conversion goal of the application.
type ConversionGoal struct {
	DestinationDetails *DestinationDetails `json:"destinationDetails,omitempty"`
	// The ID of conversion goal.    Omit it while creating a new conversion goal.
	Id *string `json:"id,omitempty"`
	// The name of the conversion goal.
	Name string `json:"name"`
	// The type of the conversion goal.
	Type *string `json:"type,omitempty"`
	UserActionDetails *UserActionDetails `json:"userActionDetails,omitempty"`
	VisitDurationDetails *VisitDurationDetails `json:"visitDurationDetails,omitempty"`
	VisitNumActionDetails *VisitNumActionDetails `json:"visitNumActionDetails,omitempty"`
}

// NewConversionGoal instantiates a new ConversionGoal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionGoal(name string) *ConversionGoal {
	this := ConversionGoal{}
	this.Name = name
	return &this
}

// NewConversionGoalWithDefaults instantiates a new ConversionGoal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionGoalWithDefaults() *ConversionGoal {
	this := ConversionGoal{}
	return &this
}

// GetDestinationDetails returns the DestinationDetails field value if set, zero value otherwise.
func (o *ConversionGoal) GetDestinationDetails() DestinationDetails {
	if o == nil || IsNil(o.DestinationDetails) {
		var ret DestinationDetails
		return ret
	}
	return *o.DestinationDetails
}

// GetDestinationDetailsOk returns a tuple with the DestinationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionGoal) GetDestinationDetailsOk() (*DestinationDetails, bool) {
	if o == nil || IsNil(o.DestinationDetails) {
		return nil, false
	}
	return o.DestinationDetails, true
}

// HasDestinationDetails returns a boolean if a field has been set.
func (o *ConversionGoal) HasDestinationDetails() bool {
	if o != nil && !IsNil(o.DestinationDetails) {
		return true
	}

	return false
}

// SetDestinationDetails gets a reference to the given DestinationDetails and assigns it to the DestinationDetails field.
func (o *ConversionGoal) SetDestinationDetails(v DestinationDetails) {
	o.DestinationDetails = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConversionGoal) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionGoal) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConversionGoal) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConversionGoal) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ConversionGoal) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConversionGoal) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConversionGoal) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConversionGoal) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionGoal) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConversionGoal) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConversionGoal) SetType(v string) {
	o.Type = &v
}

// GetUserActionDetails returns the UserActionDetails field value if set, zero value otherwise.
func (o *ConversionGoal) GetUserActionDetails() UserActionDetails {
	if o == nil || IsNil(o.UserActionDetails) {
		var ret UserActionDetails
		return ret
	}
	return *o.UserActionDetails
}

// GetUserActionDetailsOk returns a tuple with the UserActionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionGoal) GetUserActionDetailsOk() (*UserActionDetails, bool) {
	if o == nil || IsNil(o.UserActionDetails) {
		return nil, false
	}
	return o.UserActionDetails, true
}

// HasUserActionDetails returns a boolean if a field has been set.
func (o *ConversionGoal) HasUserActionDetails() bool {
	if o != nil && !IsNil(o.UserActionDetails) {
		return true
	}

	return false
}

// SetUserActionDetails gets a reference to the given UserActionDetails and assigns it to the UserActionDetails field.
func (o *ConversionGoal) SetUserActionDetails(v UserActionDetails) {
	o.UserActionDetails = &v
}

// GetVisitDurationDetails returns the VisitDurationDetails field value if set, zero value otherwise.
func (o *ConversionGoal) GetVisitDurationDetails() VisitDurationDetails {
	if o == nil || IsNil(o.VisitDurationDetails) {
		var ret VisitDurationDetails
		return ret
	}
	return *o.VisitDurationDetails
}

// GetVisitDurationDetailsOk returns a tuple with the VisitDurationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionGoal) GetVisitDurationDetailsOk() (*VisitDurationDetails, bool) {
	if o == nil || IsNil(o.VisitDurationDetails) {
		return nil, false
	}
	return o.VisitDurationDetails, true
}

// HasVisitDurationDetails returns a boolean if a field has been set.
func (o *ConversionGoal) HasVisitDurationDetails() bool {
	if o != nil && !IsNil(o.VisitDurationDetails) {
		return true
	}

	return false
}

// SetVisitDurationDetails gets a reference to the given VisitDurationDetails and assigns it to the VisitDurationDetails field.
func (o *ConversionGoal) SetVisitDurationDetails(v VisitDurationDetails) {
	o.VisitDurationDetails = &v
}

// GetVisitNumActionDetails returns the VisitNumActionDetails field value if set, zero value otherwise.
func (o *ConversionGoal) GetVisitNumActionDetails() VisitNumActionDetails {
	if o == nil || IsNil(o.VisitNumActionDetails) {
		var ret VisitNumActionDetails
		return ret
	}
	return *o.VisitNumActionDetails
}

// GetVisitNumActionDetailsOk returns a tuple with the VisitNumActionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionGoal) GetVisitNumActionDetailsOk() (*VisitNumActionDetails, bool) {
	if o == nil || IsNil(o.VisitNumActionDetails) {
		return nil, false
	}
	return o.VisitNumActionDetails, true
}

// HasVisitNumActionDetails returns a boolean if a field has been set.
func (o *ConversionGoal) HasVisitNumActionDetails() bool {
	if o != nil && !IsNil(o.VisitNumActionDetails) {
		return true
	}

	return false
}

// SetVisitNumActionDetails gets a reference to the given VisitNumActionDetails and assigns it to the VisitNumActionDetails field.
func (o *ConversionGoal) SetVisitNumActionDetails(v VisitNumActionDetails) {
	o.VisitNumActionDetails = &v
}

func (o ConversionGoal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionGoal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DestinationDetails) {
		toSerialize["destinationDetails"] = o.DestinationDetails
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserActionDetails) {
		toSerialize["userActionDetails"] = o.UserActionDetails
	}
	if !IsNil(o.VisitDurationDetails) {
		toSerialize["visitDurationDetails"] = o.VisitDurationDetails
	}
	if !IsNil(o.VisitNumActionDetails) {
		toSerialize["visitNumActionDetails"] = o.VisitNumActionDetails
	}
	return toSerialize, nil
}

type NullableConversionGoal struct {
	value *ConversionGoal
	isSet bool
}

func (v NullableConversionGoal) Get() *ConversionGoal {
	return v.value
}

func (v *NullableConversionGoal) Set(val *ConversionGoal) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionGoal) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionGoal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionGoal(val *ConversionGoal) *NullableConversionGoal {
	return &NullableConversionGoal{value: val, isSet: true}
}

func (v NullableConversionGoal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionGoal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


