/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the GlobalEventCaptureSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalEventCaptureSettings{}

// GlobalEventCaptureSettings Global event capture settings.
type GlobalEventCaptureSettings struct {
	// Additional events to be captured globally as user input.   For example, DragStart or DragEnd.
	AdditionalEventCapturedAsUserInput string `json:"additionalEventCapturedAsUserInput"`
	// Change enabled/disabled.
	Change *bool `json:"change,omitempty"`
	// Click enabled/disabled.
	Click bool `json:"click"`
	// DoubleClick enabled/disabled.
	DoubleClick bool `json:"doubleClick"`
	// KeyDown enabled/disabled.
	KeyDown bool `json:"keyDown"`
	// KeyUp enabled/disabled.
	KeyUp bool `json:"keyUp"`
	// MouseDown enabled/disabled.
	MouseDown bool `json:"mouseDown"`
	// MouseUp enabled/disabled.
	MouseUp bool `json:"mouseUp"`
	// Scroll enabled/disabled.
	Scroll bool `json:"scroll"`
	// TouchEnd enabled/disabled.
	TouchEnd *bool `json:"touchEnd,omitempty"`
	// TouchStart enabled/disabled.
	TouchStart *bool `json:"touchStart,omitempty"`
}

// NewGlobalEventCaptureSettings instantiates a new GlobalEventCaptureSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalEventCaptureSettings(additionalEventCapturedAsUserInput string, click bool, doubleClick bool, keyDown bool, keyUp bool, mouseDown bool, mouseUp bool, scroll bool) *GlobalEventCaptureSettings {
	this := GlobalEventCaptureSettings{}
	this.AdditionalEventCapturedAsUserInput = additionalEventCapturedAsUserInput
	this.Click = click
	this.DoubleClick = doubleClick
	this.KeyDown = keyDown
	this.KeyUp = keyUp
	this.MouseDown = mouseDown
	this.MouseUp = mouseUp
	this.Scroll = scroll
	return &this
}

// NewGlobalEventCaptureSettingsWithDefaults instantiates a new GlobalEventCaptureSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalEventCaptureSettingsWithDefaults() *GlobalEventCaptureSettings {
	this := GlobalEventCaptureSettings{}
	return &this
}

// GetAdditionalEventCapturedAsUserInput returns the AdditionalEventCapturedAsUserInput field value
func (o *GlobalEventCaptureSettings) GetAdditionalEventCapturedAsUserInput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdditionalEventCapturedAsUserInput
}

// GetAdditionalEventCapturedAsUserInputOk returns a tuple with the AdditionalEventCapturedAsUserInput field value
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetAdditionalEventCapturedAsUserInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionalEventCapturedAsUserInput, true
}

// SetAdditionalEventCapturedAsUserInput sets field value
func (o *GlobalEventCaptureSettings) SetAdditionalEventCapturedAsUserInput(v string) {
	o.AdditionalEventCapturedAsUserInput = v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *GlobalEventCaptureSettings) GetChange() bool {
	if o == nil || IsNil(o.Change) {
		var ret bool
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *GlobalEventCaptureSettings) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given bool and assigns it to the Change field.
func (o *GlobalEventCaptureSettings) SetChange(v bool) {
	o.Change = &v
}

// GetClick returns the Click field value
func (o *GlobalEventCaptureSettings) GetClick() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Click
}

// GetClickOk returns a tuple with the Click field value
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetClickOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Click, true
}

// SetClick sets field value
func (o *GlobalEventCaptureSettings) SetClick(v bool) {
	o.Click = v
}

// GetDoubleClick returns the DoubleClick field value
func (o *GlobalEventCaptureSettings) GetDoubleClick() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DoubleClick
}

// GetDoubleClickOk returns a tuple with the DoubleClick field value
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetDoubleClickOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DoubleClick, true
}

// SetDoubleClick sets field value
func (o *GlobalEventCaptureSettings) SetDoubleClick(v bool) {
	o.DoubleClick = v
}

// GetKeyDown returns the KeyDown field value
func (o *GlobalEventCaptureSettings) GetKeyDown() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.KeyDown
}

// GetKeyDownOk returns a tuple with the KeyDown field value
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetKeyDownOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyDown, true
}

// SetKeyDown sets field value
func (o *GlobalEventCaptureSettings) SetKeyDown(v bool) {
	o.KeyDown = v
}

// GetKeyUp returns the KeyUp field value
func (o *GlobalEventCaptureSettings) GetKeyUp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.KeyUp
}

// GetKeyUpOk returns a tuple with the KeyUp field value
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetKeyUpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyUp, true
}

// SetKeyUp sets field value
func (o *GlobalEventCaptureSettings) SetKeyUp(v bool) {
	o.KeyUp = v
}

// GetMouseDown returns the MouseDown field value
func (o *GlobalEventCaptureSettings) GetMouseDown() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MouseDown
}

// GetMouseDownOk returns a tuple with the MouseDown field value
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetMouseDownOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MouseDown, true
}

// SetMouseDown sets field value
func (o *GlobalEventCaptureSettings) SetMouseDown(v bool) {
	o.MouseDown = v
}

// GetMouseUp returns the MouseUp field value
func (o *GlobalEventCaptureSettings) GetMouseUp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MouseUp
}

// GetMouseUpOk returns a tuple with the MouseUp field value
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetMouseUpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MouseUp, true
}

// SetMouseUp sets field value
func (o *GlobalEventCaptureSettings) SetMouseUp(v bool) {
	o.MouseUp = v
}

// GetScroll returns the Scroll field value
func (o *GlobalEventCaptureSettings) GetScroll() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Scroll
}

// GetScrollOk returns a tuple with the Scroll field value
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetScrollOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scroll, true
}

// SetScroll sets field value
func (o *GlobalEventCaptureSettings) SetScroll(v bool) {
	o.Scroll = v
}

// GetTouchEnd returns the TouchEnd field value if set, zero value otherwise.
func (o *GlobalEventCaptureSettings) GetTouchEnd() bool {
	if o == nil || IsNil(o.TouchEnd) {
		var ret bool
		return ret
	}
	return *o.TouchEnd
}

// GetTouchEndOk returns a tuple with the TouchEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetTouchEndOk() (*bool, bool) {
	if o == nil || IsNil(o.TouchEnd) {
		return nil, false
	}
	return o.TouchEnd, true
}

// HasTouchEnd returns a boolean if a field has been set.
func (o *GlobalEventCaptureSettings) HasTouchEnd() bool {
	if o != nil && !IsNil(o.TouchEnd) {
		return true
	}

	return false
}

// SetTouchEnd gets a reference to the given bool and assigns it to the TouchEnd field.
func (o *GlobalEventCaptureSettings) SetTouchEnd(v bool) {
	o.TouchEnd = &v
}

// GetTouchStart returns the TouchStart field value if set, zero value otherwise.
func (o *GlobalEventCaptureSettings) GetTouchStart() bool {
	if o == nil || IsNil(o.TouchStart) {
		var ret bool
		return ret
	}
	return *o.TouchStart
}

// GetTouchStartOk returns a tuple with the TouchStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalEventCaptureSettings) GetTouchStartOk() (*bool, bool) {
	if o == nil || IsNil(o.TouchStart) {
		return nil, false
	}
	return o.TouchStart, true
}

// HasTouchStart returns a boolean if a field has been set.
func (o *GlobalEventCaptureSettings) HasTouchStart() bool {
	if o != nil && !IsNil(o.TouchStart) {
		return true
	}

	return false
}

// SetTouchStart gets a reference to the given bool and assigns it to the TouchStart field.
func (o *GlobalEventCaptureSettings) SetTouchStart(v bool) {
	o.TouchStart = &v
}

func (o GlobalEventCaptureSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalEventCaptureSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["additionalEventCapturedAsUserInput"] = o.AdditionalEventCapturedAsUserInput
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	toSerialize["click"] = o.Click
	toSerialize["doubleClick"] = o.DoubleClick
	toSerialize["keyDown"] = o.KeyDown
	toSerialize["keyUp"] = o.KeyUp
	toSerialize["mouseDown"] = o.MouseDown
	toSerialize["mouseUp"] = o.MouseUp
	toSerialize["scroll"] = o.Scroll
	if !IsNil(o.TouchEnd) {
		toSerialize["touchEnd"] = o.TouchEnd
	}
	if !IsNil(o.TouchStart) {
		toSerialize["touchStart"] = o.TouchStart
	}
	return toSerialize, nil
}

type NullableGlobalEventCaptureSettings struct {
	value *GlobalEventCaptureSettings
	isSet bool
}

func (v NullableGlobalEventCaptureSettings) Get() *GlobalEventCaptureSettings {
	return v.value
}

func (v *NullableGlobalEventCaptureSettings) Set(val *GlobalEventCaptureSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalEventCaptureSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalEventCaptureSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalEventCaptureSettings(val *GlobalEventCaptureSettings) *NullableGlobalEventCaptureSettings {
	return &NullableGlobalEventCaptureSettings{value: val, isSet: true}
}

func (v NullableGlobalEventCaptureSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalEventCaptureSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


