/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SlackNotificationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlackNotificationConfig{}

// SlackNotificationConfig Configuration of the Slack notification.
type SlackNotificationConfig struct {
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to.
	Channel string `json:"channel"`
	// The content of the message.   You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://dt-url.net/klg3k4q) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://dt-url.net/f1i3k5b) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Title string `json:"title"`
	// The URL of the Slack WebHook.   This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests.
	Url *string `json:"url,omitempty"`
}

// NewSlackNotificationConfig instantiates a new SlackNotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlackNotificationConfig(channel string, title string, active bool, alertingProfile string, name string, type_ string) *SlackNotificationConfig {
	this := SlackNotificationConfig{}
	this.Active = active
	this.AlertingProfile = alertingProfile
	this.Name = name
	this.Type = type_
	this.Channel = channel
	this.Title = title
	return &this
}

// NewSlackNotificationConfigWithDefaults instantiates a new SlackNotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlackNotificationConfigWithDefaults() *SlackNotificationConfig {
	this := SlackNotificationConfig{}
	return &this
}

// GetChannel returns the Channel field value
func (o *SlackNotificationConfig) GetChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *SlackNotificationConfig) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *SlackNotificationConfig) SetChannel(v string) {
	o.Channel = v
}

// GetTitle returns the Title field value
func (o *SlackNotificationConfig) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SlackNotificationConfig) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SlackNotificationConfig) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SlackNotificationConfig) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlackNotificationConfig) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SlackNotificationConfig) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SlackNotificationConfig) SetUrl(v string) {
	o.Url = &v
}

func (o SlackNotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlackNotificationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["channel"] = o.Channel
	toSerialize["title"] = o.Title
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableSlackNotificationConfig struct {
	value *SlackNotificationConfig
	isSet bool
}

func (v NullableSlackNotificationConfig) Get() *SlackNotificationConfig {
	return v.value
}

func (v *NullableSlackNotificationConfig) Set(val *SlackNotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSlackNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSlackNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlackNotificationConfig(val *SlackNotificationConfig) *NullableSlackNotificationConfig {
	return &NullableSlackNotificationConfig{value: val, isSet: true}
}

func (v NullableSlackNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlackNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


