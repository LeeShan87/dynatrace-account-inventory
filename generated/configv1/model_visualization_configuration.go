/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the VisualizationConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationConfiguration{}

// VisualizationConfiguration Configuration of a visualization.
type VisualizationConfiguration struct {
	Axes *Axes `json:"axes,omitempty"`
	Global *VisualizationGlobalProperties `json:"global,omitempty"`
	GraphChartSettings *GraphChartSettings `json:"graphChartSettings,omitempty"`
	HeatmapSettings *HeatmapSettings `json:"heatmapSettings,omitempty"`
	HoneycombSettings *HoneycombSettings `json:"honeycombSettings,omitempty"`
	// Rules for Visualization
	Rules []VisualizationRule `json:"rules"`
	SingleValueSettings *SingleValueSettings `json:"singleValueSettings,omitempty"`
	TableSettings *TableSettings `json:"tableSettings,omitempty"`
	// Thresholds for Visualization
	Thresholds []VisualizationThreshold `json:"thresholds,omitempty"`
	// The id of the query
	Type string `json:"type"`
}

// NewVisualizationConfiguration instantiates a new VisualizationConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationConfiguration(rules []VisualizationRule, type_ string) *VisualizationConfiguration {
	this := VisualizationConfiguration{}
	this.Rules = rules
	this.Type = type_
	return &this
}

// NewVisualizationConfigurationWithDefaults instantiates a new VisualizationConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationConfigurationWithDefaults() *VisualizationConfiguration {
	this := VisualizationConfiguration{}
	return &this
}

// GetAxes returns the Axes field value if set, zero value otherwise.
func (o *VisualizationConfiguration) GetAxes() Axes {
	if o == nil || IsNil(o.Axes) {
		var ret Axes
		return ret
	}
	return *o.Axes
}

// GetAxesOk returns a tuple with the Axes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetAxesOk() (*Axes, bool) {
	if o == nil || IsNil(o.Axes) {
		return nil, false
	}
	return o.Axes, true
}

// HasAxes returns a boolean if a field has been set.
func (o *VisualizationConfiguration) HasAxes() bool {
	if o != nil && !IsNil(o.Axes) {
		return true
	}

	return false
}

// SetAxes gets a reference to the given Axes and assigns it to the Axes field.
func (o *VisualizationConfiguration) SetAxes(v Axes) {
	o.Axes = &v
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *VisualizationConfiguration) GetGlobal() VisualizationGlobalProperties {
	if o == nil || IsNil(o.Global) {
		var ret VisualizationGlobalProperties
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetGlobalOk() (*VisualizationGlobalProperties, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *VisualizationConfiguration) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given VisualizationGlobalProperties and assigns it to the Global field.
func (o *VisualizationConfiguration) SetGlobal(v VisualizationGlobalProperties) {
	o.Global = &v
}

// GetGraphChartSettings returns the GraphChartSettings field value if set, zero value otherwise.
func (o *VisualizationConfiguration) GetGraphChartSettings() GraphChartSettings {
	if o == nil || IsNil(o.GraphChartSettings) {
		var ret GraphChartSettings
		return ret
	}
	return *o.GraphChartSettings
}

// GetGraphChartSettingsOk returns a tuple with the GraphChartSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetGraphChartSettingsOk() (*GraphChartSettings, bool) {
	if o == nil || IsNil(o.GraphChartSettings) {
		return nil, false
	}
	return o.GraphChartSettings, true
}

// HasGraphChartSettings returns a boolean if a field has been set.
func (o *VisualizationConfiguration) HasGraphChartSettings() bool {
	if o != nil && !IsNil(o.GraphChartSettings) {
		return true
	}

	return false
}

// SetGraphChartSettings gets a reference to the given GraphChartSettings and assigns it to the GraphChartSettings field.
func (o *VisualizationConfiguration) SetGraphChartSettings(v GraphChartSettings) {
	o.GraphChartSettings = &v
}

// GetHeatmapSettings returns the HeatmapSettings field value if set, zero value otherwise.
func (o *VisualizationConfiguration) GetHeatmapSettings() HeatmapSettings {
	if o == nil || IsNil(o.HeatmapSettings) {
		var ret HeatmapSettings
		return ret
	}
	return *o.HeatmapSettings
}

// GetHeatmapSettingsOk returns a tuple with the HeatmapSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetHeatmapSettingsOk() (*HeatmapSettings, bool) {
	if o == nil || IsNil(o.HeatmapSettings) {
		return nil, false
	}
	return o.HeatmapSettings, true
}

// HasHeatmapSettings returns a boolean if a field has been set.
func (o *VisualizationConfiguration) HasHeatmapSettings() bool {
	if o != nil && !IsNil(o.HeatmapSettings) {
		return true
	}

	return false
}

// SetHeatmapSettings gets a reference to the given HeatmapSettings and assigns it to the HeatmapSettings field.
func (o *VisualizationConfiguration) SetHeatmapSettings(v HeatmapSettings) {
	o.HeatmapSettings = &v
}

// GetHoneycombSettings returns the HoneycombSettings field value if set, zero value otherwise.
func (o *VisualizationConfiguration) GetHoneycombSettings() HoneycombSettings {
	if o == nil || IsNil(o.HoneycombSettings) {
		var ret HoneycombSettings
		return ret
	}
	return *o.HoneycombSettings
}

// GetHoneycombSettingsOk returns a tuple with the HoneycombSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetHoneycombSettingsOk() (*HoneycombSettings, bool) {
	if o == nil || IsNil(o.HoneycombSettings) {
		return nil, false
	}
	return o.HoneycombSettings, true
}

// HasHoneycombSettings returns a boolean if a field has been set.
func (o *VisualizationConfiguration) HasHoneycombSettings() bool {
	if o != nil && !IsNil(o.HoneycombSettings) {
		return true
	}

	return false
}

// SetHoneycombSettings gets a reference to the given HoneycombSettings and assigns it to the HoneycombSettings field.
func (o *VisualizationConfiguration) SetHoneycombSettings(v HoneycombSettings) {
	o.HoneycombSettings = &v
}

// GetRules returns the Rules field value
func (o *VisualizationConfiguration) GetRules() []VisualizationRule {
	if o == nil {
		var ret []VisualizationRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetRulesOk() ([]VisualizationRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *VisualizationConfiguration) SetRules(v []VisualizationRule) {
	o.Rules = v
}

// GetSingleValueSettings returns the SingleValueSettings field value if set, zero value otherwise.
func (o *VisualizationConfiguration) GetSingleValueSettings() SingleValueSettings {
	if o == nil || IsNil(o.SingleValueSettings) {
		var ret SingleValueSettings
		return ret
	}
	return *o.SingleValueSettings
}

// GetSingleValueSettingsOk returns a tuple with the SingleValueSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetSingleValueSettingsOk() (*SingleValueSettings, bool) {
	if o == nil || IsNil(o.SingleValueSettings) {
		return nil, false
	}
	return o.SingleValueSettings, true
}

// HasSingleValueSettings returns a boolean if a field has been set.
func (o *VisualizationConfiguration) HasSingleValueSettings() bool {
	if o != nil && !IsNil(o.SingleValueSettings) {
		return true
	}

	return false
}

// SetSingleValueSettings gets a reference to the given SingleValueSettings and assigns it to the SingleValueSettings field.
func (o *VisualizationConfiguration) SetSingleValueSettings(v SingleValueSettings) {
	o.SingleValueSettings = &v
}

// GetTableSettings returns the TableSettings field value if set, zero value otherwise.
func (o *VisualizationConfiguration) GetTableSettings() TableSettings {
	if o == nil || IsNil(o.TableSettings) {
		var ret TableSettings
		return ret
	}
	return *o.TableSettings
}

// GetTableSettingsOk returns a tuple with the TableSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetTableSettingsOk() (*TableSettings, bool) {
	if o == nil || IsNil(o.TableSettings) {
		return nil, false
	}
	return o.TableSettings, true
}

// HasTableSettings returns a boolean if a field has been set.
func (o *VisualizationConfiguration) HasTableSettings() bool {
	if o != nil && !IsNil(o.TableSettings) {
		return true
	}

	return false
}

// SetTableSettings gets a reference to the given TableSettings and assigns it to the TableSettings field.
func (o *VisualizationConfiguration) SetTableSettings(v TableSettings) {
	o.TableSettings = &v
}

// GetThresholds returns the Thresholds field value if set, zero value otherwise.
func (o *VisualizationConfiguration) GetThresholds() []VisualizationThreshold {
	if o == nil || IsNil(o.Thresholds) {
		var ret []VisualizationThreshold
		return ret
	}
	return o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetThresholdsOk() ([]VisualizationThreshold, bool) {
	if o == nil || IsNil(o.Thresholds) {
		return nil, false
	}
	return o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *VisualizationConfiguration) HasThresholds() bool {
	if o != nil && !IsNil(o.Thresholds) {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given []VisualizationThreshold and assigns it to the Thresholds field.
func (o *VisualizationConfiguration) SetThresholds(v []VisualizationThreshold) {
	o.Thresholds = v
}

// GetType returns the Type field value
func (o *VisualizationConfiguration) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VisualizationConfiguration) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VisualizationConfiguration) SetType(v string) {
	o.Type = v
}

func (o VisualizationConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Axes) {
		toSerialize["axes"] = o.Axes
	}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.GraphChartSettings) {
		toSerialize["graphChartSettings"] = o.GraphChartSettings
	}
	if !IsNil(o.HeatmapSettings) {
		toSerialize["heatmapSettings"] = o.HeatmapSettings
	}
	if !IsNil(o.HoneycombSettings) {
		toSerialize["honeycombSettings"] = o.HoneycombSettings
	}
	toSerialize["rules"] = o.Rules
	if !IsNil(o.SingleValueSettings) {
		toSerialize["singleValueSettings"] = o.SingleValueSettings
	}
	if !IsNil(o.TableSettings) {
		toSerialize["tableSettings"] = o.TableSettings
	}
	if !IsNil(o.Thresholds) {
		toSerialize["thresholds"] = o.Thresholds
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableVisualizationConfiguration struct {
	value *VisualizationConfiguration
	isSet bool
}

func (v NullableVisualizationConfiguration) Get() *VisualizationConfiguration {
	return v.value
}

func (v *NullableVisualizationConfiguration) Set(val *VisualizationConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationConfiguration(val *VisualizationConfiguration) *NullableVisualizationConfiguration {
	return &NullableVisualizationConfiguration{value: val, isSet: true}
}

func (v NullableVisualizationConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


