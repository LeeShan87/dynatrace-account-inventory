/*
Dynatrace Configuration API

Testing RUMWebApplicationConfigurationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package configv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_configv1_RUMWebApplicationConfigurationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RUMWebApplicationConfigurationAPIService CreateKeyUserAction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.CreateKeyUserAction(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService CreateOrUpdateDefaultConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.CreateOrUpdateDefaultConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService CreateWebApplicationConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.CreateWebApplicationConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService DeleteKeyUserAction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var keyUserActionId string

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.DeleteKeyUserAction(context.Background(), id, keyUserActionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService DeleteWebApplicationConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.DeleteWebApplicationConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService GetApplicationErrorConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.GetApplicationErrorConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService GetDataPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.GetDataPrivacySettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService GetDefaultApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.GetDefaultApplication(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService GetDefaultApplicationDataPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.GetDefaultApplicationDataPrivacySettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService GetWebApplicationConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.GetWebApplicationConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService ListDataPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.ListDataPrivacySettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService ListKeyUserActions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.ListKeyUserActions(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService ListWebApplicationConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.ListWebApplicationConfigs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService UpdateApplicationErrorConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.UpdateApplicationErrorConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService UpdateDataPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.UpdateDataPrivacySettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService UpdateDefaultApplicationDataPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.UpdateDefaultApplicationDataPrivacySettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService UpdateWebApplicationConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.UpdateWebApplicationConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService ValidateCreateWebApplicationConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.ValidateCreateWebApplicationConfig(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService ValidateDataPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.ValidateDataPrivacySettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService ValidateDefaultApplicationDataPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.ValidateDefaultApplicationDataPrivacySettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService ValidateDefaultConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.ValidateDefaultConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMWebApplicationConfigurationAPIService ValidateUpdateWebApplicationConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.RUMWebApplicationConfigurationAPI.ValidateUpdateWebApplicationConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
