/*
Dynatrace Configuration API

Testing ExtensionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package configv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_configv1_ExtensionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExtensionsAPIService CreateLocalExtensionConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExtensionsAPI.CreateLocalExtensionConfiguration(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService DeleteExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ExtensionsAPI.DeleteExtension(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService DeleteLocalExtensionConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var configurationId string

		httpRes, err := apiClient.ExtensionsAPI.DeleteLocalExtensionConfiguration(context.Background(), id, configurationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService GetExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExtensionsAPI.GetExtension(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService GetExtensionBinary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ExtensionsAPI.GetExtensionBinary(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService GetExtensionConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExtensionsAPI.GetExtensionConfigurations(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService GetExtensionGlobalConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExtensionsAPI.GetExtensionGlobalConfiguration(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService GetExtensionStates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExtensionsAPI.GetExtensionStates(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService GetExtensions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExtensionsAPI.GetExtensions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService GetHostsForTechnology", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var technology string

		resp, httpRes, err := apiClient.ExtensionsAPI.GetHostsForTechnology(context.Background(), technology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService GetLocalExtensionConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var configurationId string

		resp, httpRes, err := apiClient.ExtensionsAPI.GetLocalExtensionConfiguration(context.Background(), id, configurationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService GetRemoteExtensionModules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExtensionsAPI.GetRemoteExtensionModules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService UpdateGlobalExtensionConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ExtensionsAPI.UpdateGlobalExtensionConfiguration(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService UpdateLocalExtensionConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var configurationId string

		httpRes, err := apiClient.ExtensionsAPI.UpdateLocalExtensionConfiguration(context.Background(), id, configurationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService UploadExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExtensionsAPI.UploadExtension(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService ValidateExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ExtensionsAPI.ValidateExtension(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsAPIService ValidateLocalExtensionConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ExtensionsAPI.ValidateLocalExtensionConfiguration(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
