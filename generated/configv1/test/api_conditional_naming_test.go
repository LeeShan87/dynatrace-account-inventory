/*
Dynatrace Configuration API

Testing ConditionalNamingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package configv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_configv1_ConditionalNamingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConditionalNamingAPIService CreateNamingRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.ConditionalNamingAPI.CreateNamingRule(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConditionalNamingAPIService DeleteNamingRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string
		var id string

		httpRes, err := apiClient.ConditionalNamingAPI.DeleteNamingRule(context.Background(), type_, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConditionalNamingAPIService GetNamingRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string
		var id string

		resp, httpRes, err := apiClient.ConditionalNamingAPI.GetNamingRule(context.Background(), type_, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConditionalNamingAPIService ListNamingRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.ConditionalNamingAPI.ListNamingRules(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConditionalNamingAPIService UpdateNamingRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string
		var id string

		resp, httpRes, err := apiClient.ConditionalNamingAPI.UpdateNamingRule(context.Background(), type_, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConditionalNamingAPIService ValidateCreateNamingRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		httpRes, err := apiClient.ConditionalNamingAPI.ValidateCreateNamingRule(context.Background(), type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConditionalNamingAPIService ValidateUpdateNamingRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string
		var id string

		httpRes, err := apiClient.ConditionalNamingAPI.ValidateUpdateNamingRule(context.Background(), type_, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
