/*
Dynatrace Configuration API

Testing RUMMobileDeobfuscationAndSymbolicationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package configv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_configv1_RUMMobileDeobfuscationAndSymbolicationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService CreateOrUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var packageName string
		var os string
		var versionCode string
		var versionName string

		httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.CreateOrUpdate(context.Background(), applicationId, packageName, os, versionCode, versionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService CreateOrUpdatePinning", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var packageName string
		var os string
		var versionCode string
		var versionName string

		httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.CreateOrUpdatePinning(context.Background(), applicationId, packageName, os, versionCode, versionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService DeleteApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.DeleteApp(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService DeleteSingleFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var packageName string
		var os string
		var versionCode string
		var versionName string

		httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.DeleteSingleFile(context.Background(), applicationId, packageName, os, versionCode, versionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService GetAll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.GetAll(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService GetAllPerApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.GetAllPerApplication(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService GetDssClientUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.GetDssClientUrl(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService GetInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.GetInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService GetSingle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var packageName string
		var os string
		var versionCode string
		var versionName string

		resp, httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.GetSingle(context.Background(), applicationId, packageName, os, versionCode, versionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService GetSupportedVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.GetSupportedVersion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMMobileDeobfuscationAndSymbolicationAPIService ValidatePinning", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var packageName string
		var os string
		var versionCode string
		var versionName string

		httpRes, err := apiClient.RUMMobileDeobfuscationAndSymbolicationAPI.ValidatePinning(context.Background(), applicationId, packageName, os, versionCode, versionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
