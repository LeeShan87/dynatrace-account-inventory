/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SingleValueSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleValueSettings{}

// SingleValueSettings Settings for single value visualization
type SingleValueSettings struct {
	LinkTileColorToThreshold *bool `json:"linkTileColorToThreshold,omitempty"`
	ShowSparkLine *bool `json:"showSparkLine,omitempty"`
	ShowTrend *bool `json:"showTrend,omitempty"`
}

// NewSingleValueSettings instantiates a new SingleValueSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleValueSettings() *SingleValueSettings {
	this := SingleValueSettings{}
	return &this
}

// NewSingleValueSettingsWithDefaults instantiates a new SingleValueSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleValueSettingsWithDefaults() *SingleValueSettings {
	this := SingleValueSettings{}
	return &this
}

// GetLinkTileColorToThreshold returns the LinkTileColorToThreshold field value if set, zero value otherwise.
func (o *SingleValueSettings) GetLinkTileColorToThreshold() bool {
	if o == nil || IsNil(o.LinkTileColorToThreshold) {
		var ret bool
		return ret
	}
	return *o.LinkTileColorToThreshold
}

// GetLinkTileColorToThresholdOk returns a tuple with the LinkTileColorToThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleValueSettings) GetLinkTileColorToThresholdOk() (*bool, bool) {
	if o == nil || IsNil(o.LinkTileColorToThreshold) {
		return nil, false
	}
	return o.LinkTileColorToThreshold, true
}

// HasLinkTileColorToThreshold returns a boolean if a field has been set.
func (o *SingleValueSettings) HasLinkTileColorToThreshold() bool {
	if o != nil && !IsNil(o.LinkTileColorToThreshold) {
		return true
	}

	return false
}

// SetLinkTileColorToThreshold gets a reference to the given bool and assigns it to the LinkTileColorToThreshold field.
func (o *SingleValueSettings) SetLinkTileColorToThreshold(v bool) {
	o.LinkTileColorToThreshold = &v
}

// GetShowSparkLine returns the ShowSparkLine field value if set, zero value otherwise.
func (o *SingleValueSettings) GetShowSparkLine() bool {
	if o == nil || IsNil(o.ShowSparkLine) {
		var ret bool
		return ret
	}
	return *o.ShowSparkLine
}

// GetShowSparkLineOk returns a tuple with the ShowSparkLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleValueSettings) GetShowSparkLineOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowSparkLine) {
		return nil, false
	}
	return o.ShowSparkLine, true
}

// HasShowSparkLine returns a boolean if a field has been set.
func (o *SingleValueSettings) HasShowSparkLine() bool {
	if o != nil && !IsNil(o.ShowSparkLine) {
		return true
	}

	return false
}

// SetShowSparkLine gets a reference to the given bool and assigns it to the ShowSparkLine field.
func (o *SingleValueSettings) SetShowSparkLine(v bool) {
	o.ShowSparkLine = &v
}

// GetShowTrend returns the ShowTrend field value if set, zero value otherwise.
func (o *SingleValueSettings) GetShowTrend() bool {
	if o == nil || IsNil(o.ShowTrend) {
		var ret bool
		return ret
	}
	return *o.ShowTrend
}

// GetShowTrendOk returns a tuple with the ShowTrend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleValueSettings) GetShowTrendOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowTrend) {
		return nil, false
	}
	return o.ShowTrend, true
}

// HasShowTrend returns a boolean if a field has been set.
func (o *SingleValueSettings) HasShowTrend() bool {
	if o != nil && !IsNil(o.ShowTrend) {
		return true
	}

	return false
}

// SetShowTrend gets a reference to the given bool and assigns it to the ShowTrend field.
func (o *SingleValueSettings) SetShowTrend(v bool) {
	o.ShowTrend = &v
}

func (o SingleValueSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleValueSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LinkTileColorToThreshold) {
		toSerialize["linkTileColorToThreshold"] = o.LinkTileColorToThreshold
	}
	if !IsNil(o.ShowSparkLine) {
		toSerialize["showSparkLine"] = o.ShowSparkLine
	}
	if !IsNil(o.ShowTrend) {
		toSerialize["showTrend"] = o.ShowTrend
	}
	return toSerialize, nil
}

type NullableSingleValueSettings struct {
	value *SingleValueSettings
	isSet bool
}

func (v NullableSingleValueSettings) Get() *SingleValueSettings {
	return v.value
}

func (v *NullableSingleValueSettings) Set(val *SingleValueSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleValueSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleValueSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleValueSettings(val *SingleValueSettings) *NullableSingleValueSettings {
	return &NullableSingleValueSettings{value: val, isSet: true}
}

func (v NullableSingleValueSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleValueSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


