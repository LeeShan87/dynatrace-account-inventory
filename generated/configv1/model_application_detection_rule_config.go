/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ApplicationDetectionRuleConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationDetectionRuleConfig{}

// ApplicationDetectionRuleConfig Application detection rule.
type ApplicationDetectionRuleConfig struct {
	// The Dynatrace entity ID of the application, for example `APPLICATION-4A3B43`.    You must use an existing ID. If you need to create a rule for an application that doesn't exist yet, [create an application first](https://dt-url.net/vt03khh) and then configure detection rules for it.
	ApplicationIdentifier string `json:"applicationIdentifier"`
	FilterConfig ApplicationFilter `json:"filterConfig"`
	// The ID of the rule.
	Id *string `json:"id,omitempty"`
	Metadata *ConfigurationMetadataDtoImpl `json:"metadata,omitempty"`
	// The unique name of the Application detection rule.
	Name *string `json:"name,omitempty"`
	// The order of the rule in the rules list.   The rules are evaluated from top to bottom. The first matching rule applies.
	Order *string `json:"order,omitempty"`
}

// NewApplicationDetectionRuleConfig instantiates a new ApplicationDetectionRuleConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationDetectionRuleConfig(applicationIdentifier string, filterConfig ApplicationFilter) *ApplicationDetectionRuleConfig {
	this := ApplicationDetectionRuleConfig{}
	this.ApplicationIdentifier = applicationIdentifier
	this.FilterConfig = filterConfig
	return &this
}

// NewApplicationDetectionRuleConfigWithDefaults instantiates a new ApplicationDetectionRuleConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationDetectionRuleConfigWithDefaults() *ApplicationDetectionRuleConfig {
	this := ApplicationDetectionRuleConfig{}
	return &this
}

// GetApplicationIdentifier returns the ApplicationIdentifier field value
func (o *ApplicationDetectionRuleConfig) GetApplicationIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationIdentifier
}

// GetApplicationIdentifierOk returns a tuple with the ApplicationIdentifier field value
// and a boolean to check if the value has been set.
func (o *ApplicationDetectionRuleConfig) GetApplicationIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationIdentifier, true
}

// SetApplicationIdentifier sets field value
func (o *ApplicationDetectionRuleConfig) SetApplicationIdentifier(v string) {
	o.ApplicationIdentifier = v
}

// GetFilterConfig returns the FilterConfig field value
func (o *ApplicationDetectionRuleConfig) GetFilterConfig() ApplicationFilter {
	if o == nil {
		var ret ApplicationFilter
		return ret
	}

	return o.FilterConfig
}

// GetFilterConfigOk returns a tuple with the FilterConfig field value
// and a boolean to check if the value has been set.
func (o *ApplicationDetectionRuleConfig) GetFilterConfigOk() (*ApplicationFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterConfig, true
}

// SetFilterConfig sets field value
func (o *ApplicationDetectionRuleConfig) SetFilterConfig(v ApplicationFilter) {
	o.FilterConfig = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationDetectionRuleConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDetectionRuleConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationDetectionRuleConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationDetectionRuleConfig) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ApplicationDetectionRuleConfig) GetMetadata() ConfigurationMetadataDtoImpl {
	if o == nil || IsNil(o.Metadata) {
		var ret ConfigurationMetadataDtoImpl
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDetectionRuleConfig) GetMetadataOk() (*ConfigurationMetadataDtoImpl, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ApplicationDetectionRuleConfig) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadataDtoImpl and assigns it to the Metadata field.
func (o *ApplicationDetectionRuleConfig) SetMetadata(v ConfigurationMetadataDtoImpl) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplicationDetectionRuleConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDetectionRuleConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationDetectionRuleConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplicationDetectionRuleConfig) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ApplicationDetectionRuleConfig) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDetectionRuleConfig) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ApplicationDetectionRuleConfig) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *ApplicationDetectionRuleConfig) SetOrder(v string) {
	o.Order = &v
}

func (o ApplicationDetectionRuleConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationDetectionRuleConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicationIdentifier"] = o.ApplicationIdentifier
	toSerialize["filterConfig"] = o.FilterConfig
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullableApplicationDetectionRuleConfig struct {
	value *ApplicationDetectionRuleConfig
	isSet bool
}

func (v NullableApplicationDetectionRuleConfig) Get() *ApplicationDetectionRuleConfig {
	return v.value
}

func (v *NullableApplicationDetectionRuleConfig) Set(val *ApplicationDetectionRuleConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationDetectionRuleConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationDetectionRuleConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationDetectionRuleConfig(val *ApplicationDetectionRuleConfig) *NullableApplicationDetectionRuleConfig {
	return &NullableApplicationDetectionRuleConfig{value: val, isSet: true}
}

func (v NullableApplicationDetectionRuleConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationDetectionRuleConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


