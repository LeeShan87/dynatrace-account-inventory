/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the CalculatedMobileMetricUserActionFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalculatedMobileMetricUserActionFilter{}

// CalculatedMobileMetricUserActionFilter User actions filter of the calculated metric for mobile or custom app.
type CalculatedMobileMetricUserActionFilter struct {
	// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationFromMilliseconds *int32 `json:"actionDurationFromMilliseconds,omitempty"`
	// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationToMilliseconds *int32 `json:"actionDurationToMilliseconds,omitempty"`
	// Only actions with the specified Apdex score are included in the metric calculation.
	Apdex *string `json:"apdex,omitempty"`
	// Only actions coming from this app version are included in the metric calculation.    The EQUALS operator applies.
	AppVersion *string `json:"appVersion,omitempty"`
	// Only actions coming from this carrier type are included in the metric calculation.
	Carrier *string `json:"carrier,omitempty"`
	// Only actions of users from this city are included in the metric calculation.    Specify geolocation ID here.
	City *string `json:"city,omitempty"`
	// Only actions coming from this connection type are included in the metric calculation.
	ConnectionType *string `json:"connectionType,omitempty"`
	// Only actions of users from this continent are included in the metric calculation.    Specify geolocation ID here.
	Continent *string `json:"continent,omitempty"`
	// Only actions of users from this country are included in the metric calculation.    Specify geolocation ID here.
	Country *string `json:"country,omitempty"`
	// Only actions coming from this app version are included in the metric calculation.    The EQUALS operator applies.
	Device *string `json:"device,omitempty"`
	// The HTTP error status of the actions to be included in the metric calculation:   * `true`: Only actions with HTTP errors are included.    * `false`: All actions are included.
	HasHttpError *bool `json:"hasHttpError,omitempty"`
	// The error status of the actions to be included in the metric calculation:   * `true`: Only actions with reported errors are included.    * `false`: All actions are included.
	HasReportedError *bool `json:"hasReportedError,omitempty"`
	// Only actions coming from this internet service provider are included in the metric calculation.     The EQUALS operator applies.
	Isp *string `json:"isp,omitempty"`
	// Only actions coming from devices of this manufacturer are included in the metric calculation.    The EQUALS operator applies.
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Filter by network technology
	NetworkTechnology *string `json:"networkTechnology,omitempty"`
	// Only actions coming from devices with this display orientation are included in the metric calculation.
	Orientation *string `json:"orientation,omitempty"`
	// Only actions coming from this OS family are included in the metric calculation.    Specify the OS ID here.
	OsFamily *string `json:"osFamily,omitempty"`
	// Only actions coming from this OS version are included in the metric calculation.    Specify the OS ID here.
	OsVersion *string `json:"osVersion,omitempty"`
	// Only actions of users from this region are included in the metric calculation.    Specify geolocation ID here.
	Region *string `json:"region,omitempty"`
	// Only actions coming from devices with this display resolution are included in the metric calculation.
	Resolution *string `json:"resolution,omitempty"`
	// Only actions with this name are included in the metric calculation.    The EQUALS operator applies.
	UserActionName *string `json:"userActionName,omitempty"`
}

// NewCalculatedMobileMetricUserActionFilter instantiates a new CalculatedMobileMetricUserActionFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculatedMobileMetricUserActionFilter() *CalculatedMobileMetricUserActionFilter {
	this := CalculatedMobileMetricUserActionFilter{}
	return &this
}

// NewCalculatedMobileMetricUserActionFilterWithDefaults instantiates a new CalculatedMobileMetricUserActionFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculatedMobileMetricUserActionFilterWithDefaults() *CalculatedMobileMetricUserActionFilter {
	this := CalculatedMobileMetricUserActionFilter{}
	return &this
}

// GetActionDurationFromMilliseconds returns the ActionDurationFromMilliseconds field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetActionDurationFromMilliseconds() int32 {
	if o == nil || IsNil(o.ActionDurationFromMilliseconds) {
		var ret int32
		return ret
	}
	return *o.ActionDurationFromMilliseconds
}

// GetActionDurationFromMillisecondsOk returns a tuple with the ActionDurationFromMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetActionDurationFromMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionDurationFromMilliseconds) {
		return nil, false
	}
	return o.ActionDurationFromMilliseconds, true
}

// HasActionDurationFromMilliseconds returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasActionDurationFromMilliseconds() bool {
	if o != nil && !IsNil(o.ActionDurationFromMilliseconds) {
		return true
	}

	return false
}

// SetActionDurationFromMilliseconds gets a reference to the given int32 and assigns it to the ActionDurationFromMilliseconds field.
func (o *CalculatedMobileMetricUserActionFilter) SetActionDurationFromMilliseconds(v int32) {
	o.ActionDurationFromMilliseconds = &v
}

// GetActionDurationToMilliseconds returns the ActionDurationToMilliseconds field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetActionDurationToMilliseconds() int32 {
	if o == nil || IsNil(o.ActionDurationToMilliseconds) {
		var ret int32
		return ret
	}
	return *o.ActionDurationToMilliseconds
}

// GetActionDurationToMillisecondsOk returns a tuple with the ActionDurationToMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetActionDurationToMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionDurationToMilliseconds) {
		return nil, false
	}
	return o.ActionDurationToMilliseconds, true
}

// HasActionDurationToMilliseconds returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasActionDurationToMilliseconds() bool {
	if o != nil && !IsNil(o.ActionDurationToMilliseconds) {
		return true
	}

	return false
}

// SetActionDurationToMilliseconds gets a reference to the given int32 and assigns it to the ActionDurationToMilliseconds field.
func (o *CalculatedMobileMetricUserActionFilter) SetActionDurationToMilliseconds(v int32) {
	o.ActionDurationToMilliseconds = &v
}

// GetApdex returns the Apdex field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetApdex() string {
	if o == nil || IsNil(o.Apdex) {
		var ret string
		return ret
	}
	return *o.Apdex
}

// GetApdexOk returns a tuple with the Apdex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetApdexOk() (*string, bool) {
	if o == nil || IsNil(o.Apdex) {
		return nil, false
	}
	return o.Apdex, true
}

// HasApdex returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasApdex() bool {
	if o != nil && !IsNil(o.Apdex) {
		return true
	}

	return false
}

// SetApdex gets a reference to the given string and assigns it to the Apdex field.
func (o *CalculatedMobileMetricUserActionFilter) SetApdex(v string) {
	o.Apdex = &v
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetAppVersion() string {
	if o == nil || IsNil(o.AppVersion) {
		var ret string
		return ret
	}
	return *o.AppVersion
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetAppVersionOk() (*string, bool) {
	if o == nil || IsNil(o.AppVersion) {
		return nil, false
	}
	return o.AppVersion, true
}

// HasAppVersion returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasAppVersion() bool {
	if o != nil && !IsNil(o.AppVersion) {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given string and assigns it to the AppVersion field.
func (o *CalculatedMobileMetricUserActionFilter) SetAppVersion(v string) {
	o.AppVersion = &v
}

// GetCarrier returns the Carrier field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetCarrier() string {
	if o == nil || IsNil(o.Carrier) {
		var ret string
		return ret
	}
	return *o.Carrier
}

// GetCarrierOk returns a tuple with the Carrier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetCarrierOk() (*string, bool) {
	if o == nil || IsNil(o.Carrier) {
		return nil, false
	}
	return o.Carrier, true
}

// HasCarrier returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasCarrier() bool {
	if o != nil && !IsNil(o.Carrier) {
		return true
	}

	return false
}

// SetCarrier gets a reference to the given string and assigns it to the Carrier field.
func (o *CalculatedMobileMetricUserActionFilter) SetCarrier(v string) {
	o.Carrier = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CalculatedMobileMetricUserActionFilter) SetCity(v string) {
	o.City = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType) {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetConnectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *CalculatedMobileMetricUserActionFilter) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetContinent returns the Continent field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetContinent() string {
	if o == nil || IsNil(o.Continent) {
		var ret string
		return ret
	}
	return *o.Continent
}

// GetContinentOk returns a tuple with the Continent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetContinentOk() (*string, bool) {
	if o == nil || IsNil(o.Continent) {
		return nil, false
	}
	return o.Continent, true
}

// HasContinent returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasContinent() bool {
	if o != nil && !IsNil(o.Continent) {
		return true
	}

	return false
}

// SetContinent gets a reference to the given string and assigns it to the Continent field.
func (o *CalculatedMobileMetricUserActionFilter) SetContinent(v string) {
	o.Continent = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *CalculatedMobileMetricUserActionFilter) SetCountry(v string) {
	o.Country = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *CalculatedMobileMetricUserActionFilter) SetDevice(v string) {
	o.Device = &v
}

// GetHasHttpError returns the HasHttpError field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetHasHttpError() bool {
	if o == nil || IsNil(o.HasHttpError) {
		var ret bool
		return ret
	}
	return *o.HasHttpError
}

// GetHasHttpErrorOk returns a tuple with the HasHttpError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetHasHttpErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.HasHttpError) {
		return nil, false
	}
	return o.HasHttpError, true
}

// HasHasHttpError returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasHasHttpError() bool {
	if o != nil && !IsNil(o.HasHttpError) {
		return true
	}

	return false
}

// SetHasHttpError gets a reference to the given bool and assigns it to the HasHttpError field.
func (o *CalculatedMobileMetricUserActionFilter) SetHasHttpError(v bool) {
	o.HasHttpError = &v
}

// GetHasReportedError returns the HasReportedError field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetHasReportedError() bool {
	if o == nil || IsNil(o.HasReportedError) {
		var ret bool
		return ret
	}
	return *o.HasReportedError
}

// GetHasReportedErrorOk returns a tuple with the HasReportedError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetHasReportedErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.HasReportedError) {
		return nil, false
	}
	return o.HasReportedError, true
}

// HasHasReportedError returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasHasReportedError() bool {
	if o != nil && !IsNil(o.HasReportedError) {
		return true
	}

	return false
}

// SetHasReportedError gets a reference to the given bool and assigns it to the HasReportedError field.
func (o *CalculatedMobileMetricUserActionFilter) SetHasReportedError(v bool) {
	o.HasReportedError = &v
}

// GetIsp returns the Isp field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetIsp() string {
	if o == nil || IsNil(o.Isp) {
		var ret string
		return ret
	}
	return *o.Isp
}

// GetIspOk returns a tuple with the Isp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetIspOk() (*string, bool) {
	if o == nil || IsNil(o.Isp) {
		return nil, false
	}
	return o.Isp, true
}

// HasIsp returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasIsp() bool {
	if o != nil && !IsNil(o.Isp) {
		return true
	}

	return false
}

// SetIsp gets a reference to the given string and assigns it to the Isp field.
func (o *CalculatedMobileMetricUserActionFilter) SetIsp(v string) {
	o.Isp = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer) {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetManufacturerOk() (*string, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *CalculatedMobileMetricUserActionFilter) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetNetworkTechnology returns the NetworkTechnology field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetNetworkTechnology() string {
	if o == nil || IsNil(o.NetworkTechnology) {
		var ret string
		return ret
	}
	return *o.NetworkTechnology
}

// GetNetworkTechnologyOk returns a tuple with the NetworkTechnology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetNetworkTechnologyOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkTechnology) {
		return nil, false
	}
	return o.NetworkTechnology, true
}

// HasNetworkTechnology returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasNetworkTechnology() bool {
	if o != nil && !IsNil(o.NetworkTechnology) {
		return true
	}

	return false
}

// SetNetworkTechnology gets a reference to the given string and assigns it to the NetworkTechnology field.
func (o *CalculatedMobileMetricUserActionFilter) SetNetworkTechnology(v string) {
	o.NetworkTechnology = &v
}

// GetOrientation returns the Orientation field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetOrientation() string {
	if o == nil || IsNil(o.Orientation) {
		var ret string
		return ret
	}
	return *o.Orientation
}

// GetOrientationOk returns a tuple with the Orientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetOrientationOk() (*string, bool) {
	if o == nil || IsNil(o.Orientation) {
		return nil, false
	}
	return o.Orientation, true
}

// HasOrientation returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasOrientation() bool {
	if o != nil && !IsNil(o.Orientation) {
		return true
	}

	return false
}

// SetOrientation gets a reference to the given string and assigns it to the Orientation field.
func (o *CalculatedMobileMetricUserActionFilter) SetOrientation(v string) {
	o.Orientation = &v
}

// GetOsFamily returns the OsFamily field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetOsFamily() string {
	if o == nil || IsNil(o.OsFamily) {
		var ret string
		return ret
	}
	return *o.OsFamily
}

// GetOsFamilyOk returns a tuple with the OsFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetOsFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.OsFamily) {
		return nil, false
	}
	return o.OsFamily, true
}

// HasOsFamily returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasOsFamily() bool {
	if o != nil && !IsNil(o.OsFamily) {
		return true
	}

	return false
}

// SetOsFamily gets a reference to the given string and assigns it to the OsFamily field.
func (o *CalculatedMobileMetricUserActionFilter) SetOsFamily(v string) {
	o.OsFamily = &v
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetOsVersion() string {
	if o == nil || IsNil(o.OsVersion) {
		var ret string
		return ret
	}
	return *o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetOsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.OsVersion) {
		return nil, false
	}
	return o.OsVersion, true
}

// HasOsVersion returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasOsVersion() bool {
	if o != nil && !IsNil(o.OsVersion) {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given string and assigns it to the OsVersion field.
func (o *CalculatedMobileMetricUserActionFilter) SetOsVersion(v string) {
	o.OsVersion = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CalculatedMobileMetricUserActionFilter) SetRegion(v string) {
	o.Region = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetResolution() string {
	if o == nil || IsNil(o.Resolution) {
		var ret string
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.Resolution) {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasResolution() bool {
	if o != nil && !IsNil(o.Resolution) {
		return true
	}

	return false
}

// SetResolution gets a reference to the given string and assigns it to the Resolution field.
func (o *CalculatedMobileMetricUserActionFilter) SetResolution(v string) {
	o.Resolution = &v
}

// GetUserActionName returns the UserActionName field value if set, zero value otherwise.
func (o *CalculatedMobileMetricUserActionFilter) GetUserActionName() string {
	if o == nil || IsNil(o.UserActionName) {
		var ret string
		return ret
	}
	return *o.UserActionName
}

// GetUserActionNameOk returns a tuple with the UserActionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricUserActionFilter) GetUserActionNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserActionName) {
		return nil, false
	}
	return o.UserActionName, true
}

// HasUserActionName returns a boolean if a field has been set.
func (o *CalculatedMobileMetricUserActionFilter) HasUserActionName() bool {
	if o != nil && !IsNil(o.UserActionName) {
		return true
	}

	return false
}

// SetUserActionName gets a reference to the given string and assigns it to the UserActionName field.
func (o *CalculatedMobileMetricUserActionFilter) SetUserActionName(v string) {
	o.UserActionName = &v
}

func (o CalculatedMobileMetricUserActionFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalculatedMobileMetricUserActionFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionDurationFromMilliseconds) {
		toSerialize["actionDurationFromMilliseconds"] = o.ActionDurationFromMilliseconds
	}
	if !IsNil(o.ActionDurationToMilliseconds) {
		toSerialize["actionDurationToMilliseconds"] = o.ActionDurationToMilliseconds
	}
	if !IsNil(o.Apdex) {
		toSerialize["apdex"] = o.Apdex
	}
	if !IsNil(o.AppVersion) {
		toSerialize["appVersion"] = o.AppVersion
	}
	if !IsNil(o.Carrier) {
		toSerialize["carrier"] = o.Carrier
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.ConnectionType) {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if !IsNil(o.Continent) {
		toSerialize["continent"] = o.Continent
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.HasHttpError) {
		toSerialize["hasHttpError"] = o.HasHttpError
	}
	if !IsNil(o.HasReportedError) {
		toSerialize["hasReportedError"] = o.HasReportedError
	}
	if !IsNil(o.Isp) {
		toSerialize["isp"] = o.Isp
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.NetworkTechnology) {
		toSerialize["networkTechnology"] = o.NetworkTechnology
	}
	if !IsNil(o.Orientation) {
		toSerialize["orientation"] = o.Orientation
	}
	if !IsNil(o.OsFamily) {
		toSerialize["osFamily"] = o.OsFamily
	}
	if !IsNil(o.OsVersion) {
		toSerialize["osVersion"] = o.OsVersion
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Resolution) {
		toSerialize["resolution"] = o.Resolution
	}
	if !IsNil(o.UserActionName) {
		toSerialize["userActionName"] = o.UserActionName
	}
	return toSerialize, nil
}

type NullableCalculatedMobileMetricUserActionFilter struct {
	value *CalculatedMobileMetricUserActionFilter
	isSet bool
}

func (v NullableCalculatedMobileMetricUserActionFilter) Get() *CalculatedMobileMetricUserActionFilter {
	return v.value
}

func (v *NullableCalculatedMobileMetricUserActionFilter) Set(val *CalculatedMobileMetricUserActionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatedMobileMetricUserActionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatedMobileMetricUserActionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatedMobileMetricUserActionFilter(val *CalculatedMobileMetricUserActionFilter) *NullableCalculatedMobileMetricUserActionFilter {
	return &NullableCalculatedMobileMetricUserActionFilter{value: val, isSet: true}
}

func (v NullableCalculatedMobileMetricUserActionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatedMobileMetricUserActionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


