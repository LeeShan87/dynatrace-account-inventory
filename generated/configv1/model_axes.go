/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the Axes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Axes{}

// Axes Axes configuration
type Axes struct {
	XAxis Axis `json:"xAxis"`
	// y Axes configuration
	YAxes []YAxis `json:"yAxes"`
}

// NewAxes instantiates a new Axes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAxes(xAxis Axis, yAxes []YAxis) *Axes {
	this := Axes{}
	this.XAxis = xAxis
	this.YAxes = yAxes
	return &this
}

// NewAxesWithDefaults instantiates a new Axes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAxesWithDefaults() *Axes {
	this := Axes{}
	return &this
}

// GetXAxis returns the XAxis field value
func (o *Axes) GetXAxis() Axis {
	if o == nil {
		var ret Axis
		return ret
	}

	return o.XAxis
}

// GetXAxisOk returns a tuple with the XAxis field value
// and a boolean to check if the value has been set.
func (o *Axes) GetXAxisOk() (*Axis, bool) {
	if o == nil {
		return nil, false
	}
	return &o.XAxis, true
}

// SetXAxis sets field value
func (o *Axes) SetXAxis(v Axis) {
	o.XAxis = v
}

// GetYAxes returns the YAxes field value
func (o *Axes) GetYAxes() []YAxis {
	if o == nil {
		var ret []YAxis
		return ret
	}

	return o.YAxes
}

// GetYAxesOk returns a tuple with the YAxes field value
// and a boolean to check if the value has been set.
func (o *Axes) GetYAxesOk() ([]YAxis, bool) {
	if o == nil {
		return nil, false
	}
	return o.YAxes, true
}

// SetYAxes sets field value
func (o *Axes) SetYAxes(v []YAxis) {
	o.YAxes = v
}

func (o Axes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Axes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["xAxis"] = o.XAxis
	toSerialize["yAxes"] = o.YAxes
	return toSerialize, nil
}

type NullableAxes struct {
	value *Axes
	isSet bool
}

func (v NullableAxes) Get() *Axes {
	return v.value
}

func (v *NullableAxes) Set(val *Axes) {
	v.value = val
	v.isSet = true
}

func (v NullableAxes) IsSet() bool {
	return v.isSet
}

func (v *NullableAxes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAxes(val *Axes) *NullableAxes {
	return &NullableAxes{value: val, isSet: true}
}

func (v NullableAxes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAxes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


