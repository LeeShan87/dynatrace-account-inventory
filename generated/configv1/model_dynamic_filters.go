/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the DynamicFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicFilters{}

// DynamicFilters Dashboard filter configuration of a dashboard.
type DynamicFilters struct {
	// A set of all possible global dashboard filters that can be applied to a dashboard   Currently supported values are:    OS_TYPE,  SERVICE_TYPE,  DEPLOYMENT_TYPE,  APPLICATION_INJECTION_TYPE,  PAAS_VENDOR_TYPE,  DATABASE_VENDOR,  HOST_VIRTUALIZATION_TYPE,  HOST_MONITORING_MODE,  KUBERNETES_CLUSTER,  RELATED_CLOUD_APPLICATION,  RELATED_NAMESPACE,  SERVICE_TAG_KEY:<tagname>,  HOST_TAG_KEY:<tagname>,  APPLICATION_TAG_KEY:<tagname>,  CUSTOM_DIMENSION:<key>,  PROCESS_GROUP_TAG_KEY:<tagname>,  PROCESS_GROUP_INSTANCE_TAG_KEY:<tagname>
	Filters []string `json:"filters"`
	// A set of generic tag filters that can be applied to a dashboard
	GenericTagFilters []DashboardGenericTagFilter `json:"genericTagFilters"`
}

// NewDynamicFilters instantiates a new DynamicFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicFilters(filters []string, genericTagFilters []DashboardGenericTagFilter) *DynamicFilters {
	this := DynamicFilters{}
	this.Filters = filters
	this.GenericTagFilters = genericTagFilters
	return &this
}

// NewDynamicFiltersWithDefaults instantiates a new DynamicFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicFiltersWithDefaults() *DynamicFilters {
	this := DynamicFilters{}
	return &this
}

// GetFilters returns the Filters field value
func (o *DynamicFilters) GetFilters() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *DynamicFilters) GetFiltersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *DynamicFilters) SetFilters(v []string) {
	o.Filters = v
}

// GetGenericTagFilters returns the GenericTagFilters field value
func (o *DynamicFilters) GetGenericTagFilters() []DashboardGenericTagFilter {
	if o == nil {
		var ret []DashboardGenericTagFilter
		return ret
	}

	return o.GenericTagFilters
}

// GetGenericTagFiltersOk returns a tuple with the GenericTagFilters field value
// and a boolean to check if the value has been set.
func (o *DynamicFilters) GetGenericTagFiltersOk() ([]DashboardGenericTagFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.GenericTagFilters, true
}

// SetGenericTagFilters sets field value
func (o *DynamicFilters) SetGenericTagFilters(v []DashboardGenericTagFilter) {
	o.GenericTagFilters = v
}

func (o DynamicFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filters"] = o.Filters
	toSerialize["genericTagFilters"] = o.GenericTagFilters
	return toSerialize, nil
}

type NullableDynamicFilters struct {
	value *DynamicFilters
	isSet bool
}

func (v NullableDynamicFilters) Get() *DynamicFilters {
	return v.value
}

func (v *NullableDynamicFilters) Set(val *DynamicFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicFilters(val *DynamicFilters) *NullableDynamicFilters {
	return &NullableDynamicFilters{value: val, isSet: true}
}

func (v NullableDynamicFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


