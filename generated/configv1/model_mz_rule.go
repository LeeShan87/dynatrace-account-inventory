/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the MzRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MzRule{}

// MzRule The rule of the management zone usage. It defines how the management zone applies.   Each rule is evaluated independently of all other rules.
type MzRule struct {
	// A list of matching rules for the management zone.   The management zone applies only if **all** conditions are fulfilled.
	Conditions []EntityRuleEngineCondition `json:"conditions"`
	// The rule is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// How to apply the management zone to underlying entities:   * `SERVICE_TO_HOST_LIKE`: Apply to underlying hosts of matching services.  * `SERVICE_TO_PROCESS_GROUP_LIKE`: Apply to underlying process groups of matching services.  * `PROCESS_GROUP_TO_HOST`: Apply to underlying hosts of matching process groups.  * `PROCESS_GROUP_TO_SERVICE`: Apply to all services provided by matching process groups.  * `HOST_TO_PROCESS_GROUP_INSTANCE`: Apply to processes running on matching hosts.  * `CUSTOM_DEVICE_GROUP_TO_CUSTOM_DEVICE`: Apply to custom devices in matching custom device groups.  * `AZURE_TO_PG`: Apply to process groups connected to matching Azure entities.  * `AZURE_TO_SERVICE`: Apply to services provided by matching Azure entities.
	PropagationTypes []string `json:"propagationTypes,omitempty"`
	// The type of Dynatrace entities the management zone can be applied to.
	Type string `json:"type"`
}

// NewMzRule instantiates a new MzRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMzRule(conditions []EntityRuleEngineCondition, enabled bool, type_ string) *MzRule {
	this := MzRule{}
	this.Conditions = conditions
	this.Enabled = enabled
	this.Type = type_
	return &this
}

// NewMzRuleWithDefaults instantiates a new MzRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMzRuleWithDefaults() *MzRule {
	this := MzRule{}
	return &this
}

// GetConditions returns the Conditions field value
func (o *MzRule) GetConditions() []EntityRuleEngineCondition {
	if o == nil {
		var ret []EntityRuleEngineCondition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *MzRule) GetConditionsOk() ([]EntityRuleEngineCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *MzRule) SetConditions(v []EntityRuleEngineCondition) {
	o.Conditions = v
}

// GetEnabled returns the Enabled field value
func (o *MzRule) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *MzRule) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *MzRule) SetEnabled(v bool) {
	o.Enabled = v
}

// GetPropagationTypes returns the PropagationTypes field value if set, zero value otherwise.
func (o *MzRule) GetPropagationTypes() []string {
	if o == nil || IsNil(o.PropagationTypes) {
		var ret []string
		return ret
	}
	return o.PropagationTypes
}

// GetPropagationTypesOk returns a tuple with the PropagationTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MzRule) GetPropagationTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.PropagationTypes) {
		return nil, false
	}
	return o.PropagationTypes, true
}

// HasPropagationTypes returns a boolean if a field has been set.
func (o *MzRule) HasPropagationTypes() bool {
	if o != nil && !IsNil(o.PropagationTypes) {
		return true
	}

	return false
}

// SetPropagationTypes gets a reference to the given []string and assigns it to the PropagationTypes field.
func (o *MzRule) SetPropagationTypes(v []string) {
	o.PropagationTypes = v
}

// GetType returns the Type field value
func (o *MzRule) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MzRule) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MzRule) SetType(v string) {
	o.Type = v
}

func (o MzRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MzRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conditions"] = o.Conditions
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.PropagationTypes) {
		toSerialize["propagationTypes"] = o.PropagationTypes
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableMzRule struct {
	value *MzRule
	isSet bool
}

func (v NullableMzRule) Get() *MzRule {
	return v.value
}

func (v *NullableMzRule) Set(val *MzRule) {
	v.value = val
	v.isSet = true
}

func (v NullableMzRule) IsSet() bool {
	return v.isSet
}

func (v *NullableMzRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMzRule(val *MzRule) *NullableMzRule {
	return &NullableMzRule{value: val, isSet: true}
}

func (v NullableMzRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMzRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


