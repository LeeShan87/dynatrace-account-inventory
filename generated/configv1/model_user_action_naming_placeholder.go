/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the UserActionNamingPlaceholder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserActionNamingPlaceholder{}

// UserActionNamingPlaceholder The placeholder settings.
type UserActionNamingPlaceholder struct {
	// Input.
	Input string `json:"input"`
	// Id of the metadata.
	MetadataId *int32 `json:"metadataId,omitempty"`
	// Placeholder name.
	Name string `json:"name"`
	// Part.
	ProcessingPart string `json:"processingPart"`
	// Processing actions.
	ProcessingSteps []UserActionNamingPlaceholderProcessingStep `json:"processingSteps,omitempty"`
	// Use the element identifier that was selected by Dynatrace.
	UseGuessedElementIdentifier bool `json:"useGuessedElementIdentifier"`
}

// NewUserActionNamingPlaceholder instantiates a new UserActionNamingPlaceholder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserActionNamingPlaceholder(input string, name string, processingPart string, useGuessedElementIdentifier bool) *UserActionNamingPlaceholder {
	this := UserActionNamingPlaceholder{}
	this.Input = input
	this.Name = name
	this.ProcessingPart = processingPart
	this.UseGuessedElementIdentifier = useGuessedElementIdentifier
	return &this
}

// NewUserActionNamingPlaceholderWithDefaults instantiates a new UserActionNamingPlaceholder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserActionNamingPlaceholderWithDefaults() *UserActionNamingPlaceholder {
	this := UserActionNamingPlaceholder{}
	return &this
}

// GetInput returns the Input field value
func (o *UserActionNamingPlaceholder) GetInput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholder) GetInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *UserActionNamingPlaceholder) SetInput(v string) {
	o.Input = v
}

// GetMetadataId returns the MetadataId field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholder) GetMetadataId() int32 {
	if o == nil || IsNil(o.MetadataId) {
		var ret int32
		return ret
	}
	return *o.MetadataId
}

// GetMetadataIdOk returns a tuple with the MetadataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholder) GetMetadataIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MetadataId) {
		return nil, false
	}
	return o.MetadataId, true
}

// HasMetadataId returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholder) HasMetadataId() bool {
	if o != nil && !IsNil(o.MetadataId) {
		return true
	}

	return false
}

// SetMetadataId gets a reference to the given int32 and assigns it to the MetadataId field.
func (o *UserActionNamingPlaceholder) SetMetadataId(v int32) {
	o.MetadataId = &v
}

// GetName returns the Name field value
func (o *UserActionNamingPlaceholder) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholder) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserActionNamingPlaceholder) SetName(v string) {
	o.Name = v
}

// GetProcessingPart returns the ProcessingPart field value
func (o *UserActionNamingPlaceholder) GetProcessingPart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessingPart
}

// GetProcessingPartOk returns a tuple with the ProcessingPart field value
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholder) GetProcessingPartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessingPart, true
}

// SetProcessingPart sets field value
func (o *UserActionNamingPlaceholder) SetProcessingPart(v string) {
	o.ProcessingPart = v
}

// GetProcessingSteps returns the ProcessingSteps field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholder) GetProcessingSteps() []UserActionNamingPlaceholderProcessingStep {
	if o == nil || IsNil(o.ProcessingSteps) {
		var ret []UserActionNamingPlaceholderProcessingStep
		return ret
	}
	return o.ProcessingSteps
}

// GetProcessingStepsOk returns a tuple with the ProcessingSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholder) GetProcessingStepsOk() ([]UserActionNamingPlaceholderProcessingStep, bool) {
	if o == nil || IsNil(o.ProcessingSteps) {
		return nil, false
	}
	return o.ProcessingSteps, true
}

// HasProcessingSteps returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholder) HasProcessingSteps() bool {
	if o != nil && !IsNil(o.ProcessingSteps) {
		return true
	}

	return false
}

// SetProcessingSteps gets a reference to the given []UserActionNamingPlaceholderProcessingStep and assigns it to the ProcessingSteps field.
func (o *UserActionNamingPlaceholder) SetProcessingSteps(v []UserActionNamingPlaceholderProcessingStep) {
	o.ProcessingSteps = v
}

// GetUseGuessedElementIdentifier returns the UseGuessedElementIdentifier field value
func (o *UserActionNamingPlaceholder) GetUseGuessedElementIdentifier() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseGuessedElementIdentifier
}

// GetUseGuessedElementIdentifierOk returns a tuple with the UseGuessedElementIdentifier field value
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholder) GetUseGuessedElementIdentifierOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseGuessedElementIdentifier, true
}

// SetUseGuessedElementIdentifier sets field value
func (o *UserActionNamingPlaceholder) SetUseGuessedElementIdentifier(v bool) {
	o.UseGuessedElementIdentifier = v
}

func (o UserActionNamingPlaceholder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserActionNamingPlaceholder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["input"] = o.Input
	if !IsNil(o.MetadataId) {
		toSerialize["metadataId"] = o.MetadataId
	}
	toSerialize["name"] = o.Name
	toSerialize["processingPart"] = o.ProcessingPart
	if !IsNil(o.ProcessingSteps) {
		toSerialize["processingSteps"] = o.ProcessingSteps
	}
	toSerialize["useGuessedElementIdentifier"] = o.UseGuessedElementIdentifier
	return toSerialize, nil
}

type NullableUserActionNamingPlaceholder struct {
	value *UserActionNamingPlaceholder
	isSet bool
}

func (v NullableUserActionNamingPlaceholder) Get() *UserActionNamingPlaceholder {
	return v.value
}

func (v *NullableUserActionNamingPlaceholder) Set(val *UserActionNamingPlaceholder) {
	v.value = val
	v.isSet = true
}

func (v NullableUserActionNamingPlaceholder) IsSet() bool {
	return v.isSet
}

func (v *NullableUserActionNamingPlaceholder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserActionNamingPlaceholder(val *UserActionNamingPlaceholder) *NullableUserActionNamingPlaceholder {
	return &NullableUserActionNamingPlaceholder{value: val, isSet: true}
}

func (v NullableUserActionNamingPlaceholder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserActionNamingPlaceholder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


