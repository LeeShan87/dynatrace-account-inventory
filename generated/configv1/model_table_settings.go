/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the TableSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableSettings{}

// TableSettings Settings for table visualization
type TableSettings struct {
	HiddenColumns []string `json:"hiddenColumns,omitempty"`
	IsThresholdBackgroundAppliedToCell *bool `json:"isThresholdBackgroundAppliedToCell,omitempty"`
}

// NewTableSettings instantiates a new TableSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableSettings() *TableSettings {
	this := TableSettings{}
	return &this
}

// NewTableSettingsWithDefaults instantiates a new TableSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableSettingsWithDefaults() *TableSettings {
	this := TableSettings{}
	return &this
}

// GetHiddenColumns returns the HiddenColumns field value if set, zero value otherwise.
func (o *TableSettings) GetHiddenColumns() []string {
	if o == nil || IsNil(o.HiddenColumns) {
		var ret []string
		return ret
	}
	return o.HiddenColumns
}

// GetHiddenColumnsOk returns a tuple with the HiddenColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableSettings) GetHiddenColumnsOk() ([]string, bool) {
	if o == nil || IsNil(o.HiddenColumns) {
		return nil, false
	}
	return o.HiddenColumns, true
}

// HasHiddenColumns returns a boolean if a field has been set.
func (o *TableSettings) HasHiddenColumns() bool {
	if o != nil && !IsNil(o.HiddenColumns) {
		return true
	}

	return false
}

// SetHiddenColumns gets a reference to the given []string and assigns it to the HiddenColumns field.
func (o *TableSettings) SetHiddenColumns(v []string) {
	o.HiddenColumns = v
}

// GetIsThresholdBackgroundAppliedToCell returns the IsThresholdBackgroundAppliedToCell field value if set, zero value otherwise.
func (o *TableSettings) GetIsThresholdBackgroundAppliedToCell() bool {
	if o == nil || IsNil(o.IsThresholdBackgroundAppliedToCell) {
		var ret bool
		return ret
	}
	return *o.IsThresholdBackgroundAppliedToCell
}

// GetIsThresholdBackgroundAppliedToCellOk returns a tuple with the IsThresholdBackgroundAppliedToCell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableSettings) GetIsThresholdBackgroundAppliedToCellOk() (*bool, bool) {
	if o == nil || IsNil(o.IsThresholdBackgroundAppliedToCell) {
		return nil, false
	}
	return o.IsThresholdBackgroundAppliedToCell, true
}

// HasIsThresholdBackgroundAppliedToCell returns a boolean if a field has been set.
func (o *TableSettings) HasIsThresholdBackgroundAppliedToCell() bool {
	if o != nil && !IsNil(o.IsThresholdBackgroundAppliedToCell) {
		return true
	}

	return false
}

// SetIsThresholdBackgroundAppliedToCell gets a reference to the given bool and assigns it to the IsThresholdBackgroundAppliedToCell field.
func (o *TableSettings) SetIsThresholdBackgroundAppliedToCell(v bool) {
	o.IsThresholdBackgroundAppliedToCell = &v
}

func (o TableSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HiddenColumns) {
		toSerialize["hiddenColumns"] = o.HiddenColumns
	}
	if !IsNil(o.IsThresholdBackgroundAppliedToCell) {
		toSerialize["isThresholdBackgroundAppliedToCell"] = o.IsThresholdBackgroundAppliedToCell
	}
	return toSerialize, nil
}

type NullableTableSettings struct {
	value *TableSettings
	isSet bool
}

func (v NullableTableSettings) Get() *TableSettings {
	return v.value
}

func (v *NullableTableSettings) Set(val *TableSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTableSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTableSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableSettings(val *TableSettings) *NullableTableSettings {
	return &NullableTableSettings{value: val, isSet: true}
}

func (v NullableTableSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


