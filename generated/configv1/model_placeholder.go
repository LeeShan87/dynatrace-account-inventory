/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the Placeholder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Placeholder{}

// Placeholder The custom placeholder to be used as a naming value pattern.    It enables you to extract a request attribute value or other request attribute and use it in the naming pattern.
type Placeholder struct {
	// Which value of the request attribute must be used when it occurs across multiple child requests.   Only applicable for the `SERVICE_REQUEST_ATTRIBUTE` attribute, when **useFromChildCalls** is `true`.   For the `COUNT` aggregation, the **kind** field is not applicable.
	Aggregation *string `json:"aggregation,omitempty"`
	// The attribute to extract from. You can only use attributes of the **string** type.
	Attribute string `json:"attribute"`
	// Depending on the **type** value:    * `REGEX_EXTRACTION`: The regular expression.   * `BETWEEN_DELIMITER`: The opening delimiter string to look for.   * All other values: The delimiter string to look for.
	DelimiterOrRegex *string `json:"delimiterOrRegex,omitempty"`
	// The closing delimiter string to look for.    Required if the **kind** value is `BETWEEN_DELIMITER`. Not applicable otherwise.
	EndDelimiter *string `json:"endDelimiter,omitempty"`
	// The type of extraction.    Defines either usage of regular expression (`regex`) or the position of request attribute value to be extracted.   When the **attribute** is `SERVICE_REQUEST_ATTRIBUTE` attribute and **aggregation** is `COUNT`, needs to be set to `ORIGINAL_TEXT`
	Kind string `json:"kind"`
	// The name of the placeholder. Use it in the naming pattern as `{name}`.
	Name string `json:"name"`
	// The format of the extracted string.
	Normalization *string `json:"normalization,omitempty"`
	// The request attribute to extract from.    Required if the **kind** value is `SERVICE_REQUEST_ATTRIBUTE`. Not applicable otherwise.
	RequestAttribute *string `json:"requestAttribute,omitempty"`
	Source *PropagationSource `json:"source,omitempty"`
	// If `true` request attribute will be taken from a child service call.    Only applicable for the `SERVICE_REQUEST_ATTRIBUTE` attribute. Defaults to `false`.
	UseFromChildCalls *bool `json:"useFromChildCalls,omitempty"`
}

// NewPlaceholder instantiates a new Placeholder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaceholder(attribute string, kind string, name string) *Placeholder {
	this := Placeholder{}
	this.Attribute = attribute
	this.Kind = kind
	this.Name = name
	return &this
}

// NewPlaceholderWithDefaults instantiates a new Placeholder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaceholderWithDefaults() *Placeholder {
	this := Placeholder{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *Placeholder) GetAggregation() string {
	if o == nil || IsNil(o.Aggregation) {
		var ret string
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Placeholder) GetAggregationOk() (*string, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *Placeholder) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given string and assigns it to the Aggregation field.
func (o *Placeholder) SetAggregation(v string) {
	o.Aggregation = &v
}

// GetAttribute returns the Attribute field value
func (o *Placeholder) GetAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value
// and a boolean to check if the value has been set.
func (o *Placeholder) GetAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attribute, true
}

// SetAttribute sets field value
func (o *Placeholder) SetAttribute(v string) {
	o.Attribute = v
}

// GetDelimiterOrRegex returns the DelimiterOrRegex field value if set, zero value otherwise.
func (o *Placeholder) GetDelimiterOrRegex() string {
	if o == nil || IsNil(o.DelimiterOrRegex) {
		var ret string
		return ret
	}
	return *o.DelimiterOrRegex
}

// GetDelimiterOrRegexOk returns a tuple with the DelimiterOrRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Placeholder) GetDelimiterOrRegexOk() (*string, bool) {
	if o == nil || IsNil(o.DelimiterOrRegex) {
		return nil, false
	}
	return o.DelimiterOrRegex, true
}

// HasDelimiterOrRegex returns a boolean if a field has been set.
func (o *Placeholder) HasDelimiterOrRegex() bool {
	if o != nil && !IsNil(o.DelimiterOrRegex) {
		return true
	}

	return false
}

// SetDelimiterOrRegex gets a reference to the given string and assigns it to the DelimiterOrRegex field.
func (o *Placeholder) SetDelimiterOrRegex(v string) {
	o.DelimiterOrRegex = &v
}

// GetEndDelimiter returns the EndDelimiter field value if set, zero value otherwise.
func (o *Placeholder) GetEndDelimiter() string {
	if o == nil || IsNil(o.EndDelimiter) {
		var ret string
		return ret
	}
	return *o.EndDelimiter
}

// GetEndDelimiterOk returns a tuple with the EndDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Placeholder) GetEndDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.EndDelimiter) {
		return nil, false
	}
	return o.EndDelimiter, true
}

// HasEndDelimiter returns a boolean if a field has been set.
func (o *Placeholder) HasEndDelimiter() bool {
	if o != nil && !IsNil(o.EndDelimiter) {
		return true
	}

	return false
}

// SetEndDelimiter gets a reference to the given string and assigns it to the EndDelimiter field.
func (o *Placeholder) SetEndDelimiter(v string) {
	o.EndDelimiter = &v
}

// GetKind returns the Kind field value
func (o *Placeholder) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *Placeholder) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *Placeholder) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *Placeholder) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Placeholder) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Placeholder) SetName(v string) {
	o.Name = v
}

// GetNormalization returns the Normalization field value if set, zero value otherwise.
func (o *Placeholder) GetNormalization() string {
	if o == nil || IsNil(o.Normalization) {
		var ret string
		return ret
	}
	return *o.Normalization
}

// GetNormalizationOk returns a tuple with the Normalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Placeholder) GetNormalizationOk() (*string, bool) {
	if o == nil || IsNil(o.Normalization) {
		return nil, false
	}
	return o.Normalization, true
}

// HasNormalization returns a boolean if a field has been set.
func (o *Placeholder) HasNormalization() bool {
	if o != nil && !IsNil(o.Normalization) {
		return true
	}

	return false
}

// SetNormalization gets a reference to the given string and assigns it to the Normalization field.
func (o *Placeholder) SetNormalization(v string) {
	o.Normalization = &v
}

// GetRequestAttribute returns the RequestAttribute field value if set, zero value otherwise.
func (o *Placeholder) GetRequestAttribute() string {
	if o == nil || IsNil(o.RequestAttribute) {
		var ret string
		return ret
	}
	return *o.RequestAttribute
}

// GetRequestAttributeOk returns a tuple with the RequestAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Placeholder) GetRequestAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.RequestAttribute) {
		return nil, false
	}
	return o.RequestAttribute, true
}

// HasRequestAttribute returns a boolean if a field has been set.
func (o *Placeholder) HasRequestAttribute() bool {
	if o != nil && !IsNil(o.RequestAttribute) {
		return true
	}

	return false
}

// SetRequestAttribute gets a reference to the given string and assigns it to the RequestAttribute field.
func (o *Placeholder) SetRequestAttribute(v string) {
	o.RequestAttribute = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Placeholder) GetSource() PropagationSource {
	if o == nil || IsNil(o.Source) {
		var ret PropagationSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Placeholder) GetSourceOk() (*PropagationSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Placeholder) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given PropagationSource and assigns it to the Source field.
func (o *Placeholder) SetSource(v PropagationSource) {
	o.Source = &v
}

// GetUseFromChildCalls returns the UseFromChildCalls field value if set, zero value otherwise.
func (o *Placeholder) GetUseFromChildCalls() bool {
	if o == nil || IsNil(o.UseFromChildCalls) {
		var ret bool
		return ret
	}
	return *o.UseFromChildCalls
}

// GetUseFromChildCallsOk returns a tuple with the UseFromChildCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Placeholder) GetUseFromChildCallsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFromChildCalls) {
		return nil, false
	}
	return o.UseFromChildCalls, true
}

// HasUseFromChildCalls returns a boolean if a field has been set.
func (o *Placeholder) HasUseFromChildCalls() bool {
	if o != nil && !IsNil(o.UseFromChildCalls) {
		return true
	}

	return false
}

// SetUseFromChildCalls gets a reference to the given bool and assigns it to the UseFromChildCalls field.
func (o *Placeholder) SetUseFromChildCalls(v bool) {
	o.UseFromChildCalls = &v
}

func (o Placeholder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Placeholder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	toSerialize["attribute"] = o.Attribute
	if !IsNil(o.DelimiterOrRegex) {
		toSerialize["delimiterOrRegex"] = o.DelimiterOrRegex
	}
	if !IsNil(o.EndDelimiter) {
		toSerialize["endDelimiter"] = o.EndDelimiter
	}
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	if !IsNil(o.Normalization) {
		toSerialize["normalization"] = o.Normalization
	}
	if !IsNil(o.RequestAttribute) {
		toSerialize["requestAttribute"] = o.RequestAttribute
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.UseFromChildCalls) {
		toSerialize["useFromChildCalls"] = o.UseFromChildCalls
	}
	return toSerialize, nil
}

type NullablePlaceholder struct {
	value *Placeholder
	isSet bool
}

func (v NullablePlaceholder) Get() *Placeholder {
	return v.value
}

func (v *NullablePlaceholder) Set(val *Placeholder) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaceholder) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaceholder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaceholder(val *Placeholder) *NullablePlaceholder {
	return &NullablePlaceholder{value: val, isSet: true}
}

func (v NullablePlaceholder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaceholder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


