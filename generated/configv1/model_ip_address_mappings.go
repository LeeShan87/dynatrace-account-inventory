/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the IpAddressMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpAddressMappings{}

// IpAddressMappings Configuration of the IP address mappings to geographic locations.
type IpAddressMappings struct {
	// A list of IP address mapping rules.   Rules are evaluated from top to bottom; the first matching rule applies.
	IpAddressMappingRules []IpAddressMappingRule `json:"ipAddressMappingRules,omitempty"`
}

// NewIpAddressMappings instantiates a new IpAddressMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpAddressMappings() *IpAddressMappings {
	this := IpAddressMappings{}
	return &this
}

// NewIpAddressMappingsWithDefaults instantiates a new IpAddressMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpAddressMappingsWithDefaults() *IpAddressMappings {
	this := IpAddressMappings{}
	return &this
}

// GetIpAddressMappingRules returns the IpAddressMappingRules field value if set, zero value otherwise.
func (o *IpAddressMappings) GetIpAddressMappingRules() []IpAddressMappingRule {
	if o == nil || IsNil(o.IpAddressMappingRules) {
		var ret []IpAddressMappingRule
		return ret
	}
	return o.IpAddressMappingRules
}

// GetIpAddressMappingRulesOk returns a tuple with the IpAddressMappingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressMappings) GetIpAddressMappingRulesOk() ([]IpAddressMappingRule, bool) {
	if o == nil || IsNil(o.IpAddressMappingRules) {
		return nil, false
	}
	return o.IpAddressMappingRules, true
}

// HasIpAddressMappingRules returns a boolean if a field has been set.
func (o *IpAddressMappings) HasIpAddressMappingRules() bool {
	if o != nil && !IsNil(o.IpAddressMappingRules) {
		return true
	}

	return false
}

// SetIpAddressMappingRules gets a reference to the given []IpAddressMappingRule and assigns it to the IpAddressMappingRules field.
func (o *IpAddressMappings) SetIpAddressMappingRules(v []IpAddressMappingRule) {
	o.IpAddressMappingRules = v
}

func (o IpAddressMappings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpAddressMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IpAddressMappingRules) {
		toSerialize["ipAddressMappingRules"] = o.IpAddressMappingRules
	}
	return toSerialize, nil
}

type NullableIpAddressMappings struct {
	value *IpAddressMappings
	isSet bool
}

func (v NullableIpAddressMappings) Get() *IpAddressMappings {
	return v.value
}

func (v *NullableIpAddressMappings) Set(val *IpAddressMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAddressMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAddressMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAddressMappings(val *IpAddressMappings) *NullableIpAddressMappings {
	return &NullableIpAddressMappings{value: val, isSet: true}
}

func (v NullableIpAddressMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAddressMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


