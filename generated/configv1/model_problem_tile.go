/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ProblemTile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemTile{}

// ProblemTile Configuration of a problem tile.
type ProblemTile struct {
	// The entity scope of the problem tile. For further information please look at the Problems API v2 '/problems' endpoint.
	EntitySelector *string `json:"entitySelector,omitempty"`
	// Defines the scope of the problem tile. Only problems matching the specified criteria are taken into account. For further information please look at the Problems API v2 '/problems' endpoint.
	ProblemSelector *string `json:"problemSelector,omitempty"`
}

// NewProblemTile instantiates a new ProblemTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemTile(bounds TileBounds, name string, tileType string) *ProblemTile {
	this := ProblemTile{}
	this.Bounds = bounds
	this.Name = name
	this.TileType = tileType
	return &this
}

// NewProblemTileWithDefaults instantiates a new ProblemTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemTileWithDefaults() *ProblemTile {
	this := ProblemTile{}
	return &this
}

// GetEntitySelector returns the EntitySelector field value if set, zero value otherwise.
func (o *ProblemTile) GetEntitySelector() string {
	if o == nil || IsNil(o.EntitySelector) {
		var ret string
		return ret
	}
	return *o.EntitySelector
}

// GetEntitySelectorOk returns a tuple with the EntitySelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemTile) GetEntitySelectorOk() (*string, bool) {
	if o == nil || IsNil(o.EntitySelector) {
		return nil, false
	}
	return o.EntitySelector, true
}

// HasEntitySelector returns a boolean if a field has been set.
func (o *ProblemTile) HasEntitySelector() bool {
	if o != nil && !IsNil(o.EntitySelector) {
		return true
	}

	return false
}

// SetEntitySelector gets a reference to the given string and assigns it to the EntitySelector field.
func (o *ProblemTile) SetEntitySelector(v string) {
	o.EntitySelector = &v
}

// GetProblemSelector returns the ProblemSelector field value if set, zero value otherwise.
func (o *ProblemTile) GetProblemSelector() string {
	if o == nil || IsNil(o.ProblemSelector) {
		var ret string
		return ret
	}
	return *o.ProblemSelector
}

// GetProblemSelectorOk returns a tuple with the ProblemSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemTile) GetProblemSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.ProblemSelector) {
		return nil, false
	}
	return o.ProblemSelector, true
}

// HasProblemSelector returns a boolean if a field has been set.
func (o *ProblemTile) HasProblemSelector() bool {
	if o != nil && !IsNil(o.ProblemSelector) {
		return true
	}

	return false
}

// SetProblemSelector gets a reference to the given string and assigns it to the ProblemSelector field.
func (o *ProblemTile) SetProblemSelector(v string) {
	o.ProblemSelector = &v
}

func (o ProblemTile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemTile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntitySelector) {
		toSerialize["entitySelector"] = o.EntitySelector
	}
	if !IsNil(o.ProblemSelector) {
		toSerialize["problemSelector"] = o.ProblemSelector
	}
	return toSerialize, nil
}

type NullableProblemTile struct {
	value *ProblemTile
	isSet bool
}

func (v NullableProblemTile) Get() *ProblemTile {
	return v.value
}

func (v *NullableProblemTile) Set(val *ProblemTile) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemTile) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemTile(val *ProblemTile) *NullableProblemTile {
	return &NullableProblemTile{value: val, isSet: true}
}

func (v NullableProblemTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


