/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the MonitoredEntityFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitoredEntityFilter{}

// MonitoredEntityFilter A matching rule for Dynatrace entities.
type MonitoredEntityFilter struct {
	// The ID of a management zone to which the matched entities must belong.
	MzId *string `json:"mzId,omitempty"`
	// The logic that applies when several tags are specified: AND/OR.   If not set, the OR logic is used.
	TagCombination *string `json:"tagCombination,omitempty"`
	// The tag you want to use for matching.   You can use custom tags from the UI, AWS tags, Cloud Foundry tags, OpenShift/Kubernetes, and tags based on environment variables.
	Tags []TagInfo `json:"tags"`
	// The type of the Dynatrace entities (for example, hosts or services) you want to pick up by matching.
	Type *string `json:"type,omitempty"`
}

// NewMonitoredEntityFilter instantiates a new MonitoredEntityFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoredEntityFilter(tags []TagInfo) *MonitoredEntityFilter {
	this := MonitoredEntityFilter{}
	this.Tags = tags
	return &this
}

// NewMonitoredEntityFilterWithDefaults instantiates a new MonitoredEntityFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoredEntityFilterWithDefaults() *MonitoredEntityFilter {
	this := MonitoredEntityFilter{}
	return &this
}

// GetMzId returns the MzId field value if set, zero value otherwise.
func (o *MonitoredEntityFilter) GetMzId() string {
	if o == nil || IsNil(o.MzId) {
		var ret string
		return ret
	}
	return *o.MzId
}

// GetMzIdOk returns a tuple with the MzId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoredEntityFilter) GetMzIdOk() (*string, bool) {
	if o == nil || IsNil(o.MzId) {
		return nil, false
	}
	return o.MzId, true
}

// HasMzId returns a boolean if a field has been set.
func (o *MonitoredEntityFilter) HasMzId() bool {
	if o != nil && !IsNil(o.MzId) {
		return true
	}

	return false
}

// SetMzId gets a reference to the given string and assigns it to the MzId field.
func (o *MonitoredEntityFilter) SetMzId(v string) {
	o.MzId = &v
}

// GetTagCombination returns the TagCombination field value if set, zero value otherwise.
func (o *MonitoredEntityFilter) GetTagCombination() string {
	if o == nil || IsNil(o.TagCombination) {
		var ret string
		return ret
	}
	return *o.TagCombination
}

// GetTagCombinationOk returns a tuple with the TagCombination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoredEntityFilter) GetTagCombinationOk() (*string, bool) {
	if o == nil || IsNil(o.TagCombination) {
		return nil, false
	}
	return o.TagCombination, true
}

// HasTagCombination returns a boolean if a field has been set.
func (o *MonitoredEntityFilter) HasTagCombination() bool {
	if o != nil && !IsNil(o.TagCombination) {
		return true
	}

	return false
}

// SetTagCombination gets a reference to the given string and assigns it to the TagCombination field.
func (o *MonitoredEntityFilter) SetTagCombination(v string) {
	o.TagCombination = &v
}

// GetTags returns the Tags field value
func (o *MonitoredEntityFilter) GetTags() []TagInfo {
	if o == nil {
		var ret []TagInfo
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *MonitoredEntityFilter) GetTagsOk() ([]TagInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *MonitoredEntityFilter) SetTags(v []TagInfo) {
	o.Tags = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MonitoredEntityFilter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoredEntityFilter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MonitoredEntityFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MonitoredEntityFilter) SetType(v string) {
	o.Type = &v
}

func (o MonitoredEntityFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitoredEntityFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MzId) {
		toSerialize["mzId"] = o.MzId
	}
	if !IsNil(o.TagCombination) {
		toSerialize["tagCombination"] = o.TagCombination
	}
	toSerialize["tags"] = o.Tags
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableMonitoredEntityFilter struct {
	value *MonitoredEntityFilter
	isSet bool
}

func (v NullableMonitoredEntityFilter) Get() *MonitoredEntityFilter {
	return v.value
}

func (v *NullableMonitoredEntityFilter) Set(val *MonitoredEntityFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoredEntityFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoredEntityFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoredEntityFilter(val *MonitoredEntityFilter) *NullableMonitoredEntityFilter {
	return &NullableMonitoredEntityFilter{value: val, isSet: true}
}

func (v NullableMonitoredEntityFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoredEntityFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


