/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the WebApplicationMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebApplicationMetric{}

// WebApplicationMetric Descriptor of the calculated web application metric.
type WebApplicationMetric struct {
	// The Dynatrace entity ID of the application to which the metric belongs.
	ApplicationIdentifier string `json:"applicationIdentifier"`
	// A list of metric dimensions.
	Dimensions []WebApplicationDimensionDefinition `json:"dimensions,omitempty"`
	// The metric is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	MetricDefinition WebApplicationMetricDefinition `json:"metricDefinition"`
	// The unique key of the metric.    The key must have the `calc:apps` prefix.
	MetricKey string `json:"metricKey"`
	// The displayed name of the metric.
	Name string `json:"name"`
	UserActionFilter *UserActionFilter `json:"userActionFilter,omitempty"`
}

// NewWebApplicationMetric instantiates a new WebApplicationMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebApplicationMetric(applicationIdentifier string, enabled bool, metricDefinition WebApplicationMetricDefinition, metricKey string, name string) *WebApplicationMetric {
	this := WebApplicationMetric{}
	this.ApplicationIdentifier = applicationIdentifier
	this.Enabled = enabled
	this.MetricDefinition = metricDefinition
	this.MetricKey = metricKey
	this.Name = name
	return &this
}

// NewWebApplicationMetricWithDefaults instantiates a new WebApplicationMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebApplicationMetricWithDefaults() *WebApplicationMetric {
	this := WebApplicationMetric{}
	return &this
}

// GetApplicationIdentifier returns the ApplicationIdentifier field value
func (o *WebApplicationMetric) GetApplicationIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationIdentifier
}

// GetApplicationIdentifierOk returns a tuple with the ApplicationIdentifier field value
// and a boolean to check if the value has been set.
func (o *WebApplicationMetric) GetApplicationIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationIdentifier, true
}

// SetApplicationIdentifier sets field value
func (o *WebApplicationMetric) SetApplicationIdentifier(v string) {
	o.ApplicationIdentifier = v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *WebApplicationMetric) GetDimensions() []WebApplicationDimensionDefinition {
	if o == nil || IsNil(o.Dimensions) {
		var ret []WebApplicationDimensionDefinition
		return ret
	}
	return o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationMetric) GetDimensionsOk() ([]WebApplicationDimensionDefinition, bool) {
	if o == nil || IsNil(o.Dimensions) {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *WebApplicationMetric) HasDimensions() bool {
	if o != nil && !IsNil(o.Dimensions) {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given []WebApplicationDimensionDefinition and assigns it to the Dimensions field.
func (o *WebApplicationMetric) SetDimensions(v []WebApplicationDimensionDefinition) {
	o.Dimensions = v
}

// GetEnabled returns the Enabled field value
func (o *WebApplicationMetric) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *WebApplicationMetric) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *WebApplicationMetric) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMetricDefinition returns the MetricDefinition field value
func (o *WebApplicationMetric) GetMetricDefinition() WebApplicationMetricDefinition {
	if o == nil {
		var ret WebApplicationMetricDefinition
		return ret
	}

	return o.MetricDefinition
}

// GetMetricDefinitionOk returns a tuple with the MetricDefinition field value
// and a boolean to check if the value has been set.
func (o *WebApplicationMetric) GetMetricDefinitionOk() (*WebApplicationMetricDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricDefinition, true
}

// SetMetricDefinition sets field value
func (o *WebApplicationMetric) SetMetricDefinition(v WebApplicationMetricDefinition) {
	o.MetricDefinition = v
}

// GetMetricKey returns the MetricKey field value
func (o *WebApplicationMetric) GetMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricKey
}

// GetMetricKeyOk returns a tuple with the MetricKey field value
// and a boolean to check if the value has been set.
func (o *WebApplicationMetric) GetMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricKey, true
}

// SetMetricKey sets field value
func (o *WebApplicationMetric) SetMetricKey(v string) {
	o.MetricKey = v
}

// GetName returns the Name field value
func (o *WebApplicationMetric) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WebApplicationMetric) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WebApplicationMetric) SetName(v string) {
	o.Name = v
}

// GetUserActionFilter returns the UserActionFilter field value if set, zero value otherwise.
func (o *WebApplicationMetric) GetUserActionFilter() UserActionFilter {
	if o == nil || IsNil(o.UserActionFilter) {
		var ret UserActionFilter
		return ret
	}
	return *o.UserActionFilter
}

// GetUserActionFilterOk returns a tuple with the UserActionFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationMetric) GetUserActionFilterOk() (*UserActionFilter, bool) {
	if o == nil || IsNil(o.UserActionFilter) {
		return nil, false
	}
	return o.UserActionFilter, true
}

// HasUserActionFilter returns a boolean if a field has been set.
func (o *WebApplicationMetric) HasUserActionFilter() bool {
	if o != nil && !IsNil(o.UserActionFilter) {
		return true
	}

	return false
}

// SetUserActionFilter gets a reference to the given UserActionFilter and assigns it to the UserActionFilter field.
func (o *WebApplicationMetric) SetUserActionFilter(v UserActionFilter) {
	o.UserActionFilter = &v
}

func (o WebApplicationMetric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebApplicationMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicationIdentifier"] = o.ApplicationIdentifier
	if !IsNil(o.Dimensions) {
		toSerialize["dimensions"] = o.Dimensions
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["metricDefinition"] = o.MetricDefinition
	toSerialize["metricKey"] = o.MetricKey
	toSerialize["name"] = o.Name
	if !IsNil(o.UserActionFilter) {
		toSerialize["userActionFilter"] = o.UserActionFilter
	}
	return toSerialize, nil
}

type NullableWebApplicationMetric struct {
	value *WebApplicationMetric
	isSet bool
}

func (v NullableWebApplicationMetric) Get() *WebApplicationMetric {
	return v.value
}

func (v *NullableWebApplicationMetric) Set(val *WebApplicationMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableWebApplicationMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableWebApplicationMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebApplicationMetric(val *WebApplicationMetric) *NullableWebApplicationMetric {
	return &NullableWebApplicationMetric{value: val, isSet: true}
}

func (v NullableWebApplicationMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebApplicationMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


