/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the DataExplorerTile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataExplorerTile{}

// DataExplorerTile Configuration of a data explorer tile.
type DataExplorerTile struct {
	// The name of the tile, set by user.
	CustomName *string `json:"customName,omitempty"`
	// The metric expressions generated by this configuration
	MetricExpressions []string `json:"metricExpressions,omitempty"`
	// The list queries to explore
	Queries []DataExplorerQuery `json:"queries"`
	QueriesSettings *DataExplorerQuerySettings `json:"queriesSettings,omitempty"`
	VisualConfig VisualizationConfiguration `json:"visualConfig"`
}

// NewDataExplorerTile instantiates a new DataExplorerTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataExplorerTile(queries []DataExplorerQuery, visualConfig VisualizationConfiguration, bounds TileBounds, name string, tileType string) *DataExplorerTile {
	this := DataExplorerTile{}
	this.Bounds = bounds
	this.Name = name
	this.TileType = tileType
	this.Queries = queries
	this.VisualConfig = visualConfig
	return &this
}

// NewDataExplorerTileWithDefaults instantiates a new DataExplorerTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataExplorerTileWithDefaults() *DataExplorerTile {
	this := DataExplorerTile{}
	return &this
}

// GetCustomName returns the CustomName field value if set, zero value otherwise.
func (o *DataExplorerTile) GetCustomName() string {
	if o == nil || IsNil(o.CustomName) {
		var ret string
		return ret
	}
	return *o.CustomName
}

// GetCustomNameOk returns a tuple with the CustomName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerTile) GetCustomNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomName) {
		return nil, false
	}
	return o.CustomName, true
}

// HasCustomName returns a boolean if a field has been set.
func (o *DataExplorerTile) HasCustomName() bool {
	if o != nil && !IsNil(o.CustomName) {
		return true
	}

	return false
}

// SetCustomName gets a reference to the given string and assigns it to the CustomName field.
func (o *DataExplorerTile) SetCustomName(v string) {
	o.CustomName = &v
}

// GetMetricExpressions returns the MetricExpressions field value if set, zero value otherwise.
func (o *DataExplorerTile) GetMetricExpressions() []string {
	if o == nil || IsNil(o.MetricExpressions) {
		var ret []string
		return ret
	}
	return o.MetricExpressions
}

// GetMetricExpressionsOk returns a tuple with the MetricExpressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerTile) GetMetricExpressionsOk() ([]string, bool) {
	if o == nil || IsNil(o.MetricExpressions) {
		return nil, false
	}
	return o.MetricExpressions, true
}

// HasMetricExpressions returns a boolean if a field has been set.
func (o *DataExplorerTile) HasMetricExpressions() bool {
	if o != nil && !IsNil(o.MetricExpressions) {
		return true
	}

	return false
}

// SetMetricExpressions gets a reference to the given []string and assigns it to the MetricExpressions field.
func (o *DataExplorerTile) SetMetricExpressions(v []string) {
	o.MetricExpressions = v
}

// GetQueries returns the Queries field value
func (o *DataExplorerTile) GetQueries() []DataExplorerQuery {
	if o == nil {
		var ret []DataExplorerQuery
		return ret
	}

	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value
// and a boolean to check if the value has been set.
func (o *DataExplorerTile) GetQueriesOk() ([]DataExplorerQuery, bool) {
	if o == nil {
		return nil, false
	}
	return o.Queries, true
}

// SetQueries sets field value
func (o *DataExplorerTile) SetQueries(v []DataExplorerQuery) {
	o.Queries = v
}

// GetQueriesSettings returns the QueriesSettings field value if set, zero value otherwise.
func (o *DataExplorerTile) GetQueriesSettings() DataExplorerQuerySettings {
	if o == nil || IsNil(o.QueriesSettings) {
		var ret DataExplorerQuerySettings
		return ret
	}
	return *o.QueriesSettings
}

// GetQueriesSettingsOk returns a tuple with the QueriesSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExplorerTile) GetQueriesSettingsOk() (*DataExplorerQuerySettings, bool) {
	if o == nil || IsNil(o.QueriesSettings) {
		return nil, false
	}
	return o.QueriesSettings, true
}

// HasQueriesSettings returns a boolean if a field has been set.
func (o *DataExplorerTile) HasQueriesSettings() bool {
	if o != nil && !IsNil(o.QueriesSettings) {
		return true
	}

	return false
}

// SetQueriesSettings gets a reference to the given DataExplorerQuerySettings and assigns it to the QueriesSettings field.
func (o *DataExplorerTile) SetQueriesSettings(v DataExplorerQuerySettings) {
	o.QueriesSettings = &v
}

// GetVisualConfig returns the VisualConfig field value
func (o *DataExplorerTile) GetVisualConfig() VisualizationConfiguration {
	if o == nil {
		var ret VisualizationConfiguration
		return ret
	}

	return o.VisualConfig
}

// GetVisualConfigOk returns a tuple with the VisualConfig field value
// and a boolean to check if the value has been set.
func (o *DataExplorerTile) GetVisualConfigOk() (*VisualizationConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VisualConfig, true
}

// SetVisualConfig sets field value
func (o *DataExplorerTile) SetVisualConfig(v VisualizationConfiguration) {
	o.VisualConfig = v
}

func (o DataExplorerTile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataExplorerTile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomName) {
		toSerialize["customName"] = o.CustomName
	}
	if !IsNil(o.MetricExpressions) {
		toSerialize["metricExpressions"] = o.MetricExpressions
	}
	toSerialize["queries"] = o.Queries
	if !IsNil(o.QueriesSettings) {
		toSerialize["queriesSettings"] = o.QueriesSettings
	}
	toSerialize["visualConfig"] = o.VisualConfig
	return toSerialize, nil
}

type NullableDataExplorerTile struct {
	value *DataExplorerTile
	isSet bool
}

func (v NullableDataExplorerTile) Get() *DataExplorerTile {
	return v.value
}

func (v *NullableDataExplorerTile) Set(val *DataExplorerTile) {
	v.value = val
	v.isSet = true
}

func (v NullableDataExplorerTile) IsSet() bool {
	return v.isSet
}

func (v *NullableDataExplorerTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataExplorerTile(val *DataExplorerTile) *NullableDataExplorerTile {
	return &NullableDataExplorerTile{value: val, isSet: true}
}

func (v NullableDataExplorerTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataExplorerTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


