/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the PluginProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginProperty{}

// PluginProperty A property of a plugin.
type PluginProperty struct {
	// The default value of the property.
	DefaultValue *string `json:"defaultValue,omitempty"`
	// The list of possible values of the property.    If such a list is defined, only values from this list can be assigned to the property.
	DropdownValues []string `json:"dropdownValues,omitempty"`
	// The key of the property.
	Key *string `json:"key,omitempty"`
	// The type of the property.
	Type *string `json:"type,omitempty"`
}

// NewPluginProperty instantiates a new PluginProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginProperty() *PluginProperty {
	this := PluginProperty{}
	return &this
}

// NewPluginPropertyWithDefaults instantiates a new PluginProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginPropertyWithDefaults() *PluginProperty {
	this := PluginProperty{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *PluginProperty) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginProperty) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *PluginProperty) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *PluginProperty) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDropdownValues returns the DropdownValues field value if set, zero value otherwise.
func (o *PluginProperty) GetDropdownValues() []string {
	if o == nil || IsNil(o.DropdownValues) {
		var ret []string
		return ret
	}
	return o.DropdownValues
}

// GetDropdownValuesOk returns a tuple with the DropdownValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginProperty) GetDropdownValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.DropdownValues) {
		return nil, false
	}
	return o.DropdownValues, true
}

// HasDropdownValues returns a boolean if a field has been set.
func (o *PluginProperty) HasDropdownValues() bool {
	if o != nil && !IsNil(o.DropdownValues) {
		return true
	}

	return false
}

// SetDropdownValues gets a reference to the given []string and assigns it to the DropdownValues field.
func (o *PluginProperty) SetDropdownValues(v []string) {
	o.DropdownValues = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PluginProperty) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginProperty) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PluginProperty) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *PluginProperty) SetKey(v string) {
	o.Key = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PluginProperty) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginProperty) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PluginProperty) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PluginProperty) SetType(v string) {
	o.Type = &v
}

func (o PluginProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.DropdownValues) {
		toSerialize["dropdownValues"] = o.DropdownValues
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePluginProperty struct {
	value *PluginProperty
	isSet bool
}

func (v NullablePluginProperty) Get() *PluginProperty {
	return v.value
}

func (v *NullablePluginProperty) Set(val *PluginProperty) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginProperty) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginProperty(val *PluginProperty) *NullablePluginProperty {
	return &NullablePluginProperty{value: val, isSet: true}
}

func (v NullablePluginProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


