/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ExtensionConfigurationList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionConfigurationList{}

// ExtensionConfigurationList A list of configurations.
type ExtensionConfigurationList struct {
	// List of configurations.
	ConfigurationsList []EntityShortRepresentation `json:"configurationsList,omitempty"`
	// The cursor for the next page of results. Has the value of `null` on the last page.   Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result.
	NextPageKey *string `json:"nextPageKey,omitempty"`
	// The total number of entries in the result.
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// NewExtensionConfigurationList instantiates a new ExtensionConfigurationList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionConfigurationList() *ExtensionConfigurationList {
	this := ExtensionConfigurationList{}
	return &this
}

// NewExtensionConfigurationListWithDefaults instantiates a new ExtensionConfigurationList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionConfigurationListWithDefaults() *ExtensionConfigurationList {
	this := ExtensionConfigurationList{}
	return &this
}

// GetConfigurationsList returns the ConfigurationsList field value if set, zero value otherwise.
func (o *ExtensionConfigurationList) GetConfigurationsList() []EntityShortRepresentation {
	if o == nil || IsNil(o.ConfigurationsList) {
		var ret []EntityShortRepresentation
		return ret
	}
	return o.ConfigurationsList
}

// GetConfigurationsListOk returns a tuple with the ConfigurationsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationList) GetConfigurationsListOk() ([]EntityShortRepresentation, bool) {
	if o == nil || IsNil(o.ConfigurationsList) {
		return nil, false
	}
	return o.ConfigurationsList, true
}

// HasConfigurationsList returns a boolean if a field has been set.
func (o *ExtensionConfigurationList) HasConfigurationsList() bool {
	if o != nil && !IsNil(o.ConfigurationsList) {
		return true
	}

	return false
}

// SetConfigurationsList gets a reference to the given []EntityShortRepresentation and assigns it to the ConfigurationsList field.
func (o *ExtensionConfigurationList) SetConfigurationsList(v []EntityShortRepresentation) {
	o.ConfigurationsList = v
}

// GetNextPageKey returns the NextPageKey field value if set, zero value otherwise.
func (o *ExtensionConfigurationList) GetNextPageKey() string {
	if o == nil || IsNil(o.NextPageKey) {
		var ret string
		return ret
	}
	return *o.NextPageKey
}

// GetNextPageKeyOk returns a tuple with the NextPageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationList) GetNextPageKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageKey) {
		return nil, false
	}
	return o.NextPageKey, true
}

// HasNextPageKey returns a boolean if a field has been set.
func (o *ExtensionConfigurationList) HasNextPageKey() bool {
	if o != nil && !IsNil(o.NextPageKey) {
		return true
	}

	return false
}

// SetNextPageKey gets a reference to the given string and assigns it to the NextPageKey field.
func (o *ExtensionConfigurationList) SetNextPageKey(v string) {
	o.NextPageKey = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *ExtensionConfigurationList) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationList) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *ExtensionConfigurationList) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *ExtensionConfigurationList) SetTotalResults(v int32) {
	o.TotalResults = &v
}

func (o ExtensionConfigurationList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionConfigurationList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigurationsList) {
		toSerialize["configurationsList"] = o.ConfigurationsList
	}
	if !IsNil(o.NextPageKey) {
		toSerialize["nextPageKey"] = o.NextPageKey
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	return toSerialize, nil
}

type NullableExtensionConfigurationList struct {
	value *ExtensionConfigurationList
	isSet bool
}

func (v NullableExtensionConfigurationList) Get() *ExtensionConfigurationList {
	return v.value
}

func (v *NullableExtensionConfigurationList) Set(val *ExtensionConfigurationList) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionConfigurationList) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionConfigurationList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionConfigurationList(val *ExtensionConfigurationList) *NullableExtensionConfigurationList {
	return &NullableExtensionConfigurationList{value: val, isSet: true}
}

func (v NullableExtensionConfigurationList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionConfigurationList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


