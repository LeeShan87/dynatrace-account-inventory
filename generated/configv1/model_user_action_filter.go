/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the UserActionFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserActionFilter{}

// UserActionFilter User actions filter of the calculated web application metric.   Only user actions matching the provided criteria are used for metric calculation.   A user action must match **all** the criteria.
type UserActionFilter struct {
	// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationFromMilliseconds *int32 `json:"actionDurationFromMilliseconds,omitempty"`
	// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationToMilliseconds *int32 `json:"actionDurationToMilliseconds,omitempty"`
	// Only actions with the specified Apdex score are included in the metric calculation.
	Apdex *string `json:"apdex,omitempty"`
	// Only user actions coming from the specified browser family are included in the metric calculation.     The EQUALS operator applies.
	BrowserFamily *string `json:"browserFamily,omitempty"`
	// Only user actions coming from the specified browser type are included in the metric calculation.     The EQUALS operator applies.
	BrowserType *string `json:"browserType,omitempty"`
	// Only user actions coming from the specified browser version are included in the metric calculation.     The EQUALS operator applies.
	BrowserVersion *string `json:"browserVersion,omitempty"`
	// Only actions of users from this city are included in the metric calculation.    Specify geolocation ID here.
	City *string `json:"city,omitempty"`
	// Only actions of users from this continent are included in the metric calculation.    Specify geolocation ID here.
	Continent *string `json:"continent,omitempty"`
	// Only actions of users from this country are included in the metric calculation.    Specify geolocation ID here.
	Country *string `json:"country,omitempty"`
	// The status of custom actions in the metric calculation:   * `true`: Custom actions are included.  * `false`: All actions are included.
	CustomAction *bool `json:"customAction,omitempty"`
	// The custom error name of the actions to be included in the metric calculation.
	CustomErrorName *string `json:"customErrorName,omitempty"`
	// The custom error type of the actions to be included in the metric calculation.
	CustomErrorType *string `json:"customErrorType,omitempty"`
	// Only user actions coming from the specified domain are included in the metric calculation.    The EQUALS operator applies.
	Domain *string `json:"domain,omitempty"`
	// The error status of the actions to be included in the metric calculation:   * `true`: Only actions that have any errors are included.  * `false`: All actions are included.
	HasAnyError *bool `json:"hasAnyError,omitempty"`
	// The custom error status of the actions to be included in the metric calculation:   * `true`: Only actions with custom errors are included.  * `false`: All actions are included.
	HasCustomErrors *bool `json:"hasCustomErrors,omitempty"`
	// The request error status of the actions to be included in the metric calculation:   * `true`: Only actions with request errors (HTTP errors, failed images, CSP rule violations) are included.  * `false`: All actions are included.
	HasHttpErrors *bool `json:"hasHttpErrors,omitempty"`
	// The JavaScript error status of the actions to be included in the metric calculation:   * `true`: Only actions with JavaScript errors are included.  * `false`: All actions are included.
	HasJavascriptErrors *bool `json:"hasJavascriptErrors,omitempty"`
	// The HTTP error status code of the actions to be included in the metric calculation.
	HttpErrorCode *int32 `json:"httpErrorCode,omitempty"`
	// Can be used in combination with `httpErrorCode` to define a range of error codes that will be included in the metric calculation.
	HttpErrorCodeTo *int32 `json:"httpErrorCodeTo,omitempty"`
	// The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
	HttpPath *string `json:"httpPath,omitempty"`
	// Only actions coming from this IP address are included in the metric calculation.     The EQUALS operator applies.
	Ip *string `json:"ip,omitempty"`
	// The IPv6 status of the actions to be included in the metric calculation:   * `true`: Only actions coming from IPv6 are included.  * `false`: All actions are included.
	IpV6Traffic *bool `json:"ipV6Traffic,omitempty"`
	// The status of load actions in the metric calculation:   * `true`: Load actions are included.  * `false`: All actions are included.
	LoadAction *bool `json:"loadAction,omitempty"`
	// Only actions coming from this OS family are included in the metric calculation.    Specify the OS ID here.
	OsFamily *string `json:"osFamily,omitempty"`
	// Only actions coming from this OS version are included in the metric calculation.    Specify the OS ID here.
	OsVersion *string `json:"osVersion,omitempty"`
	// The status of actions coming from real users in the metric calculation:   * `true`: Only actions from real users are included.  * `false`: All actions are included.
	RealUser *bool `json:"realUser,omitempty"`
	// Only actions of users from this region are included in the metric calculation.    Specify geolocation ID here.
	Region *string `json:"region,omitempty"`
	// The status of actions coming from robots in the metric calculation:   * `true`: Only actions from robots are included.  * `false`: All actions are included.
	Robot *bool `json:"robot,omitempty"`
	// The status of actions coming from synthetic monitors in the metric calculation:   * `true`: Only actions from synthetic monitors are included.  * `false`: All actions are included.
	Synthetic *bool `json:"synthetic,omitempty"`
	// Only actions on the specified group of views are included in the metric calculation.
	TargetViewGroup *string `json:"targetViewGroup,omitempty"`
	// Specifies the match type of the view group filter, e.g. using `Contains` or `Equals`. Defaults to `Equals`.
	TargetViewGroupNameMatchType *string `json:"targetViewGroupNameMatchType,omitempty"`
	// Only actions on the specified view are included in the metric calculation.
	TargetViewName *string `json:"targetViewName,omitempty"`
	// Specifies the match type of the view name filter, e.g. using `Contains` or `Equals`. Defaults to `Equals`.
	TargetViewNameMatchType *string `json:"targetViewNameMatchType,omitempty"`
	// Only actions with this name are included in the metric calculation.    The EQUALS operator applies.
	UserActionName *string `json:"userActionName,omitempty"`
	// Only actions with the specified properties are included in the metric calculation.
	UserActionProperties []UserActionPropertyFilter `json:"userActionProperties,omitempty"`
	// The status of XHR actions in the metric calculation:   * `true`: XHR actions are included.  * `false`: All actions are included.
	XhrAction *bool `json:"xhrAction,omitempty"`
	// The status of route change actions in the metric calculation:   * `true`: Route change actions are included.  * `false`: All actions are included.
	XhrRouteChangeAction *bool `json:"xhrRouteChangeAction,omitempty"`
}

// NewUserActionFilter instantiates a new UserActionFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserActionFilter() *UserActionFilter {
	this := UserActionFilter{}
	return &this
}

// NewUserActionFilterWithDefaults instantiates a new UserActionFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserActionFilterWithDefaults() *UserActionFilter {
	this := UserActionFilter{}
	return &this
}

// GetActionDurationFromMilliseconds returns the ActionDurationFromMilliseconds field value if set, zero value otherwise.
func (o *UserActionFilter) GetActionDurationFromMilliseconds() int32 {
	if o == nil || IsNil(o.ActionDurationFromMilliseconds) {
		var ret int32
		return ret
	}
	return *o.ActionDurationFromMilliseconds
}

// GetActionDurationFromMillisecondsOk returns a tuple with the ActionDurationFromMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetActionDurationFromMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionDurationFromMilliseconds) {
		return nil, false
	}
	return o.ActionDurationFromMilliseconds, true
}

// HasActionDurationFromMilliseconds returns a boolean if a field has been set.
func (o *UserActionFilter) HasActionDurationFromMilliseconds() bool {
	if o != nil && !IsNil(o.ActionDurationFromMilliseconds) {
		return true
	}

	return false
}

// SetActionDurationFromMilliseconds gets a reference to the given int32 and assigns it to the ActionDurationFromMilliseconds field.
func (o *UserActionFilter) SetActionDurationFromMilliseconds(v int32) {
	o.ActionDurationFromMilliseconds = &v
}

// GetActionDurationToMilliseconds returns the ActionDurationToMilliseconds field value if set, zero value otherwise.
func (o *UserActionFilter) GetActionDurationToMilliseconds() int32 {
	if o == nil || IsNil(o.ActionDurationToMilliseconds) {
		var ret int32
		return ret
	}
	return *o.ActionDurationToMilliseconds
}

// GetActionDurationToMillisecondsOk returns a tuple with the ActionDurationToMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetActionDurationToMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionDurationToMilliseconds) {
		return nil, false
	}
	return o.ActionDurationToMilliseconds, true
}

// HasActionDurationToMilliseconds returns a boolean if a field has been set.
func (o *UserActionFilter) HasActionDurationToMilliseconds() bool {
	if o != nil && !IsNil(o.ActionDurationToMilliseconds) {
		return true
	}

	return false
}

// SetActionDurationToMilliseconds gets a reference to the given int32 and assigns it to the ActionDurationToMilliseconds field.
func (o *UserActionFilter) SetActionDurationToMilliseconds(v int32) {
	o.ActionDurationToMilliseconds = &v
}

// GetApdex returns the Apdex field value if set, zero value otherwise.
func (o *UserActionFilter) GetApdex() string {
	if o == nil || IsNil(o.Apdex) {
		var ret string
		return ret
	}
	return *o.Apdex
}

// GetApdexOk returns a tuple with the Apdex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetApdexOk() (*string, bool) {
	if o == nil || IsNil(o.Apdex) {
		return nil, false
	}
	return o.Apdex, true
}

// HasApdex returns a boolean if a field has been set.
func (o *UserActionFilter) HasApdex() bool {
	if o != nil && !IsNil(o.Apdex) {
		return true
	}

	return false
}

// SetApdex gets a reference to the given string and assigns it to the Apdex field.
func (o *UserActionFilter) SetApdex(v string) {
	o.Apdex = &v
}

// GetBrowserFamily returns the BrowserFamily field value if set, zero value otherwise.
func (o *UserActionFilter) GetBrowserFamily() string {
	if o == nil || IsNil(o.BrowserFamily) {
		var ret string
		return ret
	}
	return *o.BrowserFamily
}

// GetBrowserFamilyOk returns a tuple with the BrowserFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetBrowserFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserFamily) {
		return nil, false
	}
	return o.BrowserFamily, true
}

// HasBrowserFamily returns a boolean if a field has been set.
func (o *UserActionFilter) HasBrowserFamily() bool {
	if o != nil && !IsNil(o.BrowserFamily) {
		return true
	}

	return false
}

// SetBrowserFamily gets a reference to the given string and assigns it to the BrowserFamily field.
func (o *UserActionFilter) SetBrowserFamily(v string) {
	o.BrowserFamily = &v
}

// GetBrowserType returns the BrowserType field value if set, zero value otherwise.
func (o *UserActionFilter) GetBrowserType() string {
	if o == nil || IsNil(o.BrowserType) {
		var ret string
		return ret
	}
	return *o.BrowserType
}

// GetBrowserTypeOk returns a tuple with the BrowserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetBrowserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserType) {
		return nil, false
	}
	return o.BrowserType, true
}

// HasBrowserType returns a boolean if a field has been set.
func (o *UserActionFilter) HasBrowserType() bool {
	if o != nil && !IsNil(o.BrowserType) {
		return true
	}

	return false
}

// SetBrowserType gets a reference to the given string and assigns it to the BrowserType field.
func (o *UserActionFilter) SetBrowserType(v string) {
	o.BrowserType = &v
}

// GetBrowserVersion returns the BrowserVersion field value if set, zero value otherwise.
func (o *UserActionFilter) GetBrowserVersion() string {
	if o == nil || IsNil(o.BrowserVersion) {
		var ret string
		return ret
	}
	return *o.BrowserVersion
}

// GetBrowserVersionOk returns a tuple with the BrowserVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetBrowserVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserVersion) {
		return nil, false
	}
	return o.BrowserVersion, true
}

// HasBrowserVersion returns a boolean if a field has been set.
func (o *UserActionFilter) HasBrowserVersion() bool {
	if o != nil && !IsNil(o.BrowserVersion) {
		return true
	}

	return false
}

// SetBrowserVersion gets a reference to the given string and assigns it to the BrowserVersion field.
func (o *UserActionFilter) SetBrowserVersion(v string) {
	o.BrowserVersion = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UserActionFilter) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UserActionFilter) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *UserActionFilter) SetCity(v string) {
	o.City = &v
}

// GetContinent returns the Continent field value if set, zero value otherwise.
func (o *UserActionFilter) GetContinent() string {
	if o == nil || IsNil(o.Continent) {
		var ret string
		return ret
	}
	return *o.Continent
}

// GetContinentOk returns a tuple with the Continent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetContinentOk() (*string, bool) {
	if o == nil || IsNil(o.Continent) {
		return nil, false
	}
	return o.Continent, true
}

// HasContinent returns a boolean if a field has been set.
func (o *UserActionFilter) HasContinent() bool {
	if o != nil && !IsNil(o.Continent) {
		return true
	}

	return false
}

// SetContinent gets a reference to the given string and assigns it to the Continent field.
func (o *UserActionFilter) SetContinent(v string) {
	o.Continent = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UserActionFilter) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UserActionFilter) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UserActionFilter) SetCountry(v string) {
	o.Country = &v
}

// GetCustomAction returns the CustomAction field value if set, zero value otherwise.
func (o *UserActionFilter) GetCustomAction() bool {
	if o == nil || IsNil(o.CustomAction) {
		var ret bool
		return ret
	}
	return *o.CustomAction
}

// GetCustomActionOk returns a tuple with the CustomAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetCustomActionOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomAction) {
		return nil, false
	}
	return o.CustomAction, true
}

// HasCustomAction returns a boolean if a field has been set.
func (o *UserActionFilter) HasCustomAction() bool {
	if o != nil && !IsNil(o.CustomAction) {
		return true
	}

	return false
}

// SetCustomAction gets a reference to the given bool and assigns it to the CustomAction field.
func (o *UserActionFilter) SetCustomAction(v bool) {
	o.CustomAction = &v
}

// GetCustomErrorName returns the CustomErrorName field value if set, zero value otherwise.
func (o *UserActionFilter) GetCustomErrorName() string {
	if o == nil || IsNil(o.CustomErrorName) {
		var ret string
		return ret
	}
	return *o.CustomErrorName
}

// GetCustomErrorNameOk returns a tuple with the CustomErrorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetCustomErrorNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomErrorName) {
		return nil, false
	}
	return o.CustomErrorName, true
}

// HasCustomErrorName returns a boolean if a field has been set.
func (o *UserActionFilter) HasCustomErrorName() bool {
	if o != nil && !IsNil(o.CustomErrorName) {
		return true
	}

	return false
}

// SetCustomErrorName gets a reference to the given string and assigns it to the CustomErrorName field.
func (o *UserActionFilter) SetCustomErrorName(v string) {
	o.CustomErrorName = &v
}

// GetCustomErrorType returns the CustomErrorType field value if set, zero value otherwise.
func (o *UserActionFilter) GetCustomErrorType() string {
	if o == nil || IsNil(o.CustomErrorType) {
		var ret string
		return ret
	}
	return *o.CustomErrorType
}

// GetCustomErrorTypeOk returns a tuple with the CustomErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetCustomErrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CustomErrorType) {
		return nil, false
	}
	return o.CustomErrorType, true
}

// HasCustomErrorType returns a boolean if a field has been set.
func (o *UserActionFilter) HasCustomErrorType() bool {
	if o != nil && !IsNil(o.CustomErrorType) {
		return true
	}

	return false
}

// SetCustomErrorType gets a reference to the given string and assigns it to the CustomErrorType field.
func (o *UserActionFilter) SetCustomErrorType(v string) {
	o.CustomErrorType = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *UserActionFilter) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *UserActionFilter) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *UserActionFilter) SetDomain(v string) {
	o.Domain = &v
}

// GetHasAnyError returns the HasAnyError field value if set, zero value otherwise.
func (o *UserActionFilter) GetHasAnyError() bool {
	if o == nil || IsNil(o.HasAnyError) {
		var ret bool
		return ret
	}
	return *o.HasAnyError
}

// GetHasAnyErrorOk returns a tuple with the HasAnyError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetHasAnyErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAnyError) {
		return nil, false
	}
	return o.HasAnyError, true
}

// HasHasAnyError returns a boolean if a field has been set.
func (o *UserActionFilter) HasHasAnyError() bool {
	if o != nil && !IsNil(o.HasAnyError) {
		return true
	}

	return false
}

// SetHasAnyError gets a reference to the given bool and assigns it to the HasAnyError field.
func (o *UserActionFilter) SetHasAnyError(v bool) {
	o.HasAnyError = &v
}

// GetHasCustomErrors returns the HasCustomErrors field value if set, zero value otherwise.
func (o *UserActionFilter) GetHasCustomErrors() bool {
	if o == nil || IsNil(o.HasCustomErrors) {
		var ret bool
		return ret
	}
	return *o.HasCustomErrors
}

// GetHasCustomErrorsOk returns a tuple with the HasCustomErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetHasCustomErrorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasCustomErrors) {
		return nil, false
	}
	return o.HasCustomErrors, true
}

// HasHasCustomErrors returns a boolean if a field has been set.
func (o *UserActionFilter) HasHasCustomErrors() bool {
	if o != nil && !IsNil(o.HasCustomErrors) {
		return true
	}

	return false
}

// SetHasCustomErrors gets a reference to the given bool and assigns it to the HasCustomErrors field.
func (o *UserActionFilter) SetHasCustomErrors(v bool) {
	o.HasCustomErrors = &v
}

// GetHasHttpErrors returns the HasHttpErrors field value if set, zero value otherwise.
func (o *UserActionFilter) GetHasHttpErrors() bool {
	if o == nil || IsNil(o.HasHttpErrors) {
		var ret bool
		return ret
	}
	return *o.HasHttpErrors
}

// GetHasHttpErrorsOk returns a tuple with the HasHttpErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetHasHttpErrorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasHttpErrors) {
		return nil, false
	}
	return o.HasHttpErrors, true
}

// HasHasHttpErrors returns a boolean if a field has been set.
func (o *UserActionFilter) HasHasHttpErrors() bool {
	if o != nil && !IsNil(o.HasHttpErrors) {
		return true
	}

	return false
}

// SetHasHttpErrors gets a reference to the given bool and assigns it to the HasHttpErrors field.
func (o *UserActionFilter) SetHasHttpErrors(v bool) {
	o.HasHttpErrors = &v
}

// GetHasJavascriptErrors returns the HasJavascriptErrors field value if set, zero value otherwise.
func (o *UserActionFilter) GetHasJavascriptErrors() bool {
	if o == nil || IsNil(o.HasJavascriptErrors) {
		var ret bool
		return ret
	}
	return *o.HasJavascriptErrors
}

// GetHasJavascriptErrorsOk returns a tuple with the HasJavascriptErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetHasJavascriptErrorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasJavascriptErrors) {
		return nil, false
	}
	return o.HasJavascriptErrors, true
}

// HasHasJavascriptErrors returns a boolean if a field has been set.
func (o *UserActionFilter) HasHasJavascriptErrors() bool {
	if o != nil && !IsNil(o.HasJavascriptErrors) {
		return true
	}

	return false
}

// SetHasJavascriptErrors gets a reference to the given bool and assigns it to the HasJavascriptErrors field.
func (o *UserActionFilter) SetHasJavascriptErrors(v bool) {
	o.HasJavascriptErrors = &v
}

// GetHttpErrorCode returns the HttpErrorCode field value if set, zero value otherwise.
func (o *UserActionFilter) GetHttpErrorCode() int32 {
	if o == nil || IsNil(o.HttpErrorCode) {
		var ret int32
		return ret
	}
	return *o.HttpErrorCode
}

// GetHttpErrorCodeOk returns a tuple with the HttpErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetHttpErrorCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.HttpErrorCode) {
		return nil, false
	}
	return o.HttpErrorCode, true
}

// HasHttpErrorCode returns a boolean if a field has been set.
func (o *UserActionFilter) HasHttpErrorCode() bool {
	if o != nil && !IsNil(o.HttpErrorCode) {
		return true
	}

	return false
}

// SetHttpErrorCode gets a reference to the given int32 and assigns it to the HttpErrorCode field.
func (o *UserActionFilter) SetHttpErrorCode(v int32) {
	o.HttpErrorCode = &v
}

// GetHttpErrorCodeTo returns the HttpErrorCodeTo field value if set, zero value otherwise.
func (o *UserActionFilter) GetHttpErrorCodeTo() int32 {
	if o == nil || IsNil(o.HttpErrorCodeTo) {
		var ret int32
		return ret
	}
	return *o.HttpErrorCodeTo
}

// GetHttpErrorCodeToOk returns a tuple with the HttpErrorCodeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetHttpErrorCodeToOk() (*int32, bool) {
	if o == nil || IsNil(o.HttpErrorCodeTo) {
		return nil, false
	}
	return o.HttpErrorCodeTo, true
}

// HasHttpErrorCodeTo returns a boolean if a field has been set.
func (o *UserActionFilter) HasHttpErrorCodeTo() bool {
	if o != nil && !IsNil(o.HttpErrorCodeTo) {
		return true
	}

	return false
}

// SetHttpErrorCodeTo gets a reference to the given int32 and assigns it to the HttpErrorCodeTo field.
func (o *UserActionFilter) SetHttpErrorCodeTo(v int32) {
	o.HttpErrorCodeTo = &v
}

// GetHttpPath returns the HttpPath field value if set, zero value otherwise.
func (o *UserActionFilter) GetHttpPath() string {
	if o == nil || IsNil(o.HttpPath) {
		var ret string
		return ret
	}
	return *o.HttpPath
}

// GetHttpPathOk returns a tuple with the HttpPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetHttpPathOk() (*string, bool) {
	if o == nil || IsNil(o.HttpPath) {
		return nil, false
	}
	return o.HttpPath, true
}

// HasHttpPath returns a boolean if a field has been set.
func (o *UserActionFilter) HasHttpPath() bool {
	if o != nil && !IsNil(o.HttpPath) {
		return true
	}

	return false
}

// SetHttpPath gets a reference to the given string and assigns it to the HttpPath field.
func (o *UserActionFilter) SetHttpPath(v string) {
	o.HttpPath = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *UserActionFilter) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *UserActionFilter) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *UserActionFilter) SetIp(v string) {
	o.Ip = &v
}

// GetIpV6Traffic returns the IpV6Traffic field value if set, zero value otherwise.
func (o *UserActionFilter) GetIpV6Traffic() bool {
	if o == nil || IsNil(o.IpV6Traffic) {
		var ret bool
		return ret
	}
	return *o.IpV6Traffic
}

// GetIpV6TrafficOk returns a tuple with the IpV6Traffic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetIpV6TrafficOk() (*bool, bool) {
	if o == nil || IsNil(o.IpV6Traffic) {
		return nil, false
	}
	return o.IpV6Traffic, true
}

// HasIpV6Traffic returns a boolean if a field has been set.
func (o *UserActionFilter) HasIpV6Traffic() bool {
	if o != nil && !IsNil(o.IpV6Traffic) {
		return true
	}

	return false
}

// SetIpV6Traffic gets a reference to the given bool and assigns it to the IpV6Traffic field.
func (o *UserActionFilter) SetIpV6Traffic(v bool) {
	o.IpV6Traffic = &v
}

// GetLoadAction returns the LoadAction field value if set, zero value otherwise.
func (o *UserActionFilter) GetLoadAction() bool {
	if o == nil || IsNil(o.LoadAction) {
		var ret bool
		return ret
	}
	return *o.LoadAction
}

// GetLoadActionOk returns a tuple with the LoadAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetLoadActionOk() (*bool, bool) {
	if o == nil || IsNil(o.LoadAction) {
		return nil, false
	}
	return o.LoadAction, true
}

// HasLoadAction returns a boolean if a field has been set.
func (o *UserActionFilter) HasLoadAction() bool {
	if o != nil && !IsNil(o.LoadAction) {
		return true
	}

	return false
}

// SetLoadAction gets a reference to the given bool and assigns it to the LoadAction field.
func (o *UserActionFilter) SetLoadAction(v bool) {
	o.LoadAction = &v
}

// GetOsFamily returns the OsFamily field value if set, zero value otherwise.
func (o *UserActionFilter) GetOsFamily() string {
	if o == nil || IsNil(o.OsFamily) {
		var ret string
		return ret
	}
	return *o.OsFamily
}

// GetOsFamilyOk returns a tuple with the OsFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetOsFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.OsFamily) {
		return nil, false
	}
	return o.OsFamily, true
}

// HasOsFamily returns a boolean if a field has been set.
func (o *UserActionFilter) HasOsFamily() bool {
	if o != nil && !IsNil(o.OsFamily) {
		return true
	}

	return false
}

// SetOsFamily gets a reference to the given string and assigns it to the OsFamily field.
func (o *UserActionFilter) SetOsFamily(v string) {
	o.OsFamily = &v
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise.
func (o *UserActionFilter) GetOsVersion() string {
	if o == nil || IsNil(o.OsVersion) {
		var ret string
		return ret
	}
	return *o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetOsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.OsVersion) {
		return nil, false
	}
	return o.OsVersion, true
}

// HasOsVersion returns a boolean if a field has been set.
func (o *UserActionFilter) HasOsVersion() bool {
	if o != nil && !IsNil(o.OsVersion) {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given string and assigns it to the OsVersion field.
func (o *UserActionFilter) SetOsVersion(v string) {
	o.OsVersion = &v
}

// GetRealUser returns the RealUser field value if set, zero value otherwise.
func (o *UserActionFilter) GetRealUser() bool {
	if o == nil || IsNil(o.RealUser) {
		var ret bool
		return ret
	}
	return *o.RealUser
}

// GetRealUserOk returns a tuple with the RealUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetRealUserOk() (*bool, bool) {
	if o == nil || IsNil(o.RealUser) {
		return nil, false
	}
	return o.RealUser, true
}

// HasRealUser returns a boolean if a field has been set.
func (o *UserActionFilter) HasRealUser() bool {
	if o != nil && !IsNil(o.RealUser) {
		return true
	}

	return false
}

// SetRealUser gets a reference to the given bool and assigns it to the RealUser field.
func (o *UserActionFilter) SetRealUser(v bool) {
	o.RealUser = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *UserActionFilter) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *UserActionFilter) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *UserActionFilter) SetRegion(v string) {
	o.Region = &v
}

// GetRobot returns the Robot field value if set, zero value otherwise.
func (o *UserActionFilter) GetRobot() bool {
	if o == nil || IsNil(o.Robot) {
		var ret bool
		return ret
	}
	return *o.Robot
}

// GetRobotOk returns a tuple with the Robot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetRobotOk() (*bool, bool) {
	if o == nil || IsNil(o.Robot) {
		return nil, false
	}
	return o.Robot, true
}

// HasRobot returns a boolean if a field has been set.
func (o *UserActionFilter) HasRobot() bool {
	if o != nil && !IsNil(o.Robot) {
		return true
	}

	return false
}

// SetRobot gets a reference to the given bool and assigns it to the Robot field.
func (o *UserActionFilter) SetRobot(v bool) {
	o.Robot = &v
}

// GetSynthetic returns the Synthetic field value if set, zero value otherwise.
func (o *UserActionFilter) GetSynthetic() bool {
	if o == nil || IsNil(o.Synthetic) {
		var ret bool
		return ret
	}
	return *o.Synthetic
}

// GetSyntheticOk returns a tuple with the Synthetic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetSyntheticOk() (*bool, bool) {
	if o == nil || IsNil(o.Synthetic) {
		return nil, false
	}
	return o.Synthetic, true
}

// HasSynthetic returns a boolean if a field has been set.
func (o *UserActionFilter) HasSynthetic() bool {
	if o != nil && !IsNil(o.Synthetic) {
		return true
	}

	return false
}

// SetSynthetic gets a reference to the given bool and assigns it to the Synthetic field.
func (o *UserActionFilter) SetSynthetic(v bool) {
	o.Synthetic = &v
}

// GetTargetViewGroup returns the TargetViewGroup field value if set, zero value otherwise.
func (o *UserActionFilter) GetTargetViewGroup() string {
	if o == nil || IsNil(o.TargetViewGroup) {
		var ret string
		return ret
	}
	return *o.TargetViewGroup
}

// GetTargetViewGroupOk returns a tuple with the TargetViewGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetTargetViewGroupOk() (*string, bool) {
	if o == nil || IsNil(o.TargetViewGroup) {
		return nil, false
	}
	return o.TargetViewGroup, true
}

// HasTargetViewGroup returns a boolean if a field has been set.
func (o *UserActionFilter) HasTargetViewGroup() bool {
	if o != nil && !IsNil(o.TargetViewGroup) {
		return true
	}

	return false
}

// SetTargetViewGroup gets a reference to the given string and assigns it to the TargetViewGroup field.
func (o *UserActionFilter) SetTargetViewGroup(v string) {
	o.TargetViewGroup = &v
}

// GetTargetViewGroupNameMatchType returns the TargetViewGroupNameMatchType field value if set, zero value otherwise.
func (o *UserActionFilter) GetTargetViewGroupNameMatchType() string {
	if o == nil || IsNil(o.TargetViewGroupNameMatchType) {
		var ret string
		return ret
	}
	return *o.TargetViewGroupNameMatchType
}

// GetTargetViewGroupNameMatchTypeOk returns a tuple with the TargetViewGroupNameMatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetTargetViewGroupNameMatchTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetViewGroupNameMatchType) {
		return nil, false
	}
	return o.TargetViewGroupNameMatchType, true
}

// HasTargetViewGroupNameMatchType returns a boolean if a field has been set.
func (o *UserActionFilter) HasTargetViewGroupNameMatchType() bool {
	if o != nil && !IsNil(o.TargetViewGroupNameMatchType) {
		return true
	}

	return false
}

// SetTargetViewGroupNameMatchType gets a reference to the given string and assigns it to the TargetViewGroupNameMatchType field.
func (o *UserActionFilter) SetTargetViewGroupNameMatchType(v string) {
	o.TargetViewGroupNameMatchType = &v
}

// GetTargetViewName returns the TargetViewName field value if set, zero value otherwise.
func (o *UserActionFilter) GetTargetViewName() string {
	if o == nil || IsNil(o.TargetViewName) {
		var ret string
		return ret
	}
	return *o.TargetViewName
}

// GetTargetViewNameOk returns a tuple with the TargetViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetTargetViewNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetViewName) {
		return nil, false
	}
	return o.TargetViewName, true
}

// HasTargetViewName returns a boolean if a field has been set.
func (o *UserActionFilter) HasTargetViewName() bool {
	if o != nil && !IsNil(o.TargetViewName) {
		return true
	}

	return false
}

// SetTargetViewName gets a reference to the given string and assigns it to the TargetViewName field.
func (o *UserActionFilter) SetTargetViewName(v string) {
	o.TargetViewName = &v
}

// GetTargetViewNameMatchType returns the TargetViewNameMatchType field value if set, zero value otherwise.
func (o *UserActionFilter) GetTargetViewNameMatchType() string {
	if o == nil || IsNil(o.TargetViewNameMatchType) {
		var ret string
		return ret
	}
	return *o.TargetViewNameMatchType
}

// GetTargetViewNameMatchTypeOk returns a tuple with the TargetViewNameMatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetTargetViewNameMatchTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetViewNameMatchType) {
		return nil, false
	}
	return o.TargetViewNameMatchType, true
}

// HasTargetViewNameMatchType returns a boolean if a field has been set.
func (o *UserActionFilter) HasTargetViewNameMatchType() bool {
	if o != nil && !IsNil(o.TargetViewNameMatchType) {
		return true
	}

	return false
}

// SetTargetViewNameMatchType gets a reference to the given string and assigns it to the TargetViewNameMatchType field.
func (o *UserActionFilter) SetTargetViewNameMatchType(v string) {
	o.TargetViewNameMatchType = &v
}

// GetUserActionName returns the UserActionName field value if set, zero value otherwise.
func (o *UserActionFilter) GetUserActionName() string {
	if o == nil || IsNil(o.UserActionName) {
		var ret string
		return ret
	}
	return *o.UserActionName
}

// GetUserActionNameOk returns a tuple with the UserActionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetUserActionNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserActionName) {
		return nil, false
	}
	return o.UserActionName, true
}

// HasUserActionName returns a boolean if a field has been set.
func (o *UserActionFilter) HasUserActionName() bool {
	if o != nil && !IsNil(o.UserActionName) {
		return true
	}

	return false
}

// SetUserActionName gets a reference to the given string and assigns it to the UserActionName field.
func (o *UserActionFilter) SetUserActionName(v string) {
	o.UserActionName = &v
}

// GetUserActionProperties returns the UserActionProperties field value if set, zero value otherwise.
func (o *UserActionFilter) GetUserActionProperties() []UserActionPropertyFilter {
	if o == nil || IsNil(o.UserActionProperties) {
		var ret []UserActionPropertyFilter
		return ret
	}
	return o.UserActionProperties
}

// GetUserActionPropertiesOk returns a tuple with the UserActionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetUserActionPropertiesOk() ([]UserActionPropertyFilter, bool) {
	if o == nil || IsNil(o.UserActionProperties) {
		return nil, false
	}
	return o.UserActionProperties, true
}

// HasUserActionProperties returns a boolean if a field has been set.
func (o *UserActionFilter) HasUserActionProperties() bool {
	if o != nil && !IsNil(o.UserActionProperties) {
		return true
	}

	return false
}

// SetUserActionProperties gets a reference to the given []UserActionPropertyFilter and assigns it to the UserActionProperties field.
func (o *UserActionFilter) SetUserActionProperties(v []UserActionPropertyFilter) {
	o.UserActionProperties = v
}

// GetXhrAction returns the XhrAction field value if set, zero value otherwise.
func (o *UserActionFilter) GetXhrAction() bool {
	if o == nil || IsNil(o.XhrAction) {
		var ret bool
		return ret
	}
	return *o.XhrAction
}

// GetXhrActionOk returns a tuple with the XhrAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetXhrActionOk() (*bool, bool) {
	if o == nil || IsNil(o.XhrAction) {
		return nil, false
	}
	return o.XhrAction, true
}

// HasXhrAction returns a boolean if a field has been set.
func (o *UserActionFilter) HasXhrAction() bool {
	if o != nil && !IsNil(o.XhrAction) {
		return true
	}

	return false
}

// SetXhrAction gets a reference to the given bool and assigns it to the XhrAction field.
func (o *UserActionFilter) SetXhrAction(v bool) {
	o.XhrAction = &v
}

// GetXhrRouteChangeAction returns the XhrRouteChangeAction field value if set, zero value otherwise.
func (o *UserActionFilter) GetXhrRouteChangeAction() bool {
	if o == nil || IsNil(o.XhrRouteChangeAction) {
		var ret bool
		return ret
	}
	return *o.XhrRouteChangeAction
}

// GetXhrRouteChangeActionOk returns a tuple with the XhrRouteChangeAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionFilter) GetXhrRouteChangeActionOk() (*bool, bool) {
	if o == nil || IsNil(o.XhrRouteChangeAction) {
		return nil, false
	}
	return o.XhrRouteChangeAction, true
}

// HasXhrRouteChangeAction returns a boolean if a field has been set.
func (o *UserActionFilter) HasXhrRouteChangeAction() bool {
	if o != nil && !IsNil(o.XhrRouteChangeAction) {
		return true
	}

	return false
}

// SetXhrRouteChangeAction gets a reference to the given bool and assigns it to the XhrRouteChangeAction field.
func (o *UserActionFilter) SetXhrRouteChangeAction(v bool) {
	o.XhrRouteChangeAction = &v
}

func (o UserActionFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserActionFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionDurationFromMilliseconds) {
		toSerialize["actionDurationFromMilliseconds"] = o.ActionDurationFromMilliseconds
	}
	if !IsNil(o.ActionDurationToMilliseconds) {
		toSerialize["actionDurationToMilliseconds"] = o.ActionDurationToMilliseconds
	}
	if !IsNil(o.Apdex) {
		toSerialize["apdex"] = o.Apdex
	}
	if !IsNil(o.BrowserFamily) {
		toSerialize["browserFamily"] = o.BrowserFamily
	}
	if !IsNil(o.BrowserType) {
		toSerialize["browserType"] = o.BrowserType
	}
	if !IsNil(o.BrowserVersion) {
		toSerialize["browserVersion"] = o.BrowserVersion
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Continent) {
		toSerialize["continent"] = o.Continent
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CustomAction) {
		toSerialize["customAction"] = o.CustomAction
	}
	if !IsNil(o.CustomErrorName) {
		toSerialize["customErrorName"] = o.CustomErrorName
	}
	if !IsNil(o.CustomErrorType) {
		toSerialize["customErrorType"] = o.CustomErrorType
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.HasAnyError) {
		toSerialize["hasAnyError"] = o.HasAnyError
	}
	if !IsNil(o.HasCustomErrors) {
		toSerialize["hasCustomErrors"] = o.HasCustomErrors
	}
	if !IsNil(o.HasHttpErrors) {
		toSerialize["hasHttpErrors"] = o.HasHttpErrors
	}
	if !IsNil(o.HasJavascriptErrors) {
		toSerialize["hasJavascriptErrors"] = o.HasJavascriptErrors
	}
	if !IsNil(o.HttpErrorCode) {
		toSerialize["httpErrorCode"] = o.HttpErrorCode
	}
	if !IsNil(o.HttpErrorCodeTo) {
		toSerialize["httpErrorCodeTo"] = o.HttpErrorCodeTo
	}
	if !IsNil(o.HttpPath) {
		toSerialize["httpPath"] = o.HttpPath
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.IpV6Traffic) {
		toSerialize["ipV6Traffic"] = o.IpV6Traffic
	}
	if !IsNil(o.LoadAction) {
		toSerialize["loadAction"] = o.LoadAction
	}
	if !IsNil(o.OsFamily) {
		toSerialize["osFamily"] = o.OsFamily
	}
	if !IsNil(o.OsVersion) {
		toSerialize["osVersion"] = o.OsVersion
	}
	if !IsNil(o.RealUser) {
		toSerialize["realUser"] = o.RealUser
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Robot) {
		toSerialize["robot"] = o.Robot
	}
	if !IsNil(o.Synthetic) {
		toSerialize["synthetic"] = o.Synthetic
	}
	if !IsNil(o.TargetViewGroup) {
		toSerialize["targetViewGroup"] = o.TargetViewGroup
	}
	if !IsNil(o.TargetViewGroupNameMatchType) {
		toSerialize["targetViewGroupNameMatchType"] = o.TargetViewGroupNameMatchType
	}
	if !IsNil(o.TargetViewName) {
		toSerialize["targetViewName"] = o.TargetViewName
	}
	if !IsNil(o.TargetViewNameMatchType) {
		toSerialize["targetViewNameMatchType"] = o.TargetViewNameMatchType
	}
	if !IsNil(o.UserActionName) {
		toSerialize["userActionName"] = o.UserActionName
	}
	if !IsNil(o.UserActionProperties) {
		toSerialize["userActionProperties"] = o.UserActionProperties
	}
	if !IsNil(o.XhrAction) {
		toSerialize["xhrAction"] = o.XhrAction
	}
	if !IsNil(o.XhrRouteChangeAction) {
		toSerialize["xhrRouteChangeAction"] = o.XhrRouteChangeAction
	}
	return toSerialize, nil
}

type NullableUserActionFilter struct {
	value *UserActionFilter
	isSet bool
}

func (v NullableUserActionFilter) Get() *UserActionFilter {
	return v.value
}

func (v *NullableUserActionFilter) Set(val *UserActionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableUserActionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableUserActionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserActionFilter(val *UserActionFilter) *NullableUserActionFilter {
	return &NullableUserActionFilter{value: val, isSet: true}
}

func (v NullableUserActionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserActionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


