/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the FailureDetectionParameterSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailureDetectionParameterSet{}

// FailureDetectionParameterSet A set of failure detection parameters (FDP).   These parameters define the conditions of failure and success.
type FailureDetectionParameterSet struct {
	// A list of domains for the special handling of the 404 HTTP response code.   If the top domain of the *Referer* is presented in the list OR equals the top domain of the request's host, the 404 code is considered a failure.   Only applicable when **isHttp404NotFoundFailureEnabled** is set to `true`.
	BrokenLinkDomains []string `json:"brokenLinkDomains,omitempty"`
	// The missing HTTP response code on the client side is a failure (`true`) or a success (`false`).   If not set, `false` is used.
	ClientSideMissingHttpCodeIsFailure *bool `json:"clientSideMissingHttpCodeIsFailure,omitempty"`
	// A short description of the FDP set.
	Description *string `json:"description,omitempty"`
	// A list of faulty exceptions.   If an exception on *any* node of the service matches *any* of these patterns it is considered a failure.
	ExceptionOnAnyNodeExceptionPatterns []ExceptionPattern `json:"exceptionOnAnyNodeExceptionPatterns,omitempty"`
	// A list of client side HTTP response codes that are considered a failure.   The format is a list of ranges and individual values (for example, `500-599, 400-499, 1008`).   If not set, the range of `400-599` is used.
	FailingHttpCodesClientSide *string `json:"failingHttpCodesClientSide,omitempty"`
	// A list of server side HTTP response codes that are considered a failure.   The format is a list of ranges and individual values (for example, `500-599, 400-499, 1008`).If not set, the range of `500-599` is used.
	FailingHttpCodesServerSide *string `json:"failingHttpCodesServerSide,omitempty"`
	// Special handling of the 404 HTTP response code is enabled (`true`) or disabled (`false`). See **brokenLinkDomains** for special handling details.   Only applicable when 404 is NOT in the list of failing HTTP response codes and only for the server side.   If not set, `false` is used.
	Http404NotFoundFailureEnabled *bool `json:"http404NotFoundFailureEnabled,omitempty"`
	// The ID of the parameter set.
	Id *string `json:"id,omitempty"`
	// If set to true all exceptions will be ignored. Which means defined exception patterns will not have any effect.
	IgnoreAllExceptions *bool `json:"ignoreAllExceptions,omitempty"`
	// If set to true span failure detection will be ignored.
	IgnoreSpanFailureDetection *bool `json:"ignoreSpanFailureDetection,omitempty"`
	// A list of ignored exceptions.   If an exception on the entry node of the service matches *any* of these patterns it is ignored by failure detection.
	IgnoredExceptionPatterns []ExceptionPattern `json:"ignoredExceptionPatterns,omitempty"`
	// The display name of the FDP set.   The length of the name is limited to 150 characters.
	Name *string `json:"name,omitempty"`
	// The missing HTTP response code on the server side is a failure (`true`) or a success (`false`).   If not set, `false` is used.
	ServerSideMissingHttpCodeIsFailure *bool `json:"serverSideMissingHttpCodeIsFailure,omitempty"`
	// A list of success exceptions.   If an exception on the entry node of the service matches *any* of these patterns it is considered a success.
	SuccessForcingExceptionPatterns []ExceptionPattern `json:"successForcingExceptionPatterns,omitempty"`
	// A list of tag-based conditions.   If *any* condition is fulfilled the request is considered a failure.
	TagConditions []FdpTagCondition `json:"tagConditions,omitempty"`
}

// NewFailureDetectionParameterSet instantiates a new FailureDetectionParameterSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailureDetectionParameterSet() *FailureDetectionParameterSet {
	this := FailureDetectionParameterSet{}
	return &this
}

// NewFailureDetectionParameterSetWithDefaults instantiates a new FailureDetectionParameterSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailureDetectionParameterSetWithDefaults() *FailureDetectionParameterSet {
	this := FailureDetectionParameterSet{}
	return &this
}

// GetBrokenLinkDomains returns the BrokenLinkDomains field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetBrokenLinkDomains() []string {
	if o == nil || IsNil(o.BrokenLinkDomains) {
		var ret []string
		return ret
	}
	return o.BrokenLinkDomains
}

// GetBrokenLinkDomainsOk returns a tuple with the BrokenLinkDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetBrokenLinkDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.BrokenLinkDomains) {
		return nil, false
	}
	return o.BrokenLinkDomains, true
}

// HasBrokenLinkDomains returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasBrokenLinkDomains() bool {
	if o != nil && !IsNil(o.BrokenLinkDomains) {
		return true
	}

	return false
}

// SetBrokenLinkDomains gets a reference to the given []string and assigns it to the BrokenLinkDomains field.
func (o *FailureDetectionParameterSet) SetBrokenLinkDomains(v []string) {
	o.BrokenLinkDomains = v
}

// GetClientSideMissingHttpCodeIsFailure returns the ClientSideMissingHttpCodeIsFailure field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetClientSideMissingHttpCodeIsFailure() bool {
	if o == nil || IsNil(o.ClientSideMissingHttpCodeIsFailure) {
		var ret bool
		return ret
	}
	return *o.ClientSideMissingHttpCodeIsFailure
}

// GetClientSideMissingHttpCodeIsFailureOk returns a tuple with the ClientSideMissingHttpCodeIsFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetClientSideMissingHttpCodeIsFailureOk() (*bool, bool) {
	if o == nil || IsNil(o.ClientSideMissingHttpCodeIsFailure) {
		return nil, false
	}
	return o.ClientSideMissingHttpCodeIsFailure, true
}

// HasClientSideMissingHttpCodeIsFailure returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasClientSideMissingHttpCodeIsFailure() bool {
	if o != nil && !IsNil(o.ClientSideMissingHttpCodeIsFailure) {
		return true
	}

	return false
}

// SetClientSideMissingHttpCodeIsFailure gets a reference to the given bool and assigns it to the ClientSideMissingHttpCodeIsFailure field.
func (o *FailureDetectionParameterSet) SetClientSideMissingHttpCodeIsFailure(v bool) {
	o.ClientSideMissingHttpCodeIsFailure = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FailureDetectionParameterSet) SetDescription(v string) {
	o.Description = &v
}

// GetExceptionOnAnyNodeExceptionPatterns returns the ExceptionOnAnyNodeExceptionPatterns field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetExceptionOnAnyNodeExceptionPatterns() []ExceptionPattern {
	if o == nil || IsNil(o.ExceptionOnAnyNodeExceptionPatterns) {
		var ret []ExceptionPattern
		return ret
	}
	return o.ExceptionOnAnyNodeExceptionPatterns
}

// GetExceptionOnAnyNodeExceptionPatternsOk returns a tuple with the ExceptionOnAnyNodeExceptionPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetExceptionOnAnyNodeExceptionPatternsOk() ([]ExceptionPattern, bool) {
	if o == nil || IsNil(o.ExceptionOnAnyNodeExceptionPatterns) {
		return nil, false
	}
	return o.ExceptionOnAnyNodeExceptionPatterns, true
}

// HasExceptionOnAnyNodeExceptionPatterns returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasExceptionOnAnyNodeExceptionPatterns() bool {
	if o != nil && !IsNil(o.ExceptionOnAnyNodeExceptionPatterns) {
		return true
	}

	return false
}

// SetExceptionOnAnyNodeExceptionPatterns gets a reference to the given []ExceptionPattern and assigns it to the ExceptionOnAnyNodeExceptionPatterns field.
func (o *FailureDetectionParameterSet) SetExceptionOnAnyNodeExceptionPatterns(v []ExceptionPattern) {
	o.ExceptionOnAnyNodeExceptionPatterns = v
}

// GetFailingHttpCodesClientSide returns the FailingHttpCodesClientSide field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetFailingHttpCodesClientSide() string {
	if o == nil || IsNil(o.FailingHttpCodesClientSide) {
		var ret string
		return ret
	}
	return *o.FailingHttpCodesClientSide
}

// GetFailingHttpCodesClientSideOk returns a tuple with the FailingHttpCodesClientSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetFailingHttpCodesClientSideOk() (*string, bool) {
	if o == nil || IsNil(o.FailingHttpCodesClientSide) {
		return nil, false
	}
	return o.FailingHttpCodesClientSide, true
}

// HasFailingHttpCodesClientSide returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasFailingHttpCodesClientSide() bool {
	if o != nil && !IsNil(o.FailingHttpCodesClientSide) {
		return true
	}

	return false
}

// SetFailingHttpCodesClientSide gets a reference to the given string and assigns it to the FailingHttpCodesClientSide field.
func (o *FailureDetectionParameterSet) SetFailingHttpCodesClientSide(v string) {
	o.FailingHttpCodesClientSide = &v
}

// GetFailingHttpCodesServerSide returns the FailingHttpCodesServerSide field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetFailingHttpCodesServerSide() string {
	if o == nil || IsNil(o.FailingHttpCodesServerSide) {
		var ret string
		return ret
	}
	return *o.FailingHttpCodesServerSide
}

// GetFailingHttpCodesServerSideOk returns a tuple with the FailingHttpCodesServerSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetFailingHttpCodesServerSideOk() (*string, bool) {
	if o == nil || IsNil(o.FailingHttpCodesServerSide) {
		return nil, false
	}
	return o.FailingHttpCodesServerSide, true
}

// HasFailingHttpCodesServerSide returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasFailingHttpCodesServerSide() bool {
	if o != nil && !IsNil(o.FailingHttpCodesServerSide) {
		return true
	}

	return false
}

// SetFailingHttpCodesServerSide gets a reference to the given string and assigns it to the FailingHttpCodesServerSide field.
func (o *FailureDetectionParameterSet) SetFailingHttpCodesServerSide(v string) {
	o.FailingHttpCodesServerSide = &v
}

// GetHttp404NotFoundFailureEnabled returns the Http404NotFoundFailureEnabled field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetHttp404NotFoundFailureEnabled() bool {
	if o == nil || IsNil(o.Http404NotFoundFailureEnabled) {
		var ret bool
		return ret
	}
	return *o.Http404NotFoundFailureEnabled
}

// GetHttp404NotFoundFailureEnabledOk returns a tuple with the Http404NotFoundFailureEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetHttp404NotFoundFailureEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Http404NotFoundFailureEnabled) {
		return nil, false
	}
	return o.Http404NotFoundFailureEnabled, true
}

// HasHttp404NotFoundFailureEnabled returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasHttp404NotFoundFailureEnabled() bool {
	if o != nil && !IsNil(o.Http404NotFoundFailureEnabled) {
		return true
	}

	return false
}

// SetHttp404NotFoundFailureEnabled gets a reference to the given bool and assigns it to the Http404NotFoundFailureEnabled field.
func (o *FailureDetectionParameterSet) SetHttp404NotFoundFailureEnabled(v bool) {
	o.Http404NotFoundFailureEnabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FailureDetectionParameterSet) SetId(v string) {
	o.Id = &v
}

// GetIgnoreAllExceptions returns the IgnoreAllExceptions field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetIgnoreAllExceptions() bool {
	if o == nil || IsNil(o.IgnoreAllExceptions) {
		var ret bool
		return ret
	}
	return *o.IgnoreAllExceptions
}

// GetIgnoreAllExceptionsOk returns a tuple with the IgnoreAllExceptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetIgnoreAllExceptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreAllExceptions) {
		return nil, false
	}
	return o.IgnoreAllExceptions, true
}

// HasIgnoreAllExceptions returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasIgnoreAllExceptions() bool {
	if o != nil && !IsNil(o.IgnoreAllExceptions) {
		return true
	}

	return false
}

// SetIgnoreAllExceptions gets a reference to the given bool and assigns it to the IgnoreAllExceptions field.
func (o *FailureDetectionParameterSet) SetIgnoreAllExceptions(v bool) {
	o.IgnoreAllExceptions = &v
}

// GetIgnoreSpanFailureDetection returns the IgnoreSpanFailureDetection field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetIgnoreSpanFailureDetection() bool {
	if o == nil || IsNil(o.IgnoreSpanFailureDetection) {
		var ret bool
		return ret
	}
	return *o.IgnoreSpanFailureDetection
}

// GetIgnoreSpanFailureDetectionOk returns a tuple with the IgnoreSpanFailureDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetIgnoreSpanFailureDetectionOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreSpanFailureDetection) {
		return nil, false
	}
	return o.IgnoreSpanFailureDetection, true
}

// HasIgnoreSpanFailureDetection returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasIgnoreSpanFailureDetection() bool {
	if o != nil && !IsNil(o.IgnoreSpanFailureDetection) {
		return true
	}

	return false
}

// SetIgnoreSpanFailureDetection gets a reference to the given bool and assigns it to the IgnoreSpanFailureDetection field.
func (o *FailureDetectionParameterSet) SetIgnoreSpanFailureDetection(v bool) {
	o.IgnoreSpanFailureDetection = &v
}

// GetIgnoredExceptionPatterns returns the IgnoredExceptionPatterns field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetIgnoredExceptionPatterns() []ExceptionPattern {
	if o == nil || IsNil(o.IgnoredExceptionPatterns) {
		var ret []ExceptionPattern
		return ret
	}
	return o.IgnoredExceptionPatterns
}

// GetIgnoredExceptionPatternsOk returns a tuple with the IgnoredExceptionPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetIgnoredExceptionPatternsOk() ([]ExceptionPattern, bool) {
	if o == nil || IsNil(o.IgnoredExceptionPatterns) {
		return nil, false
	}
	return o.IgnoredExceptionPatterns, true
}

// HasIgnoredExceptionPatterns returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasIgnoredExceptionPatterns() bool {
	if o != nil && !IsNil(o.IgnoredExceptionPatterns) {
		return true
	}

	return false
}

// SetIgnoredExceptionPatterns gets a reference to the given []ExceptionPattern and assigns it to the IgnoredExceptionPatterns field.
func (o *FailureDetectionParameterSet) SetIgnoredExceptionPatterns(v []ExceptionPattern) {
	o.IgnoredExceptionPatterns = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FailureDetectionParameterSet) SetName(v string) {
	o.Name = &v
}

// GetServerSideMissingHttpCodeIsFailure returns the ServerSideMissingHttpCodeIsFailure field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetServerSideMissingHttpCodeIsFailure() bool {
	if o == nil || IsNil(o.ServerSideMissingHttpCodeIsFailure) {
		var ret bool
		return ret
	}
	return *o.ServerSideMissingHttpCodeIsFailure
}

// GetServerSideMissingHttpCodeIsFailureOk returns a tuple with the ServerSideMissingHttpCodeIsFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetServerSideMissingHttpCodeIsFailureOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerSideMissingHttpCodeIsFailure) {
		return nil, false
	}
	return o.ServerSideMissingHttpCodeIsFailure, true
}

// HasServerSideMissingHttpCodeIsFailure returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasServerSideMissingHttpCodeIsFailure() bool {
	if o != nil && !IsNil(o.ServerSideMissingHttpCodeIsFailure) {
		return true
	}

	return false
}

// SetServerSideMissingHttpCodeIsFailure gets a reference to the given bool and assigns it to the ServerSideMissingHttpCodeIsFailure field.
func (o *FailureDetectionParameterSet) SetServerSideMissingHttpCodeIsFailure(v bool) {
	o.ServerSideMissingHttpCodeIsFailure = &v
}

// GetSuccessForcingExceptionPatterns returns the SuccessForcingExceptionPatterns field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetSuccessForcingExceptionPatterns() []ExceptionPattern {
	if o == nil || IsNil(o.SuccessForcingExceptionPatterns) {
		var ret []ExceptionPattern
		return ret
	}
	return o.SuccessForcingExceptionPatterns
}

// GetSuccessForcingExceptionPatternsOk returns a tuple with the SuccessForcingExceptionPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetSuccessForcingExceptionPatternsOk() ([]ExceptionPattern, bool) {
	if o == nil || IsNil(o.SuccessForcingExceptionPatterns) {
		return nil, false
	}
	return o.SuccessForcingExceptionPatterns, true
}

// HasSuccessForcingExceptionPatterns returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasSuccessForcingExceptionPatterns() bool {
	if o != nil && !IsNil(o.SuccessForcingExceptionPatterns) {
		return true
	}

	return false
}

// SetSuccessForcingExceptionPatterns gets a reference to the given []ExceptionPattern and assigns it to the SuccessForcingExceptionPatterns field.
func (o *FailureDetectionParameterSet) SetSuccessForcingExceptionPatterns(v []ExceptionPattern) {
	o.SuccessForcingExceptionPatterns = v
}

// GetTagConditions returns the TagConditions field value if set, zero value otherwise.
func (o *FailureDetectionParameterSet) GetTagConditions() []FdpTagCondition {
	if o == nil || IsNil(o.TagConditions) {
		var ret []FdpTagCondition
		return ret
	}
	return o.TagConditions
}

// GetTagConditionsOk returns a tuple with the TagConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetectionParameterSet) GetTagConditionsOk() ([]FdpTagCondition, bool) {
	if o == nil || IsNil(o.TagConditions) {
		return nil, false
	}
	return o.TagConditions, true
}

// HasTagConditions returns a boolean if a field has been set.
func (o *FailureDetectionParameterSet) HasTagConditions() bool {
	if o != nil && !IsNil(o.TagConditions) {
		return true
	}

	return false
}

// SetTagConditions gets a reference to the given []FdpTagCondition and assigns it to the TagConditions field.
func (o *FailureDetectionParameterSet) SetTagConditions(v []FdpTagCondition) {
	o.TagConditions = v
}

func (o FailureDetectionParameterSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailureDetectionParameterSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrokenLinkDomains) {
		toSerialize["brokenLinkDomains"] = o.BrokenLinkDomains
	}
	if !IsNil(o.ClientSideMissingHttpCodeIsFailure) {
		toSerialize["clientSideMissingHttpCodeIsFailure"] = o.ClientSideMissingHttpCodeIsFailure
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExceptionOnAnyNodeExceptionPatterns) {
		toSerialize["exceptionOnAnyNodeExceptionPatterns"] = o.ExceptionOnAnyNodeExceptionPatterns
	}
	if !IsNil(o.FailingHttpCodesClientSide) {
		toSerialize["failingHttpCodesClientSide"] = o.FailingHttpCodesClientSide
	}
	if !IsNil(o.FailingHttpCodesServerSide) {
		toSerialize["failingHttpCodesServerSide"] = o.FailingHttpCodesServerSide
	}
	if !IsNil(o.Http404NotFoundFailureEnabled) {
		toSerialize["http404NotFoundFailureEnabled"] = o.Http404NotFoundFailureEnabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IgnoreAllExceptions) {
		toSerialize["ignoreAllExceptions"] = o.IgnoreAllExceptions
	}
	if !IsNil(o.IgnoreSpanFailureDetection) {
		toSerialize["ignoreSpanFailureDetection"] = o.IgnoreSpanFailureDetection
	}
	if !IsNil(o.IgnoredExceptionPatterns) {
		toSerialize["ignoredExceptionPatterns"] = o.IgnoredExceptionPatterns
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ServerSideMissingHttpCodeIsFailure) {
		toSerialize["serverSideMissingHttpCodeIsFailure"] = o.ServerSideMissingHttpCodeIsFailure
	}
	if !IsNil(o.SuccessForcingExceptionPatterns) {
		toSerialize["successForcingExceptionPatterns"] = o.SuccessForcingExceptionPatterns
	}
	if !IsNil(o.TagConditions) {
		toSerialize["tagConditions"] = o.TagConditions
	}
	return toSerialize, nil
}

type NullableFailureDetectionParameterSet struct {
	value *FailureDetectionParameterSet
	isSet bool
}

func (v NullableFailureDetectionParameterSet) Get() *FailureDetectionParameterSet {
	return v.value
}

func (v *NullableFailureDetectionParameterSet) Set(val *FailureDetectionParameterSet) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureDetectionParameterSet) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureDetectionParameterSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureDetectionParameterSet(val *FailureDetectionParameterSet) *NullableFailureDetectionParameterSet {
	return &NullableFailureDetectionParameterSet{value: val, isSet: true}
}

func (v NullableFailureDetectionParameterSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureDetectionParameterSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


