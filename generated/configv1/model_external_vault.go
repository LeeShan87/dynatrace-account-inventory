/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the ExternalVault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalVault{}

// ExternalVault Information for synchronization credentials with external vault
type ExternalVault struct {
	// Id of a location used by the synchronizing monitor
	LocationForSynchronizationId *string `json:"locationForSynchronizationId,omitempty"`
	// The name of the secret saved in external vault where password is stored.
	PasswordSecretName *string `json:"passwordSecretName,omitempty"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `HASHICORP_VAULT_APPROLE` -> HashicorpApprole  * `HASHICORP_VAULT_CERTIFICATE` -> HashicorpCertificate  * `AZURE_KEY_VAULT_CLIENT_SECRET` -> AzureClientSecret  * `CYBERARK_VAULT_USERNAME_PASSWORD` -> CyberArkUsernamePassword  * `CYBERARK_VAULT_ALLOWED_LOCATION` -> CyberArkAllowedLocationDto  
	SourceAuthMethod *string `json:"sourceAuthMethod,omitempty"`
	// The name of the secret saved in external vault where token is stored.
	TokenSecretName *string `json:"tokenSecretName,omitempty"`
	// The name of the secret saved in external vault where username is stored.
	UsernameSecretName *string `json:"usernameSecretName,omitempty"`
	// External vault URL.
	VaultUrl *string `json:"vaultUrl,omitempty"`
}

// NewExternalVault instantiates a new ExternalVault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalVault() *ExternalVault {
	this := ExternalVault{}
	return &this
}

// NewExternalVaultWithDefaults instantiates a new ExternalVault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalVaultWithDefaults() *ExternalVault {
	this := ExternalVault{}
	return &this
}

// GetLocationForSynchronizationId returns the LocationForSynchronizationId field value if set, zero value otherwise.
func (o *ExternalVault) GetLocationForSynchronizationId() string {
	if o == nil || IsNil(o.LocationForSynchronizationId) {
		var ret string
		return ret
	}
	return *o.LocationForSynchronizationId
}

// GetLocationForSynchronizationIdOk returns a tuple with the LocationForSynchronizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVault) GetLocationForSynchronizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationForSynchronizationId) {
		return nil, false
	}
	return o.LocationForSynchronizationId, true
}

// HasLocationForSynchronizationId returns a boolean if a field has been set.
func (o *ExternalVault) HasLocationForSynchronizationId() bool {
	if o != nil && !IsNil(o.LocationForSynchronizationId) {
		return true
	}

	return false
}

// SetLocationForSynchronizationId gets a reference to the given string and assigns it to the LocationForSynchronizationId field.
func (o *ExternalVault) SetLocationForSynchronizationId(v string) {
	o.LocationForSynchronizationId = &v
}

// GetPasswordSecretName returns the PasswordSecretName field value if set, zero value otherwise.
func (o *ExternalVault) GetPasswordSecretName() string {
	if o == nil || IsNil(o.PasswordSecretName) {
		var ret string
		return ret
	}
	return *o.PasswordSecretName
}

// GetPasswordSecretNameOk returns a tuple with the PasswordSecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVault) GetPasswordSecretNameOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordSecretName) {
		return nil, false
	}
	return o.PasswordSecretName, true
}

// HasPasswordSecretName returns a boolean if a field has been set.
func (o *ExternalVault) HasPasswordSecretName() bool {
	if o != nil && !IsNil(o.PasswordSecretName) {
		return true
	}

	return false
}

// SetPasswordSecretName gets a reference to the given string and assigns it to the PasswordSecretName field.
func (o *ExternalVault) SetPasswordSecretName(v string) {
	o.PasswordSecretName = &v
}

// GetSourceAuthMethod returns the SourceAuthMethod field value if set, zero value otherwise.
func (o *ExternalVault) GetSourceAuthMethod() string {
	if o == nil || IsNil(o.SourceAuthMethod) {
		var ret string
		return ret
	}
	return *o.SourceAuthMethod
}

// GetSourceAuthMethodOk returns a tuple with the SourceAuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVault) GetSourceAuthMethodOk() (*string, bool) {
	if o == nil || IsNil(o.SourceAuthMethod) {
		return nil, false
	}
	return o.SourceAuthMethod, true
}

// HasSourceAuthMethod returns a boolean if a field has been set.
func (o *ExternalVault) HasSourceAuthMethod() bool {
	if o != nil && !IsNil(o.SourceAuthMethod) {
		return true
	}

	return false
}

// SetSourceAuthMethod gets a reference to the given string and assigns it to the SourceAuthMethod field.
func (o *ExternalVault) SetSourceAuthMethod(v string) {
	o.SourceAuthMethod = &v
}

// GetTokenSecretName returns the TokenSecretName field value if set, zero value otherwise.
func (o *ExternalVault) GetTokenSecretName() string {
	if o == nil || IsNil(o.TokenSecretName) {
		var ret string
		return ret
	}
	return *o.TokenSecretName
}

// GetTokenSecretNameOk returns a tuple with the TokenSecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVault) GetTokenSecretNameOk() (*string, bool) {
	if o == nil || IsNil(o.TokenSecretName) {
		return nil, false
	}
	return o.TokenSecretName, true
}

// HasTokenSecretName returns a boolean if a field has been set.
func (o *ExternalVault) HasTokenSecretName() bool {
	if o != nil && !IsNil(o.TokenSecretName) {
		return true
	}

	return false
}

// SetTokenSecretName gets a reference to the given string and assigns it to the TokenSecretName field.
func (o *ExternalVault) SetTokenSecretName(v string) {
	o.TokenSecretName = &v
}

// GetUsernameSecretName returns the UsernameSecretName field value if set, zero value otherwise.
func (o *ExternalVault) GetUsernameSecretName() string {
	if o == nil || IsNil(o.UsernameSecretName) {
		var ret string
		return ret
	}
	return *o.UsernameSecretName
}

// GetUsernameSecretNameOk returns a tuple with the UsernameSecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVault) GetUsernameSecretNameOk() (*string, bool) {
	if o == nil || IsNil(o.UsernameSecretName) {
		return nil, false
	}
	return o.UsernameSecretName, true
}

// HasUsernameSecretName returns a boolean if a field has been set.
func (o *ExternalVault) HasUsernameSecretName() bool {
	if o != nil && !IsNil(o.UsernameSecretName) {
		return true
	}

	return false
}

// SetUsernameSecretName gets a reference to the given string and assigns it to the UsernameSecretName field.
func (o *ExternalVault) SetUsernameSecretName(v string) {
	o.UsernameSecretName = &v
}

// GetVaultUrl returns the VaultUrl field value if set, zero value otherwise.
func (o *ExternalVault) GetVaultUrl() string {
	if o == nil || IsNil(o.VaultUrl) {
		var ret string
		return ret
	}
	return *o.VaultUrl
}

// GetVaultUrlOk returns a tuple with the VaultUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVault) GetVaultUrlOk() (*string, bool) {
	if o == nil || IsNil(o.VaultUrl) {
		return nil, false
	}
	return o.VaultUrl, true
}

// HasVaultUrl returns a boolean if a field has been set.
func (o *ExternalVault) HasVaultUrl() bool {
	if o != nil && !IsNil(o.VaultUrl) {
		return true
	}

	return false
}

// SetVaultUrl gets a reference to the given string and assigns it to the VaultUrl field.
func (o *ExternalVault) SetVaultUrl(v string) {
	o.VaultUrl = &v
}

func (o ExternalVault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalVault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationForSynchronizationId) {
		toSerialize["locationForSynchronizationId"] = o.LocationForSynchronizationId
	}
	if !IsNil(o.PasswordSecretName) {
		toSerialize["passwordSecretName"] = o.PasswordSecretName
	}
	if !IsNil(o.SourceAuthMethod) {
		toSerialize["sourceAuthMethod"] = o.SourceAuthMethod
	}
	if !IsNil(o.TokenSecretName) {
		toSerialize["tokenSecretName"] = o.TokenSecretName
	}
	if !IsNil(o.UsernameSecretName) {
		toSerialize["usernameSecretName"] = o.UsernameSecretName
	}
	if !IsNil(o.VaultUrl) {
		toSerialize["vaultUrl"] = o.VaultUrl
	}
	return toSerialize, nil
}

type NullableExternalVault struct {
	value *ExternalVault
	isSet bool
}

func (v NullableExternalVault) Get() *ExternalVault {
	return v.value
}

func (v *NullableExternalVault) Set(val *ExternalVault) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalVault) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalVault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalVault(val *ExternalVault) *NullableExternalVault {
	return &NullableExternalVault{value: val, isSet: true}
}

func (v NullableExternalVault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalVault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


