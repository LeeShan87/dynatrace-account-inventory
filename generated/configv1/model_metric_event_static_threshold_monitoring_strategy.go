/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the MetricEventStaticThresholdMonitoringStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricEventStaticThresholdMonitoringStrategy{}

// MetricEventStaticThresholdMonitoringStrategy A static threshold monitoring strategy to alert on hard limits within a given metric. An example is the violation of a critical memory limit.
type MetricEventStaticThresholdMonitoringStrategy struct {
	// The condition for the **threshold** value check: above or below.
	AlertCondition string `json:"alertCondition"`
	// If true, also one-minute samples without data are counted as violating samples.
	AlertingOnMissingData *bool `json:"alertingOnMissingData,omitempty"`
	// The number of one-minute samples within the evaluation window that must go back to normal to close the event.
	DealertingSamples int32 `json:"dealertingSamples"`
	// The number of one-minute samples that form the sliding evaluation window.
	Samples int32 `json:"samples"`
	// The value of the static threshold based on the specified unit.
	Threshold float64 `json:"threshold"`
	// The unit of the threshold, matching the metric definition.
	Unit *string `json:"unit,omitempty"`
	// The number of one-minute samples within the evaluation window that must violate the threshold to trigger an event.
	ViolatingSamples int32 `json:"violatingSamples"`
}

// NewMetricEventStaticThresholdMonitoringStrategy instantiates a new MetricEventStaticThresholdMonitoringStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEventStaticThresholdMonitoringStrategy(alertCondition string, dealertingSamples int32, samples int32, threshold float64, violatingSamples int32, type_ string) *MetricEventStaticThresholdMonitoringStrategy {
	this := MetricEventStaticThresholdMonitoringStrategy{}
	this.Type = type_
	this.AlertCondition = alertCondition
	this.DealertingSamples = dealertingSamples
	this.Samples = samples
	this.Threshold = threshold
	this.ViolatingSamples = violatingSamples
	return &this
}

// NewMetricEventStaticThresholdMonitoringStrategyWithDefaults instantiates a new MetricEventStaticThresholdMonitoringStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEventStaticThresholdMonitoringStrategyWithDefaults() *MetricEventStaticThresholdMonitoringStrategy {
	this := MetricEventStaticThresholdMonitoringStrategy{}
	return &this
}

// GetAlertCondition returns the AlertCondition field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetAlertCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlertCondition
}

// GetAlertConditionOk returns a tuple with the AlertCondition field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetAlertConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertCondition, true
}

// SetAlertCondition sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetAlertCondition(v string) {
	o.AlertCondition = v
}

// GetAlertingOnMissingData returns the AlertingOnMissingData field value if set, zero value otherwise.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetAlertingOnMissingData() bool {
	if o == nil || IsNil(o.AlertingOnMissingData) {
		var ret bool
		return ret
	}
	return *o.AlertingOnMissingData
}

// GetAlertingOnMissingDataOk returns a tuple with the AlertingOnMissingData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetAlertingOnMissingDataOk() (*bool, bool) {
	if o == nil || IsNil(o.AlertingOnMissingData) {
		return nil, false
	}
	return o.AlertingOnMissingData, true
}

// HasAlertingOnMissingData returns a boolean if a field has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) HasAlertingOnMissingData() bool {
	if o != nil && !IsNil(o.AlertingOnMissingData) {
		return true
	}

	return false
}

// SetAlertingOnMissingData gets a reference to the given bool and assigns it to the AlertingOnMissingData field.
func (o *MetricEventStaticThresholdMonitoringStrategy) SetAlertingOnMissingData(v bool) {
	o.AlertingOnMissingData = &v
}

// GetDealertingSamples returns the DealertingSamples field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetDealertingSamples() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DealertingSamples
}

// GetDealertingSamplesOk returns a tuple with the DealertingSamples field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetDealertingSamplesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DealertingSamples, true
}

// SetDealertingSamples sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetDealertingSamples(v int32) {
	o.DealertingSamples = v
}

// GetSamples returns the Samples field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetSamples() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetSamplesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Samples, true
}

// SetSamples sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetSamples(v int32) {
	o.Samples = v
}

// GetThreshold returns the Threshold field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetThreshold() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetThresholdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetThreshold(v float64) {
	o.Threshold = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *MetricEventStaticThresholdMonitoringStrategy) SetUnit(v string) {
	o.Unit = &v
}

// GetViolatingSamples returns the ViolatingSamples field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetViolatingSamples() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ViolatingSamples
}

// GetViolatingSamplesOk returns a tuple with the ViolatingSamples field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetViolatingSamplesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViolatingSamples, true
}

// SetViolatingSamples sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetViolatingSamples(v int32) {
	o.ViolatingSamples = v
}

func (o MetricEventStaticThresholdMonitoringStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricEventStaticThresholdMonitoringStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alertCondition"] = o.AlertCondition
	if !IsNil(o.AlertingOnMissingData) {
		toSerialize["alertingOnMissingData"] = o.AlertingOnMissingData
	}
	toSerialize["dealertingSamples"] = o.DealertingSamples
	toSerialize["samples"] = o.Samples
	toSerialize["threshold"] = o.Threshold
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	toSerialize["violatingSamples"] = o.ViolatingSamples
	return toSerialize, nil
}

type NullableMetricEventStaticThresholdMonitoringStrategy struct {
	value *MetricEventStaticThresholdMonitoringStrategy
	isSet bool
}

func (v NullableMetricEventStaticThresholdMonitoringStrategy) Get() *MetricEventStaticThresholdMonitoringStrategy {
	return v.value
}

func (v *NullableMetricEventStaticThresholdMonitoringStrategy) Set(val *MetricEventStaticThresholdMonitoringStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEventStaticThresholdMonitoringStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEventStaticThresholdMonitoringStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEventStaticThresholdMonitoringStrategy(val *MetricEventStaticThresholdMonitoringStrategy) *NullableMetricEventStaticThresholdMonitoringStrategy {
	return &NullableMetricEventStaticThresholdMonitoringStrategy{value: val, isSet: true}
}

func (v NullableMetricEventStaticThresholdMonitoringStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEventStaticThresholdMonitoringStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


