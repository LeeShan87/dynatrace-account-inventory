/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the SessionReplaySetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionReplaySetting{}

// SessionReplaySetting Session replay settings
type SessionReplaySetting struct {
	// Session replay sampling rating in percentage.
	CostControlPercentage int32 `json:"costControlPercentage"`
	// A list of URLs to be excluded from CSS resource capturing.
	CssResourceCapturingExclusionRules []string `json:"cssResourceCapturingExclusionRules,omitempty"`
	// Capture (`true`) or don't capture (`false`) CSS resources from the session.
	EnableCssResourceCapturing *bool `json:"enableCssResourceCapturing,omitempty"`
	// SessionReplay Enabled.
	Enabled bool `json:"enabled"`
}

// NewSessionReplaySetting instantiates a new SessionReplaySetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionReplaySetting(costControlPercentage int32, enabled bool) *SessionReplaySetting {
	this := SessionReplaySetting{}
	this.CostControlPercentage = costControlPercentage
	this.Enabled = enabled
	return &this
}

// NewSessionReplaySettingWithDefaults instantiates a new SessionReplaySetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionReplaySettingWithDefaults() *SessionReplaySetting {
	this := SessionReplaySetting{}
	return &this
}

// GetCostControlPercentage returns the CostControlPercentage field value
func (o *SessionReplaySetting) GetCostControlPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CostControlPercentage
}

// GetCostControlPercentageOk returns a tuple with the CostControlPercentage field value
// and a boolean to check if the value has been set.
func (o *SessionReplaySetting) GetCostControlPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CostControlPercentage, true
}

// SetCostControlPercentage sets field value
func (o *SessionReplaySetting) SetCostControlPercentage(v int32) {
	o.CostControlPercentage = v
}

// GetCssResourceCapturingExclusionRules returns the CssResourceCapturingExclusionRules field value if set, zero value otherwise.
func (o *SessionReplaySetting) GetCssResourceCapturingExclusionRules() []string {
	if o == nil || IsNil(o.CssResourceCapturingExclusionRules) {
		var ret []string
		return ret
	}
	return o.CssResourceCapturingExclusionRules
}

// GetCssResourceCapturingExclusionRulesOk returns a tuple with the CssResourceCapturingExclusionRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionReplaySetting) GetCssResourceCapturingExclusionRulesOk() ([]string, bool) {
	if o == nil || IsNil(o.CssResourceCapturingExclusionRules) {
		return nil, false
	}
	return o.CssResourceCapturingExclusionRules, true
}

// HasCssResourceCapturingExclusionRules returns a boolean if a field has been set.
func (o *SessionReplaySetting) HasCssResourceCapturingExclusionRules() bool {
	if o != nil && !IsNil(o.CssResourceCapturingExclusionRules) {
		return true
	}

	return false
}

// SetCssResourceCapturingExclusionRules gets a reference to the given []string and assigns it to the CssResourceCapturingExclusionRules field.
func (o *SessionReplaySetting) SetCssResourceCapturingExclusionRules(v []string) {
	o.CssResourceCapturingExclusionRules = v
}

// GetEnableCssResourceCapturing returns the EnableCssResourceCapturing field value if set, zero value otherwise.
func (o *SessionReplaySetting) GetEnableCssResourceCapturing() bool {
	if o == nil || IsNil(o.EnableCssResourceCapturing) {
		var ret bool
		return ret
	}
	return *o.EnableCssResourceCapturing
}

// GetEnableCssResourceCapturingOk returns a tuple with the EnableCssResourceCapturing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionReplaySetting) GetEnableCssResourceCapturingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCssResourceCapturing) {
		return nil, false
	}
	return o.EnableCssResourceCapturing, true
}

// HasEnableCssResourceCapturing returns a boolean if a field has been set.
func (o *SessionReplaySetting) HasEnableCssResourceCapturing() bool {
	if o != nil && !IsNil(o.EnableCssResourceCapturing) {
		return true
	}

	return false
}

// SetEnableCssResourceCapturing gets a reference to the given bool and assigns it to the EnableCssResourceCapturing field.
func (o *SessionReplaySetting) SetEnableCssResourceCapturing(v bool) {
	o.EnableCssResourceCapturing = &v
}

// GetEnabled returns the Enabled field value
func (o *SessionReplaySetting) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SessionReplaySetting) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SessionReplaySetting) SetEnabled(v bool) {
	o.Enabled = v
}

func (o SessionReplaySetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionReplaySetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["costControlPercentage"] = o.CostControlPercentage
	if !IsNil(o.CssResourceCapturingExclusionRules) {
		toSerialize["cssResourceCapturingExclusionRules"] = o.CssResourceCapturingExclusionRules
	}
	if !IsNil(o.EnableCssResourceCapturing) {
		toSerialize["enableCssResourceCapturing"] = o.EnableCssResourceCapturing
	}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

type NullableSessionReplaySetting struct {
	value *SessionReplaySetting
	isSet bool
}

func (v NullableSessionReplaySetting) Get() *SessionReplaySetting {
	return v.value
}

func (v *NullableSessionReplaySetting) Set(val *SessionReplaySetting) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionReplaySetting) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionReplaySetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionReplaySetting(val *SessionReplaySetting) *NullableSessionReplaySetting {
	return &NullableSessionReplaySetting{value: val, isSet: true}
}

func (v NullableSessionReplaySetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionReplaySetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


