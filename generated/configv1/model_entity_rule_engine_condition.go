/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the EntityRuleEngineCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityRuleEngineCondition{}

// EntityRuleEngineCondition A condition defines how to execute matching logic for an entity.
type EntityRuleEngineCondition struct {
	ComparisonInfo ComparisonBasic `json:"comparisonInfo"`
	Key ConditionKey `json:"key"`
}

// NewEntityRuleEngineCondition instantiates a new EntityRuleEngineCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityRuleEngineCondition(comparisonInfo ComparisonBasic, key ConditionKey) *EntityRuleEngineCondition {
	this := EntityRuleEngineCondition{}
	this.ComparisonInfo = comparisonInfo
	this.Key = key
	return &this
}

// NewEntityRuleEngineConditionWithDefaults instantiates a new EntityRuleEngineCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityRuleEngineConditionWithDefaults() *EntityRuleEngineCondition {
	this := EntityRuleEngineCondition{}
	return &this
}

// GetComparisonInfo returns the ComparisonInfo field value
func (o *EntityRuleEngineCondition) GetComparisonInfo() ComparisonBasic {
	if o == nil {
		var ret ComparisonBasic
		return ret
	}

	return o.ComparisonInfo
}

// GetComparisonInfoOk returns a tuple with the ComparisonInfo field value
// and a boolean to check if the value has been set.
func (o *EntityRuleEngineCondition) GetComparisonInfoOk() (*ComparisonBasic, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComparisonInfo, true
}

// SetComparisonInfo sets field value
func (o *EntityRuleEngineCondition) SetComparisonInfo(v ComparisonBasic) {
	o.ComparisonInfo = v
}

// GetKey returns the Key field value
func (o *EntityRuleEngineCondition) GetKey() ConditionKey {
	if o == nil {
		var ret ConditionKey
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *EntityRuleEngineCondition) GetKeyOk() (*ConditionKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *EntityRuleEngineCondition) SetKey(v ConditionKey) {
	o.Key = v
}

func (o EntityRuleEngineCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityRuleEngineCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comparisonInfo"] = o.ComparisonInfo
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

type NullableEntityRuleEngineCondition struct {
	value *EntityRuleEngineCondition
	isSet bool
}

func (v NullableEntityRuleEngineCondition) Get() *EntityRuleEngineCondition {
	return v.value
}

func (v *NullableEntityRuleEngineCondition) Set(val *EntityRuleEngineCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityRuleEngineCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityRuleEngineCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityRuleEngineCondition(val *EntityRuleEngineCondition) *NullableEntityRuleEngineCondition {
	return &NullableEntityRuleEngineCondition{value: val, isSet: true}
}

func (v NullableEntityRuleEngineCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityRuleEngineCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


