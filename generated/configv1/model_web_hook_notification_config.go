/*
Dynatrace Configuration API

Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configv1

import (
	"encoding/json"
)

// checks if the WebHookNotificationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebHookNotificationConfig{}

// WebHookNotificationConfig Configuration of the custom WebHook notification.
type WebHookNotificationConfig struct {
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates.
	AcceptAnyCertificate bool `json:"acceptAnyCertificate"`
	// A list of the additional HTTP headers.
	Headers []HttpHeader `json:"headers,omitempty"`
	// Call webhook if new events merge into existing problems.
	NotifyEventMergesEnabled *bool `json:"notifyEventMergesEnabled,omitempty"`
	// The content of the notification message.   You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://dt-url.net/1yk3kkq) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://dt-url.net/klg3k4q) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://dt-url.net/f1i3k5b) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Payload string `json:"payload"`
	// The URL of the WebHook endpoint.
	Url string `json:"url"`
}

// NewWebHookNotificationConfig instantiates a new WebHookNotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebHookNotificationConfig(acceptAnyCertificate bool, payload string, url string, active bool, alertingProfile string, name string, type_ string) *WebHookNotificationConfig {
	this := WebHookNotificationConfig{}
	this.Active = active
	this.AlertingProfile = alertingProfile
	this.Name = name
	this.Type = type_
	this.AcceptAnyCertificate = acceptAnyCertificate
	this.Payload = payload
	this.Url = url
	return &this
}

// NewWebHookNotificationConfigWithDefaults instantiates a new WebHookNotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebHookNotificationConfigWithDefaults() *WebHookNotificationConfig {
	this := WebHookNotificationConfig{}
	return &this
}

// GetAcceptAnyCertificate returns the AcceptAnyCertificate field value
func (o *WebHookNotificationConfig) GetAcceptAnyCertificate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AcceptAnyCertificate
}

// GetAcceptAnyCertificateOk returns a tuple with the AcceptAnyCertificate field value
// and a boolean to check if the value has been set.
func (o *WebHookNotificationConfig) GetAcceptAnyCertificateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptAnyCertificate, true
}

// SetAcceptAnyCertificate sets field value
func (o *WebHookNotificationConfig) SetAcceptAnyCertificate(v bool) {
	o.AcceptAnyCertificate = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *WebHookNotificationConfig) GetHeaders() []HttpHeader {
	if o == nil || IsNil(o.Headers) {
		var ret []HttpHeader
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookNotificationConfig) GetHeadersOk() ([]HttpHeader, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *WebHookNotificationConfig) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []HttpHeader and assigns it to the Headers field.
func (o *WebHookNotificationConfig) SetHeaders(v []HttpHeader) {
	o.Headers = v
}

// GetNotifyEventMergesEnabled returns the NotifyEventMergesEnabled field value if set, zero value otherwise.
func (o *WebHookNotificationConfig) GetNotifyEventMergesEnabled() bool {
	if o == nil || IsNil(o.NotifyEventMergesEnabled) {
		var ret bool
		return ret
	}
	return *o.NotifyEventMergesEnabled
}

// GetNotifyEventMergesEnabledOk returns a tuple with the NotifyEventMergesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookNotificationConfig) GetNotifyEventMergesEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyEventMergesEnabled) {
		return nil, false
	}
	return o.NotifyEventMergesEnabled, true
}

// HasNotifyEventMergesEnabled returns a boolean if a field has been set.
func (o *WebHookNotificationConfig) HasNotifyEventMergesEnabled() bool {
	if o != nil && !IsNil(o.NotifyEventMergesEnabled) {
		return true
	}

	return false
}

// SetNotifyEventMergesEnabled gets a reference to the given bool and assigns it to the NotifyEventMergesEnabled field.
func (o *WebHookNotificationConfig) SetNotifyEventMergesEnabled(v bool) {
	o.NotifyEventMergesEnabled = &v
}

// GetPayload returns the Payload field value
func (o *WebHookNotificationConfig) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *WebHookNotificationConfig) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *WebHookNotificationConfig) SetPayload(v string) {
	o.Payload = v
}

// GetUrl returns the Url field value
func (o *WebHookNotificationConfig) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebHookNotificationConfig) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebHookNotificationConfig) SetUrl(v string) {
	o.Url = v
}

func (o WebHookNotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebHookNotificationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["acceptAnyCertificate"] = o.AcceptAnyCertificate
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.NotifyEventMergesEnabled) {
		toSerialize["notifyEventMergesEnabled"] = o.NotifyEventMergesEnabled
	}
	toSerialize["payload"] = o.Payload
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableWebHookNotificationConfig struct {
	value *WebHookNotificationConfig
	isSet bool
}

func (v NullableWebHookNotificationConfig) Get() *WebHookNotificationConfig {
	return v.value
}

func (v *NullableWebHookNotificationConfig) Set(val *WebHookNotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableWebHookNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableWebHookNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebHookNotificationConfig(val *WebHookNotificationConfig) *NullableWebHookNotificationConfig {
	return &NullableWebHookNotificationConfig{value: val, isSet: true}
}

func (v NullableWebHookNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebHookNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


