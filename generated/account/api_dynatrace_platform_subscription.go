/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
	"reflect"
)


// DynatracePlatformSubscriptionAPIService DynatracePlatformSubscriptionAPI service
type DynatracePlatformSubscriptionAPIService service

type ApiSubscriptionsControllerGetEnvironmentCostRequest struct {
	ctx context.Context
	ApiService *DynatracePlatformSubscriptionAPIService
	accountUuid string
	subscriptionUuid string
	startTime *time.Time
	endTime *time.Time
	environmentIds *[]string
	capabilityKeys *[]string
}

// Date as ISO string
func (r ApiSubscriptionsControllerGetEnvironmentCostRequest) StartTime(startTime time.Time) ApiSubscriptionsControllerGetEnvironmentCostRequest {
	r.startTime = &startTime
	return r
}

// Date as ISO string
func (r ApiSubscriptionsControllerGetEnvironmentCostRequest) EndTime(endTime time.Time) ApiSubscriptionsControllerGetEnvironmentCostRequest {
	r.endTime = &endTime
	return r
}

func (r ApiSubscriptionsControllerGetEnvironmentCostRequest) EnvironmentIds(environmentIds []string) ApiSubscriptionsControllerGetEnvironmentCostRequest {
	r.environmentIds = &environmentIds
	return r
}

func (r ApiSubscriptionsControllerGetEnvironmentCostRequest) CapabilityKeys(capabilityKeys []string) ApiSubscriptionsControllerGetEnvironmentCostRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiSubscriptionsControllerGetEnvironmentCostRequest) Execute() (*SubscriptionEnvironmentCostListDto, *http.Response, error) {
	return r.ApiService.SubscriptionsControllerGetEnvironmentCostExecute(r)
}

/*
SubscriptionsControllerGetEnvironmentCost Get cost summary grouped by environment for a given subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
 @param subscriptionUuid The UUID of the requested subscription
 @return ApiSubscriptionsControllerGetEnvironmentCostRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetEnvironmentCost(ctx context.Context, accountUuid string, subscriptionUuid string) ApiSubscriptionsControllerGetEnvironmentCostRequest {
	return ApiSubscriptionsControllerGetEnvironmentCostRequest{
		ApiService: a,
		ctx: ctx,
		accountUuid: accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//  @return SubscriptionEnvironmentCostListDto
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetEnvironmentCostExecute(r ApiSubscriptionsControllerGetEnvironmentCostRequest) (*SubscriptionEnvironmentCostListDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionEnvironmentCostListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.SubscriptionsControllerGetEnvironmentCost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/environments/cost"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionsControllerGetEnvironmentUsageRequest struct {
	ctx context.Context
	ApiService *DynatracePlatformSubscriptionAPIService
	accountUuid string
	subscriptionUuid string
	startTime *time.Time
	endTime *time.Time
	environmentIds *[]string
	capabilityKeys *[]string
}

// Date as ISO string
func (r ApiSubscriptionsControllerGetEnvironmentUsageRequest) StartTime(startTime time.Time) ApiSubscriptionsControllerGetEnvironmentUsageRequest {
	r.startTime = &startTime
	return r
}

// Date as ISO string
func (r ApiSubscriptionsControllerGetEnvironmentUsageRequest) EndTime(endTime time.Time) ApiSubscriptionsControllerGetEnvironmentUsageRequest {
	r.endTime = &endTime
	return r
}

func (r ApiSubscriptionsControllerGetEnvironmentUsageRequest) EnvironmentIds(environmentIds []string) ApiSubscriptionsControllerGetEnvironmentUsageRequest {
	r.environmentIds = &environmentIds
	return r
}

func (r ApiSubscriptionsControllerGetEnvironmentUsageRequest) CapabilityKeys(capabilityKeys []string) ApiSubscriptionsControllerGetEnvironmentUsageRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiSubscriptionsControllerGetEnvironmentUsageRequest) Execute() (*SubscriptionEnvironmentUsageListDto, *http.Response, error) {
	return r.ApiService.SubscriptionsControllerGetEnvironmentUsageExecute(r)
}

/*
SubscriptionsControllerGetEnvironmentUsage Get usage summary grouped by environment for a given subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
 @param subscriptionUuid The UUID of the requested subscription
 @return ApiSubscriptionsControllerGetEnvironmentUsageRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetEnvironmentUsage(ctx context.Context, accountUuid string, subscriptionUuid string) ApiSubscriptionsControllerGetEnvironmentUsageRequest {
	return ApiSubscriptionsControllerGetEnvironmentUsageRequest{
		ApiService: a,
		ctx: ctx,
		accountUuid: accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//  @return SubscriptionEnvironmentUsageListDto
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetEnvironmentUsageExecute(r ApiSubscriptionsControllerGetEnvironmentUsageRequest) (*SubscriptionEnvironmentUsageListDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionEnvironmentUsageListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.SubscriptionsControllerGetEnvironmentUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/environments/usage"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionsControllerGetEventsRequest struct {
	ctx context.Context
	ApiService *DynatracePlatformSubscriptionAPIService
	accountUuid string
	startTime *time.Time
	endTime *time.Time
	eventType *string
}

// Date as ISO string
func (r ApiSubscriptionsControllerGetEventsRequest) StartTime(startTime time.Time) ApiSubscriptionsControllerGetEventsRequest {
	r.startTime = &startTime
	return r
}

// Date as ISO string
func (r ApiSubscriptionsControllerGetEventsRequest) EndTime(endTime time.Time) ApiSubscriptionsControllerGetEventsRequest {
	r.endTime = &endTime
	return r
}

func (r ApiSubscriptionsControllerGetEventsRequest) EventType(eventType string) ApiSubscriptionsControllerGetEventsRequest {
	r.eventType = &eventType
	return r
}

func (r ApiSubscriptionsControllerGetEventsRequest) Execute() ([]Event, *http.Response, error) {
	return r.ApiService.SubscriptionsControllerGetEventsExecute(r)
}

/*
SubscriptionsControllerGetEvents Get all notification events for a given subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
 @return ApiSubscriptionsControllerGetEventsRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetEvents(ctx context.Context, accountUuid string) ApiSubscriptionsControllerGetEventsRequest {
	return ApiSubscriptionsControllerGetEventsRequest{
		ApiService: a,
		ctx: ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//  @return []Event
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetEventsExecute(r ApiSubscriptionsControllerGetEventsRequest) ([]Event, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Event
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.SubscriptionsControllerGetEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/events"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	}
	if r.eventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", r.eventType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionsControllerGetForecastRequest struct {
	ctx context.Context
	ApiService *DynatracePlatformSubscriptionAPIService
	accountUuid string
}

func (r ApiSubscriptionsControllerGetForecastRequest) Execute() (*Forecast, *http.Response, error) {
	return r.ApiService.SubscriptionsControllerGetForecastExecute(r)
}

/*
SubscriptionsControllerGetForecast Get forecast snapshot for a given account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
 @return ApiSubscriptionsControllerGetForecastRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetForecast(ctx context.Context, accountUuid string) ApiSubscriptionsControllerGetForecastRequest {
	return ApiSubscriptionsControllerGetForecastRequest{
		ApiService: a,
		ctx: ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//  @return Forecast
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetForecastExecute(r ApiSubscriptionsControllerGetForecastRequest) (*Forecast, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Forecast
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.SubscriptionsControllerGetForecast")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/forecast"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionsControllerGetSubscriptionRequest struct {
	ctx context.Context
	ApiService *DynatracePlatformSubscriptionAPIService
	accountUuid string
	subscriptionUuid string
}

func (r ApiSubscriptionsControllerGetSubscriptionRequest) Execute() (*SubscriptionDto, *http.Response, error) {
	return r.ApiService.SubscriptionsControllerGetSubscriptionExecute(r)
}

/*
SubscriptionsControllerGetSubscription Get specific subscription by uuid

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
 @param subscriptionUuid The UUID of the requested subscription
 @return ApiSubscriptionsControllerGetSubscriptionRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetSubscription(ctx context.Context, accountUuid string, subscriptionUuid string) ApiSubscriptionsControllerGetSubscriptionRequest {
	return ApiSubscriptionsControllerGetSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		accountUuid: accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//  @return SubscriptionDto
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetSubscriptionExecute(r ApiSubscriptionsControllerGetSubscriptionRequest) (*SubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.SubscriptionsControllerGetSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionsControllerGetTotalSubscriptionCostRequest struct {
	ctx context.Context
	ApiService *DynatracePlatformSubscriptionAPIService
	accountUuid string
	subscriptionUuid string
	environmentIds *[]string
	capabilityKeys *[]string
}

func (r ApiSubscriptionsControllerGetTotalSubscriptionCostRequest) EnvironmentIds(environmentIds []string) ApiSubscriptionsControllerGetTotalSubscriptionCostRequest {
	r.environmentIds = &environmentIds
	return r
}

func (r ApiSubscriptionsControllerGetTotalSubscriptionCostRequest) CapabilityKeys(capabilityKeys []string) ApiSubscriptionsControllerGetTotalSubscriptionCostRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiSubscriptionsControllerGetTotalSubscriptionCostRequest) Execute() (*SubscriptionCostListDto, *http.Response, error) {
	return r.ApiService.SubscriptionsControllerGetTotalSubscriptionCostExecute(r)
}

/*
SubscriptionsControllerGetTotalSubscriptionCost Get aggregated cost data grouped by date for a given subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
 @param subscriptionUuid The UUID of the requested subscription
 @return ApiSubscriptionsControllerGetTotalSubscriptionCostRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetTotalSubscriptionCost(ctx context.Context, accountUuid string, subscriptionUuid string) ApiSubscriptionsControllerGetTotalSubscriptionCostRequest {
	return ApiSubscriptionsControllerGetTotalSubscriptionCostRequest{
		ApiService: a,
		ctx: ctx,
		accountUuid: accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//  @return SubscriptionCostListDto
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetTotalSubscriptionCostExecute(r ApiSubscriptionsControllerGetTotalSubscriptionCostRequest) (*SubscriptionCostListDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionCostListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.SubscriptionsControllerGetTotalSubscriptionCost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/cost"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest struct {
	ctx context.Context
	ApiService *DynatracePlatformSubscriptionAPIService
	accountUuid string
	subscriptionUuid string
	environmentIds *[]string
	capabilityKeys *[]string
}

func (r ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest) EnvironmentIds(environmentIds []string) ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest {
	r.environmentIds = &environmentIds
	return r
}

func (r ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest) CapabilityKeys(capabilityKeys []string) ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest) Execute() (*SubscriptionUsageListDto, *http.Response, error) {
	return r.ApiService.SubscriptionsControllerGetTotalSubscriptionUsageExecute(r)
}

/*
SubscriptionsControllerGetTotalSubscriptionUsage Get aggregated usage data grouped by date for a given subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
 @param subscriptionUuid The UUID of the requested subscription
 @return ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetTotalSubscriptionUsage(ctx context.Context, accountUuid string, subscriptionUuid string) ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest {
	return ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest{
		ApiService: a,
		ctx: ctx,
		accountUuid: accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//  @return SubscriptionUsageListDto
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerGetTotalSubscriptionUsageExecute(r ApiSubscriptionsControllerGetTotalSubscriptionUsageRequest) (*SubscriptionUsageListDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionUsageListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.SubscriptionsControllerGetTotalSubscriptionUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/usage"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionsControllerListSubscriptionsRequest struct {
	ctx context.Context
	ApiService *DynatracePlatformSubscriptionAPIService
	accountUuid string
}

func (r ApiSubscriptionsControllerListSubscriptionsRequest) Execute() (*SubscriptionListDto, *http.Response, error) {
	return r.ApiService.SubscriptionsControllerListSubscriptionsExecute(r)
}

/*
SubscriptionsControllerListSubscriptions Get list of subscriptions by account uuid

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
 @return ApiSubscriptionsControllerListSubscriptionsRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerListSubscriptions(ctx context.Context, accountUuid string) ApiSubscriptionsControllerListSubscriptionsRequest {
	return ApiSubscriptionsControllerListSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//  @return SubscriptionListDto
func (a *DynatracePlatformSubscriptionAPIService) SubscriptionsControllerListSubscriptionsExecute(r ApiSubscriptionsControllerListSubscriptionsRequest) (*SubscriptionListDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.SubscriptionsControllerListSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
