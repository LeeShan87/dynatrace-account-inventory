/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// checks if the SubscriptionEnvironmentCostListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionEnvironmentCostListDto{}

// SubscriptionEnvironmentCostListDto struct for SubscriptionEnvironmentCostListDto
type SubscriptionEnvironmentCostListDto struct {
	// Subscription cost data
	Data []SubscriptionEnvironmentCostDto `json:"data"`
	// The time the subscription data was last modified in `2021-05-01T15:11:00Z` format.
	LastModifiedTime string `json:"lastModifiedTime"`
}

// NewSubscriptionEnvironmentCostListDto instantiates a new SubscriptionEnvironmentCostListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionEnvironmentCostListDto(data []SubscriptionEnvironmentCostDto, lastModifiedTime string) *SubscriptionEnvironmentCostListDto {
	this := SubscriptionEnvironmentCostListDto{}
	this.Data = data
	this.LastModifiedTime = lastModifiedTime
	return &this
}

// NewSubscriptionEnvironmentCostListDtoWithDefaults instantiates a new SubscriptionEnvironmentCostListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionEnvironmentCostListDtoWithDefaults() *SubscriptionEnvironmentCostListDto {
	this := SubscriptionEnvironmentCostListDto{}
	return &this
}

// GetData returns the Data field value
func (o *SubscriptionEnvironmentCostListDto) GetData() []SubscriptionEnvironmentCostDto {
	if o == nil {
		var ret []SubscriptionEnvironmentCostDto
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SubscriptionEnvironmentCostListDto) GetDataOk() ([]SubscriptionEnvironmentCostDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *SubscriptionEnvironmentCostListDto) SetData(v []SubscriptionEnvironmentCostDto) {
	o.Data = v
}

// GetLastModifiedTime returns the LastModifiedTime field value
func (o *SubscriptionEnvironmentCostListDto) GetLastModifiedTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value
// and a boolean to check if the value has been set.
func (o *SubscriptionEnvironmentCostListDto) GetLastModifiedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifiedTime, true
}

// SetLastModifiedTime sets field value
func (o *SubscriptionEnvironmentCostListDto) SetLastModifiedTime(v string) {
	o.LastModifiedTime = v
}

func (o SubscriptionEnvironmentCostListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionEnvironmentCostListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["lastModifiedTime"] = o.LastModifiedTime
	return toSerialize, nil
}

type NullableSubscriptionEnvironmentCostListDto struct {
	value *SubscriptionEnvironmentCostListDto
	isSet bool
}

func (v NullableSubscriptionEnvironmentCostListDto) Get() *SubscriptionEnvironmentCostListDto {
	return v.value
}

func (v *NullableSubscriptionEnvironmentCostListDto) Set(val *SubscriptionEnvironmentCostListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionEnvironmentCostListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionEnvironmentCostListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionEnvironmentCostListDto(val *SubscriptionEnvironmentCostListDto) *NullableSubscriptionEnvironmentCostListDto {
	return &NullableSubscriptionEnvironmentCostListDto{value: val, isSet: true}
}

func (v NullableSubscriptionEnvironmentCostListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionEnvironmentCostListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


