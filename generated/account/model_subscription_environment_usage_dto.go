/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// checks if the SubscriptionEnvironmentUsageDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionEnvironmentUsageDto{}

// SubscriptionEnvironmentUsageDto struct for SubscriptionEnvironmentUsageDto
type SubscriptionEnvironmentUsageDto struct {
	// The id of the environment
	EnvironmentId string `json:"environmentId"`
	// A list of subscription usage for the environment.
	Usage []SubscriptionUsageDto `json:"usage"`
}

// NewSubscriptionEnvironmentUsageDto instantiates a new SubscriptionEnvironmentUsageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionEnvironmentUsageDto(environmentId string, usage []SubscriptionUsageDto) *SubscriptionEnvironmentUsageDto {
	this := SubscriptionEnvironmentUsageDto{}
	this.EnvironmentId = environmentId
	this.Usage = usage
	return &this
}

// NewSubscriptionEnvironmentUsageDtoWithDefaults instantiates a new SubscriptionEnvironmentUsageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionEnvironmentUsageDtoWithDefaults() *SubscriptionEnvironmentUsageDto {
	this := SubscriptionEnvironmentUsageDto{}
	return &this
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *SubscriptionEnvironmentUsageDto) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *SubscriptionEnvironmentUsageDto) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *SubscriptionEnvironmentUsageDto) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetUsage returns the Usage field value
func (o *SubscriptionEnvironmentUsageDto) GetUsage() []SubscriptionUsageDto {
	if o == nil {
		var ret []SubscriptionUsageDto
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *SubscriptionEnvironmentUsageDto) GetUsageOk() ([]SubscriptionUsageDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage, true
}

// SetUsage sets field value
func (o *SubscriptionEnvironmentUsageDto) SetUsage(v []SubscriptionUsageDto) {
	o.Usage = v
}

func (o SubscriptionEnvironmentUsageDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionEnvironmentUsageDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environmentId"] = o.EnvironmentId
	toSerialize["usage"] = o.Usage
	return toSerialize, nil
}

type NullableSubscriptionEnvironmentUsageDto struct {
	value *SubscriptionEnvironmentUsageDto
	isSet bool
}

func (v NullableSubscriptionEnvironmentUsageDto) Get() *SubscriptionEnvironmentUsageDto {
	return v.value
}

func (v *NullableSubscriptionEnvironmentUsageDto) Set(val *SubscriptionEnvironmentUsageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionEnvironmentUsageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionEnvironmentUsageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionEnvironmentUsageDto(val *SubscriptionEnvironmentUsageDto) *NullableSubscriptionEnvironmentUsageDto {
	return &NullableSubscriptionEnvironmentUsageDto{value: val, isSet: true}
}

func (v NullableSubscriptionEnvironmentUsageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionEnvironmentUsageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


