/*
Dynatrace Account Management API

Testing DynatracePlatformSubscriptionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package account

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_account_DynatracePlatformSubscriptionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DynatracePlatformSubscriptionAPIService SubscriptionsControllerGetEnvironmentCost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string
		var subscriptionUuid string

		resp, httpRes, err := apiClient.DynatracePlatformSubscriptionAPI.SubscriptionsControllerGetEnvironmentCost(context.Background(), accountUuid, subscriptionUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynatracePlatformSubscriptionAPIService SubscriptionsControllerGetEnvironmentUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string
		var subscriptionUuid string

		resp, httpRes, err := apiClient.DynatracePlatformSubscriptionAPI.SubscriptionsControllerGetEnvironmentUsage(context.Background(), accountUuid, subscriptionUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynatracePlatformSubscriptionAPIService SubscriptionsControllerGetEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string

		resp, httpRes, err := apiClient.DynatracePlatformSubscriptionAPI.SubscriptionsControllerGetEvents(context.Background(), accountUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynatracePlatformSubscriptionAPIService SubscriptionsControllerGetForecast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string

		resp, httpRes, err := apiClient.DynatracePlatformSubscriptionAPI.SubscriptionsControllerGetForecast(context.Background(), accountUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynatracePlatformSubscriptionAPIService SubscriptionsControllerGetSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string
		var subscriptionUuid string

		resp, httpRes, err := apiClient.DynatracePlatformSubscriptionAPI.SubscriptionsControllerGetSubscription(context.Background(), accountUuid, subscriptionUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynatracePlatformSubscriptionAPIService SubscriptionsControllerGetTotalSubscriptionCost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string
		var subscriptionUuid string

		resp, httpRes, err := apiClient.DynatracePlatformSubscriptionAPI.SubscriptionsControllerGetTotalSubscriptionCost(context.Background(), accountUuid, subscriptionUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynatracePlatformSubscriptionAPIService SubscriptionsControllerGetTotalSubscriptionUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string
		var subscriptionUuid string

		resp, httpRes, err := apiClient.DynatracePlatformSubscriptionAPI.SubscriptionsControllerGetTotalSubscriptionUsage(context.Background(), accountUuid, subscriptionUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynatracePlatformSubscriptionAPIService SubscriptionsControllerListSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string

		resp, httpRes, err := apiClient.DynatracePlatformSubscriptionAPI.SubscriptionsControllerListSubscriptions(context.Background(), accountUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
