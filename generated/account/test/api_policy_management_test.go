/*
Dynatrace Account Management API

Testing PolicyManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package account

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_account_PolicyManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PolicyManagementAPIService PolicyControllerAppendLevelPolicyBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerAppendLevelPolicyBindings(context.Background(), levelType, levelId, policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerAppendParticularGroupBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string
		var groupUuid string

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerAppendParticularGroupBinding(context.Background(), levelType, levelId, policyUuid, groupUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerCreateLevelPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerCreateLevelPolicy(context.Background(), levelType, levelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerDeleteLevelPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string
		var force bool

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerDeleteLevelPolicy(context.Background(), levelType, levelId, policyUuid, force).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerDeleteLevelPolicyBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerDeleteLevelPolicyBindings(context.Background(), levelType, levelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerDeleteLevelPolicyBindingsForPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerDeleteLevelPolicyBindingsForPolicy(context.Background(), levelType, levelId, policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string
		var groupUuid string
		var forceMultiple bool

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroup(context.Background(), levelType, levelId, policyUuid, groupUuid, forceMultiple).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerGetAllLevelPoliciesBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerGetAllLevelPoliciesBindings(context.Background(), levelType, levelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerGetEffectivePermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerGetEffectivePermissions(context.Background(), levelType, levelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerGetLevelDescendantsPolicyBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerGetLevelDescendantsPolicyBindings(context.Background(), levelType, levelId, policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerGetLevelPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerGetLevelPolicies(context.Background(), levelType, levelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerGetLevelPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerGetLevelPolicy(context.Background(), levelType, levelId, policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerGetLevelPolicyBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerGetLevelPolicyBindings(context.Background(), levelType, levelId, policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerGetLevelPolicyBindingsForGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string
		var groupUuid string

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerGetLevelPolicyBindingsForGroup(context.Background(), levelType, levelId, policyUuid, groupUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerGetPolicyOverviewList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerGetPolicyOverviewList(context.Background(), levelType, levelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerGetPolicyUuidsBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var groupUuid string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerGetPolicyUuidsBindings(context.Background(), levelType, levelId, groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerUpdateLevelPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerUpdateLevelPolicy(context.Background(), levelType, levelId, policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerUpdateLevelPolicyBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerUpdateLevelPolicyBindings(context.Background(), levelType, levelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerUpdatePolicyBindingsToGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var groupUuid string

		httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerUpdatePolicyBindingsToGroup(context.Background(), levelType, levelId, groupUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerValidateLevelPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string
		var policyUuid string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerValidateLevelPolicy(context.Background(), levelType, levelId, policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyManagementAPIService PolicyControllerValidateNewLevelPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelType string
		var levelId string

		resp, httpRes, err := apiClient.PolicyManagementAPI.PolicyControllerValidateNewLevelPolicy(context.Background(), levelType, levelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
