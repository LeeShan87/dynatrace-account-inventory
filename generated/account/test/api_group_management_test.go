/*
Dynatrace Account Management API

Testing GroupManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package account

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_account_GroupManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupManagementAPIService GroupsControllerCreateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string

		resp, httpRes, err := apiClient.GroupManagementAPI.GroupsControllerCreateGroups(context.Background(), accountUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupManagementAPIService GroupsControllerDeleteGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string
		var groupUuid string

		httpRes, err := apiClient.GroupManagementAPI.GroupsControllerDeleteGroup(context.Background(), accountUuid, groupUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupManagementAPIService GroupsControllerEditGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string
		var groupUuid string

		httpRes, err := apiClient.GroupManagementAPI.GroupsControllerEditGroup(context.Background(), accountUuid, groupUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupManagementAPIService GroupsControllerGetGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string

		resp, httpRes, err := apiClient.GroupManagementAPI.GroupsControllerGetGroups(context.Background(), accountUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupManagementAPIService GroupsControllerGetUsersForGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountUuid string
		var groupUuid string

		resp, httpRes, err := apiClient.GroupManagementAPI.GroupsControllerGetUsersForGroup(context.Background(), accountUuid, groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
