/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LogMonitoringCustomDevicesAPIService LogMonitoringCustomDevicesAPI service
type LogMonitoringCustomDevicesAPIService service

type ApiCustomDeviceLogJobDeleteRequest struct {
	ctx context.Context
	ApiService *LogMonitoringCustomDevicesAPIService
	customDeviceId string
	jobId string
}

func (r ApiCustomDeviceLogJobDeleteRequest) Execute() (*LogJobDeleteResult, *http.Response, error) {
	return r.ApiService.CustomDeviceLogJobDeleteExecute(r)
}

/*
CustomDeviceLogJobDelete Deletes or cancels the specified log analysis job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customDeviceId The Dynatrace entity ID of the required custom device.
 @param jobId The ID of the log analysis job to be deleted.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request.
 @return ApiCustomDeviceLogJobDeleteRequest
*/
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobDelete(ctx context.Context, customDeviceId string, jobId string) ApiCustomDeviceLogJobDeleteRequest {
	return ApiCustomDeviceLogJobDeleteRequest{
		ApiService: a,
		ctx: ctx,
		customDeviceId: customDeviceId,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return LogJobDeleteResult
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobDeleteExecute(r ApiCustomDeviceLogJobDeleteRequest) (*LogJobDeleteResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LogJobDeleteResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringCustomDevicesAPIService.CustomDeviceLogJobDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customDeviceId"+"}", url.PathEscape(parameterValueToString(r.customDeviceId, "customDeviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomDeviceLogJobRecordsRequest struct {
	ctx context.Context
	ApiService *LogMonitoringCustomDevicesAPIService
	customDeviceId string
	jobId string
	scrollToken *string
	pageSize *int32
}

// The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned.
func (r ApiCustomDeviceLogJobRecordsRequest) ScrollToken(scrollToken string) ApiCustomDeviceLogJobRecordsRequest {
	r.scrollToken = &scrollToken
	return r
}

// The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;.
func (r ApiCustomDeviceLogJobRecordsRequest) PageSize(pageSize int32) ApiCustomDeviceLogJobRecordsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiCustomDeviceLogJobRecordsRequest) Execute() (*LogJobRecordsResult, *http.Response, error) {
	return r.ApiService.CustomDeviceLogJobRecordsExecute(r)
}

/*
CustomDeviceLogJobRecords Gets the content of the analyzed log

Results are available only when the status of the analysis job for this log is `READY`. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request. 

Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customDeviceId The Dynatrace entity ID of the required custom device.
 @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request.
 @return ApiCustomDeviceLogJobRecordsRequest
*/
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobRecords(ctx context.Context, customDeviceId string, jobId string) ApiCustomDeviceLogJobRecordsRequest {
	return ApiCustomDeviceLogJobRecordsRequest{
		ApiService: a,
		ctx: ctx,
		customDeviceId: customDeviceId,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return LogJobRecordsResult
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobRecordsExecute(r ApiCustomDeviceLogJobRecordsRequest) (*LogJobRecordsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LogJobRecordsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringCustomDevicesAPIService.CustomDeviceLogJobRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}/records"
	localVarPath = strings.Replace(localVarPath, "{"+"customDeviceId"+"}", url.PathEscape(parameterValueToString(r.customDeviceId, "customDeviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scrollToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scrollToken", r.scrollToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomDeviceLogJobRecordsFilteredRequest struct {
	ctx context.Context
	ApiService *LogMonitoringCustomDevicesAPIService
	customDeviceId string
	jobId string
	scrollToken *string
	pageSize *int32
	filterLogContent *FilterLogContent
}

// The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned.
func (r ApiCustomDeviceLogJobRecordsFilteredRequest) ScrollToken(scrollToken string) ApiCustomDeviceLogJobRecordsFilteredRequest {
	r.scrollToken = &scrollToken
	return r
}

// The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;.
func (r ApiCustomDeviceLogJobRecordsFilteredRequest) PageSize(pageSize int32) ApiCustomDeviceLogJobRecordsFilteredRequest {
	r.pageSize = &pageSize
	return r
}

// Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples.
func (r ApiCustomDeviceLogJobRecordsFilteredRequest) FilterLogContent(filterLogContent FilterLogContent) ApiCustomDeviceLogJobRecordsFilteredRequest {
	r.filterLogContent = &filterLogContent
	return r
}

func (r ApiCustomDeviceLogJobRecordsFilteredRequest) Execute() (*LogJobRecordsResult, *http.Response, error) {
	return r.ApiService.CustomDeviceLogJobRecordsFilteredExecute(r)
}

/*
CustomDeviceLogJobRecordsFiltered Gets the filtered content of the analyzed log

Results are available only when the status of the analysis job for this log is `READY`. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request. 

Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customDeviceId The Dynatrace entity ID of the required custom device.
 @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request.
 @return ApiCustomDeviceLogJobRecordsFilteredRequest
*/
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobRecordsFiltered(ctx context.Context, customDeviceId string, jobId string) ApiCustomDeviceLogJobRecordsFilteredRequest {
	return ApiCustomDeviceLogJobRecordsFilteredRequest{
		ApiService: a,
		ctx: ctx,
		customDeviceId: customDeviceId,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return LogJobRecordsResult
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobRecordsFilteredExecute(r ApiCustomDeviceLogJobRecordsFilteredRequest) (*LogJobRecordsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LogJobRecordsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringCustomDevicesAPIService.CustomDeviceLogJobRecordsFiltered")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}/records"
	localVarPath = strings.Replace(localVarPath, "{"+"customDeviceId"+"}", url.PathEscape(parameterValueToString(r.customDeviceId, "customDeviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scrollToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scrollToken", r.scrollToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.filterLogContent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomDeviceLogJobRecordsTopRequest struct {
	ctx context.Context
	ApiService *LogMonitoringCustomDevicesAPIService
	customDeviceId string
	jobId string
	filterTopLogRecords *FilterTopLogRecords
}

// Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples.
func (r ApiCustomDeviceLogJobRecordsTopRequest) FilterTopLogRecords(filterTopLogRecords FilterTopLogRecords) ApiCustomDeviceLogJobRecordsTopRequest {
	r.filterTopLogRecords = &filterTopLogRecords
	return r
}

func (r ApiCustomDeviceLogJobRecordsTopRequest) Execute() (*LogJobRecordsTopValuesRestResult, *http.Response, error) {
	return r.ApiService.CustomDeviceLogJobRecordsTopExecute(r)
}

/*
CustomDeviceLogJobRecordsTop Gets the top values of fields present in the content of the analyzed log

Results are available only when the status of the analysis job for this log is `READY`. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customDeviceId The Dynatrace entity ID of the required custom device.
 @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request.
 @return ApiCustomDeviceLogJobRecordsTopRequest
*/
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobRecordsTop(ctx context.Context, customDeviceId string, jobId string) ApiCustomDeviceLogJobRecordsTopRequest {
	return ApiCustomDeviceLogJobRecordsTopRequest{
		ApiService: a,
		ctx: ctx,
		customDeviceId: customDeviceId,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return LogJobRecordsTopValuesRestResult
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobRecordsTopExecute(r ApiCustomDeviceLogJobRecordsTopRequest) (*LogJobRecordsTopValuesRestResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LogJobRecordsTopValuesRestResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringCustomDevicesAPIService.CustomDeviceLogJobRecordsTop")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}/records/top"
	localVarPath = strings.Replace(localVarPath, "{"+"customDeviceId"+"}", url.PathEscape(parameterValueToString(r.customDeviceId, "customDeviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.filterTopLogRecords
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomDeviceLogJobStartRequest struct {
	ctx context.Context
	ApiService *LogMonitoringCustomDevicesAPIService
	customDeviceId string
	logPath string
	query *string
	startTimestamp *int64
	endTimestamp *int64
	extractFields *ExtractFields
}

// Narrows down the scope of the analysis to the entries, matching the specified criteria.   The criteria must use the [text pattern query syntax](https://dt-url.net/vv83rhp).
func (r ApiCustomDeviceLogJobStartRequest) Query(query string) ApiCustomDeviceLogJobStartRequest {
	r.query = &query
	return r
}

// The start timestamp of the analysis range, in UTC milliseconds.    If not set, then 2 hours behind from current timestamp is used.
func (r ApiCustomDeviceLogJobStartRequest) StartTimestamp(startTimestamp int64) ApiCustomDeviceLogJobStartRequest {
	r.startTimestamp = &startTimestamp
	return r
}

// The end timestamp of the analysis range, in UTC milliseconds.    If not set, then the current timestamp is used.
func (r ApiCustomDeviceLogJobStartRequest) EndTimestamp(endTimestamp int64) ApiCustomDeviceLogJobStartRequest {
	r.endTimestamp = &endTimestamp
	return r
}

// Extract fields from the log content to form custom columns.    See [Search patterns in log data and parse results](https://dt-url.net/vv83rhp) in Dynatrace Documentation for the syntax definition and examples.   The special characters must be escaped.
func (r ApiCustomDeviceLogJobStartRequest) ExtractFields(extractFields ExtractFields) ApiCustomDeviceLogJobStartRequest {
	r.extractFields = &extractFields
	return r
}

func (r ApiCustomDeviceLogJobStartRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CustomDeviceLogJobStartExecute(r)
}

/*
CustomDeviceLogJobStart Starts the analysis job for the specified custom device log

The response returns the ID of the job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customDeviceId The Dynatrace entity ID of the required custom device.
 @param logPath The full pathname of the log.
 @return ApiCustomDeviceLogJobStartRequest
*/
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobStart(ctx context.Context, customDeviceId string, logPath string) ApiCustomDeviceLogJobStartRequest {
	return ApiCustomDeviceLogJobStartRequest{
		ApiService: a,
		ctx: ctx,
		customDeviceId: customDeviceId,
		logPath: logPath,
	}
}

// Execute executes the request
//  @return string
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobStartExecute(r ApiCustomDeviceLogJobStartRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringCustomDevicesAPIService.CustomDeviceLogJobStart")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/custom-devices/{customDeviceId}/logs/{logPath}"
	localVarPath = strings.Replace(localVarPath, "{"+"customDeviceId"+"}", url.PathEscape(parameterValueToString(r.customDeviceId, "customDeviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"logPath"+"}", url.PathEscape(parameterValueToString(r.logPath, "logPath")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.startTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimestamp", r.startTimestamp, "")
	}
	if r.endTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTimestamp", r.endTimestamp, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.extractFields
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomDeviceLogJobStatusRequest struct {
	ctx context.Context
	ApiService *LogMonitoringCustomDevicesAPIService
	customDeviceId string
	jobId string
}

func (r ApiCustomDeviceLogJobStatusRequest) Execute() (*LogJobStatusResult, *http.Response, error) {
	return r.ApiService.CustomDeviceLogJobStatusExecute(r)
}

/*
CustomDeviceLogJobStatus Gets status of the specified log analysis job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customDeviceId The Dynatrace entity ID of the required custom device.
 @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request.
 @return ApiCustomDeviceLogJobStatusRequest
*/
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobStatus(ctx context.Context, customDeviceId string, jobId string) ApiCustomDeviceLogJobStatusRequest {
	return ApiCustomDeviceLogJobStatusRequest{
		ApiService: a,
		ctx: ctx,
		customDeviceId: customDeviceId,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return LogJobStatusResult
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogJobStatusExecute(r ApiCustomDeviceLogJobStatusRequest) (*LogJobStatusResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LogJobStatusResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringCustomDevicesAPIService.CustomDeviceLogJobStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customDeviceId"+"}", url.PathEscape(parameterValueToString(r.customDeviceId, "customDeviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomDeviceLogListRequest struct {
	ctx context.Context
	ApiService *LogMonitoringCustomDevicesAPIService
	customDeviceId string
}

func (r ApiCustomDeviceLogListRequest) Execute() (*LogListForCustomDeviceResult, *http.Response, error) {
	return r.ApiService.CustomDeviceLogListExecute(r)
}

/*
CustomDeviceLogList Lists all the available logs on the specified custom device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customDeviceId The Dynatrace entity ID of the required custom device.
 @return ApiCustomDeviceLogListRequest
*/
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogList(ctx context.Context, customDeviceId string) ApiCustomDeviceLogListRequest {
	return ApiCustomDeviceLogListRequest{
		ApiService: a,
		ctx: ctx,
		customDeviceId: customDeviceId,
	}
}

// Execute executes the request
//  @return LogListForCustomDeviceResult
func (a *LogMonitoringCustomDevicesAPIService) CustomDeviceLogListExecute(r ApiCustomDeviceLogListRequest) (*LogListForCustomDeviceResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LogListForCustomDeviceResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringCustomDevicesAPIService.CustomDeviceLogList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/custom-devices/{customDeviceId}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"customDeviceId"+"}", url.PathEscape(parameterValueToString(r.customDeviceId, "customDeviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
