/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the LogFile4pg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogFile4pg{}

// LogFile4pg struct for LogFile4pg
type LogFile4pg struct {
	// The distribution of the process group log across hosts.
	Hosts []Host4pg `json:"hosts,omitempty"`
	// The full path to the log.
	Path *string `json:"path,omitempty"`
	// The size of the log, bytes
	Size *int64 `json:"size,omitempty"`
}

// NewLogFile4pg instantiates a new LogFile4pg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogFile4pg() *LogFile4pg {
	this := LogFile4pg{}
	return &this
}

// NewLogFile4pgWithDefaults instantiates a new LogFile4pg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogFile4pgWithDefaults() *LogFile4pg {
	this := LogFile4pg{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *LogFile4pg) GetHosts() []Host4pg {
	if o == nil || IsNil(o.Hosts) {
		var ret []Host4pg
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFile4pg) GetHostsOk() ([]Host4pg, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *LogFile4pg) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []Host4pg and assigns it to the Hosts field.
func (o *LogFile4pg) SetHosts(v []Host4pg) {
	o.Hosts = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *LogFile4pg) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFile4pg) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *LogFile4pg) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *LogFile4pg) SetPath(v string) {
	o.Path = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *LogFile4pg) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFile4pg) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *LogFile4pg) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *LogFile4pg) SetSize(v int64) {
	o.Size = &v
}

func (o LogFile4pg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogFile4pg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableLogFile4pg struct {
	value *LogFile4pg
	isSet bool
}

func (v NullableLogFile4pg) Get() *LogFile4pg {
	return v.value
}

func (v *NullableLogFile4pg) Set(val *LogFile4pg) {
	v.value = val
	v.isSet = true
}

func (v NullableLogFile4pg) IsSet() bool {
	return v.isSet
}

func (v *NullableLogFile4pg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogFile4pg(val *LogFile4pg) *NullableLogFile4pg {
	return &NullableLogFile4pg{value: val, isSet: true}
}

func (v NullableLogFile4pg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogFile4pg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


