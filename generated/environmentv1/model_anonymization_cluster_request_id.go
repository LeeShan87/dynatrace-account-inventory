/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the AnonymizationClusterRequestID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnonymizationClusterRequestID{}

// AnonymizationClusterRequestID A list of tuples of request ID and cluster name
type AnonymizationClusterRequestID struct {
	DcName *string `json:"dcName,omitempty"`
	Id *int64 `json:"id,omitempty"`
}

// NewAnonymizationClusterRequestID instantiates a new AnonymizationClusterRequestID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnonymizationClusterRequestID() *AnonymizationClusterRequestID {
	this := AnonymizationClusterRequestID{}
	return &this
}

// NewAnonymizationClusterRequestIDWithDefaults instantiates a new AnonymizationClusterRequestID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnonymizationClusterRequestIDWithDefaults() *AnonymizationClusterRequestID {
	this := AnonymizationClusterRequestID{}
	return &this
}

// GetDcName returns the DcName field value if set, zero value otherwise.
func (o *AnonymizationClusterRequestID) GetDcName() string {
	if o == nil || IsNil(o.DcName) {
		var ret string
		return ret
	}
	return *o.DcName
}

// GetDcNameOk returns a tuple with the DcName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnonymizationClusterRequestID) GetDcNameOk() (*string, bool) {
	if o == nil || IsNil(o.DcName) {
		return nil, false
	}
	return o.DcName, true
}

// HasDcName returns a boolean if a field has been set.
func (o *AnonymizationClusterRequestID) HasDcName() bool {
	if o != nil && !IsNil(o.DcName) {
		return true
	}

	return false
}

// SetDcName gets a reference to the given string and assigns it to the DcName field.
func (o *AnonymizationClusterRequestID) SetDcName(v string) {
	o.DcName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AnonymizationClusterRequestID) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnonymizationClusterRequestID) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AnonymizationClusterRequestID) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AnonymizationClusterRequestID) SetId(v int64) {
	o.Id = &v
}

func (o AnonymizationClusterRequestID) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnonymizationClusterRequestID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DcName) {
		toSerialize["dcName"] = o.DcName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableAnonymizationClusterRequestID struct {
	value *AnonymizationClusterRequestID
	isSet bool
}

func (v NullableAnonymizationClusterRequestID) Get() *AnonymizationClusterRequestID {
	return v.value
}

func (v *NullableAnonymizationClusterRequestID) Set(val *AnonymizationClusterRequestID) {
	v.value = val
	v.isSet = true
}

func (v NullableAnonymizationClusterRequestID) IsSet() bool {
	return v.isSet
}

func (v *NullableAnonymizationClusterRequestID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnonymizationClusterRequestID(val *AnonymizationClusterRequestID) *NullableAnonymizationClusterRequestID {
	return &NullableAnonymizationClusterRequestID{value: val, isSet: true}
}

func (v NullableAnonymizationClusterRequestID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnonymizationClusterRequestID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


