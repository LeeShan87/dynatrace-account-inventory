/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the ProblemCommentList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemCommentList{}

// ProblemCommentList The list of comments to the problem.
type ProblemCommentList struct {
	// The list of comments to the problem.
	Comments []ProblemComment `json:"comments,omitempty"`
}

// NewProblemCommentList instantiates a new ProblemCommentList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemCommentList() *ProblemCommentList {
	this := ProblemCommentList{}
	return &this
}

// NewProblemCommentListWithDefaults instantiates a new ProblemCommentList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemCommentListWithDefaults() *ProblemCommentList {
	this := ProblemCommentList{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *ProblemCommentList) GetComments() []ProblemComment {
	if o == nil || IsNil(o.Comments) {
		var ret []ProblemComment
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemCommentList) GetCommentsOk() ([]ProblemComment, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *ProblemCommentList) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []ProblemComment and assigns it to the Comments field.
func (o *ProblemCommentList) SetComments(v []ProblemComment) {
	o.Comments = v
}

func (o ProblemCommentList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemCommentList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	return toSerialize, nil
}

type NullableProblemCommentList struct {
	value *ProblemCommentList
	isSet bool
}

func (v NullableProblemCommentList) Get() *ProblemCommentList {
	return v.value
}

func (v *NullableProblemCommentList) Set(val *ProblemCommentList) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemCommentList) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemCommentList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemCommentList(val *ProblemCommentList) *NullableProblemCommentList {
	return &NullableProblemCommentList{value: val, isSet: true}
}

func (v NullableProblemCommentList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemCommentList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


