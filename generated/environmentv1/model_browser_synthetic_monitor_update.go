/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the BrowserSyntheticMonitorUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrowserSyntheticMonitorUpdate{}

// BrowserSyntheticMonitorUpdate Browser synthetic monitor update. Some fields are inherited from base `SyntheticMonitorUpdate` model.
type BrowserSyntheticMonitorUpdate struct {
	KeyPerformanceMetrics KeyPerformanceMetrics `json:"keyPerformanceMetrics"`
}

// NewBrowserSyntheticMonitorUpdate instantiates a new BrowserSyntheticMonitorUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrowserSyntheticMonitorUpdate(keyPerformanceMetrics KeyPerformanceMetrics, enabled bool, frequencyMin int32, locations []string, manuallyAssignedApps []string, name string, script map[string]interface{}, tags []TagWithSourceInfo, type_ string) *BrowserSyntheticMonitorUpdate {
	this := BrowserSyntheticMonitorUpdate{}
	this.Enabled = enabled
	this.FrequencyMin = frequencyMin
	this.Locations = locations
	this.ManuallyAssignedApps = manuallyAssignedApps
	this.Name = name
	this.Script = script
	this.Tags = tags
	this.Type = type_
	this.KeyPerformanceMetrics = keyPerformanceMetrics
	return &this
}

// NewBrowserSyntheticMonitorUpdateWithDefaults instantiates a new BrowserSyntheticMonitorUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrowserSyntheticMonitorUpdateWithDefaults() *BrowserSyntheticMonitorUpdate {
	this := BrowserSyntheticMonitorUpdate{}
	return &this
}

// GetKeyPerformanceMetrics returns the KeyPerformanceMetrics field value
func (o *BrowserSyntheticMonitorUpdate) GetKeyPerformanceMetrics() KeyPerformanceMetrics {
	if o == nil {
		var ret KeyPerformanceMetrics
		return ret
	}

	return o.KeyPerformanceMetrics
}

// GetKeyPerformanceMetricsOk returns a tuple with the KeyPerformanceMetrics field value
// and a boolean to check if the value has been set.
func (o *BrowserSyntheticMonitorUpdate) GetKeyPerformanceMetricsOk() (*KeyPerformanceMetrics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyPerformanceMetrics, true
}

// SetKeyPerformanceMetrics sets field value
func (o *BrowserSyntheticMonitorUpdate) SetKeyPerformanceMetrics(v KeyPerformanceMetrics) {
	o.KeyPerformanceMetrics = v
}

func (o BrowserSyntheticMonitorUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrowserSyntheticMonitorUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keyPerformanceMetrics"] = o.KeyPerformanceMetrics
	return toSerialize, nil
}

type NullableBrowserSyntheticMonitorUpdate struct {
	value *BrowserSyntheticMonitorUpdate
	isSet bool
}

func (v NullableBrowserSyntheticMonitorUpdate) Get() *BrowserSyntheticMonitorUpdate {
	return v.value
}

func (v *NullableBrowserSyntheticMonitorUpdate) Set(val *BrowserSyntheticMonitorUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableBrowserSyntheticMonitorUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableBrowserSyntheticMonitorUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrowserSyntheticMonitorUpdate(val *BrowserSyntheticMonitorUpdate) *NullableBrowserSyntheticMonitorUpdate {
	return &NullableBrowserSyntheticMonitorUpdate{value: val, isSet: true}
}

func (v NullableBrowserSyntheticMonitorUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrowserSyntheticMonitorUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


