/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the ProblemComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemComment{}

// ProblemComment The comment to the problem.
type ProblemComment struct {
	// The text of the comment.
	Content *string `json:"content,omitempty"`
	// The context of the comment.   Could be any textual comment. You can only set it via REST API.
	Context *string `json:"context,omitempty"`
	// The timestamp of the comment creation, in UTC milliseconds.
	CreatedAtTimestamp *int64 `json:"createdAtTimestamp,omitempty"`
	// The ID of the comment.
	Id *string `json:"id,omitempty"`
	// The author of the comment.
	UserName *string `json:"userName,omitempty"`
}

// NewProblemComment instantiates a new ProblemComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemComment() *ProblemComment {
	this := ProblemComment{}
	return &this
}

// NewProblemCommentWithDefaults instantiates a new ProblemComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemCommentWithDefaults() *ProblemComment {
	this := ProblemComment{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ProblemComment) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemComment) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ProblemComment) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ProblemComment) SetContent(v string) {
	o.Content = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ProblemComment) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemComment) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ProblemComment) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *ProblemComment) SetContext(v string) {
	o.Context = &v
}

// GetCreatedAtTimestamp returns the CreatedAtTimestamp field value if set, zero value otherwise.
func (o *ProblemComment) GetCreatedAtTimestamp() int64 {
	if o == nil || IsNil(o.CreatedAtTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedAtTimestamp
}

// GetCreatedAtTimestampOk returns a tuple with the CreatedAtTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemComment) GetCreatedAtTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAtTimestamp) {
		return nil, false
	}
	return o.CreatedAtTimestamp, true
}

// HasCreatedAtTimestamp returns a boolean if a field has been set.
func (o *ProblemComment) HasCreatedAtTimestamp() bool {
	if o != nil && !IsNil(o.CreatedAtTimestamp) {
		return true
	}

	return false
}

// SetCreatedAtTimestamp gets a reference to the given int64 and assigns it to the CreatedAtTimestamp field.
func (o *ProblemComment) SetCreatedAtTimestamp(v int64) {
	o.CreatedAtTimestamp = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProblemComment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemComment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProblemComment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProblemComment) SetId(v string) {
	o.Id = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ProblemComment) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemComment) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ProblemComment) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ProblemComment) SetUserName(v string) {
	o.UserName = &v
}

func (o ProblemComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.CreatedAtTimestamp) {
		toSerialize["createdAtTimestamp"] = o.CreatedAtTimestamp
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableProblemComment struct {
	value *ProblemComment
	isSet bool
}

func (v NullableProblemComment) Get() *ProblemComment {
	return v.value
}

func (v *NullableProblemComment) Set(val *ProblemComment) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemComment) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemComment(val *ProblemComment) *NullableProblemComment {
	return &NullableProblemComment{value: val, isSet: true}
}

func (v NullableProblemComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


