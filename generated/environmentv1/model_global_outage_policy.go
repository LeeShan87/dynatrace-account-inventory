/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the GlobalOutagePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalOutagePolicy{}

// GlobalOutagePolicy Global outage handling configuration.
type GlobalOutagePolicy struct {
	// Alert if all locations are unable to access the web application *X* times consecutively.
	ConsecutiveRuns int32 `json:"consecutiveRuns"`
}

// NewGlobalOutagePolicy instantiates a new GlobalOutagePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalOutagePolicy(consecutiveRuns int32) *GlobalOutagePolicy {
	this := GlobalOutagePolicy{}
	this.ConsecutiveRuns = consecutiveRuns
	return &this
}

// NewGlobalOutagePolicyWithDefaults instantiates a new GlobalOutagePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalOutagePolicyWithDefaults() *GlobalOutagePolicy {
	this := GlobalOutagePolicy{}
	return &this
}

// GetConsecutiveRuns returns the ConsecutiveRuns field value
func (o *GlobalOutagePolicy) GetConsecutiveRuns() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConsecutiveRuns
}

// GetConsecutiveRunsOk returns a tuple with the ConsecutiveRuns field value
// and a boolean to check if the value has been set.
func (o *GlobalOutagePolicy) GetConsecutiveRunsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsecutiveRuns, true
}

// SetConsecutiveRuns sets field value
func (o *GlobalOutagePolicy) SetConsecutiveRuns(v int32) {
	o.ConsecutiveRuns = v
}

func (o GlobalOutagePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalOutagePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["consecutiveRuns"] = o.ConsecutiveRuns
	return toSerialize, nil
}

type NullableGlobalOutagePolicy struct {
	value *GlobalOutagePolicy
	isSet bool
}

func (v NullableGlobalOutagePolicy) Get() *GlobalOutagePolicy {
	return v.value
}

func (v *NullableGlobalOutagePolicy) Set(val *GlobalOutagePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalOutagePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalOutagePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalOutagePolicy(val *GlobalOutagePolicy) *NullableGlobalOutagePolicy {
	return &NullableGlobalOutagePolicy{value: val, isSet: true}
}

func (v NullableGlobalOutagePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalOutagePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


