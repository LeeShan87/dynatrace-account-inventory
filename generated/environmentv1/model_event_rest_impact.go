/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the EventRestImpact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventRestImpact{}

// EventRestImpact The information about the event's impact.
type EventRestImpact struct {
	// The ID of the affected Dynatrace entity.
	EntityId *string `json:"entityId,omitempty"`
	// The name of the affected Dynatrace entity.
	EntityName *string `json:"entityName,omitempty"`
	// The type of the event.
	EventType *string `json:"eventType,omitempty"`
	// The impact level of the event. It shows what is affected by the problem: infrastructure, service, or application.
	ImpactLevel *string `json:"impactLevel,omitempty"`
	// The id of the resource the event occurred on.
	ResourceId *string `json:"resourceId,omitempty"`
	// The name of the resource the event occurred on.
	ResourceName *string `json:"resourceName,omitempty"`
	// The severity of the event.
	SeverityLevel *string `json:"severityLevel,omitempty"`
}

// NewEventRestImpact instantiates a new EventRestImpact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventRestImpact() *EventRestImpact {
	this := EventRestImpact{}
	return &this
}

// NewEventRestImpactWithDefaults instantiates a new EventRestImpact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventRestImpactWithDefaults() *EventRestImpact {
	this := EventRestImpact{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *EventRestImpact) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRestImpact) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *EventRestImpact) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *EventRestImpact) SetEntityId(v string) {
	o.EntityId = &v
}

// GetEntityName returns the EntityName field value if set, zero value otherwise.
func (o *EventRestImpact) GetEntityName() string {
	if o == nil || IsNil(o.EntityName) {
		var ret string
		return ret
	}
	return *o.EntityName
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRestImpact) GetEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.EntityName) {
		return nil, false
	}
	return o.EntityName, true
}

// HasEntityName returns a boolean if a field has been set.
func (o *EventRestImpact) HasEntityName() bool {
	if o != nil && !IsNil(o.EntityName) {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given string and assigns it to the EntityName field.
func (o *EventRestImpact) SetEntityName(v string) {
	o.EntityName = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EventRestImpact) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRestImpact) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EventRestImpact) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *EventRestImpact) SetEventType(v string) {
	o.EventType = &v
}

// GetImpactLevel returns the ImpactLevel field value if set, zero value otherwise.
func (o *EventRestImpact) GetImpactLevel() string {
	if o == nil || IsNil(o.ImpactLevel) {
		var ret string
		return ret
	}
	return *o.ImpactLevel
}

// GetImpactLevelOk returns a tuple with the ImpactLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRestImpact) GetImpactLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ImpactLevel) {
		return nil, false
	}
	return o.ImpactLevel, true
}

// HasImpactLevel returns a boolean if a field has been set.
func (o *EventRestImpact) HasImpactLevel() bool {
	if o != nil && !IsNil(o.ImpactLevel) {
		return true
	}

	return false
}

// SetImpactLevel gets a reference to the given string and assigns it to the ImpactLevel field.
func (o *EventRestImpact) SetImpactLevel(v string) {
	o.ImpactLevel = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *EventRestImpact) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRestImpact) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *EventRestImpact) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *EventRestImpact) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *EventRestImpact) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName) {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRestImpact) GetResourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceName) {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *EventRestImpact) HasResourceName() bool {
	if o != nil && !IsNil(o.ResourceName) {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *EventRestImpact) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetSeverityLevel returns the SeverityLevel field value if set, zero value otherwise.
func (o *EventRestImpact) GetSeverityLevel() string {
	if o == nil || IsNil(o.SeverityLevel) {
		var ret string
		return ret
	}
	return *o.SeverityLevel
}

// GetSeverityLevelOk returns a tuple with the SeverityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRestImpact) GetSeverityLevelOk() (*string, bool) {
	if o == nil || IsNil(o.SeverityLevel) {
		return nil, false
	}
	return o.SeverityLevel, true
}

// HasSeverityLevel returns a boolean if a field has been set.
func (o *EventRestImpact) HasSeverityLevel() bool {
	if o != nil && !IsNil(o.SeverityLevel) {
		return true
	}

	return false
}

// SetSeverityLevel gets a reference to the given string and assigns it to the SeverityLevel field.
func (o *EventRestImpact) SetSeverityLevel(v string) {
	o.SeverityLevel = &v
}

func (o EventRestImpact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventRestImpact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.EntityName) {
		toSerialize["entityName"] = o.EntityName
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.ImpactLevel) {
		toSerialize["impactLevel"] = o.ImpactLevel
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.ResourceName) {
		toSerialize["resourceName"] = o.ResourceName
	}
	if !IsNil(o.SeverityLevel) {
		toSerialize["severityLevel"] = o.SeverityLevel
	}
	return toSerialize, nil
}

type NullableEventRestImpact struct {
	value *EventRestImpact
	isSet bool
}

func (v NullableEventRestImpact) Get() *EventRestImpact {
	return v.value
}

func (v *NullableEventRestImpact) Set(val *EventRestImpact) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRestImpact) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRestImpact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRestImpact(val *EventRestImpact) *NullableEventRestImpact {
	return &NullableEventRestImpact{value: val, isSet: true}
}

func (v NullableEventRestImpact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRestImpact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


