/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// OneAgentOnAHostAPIService OneAgentOnAHostAPI service
type OneAgentOnAHostAPIService service

type ApiGetHostsWithSpecificAgentsRequest struct {
	ctx context.Context
	ApiService *OneAgentOnAHostAPIService
	includeDetails *bool
	startTimestamp *int64
	endTimestamp *int64
	relativeTime *string
	tag *[]string
	entity *[]string
	managementZoneId *int64
	managementZone *string
	networkZoneId *string
	hostGroupId *string
	hostGroupName *string
	osType *string
	cloudType *string
	autoInjection *string
	availabilityState *string
	detailedAvailabilityState *string
	monitoringType *string
	agentVersionIs *string
	agentVersionNumber *string
	autoUpdateSetting *string
	updateStatus *string
	faultyVersion *bool
	activeGateId *string
	technologyModuleType *string
	technologyModuleVersionIs *string
	technologyModuleVersionNumber *string
	technologyModuleFaultyVersion *bool
	pluginName *string
	pluginVersionIs *string
	pluginVersionNumber *string
	pluginState *string
	nextPageKey *string
}

// Includes (&#x60;true&#x60;) or excludes (&#x60;false&#x60;) details which are queried from related entities.  Excluding details may make queries faster.   If not set, then &#x60;true&#x60; is used.
func (r ApiGetHostsWithSpecificAgentsRequest) IncludeDetails(includeDetails bool) ApiGetHostsWithSpecificAgentsRequest {
	r.includeDetails = &includeDetails
	return r
}

// The start timestamp of the requested timeframe, in milliseconds (UTC).   If not set, then 72 hours behind from now is used.
func (r ApiGetHostsWithSpecificAgentsRequest) StartTimestamp(startTimestamp int64) ApiGetHostsWithSpecificAgentsRequest {
	r.startTimestamp = &startTimestamp
	return r
}

// The end timestamp of the requested timeframe, in milliseconds (UTC).   If not set, then the current timestamp is used.   The timeframe must not exceed 7 months (214 days).
func (r ApiGetHostsWithSpecificAgentsRequest) EndTimestamp(endTimestamp int64) ApiGetHostsWithSpecificAgentsRequest {
	r.endTimestamp = &endTimestamp
	return r
}

// The relative timeframe, back from now.   If you need to specify relative timeframe that is not presented in the list of possible values, specify the **startTimestamp** (up to 214 days back from now) and leave **endTimestamp** and **relativeTime** empty.
func (r ApiGetHostsWithSpecificAgentsRequest) RelativeTime(relativeTime string) ApiGetHostsWithSpecificAgentsRequest {
	r.relativeTime = &relativeTime
	return r
}

// Filters the resulting set of hosts by the specified tag. You can specify several tags in the following format: &#x60;tag&#x3D;tag1&amp;tag&#x3D;tag2&#x60;. The host has to match **all** the specified tags.   In case of key-value tags, such as imported AWS or CloudFoundry tags, use the following format: &#x60;tag&#x3D;[context]key:value&#x60;. For custom key-value tags, omit the context: &#x60;tag&#x3D;key:value&#x60;.
func (r ApiGetHostsWithSpecificAgentsRequest) Tag(tag []string) ApiGetHostsWithSpecificAgentsRequest {
	r.tag = &tag
	return r
}

// Filters result to the specified hosts only.    To specify several hosts use the following format: &#x60;entity&#x3D;ID1&amp;entity&#x3D;ID2&#x60;.
func (r ApiGetHostsWithSpecificAgentsRequest) Entity(entity []string) ApiGetHostsWithSpecificAgentsRequest {
	r.entity = &entity
	return r
}

// Only return hosts that are part of the specified management zone.   Specify the management zone ID here.
func (r ApiGetHostsWithSpecificAgentsRequest) ManagementZoneId(managementZoneId int64) ApiGetHostsWithSpecificAgentsRequest {
	r.managementZoneId = &managementZoneId
	return r
}

// Only return hosts that are part of the specified management zone.   Specify the management zone name here.   If the **managementZoneId** parameter is set, this parameter is ignored.
func (r ApiGetHostsWithSpecificAgentsRequest) ManagementZone(managementZone string) ApiGetHostsWithSpecificAgentsRequest {
	r.managementZone = &managementZone
	return r
}

// Filters the resulting set of hosts by the specified network zone.    Specify the Dynatrace entity ID of the required network zone. You can fetch the list of available network zones with the [GET all network zones](https://dt-url.net/u4o3r7z) call.
func (r ApiGetHostsWithSpecificAgentsRequest) NetworkZoneId(networkZoneId string) ApiGetHostsWithSpecificAgentsRequest {
	r.networkZoneId = &networkZoneId
	return r
}

// Filters the resulting set of hosts by the specified host group.    Specify the Dynatrace entity ID of the required host group.
func (r ApiGetHostsWithSpecificAgentsRequest) HostGroupId(hostGroupId string) ApiGetHostsWithSpecificAgentsRequest {
	r.hostGroupId = &hostGroupId
	return r
}

// Filters the resulting set of hosts by the specified host group.    Specify the name of the required host group.
func (r ApiGetHostsWithSpecificAgentsRequest) HostGroupName(hostGroupName string) ApiGetHostsWithSpecificAgentsRequest {
	r.hostGroupName = &hostGroupName
	return r
}

// Filters the resulting set of hosts by the OS type.
func (r ApiGetHostsWithSpecificAgentsRequest) OsType(osType string) ApiGetHostsWithSpecificAgentsRequest {
	r.osType = &osType
	return r
}

// Filters the resulting set of hosts by the cloud type.
func (r ApiGetHostsWithSpecificAgentsRequest) CloudType(cloudType string) ApiGetHostsWithSpecificAgentsRequest {
	r.cloudType = &cloudType
	return r
}

// Filters the resulting set of hosts by the auto-injection status.
func (r ApiGetHostsWithSpecificAgentsRequest) AutoInjection(autoInjection string) ApiGetHostsWithSpecificAgentsRequest {
	r.autoInjection = &autoInjection
	return r
}

// Filters the resulting set of hosts by the availability state of OneAgent.   * &#x60;MONITORED&#x60;: Hosts where OneAgent is enabled and active. * &#x60;UNMONITORED&#x60;: Hosts where OneAgent is disabled and inactive. * &#x60;CRASHED&#x60;: Hosts where OneAgent has returned a crash status code. * &#x60;LOST&#x60;: Hosts where it is impossible to establish connection with OneAgent. * &#x60;PRE_MONITORED&#x60;: Hosts where OneAgent is being initialized for monitoring. * &#x60;SHUTDOWN&#x60;: Hosts where OneAgent is shutting down in a controlled process. * &#x60;UNEXPECTED_SHUTDOWN&#x60;: Hosts where OneAgent is shutting down in an uncontrolled process. * &#x60;UNKNOWN&#x60;: Hosts where the state of OneAgent is unknown.
func (r ApiGetHostsWithSpecificAgentsRequest) AvailabilityState(availabilityState string) ApiGetHostsWithSpecificAgentsRequest {
	r.availabilityState = &availabilityState
	return r
}

// Filters the resulting set of hosts by the detailed availability state of OneAgent.   * &#x60;UNKNOWN&#x60;: Hosts where the state of OneAgent is unknown. * &#x60;PRE_MONITORED&#x60;: Hosts where OneAgent is being initialized for monitoring. * &#x60;CRASHED_UNKNOWN&#x60;: Hosts where OneAgent has crashed for unknown reason. * &#x60;CRASHED_FAILURE&#x60;: Hosts where OneAgent has returned a crash status code. * &#x60;LOST_UNKNOWN&#x60;: Hosts where it is impossible to establish connection with OneAgent for unknown reason. * &#x60;LOST_CONNECTION&#x60;: Hosts where OneAgent has been recognized to be inactive. * &#x60;LOST_AGENT_UPGRADE_FAILED&#x60;: Hosts where OneAgent has a potential update problem due to inactivity after update. * &#x60;SHUTDOWN_UNKNOWN_UNEXPECTED&#x60;: Hosts where OneAgent is shutting down in an uncontrolled process. * &#x60;SHUTDOWN_UNKNOWN&#x60;: Hosts where OneAgent has shutdown for unknown reason. * &#x60;SHUTDOWN_GRACEFUL&#x60;: Hosts where OneAgent has shutdown because of host shutdown. * &#x60;SHUTDOWN_STOPPED&#x60;: Hosts where OneAgent has shutdown because the host has stopped. * &#x60;SHUTDOWN_AGENT_LOST&#x60;: Hosts where PaaS module has been recognized to be inactive. * &#x60;SHUTDOWN_SPOT_INSTANCE&#x60;: Hosts where OneAgent shutdown was triggered by the AWS Spot Instance interruption. * &#x60;UNMONITORED_UNKNOWN&#x60;: Hosts where OneAgent is disabled and inactive for unknown reason. * &#x60;UNMONITORED_TERMINATED&#x60;: Hosts where OneAgent has terminated. * &#x60;UNMONITORED_DISABLED&#x60;: Hosts where OneAgent has been disabled in configuration. * &#x60;UNMONITORED_AGENT_STOPPED&#x60;: Hosts where OneAgent is stopped. * &#x60;UNMONITORED_AGENT_RESTART_TRIGGERED&#x60;: Hosts where OneAgent is being restarted. * &#x60;UNMONITORED_AGENT_UNINSTALLED&#x60;: Hosts where OneAgent is uninstalled. * &#x60;UNMONITORED_AGENT_DISABLED&#x60;: Hosts where OneAgent reported that it was disabled. * &#x60;UNMONITORED_AGENT_UPGRADE_FAILED&#x60;: Hosts where OneAgent has a potential update problem. * &#x60;UNMONITORED_ID_CHANGED&#x60;: Hosts where OneAgent has potentially changed ID during update. * &#x60;UNMONITORED_AGENT_LOST&#x60;: Hosts where OneAgent has been recognized to be unavailable due to server communication issues. * &#x60;UNMONITORED_AGENT_UNREGISTERED&#x60;: Hosts where a code module has been recognized to be unavailable because of shutdown. * &#x60;UNMONITORED_AGENT_VERSION_REJECTED&#x60;: Hosts where OneAgent was rejected because the version does not meet the minimum agent version requirement. * &#x60;MONITORED&#x60;: Hosts where OneAgent is enabled and active. * &#x60;MONITORED_ENABLED&#x60;: Hosts where OneAgent has been enabled in configuration. * &#x60;MONITORED_AGENT_REGISTERED&#x60;: Hosts where the new OneAgent has been recognized. * &#x60;MONITORED_AGENT_UPGRADE_STARTED&#x60;: Hosts where OneAgent has shutdown due to an update. * &#x60;MONITORED_AGENT_ENABLED&#x60;: Hosts where OneAgent reported that it was enabled. * &#x60;MONITORED_AGENT_VERSION_ACCEPTED&#x60;: Hosts where OneAgent was accepted because the version meets the minimum agent version requirement.
func (r ApiGetHostsWithSpecificAgentsRequest) DetailedAvailabilityState(detailedAvailabilityState string) ApiGetHostsWithSpecificAgentsRequest {
	r.detailedAvailabilityState = &detailedAvailabilityState
	return r
}

// Filters the resulting set of hosts by monitoring mode of OneAgent deployed on the host.
func (r ApiGetHostsWithSpecificAgentsRequest) MonitoringType(monitoringType string) ApiGetHostsWithSpecificAgentsRequest {
	r.monitoringType = &monitoringType
	return r
}

// Filters the resulting set of hosts to those that have a certain OneAgent version deployed on the host.   Specify the comparison operator here.
func (r ApiGetHostsWithSpecificAgentsRequest) AgentVersionIs(agentVersionIs string) ApiGetHostsWithSpecificAgentsRequest {
	r.agentVersionIs = &agentVersionIs
	return r
}

// Filters the resulting set of hosts to those that have a certain OneAgent version deployed on the host.   Specify the version in the &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format, for example &#x60;1.182.0&#x60;. You can fetch the list of available versions with the [GET available versions](https://dt-url.net/fo23rb5) call.
func (r ApiGetHostsWithSpecificAgentsRequest) AgentVersionNumber(agentVersionNumber string) ApiGetHostsWithSpecificAgentsRequest {
	r.agentVersionNumber = &agentVersionNumber
	return r
}

// Filters the resulting set of hosts by the actual state of the auto-update setting of deployed OneAgents.
func (r ApiGetHostsWithSpecificAgentsRequest) AutoUpdateSetting(autoUpdateSetting string) ApiGetHostsWithSpecificAgentsRequest {
	r.autoUpdateSetting = &autoUpdateSetting
	return r
}

// Filters the resulting set of hosts by the update status of OneAgent deployed on the host.
func (r ApiGetHostsWithSpecificAgentsRequest) UpdateStatus(updateStatus string) ApiGetHostsWithSpecificAgentsRequest {
	r.updateStatus = &updateStatus
	return r
}

// Filters the resulting set of hosts to those that run OneAgent version that is marked as faulty.
func (r ApiGetHostsWithSpecificAgentsRequest) FaultyVersion(faultyVersion bool) ApiGetHostsWithSpecificAgentsRequest {
	r.faultyVersion = &faultyVersion
	return r
}

// Filters the resulting set of hosts to those that are currently connected to the ActiveGate with the specified ID.   Use **DIRECT_COMMUNICATION** keyword to find the hosts not connected to any ActiveGate.
func (r ApiGetHostsWithSpecificAgentsRequest) ActiveGateId(activeGateId string) ApiGetHostsWithSpecificAgentsRequest {
	r.activeGateId = &activeGateId
	return r
}

// Filters the resulting set of hosts to those that run the specified OneAgent code module.   If several code module filters are specified, the code module has to match **all** the filters.
func (r ApiGetHostsWithSpecificAgentsRequest) TechnologyModuleType(technologyModuleType string) ApiGetHostsWithSpecificAgentsRequest {
	r.technologyModuleType = &technologyModuleType
	return r
}

// Filters the resulting set of hosts to those that have a certain code module version deployed on the host.   Specify the comparison operator here.   If several code module filters are specified, the code module has to match **all** the filters.
func (r ApiGetHostsWithSpecificAgentsRequest) TechnologyModuleVersionIs(technologyModuleVersionIs string) ApiGetHostsWithSpecificAgentsRequest {
	r.technologyModuleVersionIs = &technologyModuleVersionIs
	return r
}

// Filters the resulting set of hosts to those that have a certain code module version deployed on the host.   Specify the version in the &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format, for example &#x60;1.182.0&#x60;. You can fetch the list of available versions with the [GET available versions](https://dt-url.net/fo23rb5) call.   If several code module filters are specified, the code module has to match **all** the filters.
func (r ApiGetHostsWithSpecificAgentsRequest) TechnologyModuleVersionNumber(technologyModuleVersionNumber string) ApiGetHostsWithSpecificAgentsRequest {
	r.technologyModuleVersionNumber = &technologyModuleVersionNumber
	return r
}

// Filters the resulting set of hosts to those that run the code module version that is marked as faulty.   If several code module filters are specified, the code module has to match **all** the filters.
func (r ApiGetHostsWithSpecificAgentsRequest) TechnologyModuleFaultyVersion(technologyModuleFaultyVersion bool) ApiGetHostsWithSpecificAgentsRequest {
	r.technologyModuleFaultyVersion = &technologyModuleFaultyVersion
	return r
}

// Filters the resulting set of hosts to those that run the plugin with the specified name.   The **CONTAINS** operator is applied to the specified value.   If several plugin filters are specified, the plugin has to match **all** the filters.
func (r ApiGetHostsWithSpecificAgentsRequest) PluginName(pluginName string) ApiGetHostsWithSpecificAgentsRequest {
	r.pluginName = &pluginName
	return r
}

// Filters the resulting set of hosts to those that have a certain plugin version deployed on the host.   Specify the comparison operator here.   If several plugin filters are specified, the plugin has to match **all** the filters.
func (r ApiGetHostsWithSpecificAgentsRequest) PluginVersionIs(pluginVersionIs string) ApiGetHostsWithSpecificAgentsRequest {
	r.pluginVersionIs = &pluginVersionIs
	return r
}

// Filters the resulting set of hosts to those that have a certain plugin version deployed on the host.   Specify the version in the &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format, for example &#x60;1.182.0&#x60;. You can fetch the list of available versions with the [GET available versions](https://dt-url.net/fo23rb5) call.   &#x60;&lt;minor&gt;&#x60; and &#x60;&lt;revision&gt;&#x60; parts of the version number are optional.   If several plugin filters are specified, the plugin has to match **all** the filters.
func (r ApiGetHostsWithSpecificAgentsRequest) PluginVersionNumber(pluginVersionNumber string) ApiGetHostsWithSpecificAgentsRequest {
	r.pluginVersionNumber = &pluginVersionNumber
	return r
}

// Filters the resulting set of hosts to those that run the plugin with the specified state.
func (r ApiGetHostsWithSpecificAgentsRequest) PluginState(pluginState string) ApiGetHostsWithSpecificAgentsRequest {
	r.pluginState = &pluginState
	return r
}

// The cursor for the next page of results, if results do not fit on one page. You can find the cursor value on the current page of the response, in the **nextPageKey** field.   To obtain subsequent pages, you must specify this cursor value in your query, and keep all other query parameters as they were in the original request.   If you don&#39;t specify the cursor, the first page will always be returned.
func (r ApiGetHostsWithSpecificAgentsRequest) NextPageKey(nextPageKey string) ApiGetHostsWithSpecificAgentsRequest {
	r.nextPageKey = &nextPageKey
	return r
}

func (r ApiGetHostsWithSpecificAgentsRequest) Execute() (*HostsListPage, *http.Response, error) {
	return r.ApiService.GetHostsWithSpecificAgentsExecute(r)
}

/*
GetHostsWithSpecificAgents Gets the list of hosts with OneAgent deployment information for each host

You can narrow down the output by specifying filtering parameters for the request. 

The response is limited to 500 items. Use the **nextPageKey** cursor to obtain subsequent results.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHostsWithSpecificAgentsRequest
*/
func (a *OneAgentOnAHostAPIService) GetHostsWithSpecificAgents(ctx context.Context) ApiGetHostsWithSpecificAgentsRequest {
	return ApiGetHostsWithSpecificAgentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HostsListPage
func (a *OneAgentOnAHostAPIService) GetHostsWithSpecificAgentsExecute(r ApiGetHostsWithSpecificAgentsRequest) (*HostsListPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HostsListPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OneAgentOnAHostAPIService.GetHostsWithSpecificAgents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oneagents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeDetails", r.includeDetails, "")
	}
	if r.startTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimestamp", r.startTimestamp, "")
	}
	if r.endTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTimestamp", r.endTimestamp, "")
	}
	if r.relativeTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativeTime", r.relativeTime, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.entity != nil {
		t := *r.entity
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "entity", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "entity", t, "multi")
		}
	}
	if r.managementZoneId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managementZoneId", r.managementZoneId, "")
	}
	if r.managementZone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managementZone", r.managementZone, "")
	}
	if r.networkZoneId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkZoneId", r.networkZoneId, "")
	}
	if r.hostGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostGroupId", r.hostGroupId, "")
	}
	if r.hostGroupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostGroupName", r.hostGroupName, "")
	}
	if r.osType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "osType", r.osType, "")
	}
	if r.cloudType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloudType", r.cloudType, "")
	}
	if r.autoInjection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoInjection", r.autoInjection, "")
	}
	if r.availabilityState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "availabilityState", r.availabilityState, "")
	}
	if r.detailedAvailabilityState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detailedAvailabilityState", r.detailedAvailabilityState, "")
	}
	if r.monitoringType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monitoringType", r.monitoringType, "")
	}
	if r.agentVersionIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agentVersionIs", r.agentVersionIs, "")
	}
	if r.agentVersionNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agentVersionNumber", r.agentVersionNumber, "")
	}
	if r.autoUpdateSetting != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoUpdateSetting", r.autoUpdateSetting, "")
	}
	if r.updateStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateStatus", r.updateStatus, "")
	}
	if r.faultyVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "faultyVersion", r.faultyVersion, "")
	}
	if r.activeGateId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activeGateId", r.activeGateId, "")
	}
	if r.technologyModuleType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "technologyModuleType", r.technologyModuleType, "")
	}
	if r.technologyModuleVersionIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "technologyModuleVersionIs", r.technologyModuleVersionIs, "")
	}
	if r.technologyModuleVersionNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "technologyModuleVersionNumber", r.technologyModuleVersionNumber, "")
	}
	if r.technologyModuleFaultyVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "technologyModuleFaultyVersion", r.technologyModuleFaultyVersion, "")
	}
	if r.pluginName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pluginName", r.pluginName, "")
	}
	if r.pluginVersionIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pluginVersionIs", r.pluginVersionIs, "")
	}
	if r.pluginVersionNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pluginVersionNumber", r.pluginVersionNumber, "")
	}
	if r.pluginState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pluginState", r.pluginState, "")
	}
	if r.nextPageKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextPageKey", r.nextPageKey, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
