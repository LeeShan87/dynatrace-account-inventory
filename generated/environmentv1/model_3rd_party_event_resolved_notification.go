/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the Model3rdPartyEventResolvedNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Model3rdPartyEventResolvedNotification{}

// Model3rdPartyEventResolvedNotification The closed third-party synthetic event.
type Model3rdPartyEventResolvedNotification struct {
	// The end timestamp of the event, in UTC milliseconds.
	EndTimestamp int64 `json:"endTimestamp"`
	// The unique ID of the event.
	EventId string `json:"eventId"`
	// The ID of the third-party synthetic monitor.
	TestId string `json:"testId"`
}

// NewModel3rdPartyEventResolvedNotification instantiates a new Model3rdPartyEventResolvedNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModel3rdPartyEventResolvedNotification(endTimestamp int64, eventId string, testId string) *Model3rdPartyEventResolvedNotification {
	this := Model3rdPartyEventResolvedNotification{}
	this.EndTimestamp = endTimestamp
	this.EventId = eventId
	this.TestId = testId
	return &this
}

// NewModel3rdPartyEventResolvedNotificationWithDefaults instantiates a new Model3rdPartyEventResolvedNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModel3rdPartyEventResolvedNotificationWithDefaults() *Model3rdPartyEventResolvedNotification {
	this := Model3rdPartyEventResolvedNotification{}
	return &this
}

// GetEndTimestamp returns the EndTimestamp field value
func (o *Model3rdPartyEventResolvedNotification) GetEndTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value
// and a boolean to check if the value has been set.
func (o *Model3rdPartyEventResolvedNotification) GetEndTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTimestamp, true
}

// SetEndTimestamp sets field value
func (o *Model3rdPartyEventResolvedNotification) SetEndTimestamp(v int64) {
	o.EndTimestamp = v
}

// GetEventId returns the EventId field value
func (o *Model3rdPartyEventResolvedNotification) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *Model3rdPartyEventResolvedNotification) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *Model3rdPartyEventResolvedNotification) SetEventId(v string) {
	o.EventId = v
}

// GetTestId returns the TestId field value
func (o *Model3rdPartyEventResolvedNotification) GetTestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value
// and a boolean to check if the value has been set.
func (o *Model3rdPartyEventResolvedNotification) GetTestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestId, true
}

// SetTestId sets field value
func (o *Model3rdPartyEventResolvedNotification) SetTestId(v string) {
	o.TestId = v
}

func (o Model3rdPartyEventResolvedNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Model3rdPartyEventResolvedNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endTimestamp"] = o.EndTimestamp
	toSerialize["eventId"] = o.EventId
	toSerialize["testId"] = o.TestId
	return toSerialize, nil
}

type NullableModel3rdPartyEventResolvedNotification struct {
	value *Model3rdPartyEventResolvedNotification
	isSet bool
}

func (v NullableModel3rdPartyEventResolvedNotification) Get() *Model3rdPartyEventResolvedNotification {
	return v.value
}

func (v *NullableModel3rdPartyEventResolvedNotification) Set(val *Model3rdPartyEventResolvedNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableModel3rdPartyEventResolvedNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableModel3rdPartyEventResolvedNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModel3rdPartyEventResolvedNotification(val *Model3rdPartyEventResolvedNotification) *NullableModel3rdPartyEventResolvedNotification {
	return &NullableModel3rdPartyEventResolvedNotification{value: val, isSet: true}
}

func (v NullableModel3rdPartyEventResolvedNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModel3rdPartyEventResolvedNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


