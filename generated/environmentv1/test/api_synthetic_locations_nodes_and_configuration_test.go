/*
Dynatrace Environment API

Testing SyntheticLocationsNodesAndConfigurationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package environmentv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_environmentv1_SyntheticLocationsNodesAndConfigurationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SyntheticLocationsNodesAndConfigurationAPIService AddLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SyntheticLocationsNodesAndConfigurationAPI.AddLocation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticLocationsNodesAndConfigurationAPIService GetLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locationId string

		resp, httpRes, err := apiClient.SyntheticLocationsNodesAndConfigurationAPI.GetLocation(context.Background(), locationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticLocationsNodesAndConfigurationAPIService GetLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SyntheticLocationsNodesAndConfigurationAPI.GetLocations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticLocationsNodesAndConfigurationAPIService GetLocationsStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SyntheticLocationsNodesAndConfigurationAPI.GetLocationsStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticLocationsNodesAndConfigurationAPIService GetNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.SyntheticLocationsNodesAndConfigurationAPI.GetNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticLocationsNodesAndConfigurationAPIService GetNodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SyntheticLocationsNodesAndConfigurationAPI.GetNodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticLocationsNodesAndConfigurationAPIService RemoveLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locationId string

		httpRes, err := apiClient.SyntheticLocationsNodesAndConfigurationAPI.RemoveLocation(context.Background(), locationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticLocationsNodesAndConfigurationAPIService UpdateLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locationId string

		httpRes, err := apiClient.SyntheticLocationsNodesAndConfigurationAPI.UpdateLocation(context.Background(), locationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticLocationsNodesAndConfigurationAPIService UpdateLocationsStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SyntheticLocationsNodesAndConfigurationAPI.UpdateLocationsStatus(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
