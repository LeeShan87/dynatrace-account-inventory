/*
Dynatrace Environment API

Testing RUMJavaScriptTagManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package environmentv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_environmentv1_RUMJavaScriptTagManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RUMJavaScriptTagManagementAPIService GetAppRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entity string

		resp, httpRes, err := apiClient.RUMJavaScriptTagManagementAPI.GetAppRevision(context.Background(), entity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMJavaScriptTagManagementAPIService GetAsyncCodeSnippet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entity string

		resp, httpRes, err := apiClient.RUMJavaScriptTagManagementAPI.GetAsyncCodeSnippet(context.Background(), entity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMJavaScriptTagManagementAPIService GetJsInlineScript", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entity string

		resp, httpRes, err := apiClient.RUMJavaScriptTagManagementAPI.GetJsInlineScript(context.Background(), entity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMJavaScriptTagManagementAPIService GetJsLatestVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMJavaScriptTagManagementAPI.GetJsLatestVersion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMJavaScriptTagManagementAPIService GetJsScript", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entity string

		resp, httpRes, err := apiClient.RUMJavaScriptTagManagementAPI.GetJsScript(context.Background(), entity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMJavaScriptTagManagementAPIService GetJsTagComplete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entity string

		resp, httpRes, err := apiClient.RUMJavaScriptTagManagementAPI.GetJsTagComplete(context.Background(), entity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMJavaScriptTagManagementAPIService GetManualApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RUMJavaScriptTagManagementAPI.GetManualApps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RUMJavaScriptTagManagementAPIService GetSyncCodeSnippet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entity string

		resp, httpRes, err := apiClient.RUMJavaScriptTagManagementAPI.GetSyncCodeSnippet(context.Background(), entity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
