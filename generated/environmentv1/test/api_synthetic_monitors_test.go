/*
Dynatrace Environment API

Testing SyntheticMonitorsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package environmentv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_environmentv1_SyntheticMonitorsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SyntheticMonitorsAPIService AddMonitor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SyntheticMonitorsAPI.AddMonitor(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticMonitorsAPIService DeleteMonitor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var monitorId string

		httpRes, err := apiClient.SyntheticMonitorsAPI.DeleteMonitor(context.Background(), monitorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticMonitorsAPIService GetMonitor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var monitorId string

		resp, httpRes, err := apiClient.SyntheticMonitorsAPI.GetMonitor(context.Background(), monitorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticMonitorsAPIService GetMonitorsCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SyntheticMonitorsAPI.GetMonitorsCollection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyntheticMonitorsAPIService ReplaceMonitor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var monitorId string

		httpRes, err := apiClient.SyntheticMonitorsAPI.ReplaceMonitor(context.Background(), monitorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
