/*
Dynatrace Environment API

Testing ProblemAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package environmentv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_environmentv1_ProblemAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProblemAPIService CloseProblem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var problemId string

		resp, httpRes, err := apiClient.ProblemAPI.CloseProblem(context.Background(), problemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProblemAPIService DeleteComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var problemId string
		var commentId string

		httpRes, err := apiClient.ProblemAPI.DeleteComment(context.Background(), problemId, commentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProblemAPIService GetComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var problemId string

		resp, httpRes, err := apiClient.ProblemAPI.GetComment(context.Background(), problemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProblemAPIService GetDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var problemId string

		resp, httpRes, err := apiClient.ProblemAPI.GetDetails(context.Background(), problemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProblemAPIService GetFeed", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProblemAPI.GetFeed(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProblemAPIService GetProblemStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProblemAPI.GetProblemStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProblemAPIService PushComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var problemId string

		resp, httpRes, err := apiClient.ProblemAPI.PushComment(context.Background(), problemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProblemAPIService UpdateComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var problemId string
		var commentId string

		resp, httpRes, err := apiClient.ProblemAPI.UpdateComment(context.Background(), problemId, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
