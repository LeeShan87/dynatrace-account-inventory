/*
Dynatrace Environment API

Testing LogMonitoringCustomDevicesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package environmentv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_environmentv1_LogMonitoringCustomDevicesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LogMonitoringCustomDevicesAPIService CustomDeviceLogJobDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customDeviceId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringCustomDevicesAPI.CustomDeviceLogJobDelete(context.Background(), customDeviceId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringCustomDevicesAPIService CustomDeviceLogJobRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customDeviceId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringCustomDevicesAPI.CustomDeviceLogJobRecords(context.Background(), customDeviceId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringCustomDevicesAPIService CustomDeviceLogJobRecordsFiltered", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customDeviceId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringCustomDevicesAPI.CustomDeviceLogJobRecordsFiltered(context.Background(), customDeviceId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringCustomDevicesAPIService CustomDeviceLogJobRecordsTop", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customDeviceId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringCustomDevicesAPI.CustomDeviceLogJobRecordsTop(context.Background(), customDeviceId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringCustomDevicesAPIService CustomDeviceLogJobStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customDeviceId string
		var logPath string

		resp, httpRes, err := apiClient.LogMonitoringCustomDevicesAPI.CustomDeviceLogJobStart(context.Background(), customDeviceId, logPath).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringCustomDevicesAPIService CustomDeviceLogJobStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customDeviceId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringCustomDevicesAPI.CustomDeviceLogJobStatus(context.Background(), customDeviceId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringCustomDevicesAPIService CustomDeviceLogList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customDeviceId string

		resp, httpRes, err := apiClient.LogMonitoringCustomDevicesAPI.CustomDeviceLogList(context.Background(), customDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
