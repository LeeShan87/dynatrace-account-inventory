/*
Dynatrace Environment API

Testing LogMonitoringHostsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package environmentv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_environmentv1_LogMonitoringHostsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LogMonitoringHostsAPIService HostLogJobDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringHostsAPI.HostLogJobDelete(context.Background(), hostId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringHostsAPIService HostLogJobRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringHostsAPI.HostLogJobRecords(context.Background(), hostId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringHostsAPIService HostLogJobRecordsFiltered", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringHostsAPI.HostLogJobRecordsFiltered(context.Background(), hostId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringHostsAPIService HostLogJobRecordsTop", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringHostsAPI.HostLogJobRecordsTop(context.Background(), hostId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringHostsAPIService HostLogJobStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string
		var logPath string

		resp, httpRes, err := apiClient.LogMonitoringHostsAPI.HostLogJobStart(context.Background(), hostId, logPath).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringHostsAPIService HostLogJobStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string
		var jobId string

		resp, httpRes, err := apiClient.LogMonitoringHostsAPI.HostLogJobStatus(context.Background(), hostId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogMonitoringHostsAPIService HostLogList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.LogMonitoringHostsAPI.HostLogList(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
