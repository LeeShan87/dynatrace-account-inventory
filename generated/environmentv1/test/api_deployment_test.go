/*
Dynatrace Environment API

Testing DeploymentAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package environmentv1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_environmentv1_DeploymentAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DeploymentAPIService DownloadAgentInstallerWithVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string
		var installerType string
		var version string

		httpRes, err := apiClient.DeploymentAPI.DownloadAgentInstallerWithVersion(context.Background(), osType, installerType, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService DownloadAgentOrchestrationSignatureWithVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orchestrationType string
		var version string

		httpRes, err := apiClient.DeploymentAPI.DownloadAgentOrchestrationSignatureWithVersion(context.Background(), orchestrationType, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService DownloadAgentOrchestrationWithVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orchestrationType string
		var version string

		httpRes, err := apiClient.DeploymentAPI.DownloadAgentOrchestrationWithVersion(context.Background(), orchestrationType, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService DownloadBoshReleaseWithVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string
		var version string

		httpRes, err := apiClient.DeploymentAPI.DownloadBoshReleaseWithVersion(context.Background(), osType, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService DownloadGatewayInstallerWithVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string
		var version string

		httpRes, err := apiClient.DeploymentAPI.DownloadGatewayInstallerWithVersion(context.Background(), osType, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService DownloadLatestAgentInstaller", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string
		var installerType string

		httpRes, err := apiClient.DeploymentAPI.DownloadLatestAgentInstaller(context.Background(), osType, installerType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService DownloadLatestAgentOrchestration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orchestrationType string

		httpRes, err := apiClient.DeploymentAPI.DownloadLatestAgentOrchestration(context.Background(), orchestrationType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService DownloadLatestAgentOrchestrationSignature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orchestrationType string

		httpRes, err := apiClient.DeploymentAPI.DownloadLatestAgentOrchestrationSignature(context.Background(), orchestrationType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService DownloadLatestGatewayInstaller", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string

		httpRes, err := apiClient.DeploymentAPI.DownloadLatestGatewayInstaller(context.Background(), osType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetActiveGateInstallerAvailableVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string

		resp, httpRes, err := apiClient.DeploymentAPI.GetActiveGateInstallerAvailableVersions(context.Background(), osType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetActiveGateInstallerConnectionInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeploymentAPI.GetActiveGateInstallerConnectionInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetAgentInstallerAvailableVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string
		var installerType string

		resp, httpRes, err := apiClient.DeploymentAPI.GetAgentInstallerAvailableVersions(context.Background(), osType, installerType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetAgentInstallerConnectionInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeploymentAPI.GetAgentInstallerConnectionInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetAgentInstallerConnectionInfoEndpoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DeploymentAPI.GetAgentInstallerConnectionInfoEndpoints(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetAgentInstallerMetaInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string
		var installerType string

		resp, httpRes, err := apiClient.DeploymentAPI.GetAgentInstallerMetaInfo(context.Background(), osType, installerType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetAgentInstallerWithVersionChecksum", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string
		var installerType string
		var version string

		resp, httpRes, err := apiClient.DeploymentAPI.GetAgentInstallerWithVersionChecksum(context.Background(), osType, installerType, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetAgentProcessModuleConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeploymentAPI.GetAgentProcessModuleConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetBoshReleaseAvailableVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string

		resp, httpRes, err := apiClient.DeploymentAPI.GetBoshReleaseAvailableVersions(context.Background(), osType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetBoshReleaseChecksum", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osType string
		var version string

		resp, httpRes, err := apiClient.DeploymentAPI.GetBoshReleaseChecksum(context.Background(), osType, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentAPIService GetLatestLambdaBuildUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeploymentAPI.GetLatestLambdaBuildUnits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
