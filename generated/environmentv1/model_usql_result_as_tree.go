/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the UsqlResultAsTree type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsqlResultAsTree{}

// UsqlResultAsTree The user session query result as a tree.
type UsqlResultAsTree struct {
	// A list of columns in the additionalValues table.    Only present if the endpoint was called with `deepLinkFields=true` parameter.
	AdditionalColumnNames []string `json:"additionalColumnNames,omitempty"`
	// A list of data rows.    Each array element represents a row in the table of additionally linked fields.   The size of each data row and the order of the elements correspond to the **additionalColumnNames** content.   Only present if the endpoint was called with `deepLinkFields=true` parameter.
	AdditionalValues [][]map[string]interface{} `json:"additionalValues,omitempty"`
	// A list of branches of the tree.    Typically, these are fields from the `SELECT` clause, that have been used in the `GROUP BY` clause.
	BranchNames []string `json:"branchNames,omitempty"`
	// Additional information about the query and the result, that helps to understand the query and how the result was calculated.   Only appears when the **explain** parameter is set to `true`.   Example: The number of results was limited to the default of 50. Use the `LIMIT` clause to increase or decrease this limit.
	Explanations []string `json:"explanations,omitempty"`
	// The extrapolation level of the result.   To improve performance, some results may be calculated from a subset of actual data. The extrapolation level indicates the share of actual data in the result.   The number is the denominator of a fraction and indicates the amount of actual data. The value `1` means that the result contains only the actual data. The value `4` means that result is calculated using 1/4 of the actual data.   If you need the analysis to be based on the actual data, reduce the timeframe of your query. For example, in case of extrapolation level of `4`, try to use 1/4 of the original timeframe.
	ExtrapolationLevel *int32 `json:"extrapolationLevel,omitempty"`
	// A list of leaves on each tree branch.    Typically, these are fields from the `SELECT` clause, that have not been used in the `GROUP BY` clause.
	LeafNames []string `json:"leafNames,omitempty"`
	// The user session query result as a tree.
	Values map[string]interface{} `json:"values,omitempty"`
}

// NewUsqlResultAsTree instantiates a new UsqlResultAsTree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsqlResultAsTree() *UsqlResultAsTree {
	this := UsqlResultAsTree{}
	return &this
}

// NewUsqlResultAsTreeWithDefaults instantiates a new UsqlResultAsTree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsqlResultAsTreeWithDefaults() *UsqlResultAsTree {
	this := UsqlResultAsTree{}
	return &this
}

// GetAdditionalColumnNames returns the AdditionalColumnNames field value if set, zero value otherwise.
func (o *UsqlResultAsTree) GetAdditionalColumnNames() []string {
	if o == nil || IsNil(o.AdditionalColumnNames) {
		var ret []string
		return ret
	}
	return o.AdditionalColumnNames
}

// GetAdditionalColumnNamesOk returns a tuple with the AdditionalColumnNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsqlResultAsTree) GetAdditionalColumnNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalColumnNames) {
		return nil, false
	}
	return o.AdditionalColumnNames, true
}

// HasAdditionalColumnNames returns a boolean if a field has been set.
func (o *UsqlResultAsTree) HasAdditionalColumnNames() bool {
	if o != nil && !IsNil(o.AdditionalColumnNames) {
		return true
	}

	return false
}

// SetAdditionalColumnNames gets a reference to the given []string and assigns it to the AdditionalColumnNames field.
func (o *UsqlResultAsTree) SetAdditionalColumnNames(v []string) {
	o.AdditionalColumnNames = v
}

// GetAdditionalValues returns the AdditionalValues field value if set, zero value otherwise.
func (o *UsqlResultAsTree) GetAdditionalValues() [][]map[string]interface{} {
	if o == nil || IsNil(o.AdditionalValues) {
		var ret [][]map[string]interface{}
		return ret
	}
	return o.AdditionalValues
}

// GetAdditionalValuesOk returns a tuple with the AdditionalValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsqlResultAsTree) GetAdditionalValuesOk() ([][]map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalValues) {
		return nil, false
	}
	return o.AdditionalValues, true
}

// HasAdditionalValues returns a boolean if a field has been set.
func (o *UsqlResultAsTree) HasAdditionalValues() bool {
	if o != nil && !IsNil(o.AdditionalValues) {
		return true
	}

	return false
}

// SetAdditionalValues gets a reference to the given [][]map[string]interface{} and assigns it to the AdditionalValues field.
func (o *UsqlResultAsTree) SetAdditionalValues(v [][]map[string]interface{}) {
	o.AdditionalValues = v
}

// GetBranchNames returns the BranchNames field value if set, zero value otherwise.
func (o *UsqlResultAsTree) GetBranchNames() []string {
	if o == nil || IsNil(o.BranchNames) {
		var ret []string
		return ret
	}
	return o.BranchNames
}

// GetBranchNamesOk returns a tuple with the BranchNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsqlResultAsTree) GetBranchNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.BranchNames) {
		return nil, false
	}
	return o.BranchNames, true
}

// HasBranchNames returns a boolean if a field has been set.
func (o *UsqlResultAsTree) HasBranchNames() bool {
	if o != nil && !IsNil(o.BranchNames) {
		return true
	}

	return false
}

// SetBranchNames gets a reference to the given []string and assigns it to the BranchNames field.
func (o *UsqlResultAsTree) SetBranchNames(v []string) {
	o.BranchNames = v
}

// GetExplanations returns the Explanations field value if set, zero value otherwise.
func (o *UsqlResultAsTree) GetExplanations() []string {
	if o == nil || IsNil(o.Explanations) {
		var ret []string
		return ret
	}
	return o.Explanations
}

// GetExplanationsOk returns a tuple with the Explanations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsqlResultAsTree) GetExplanationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Explanations) {
		return nil, false
	}
	return o.Explanations, true
}

// HasExplanations returns a boolean if a field has been set.
func (o *UsqlResultAsTree) HasExplanations() bool {
	if o != nil && !IsNil(o.Explanations) {
		return true
	}

	return false
}

// SetExplanations gets a reference to the given []string and assigns it to the Explanations field.
func (o *UsqlResultAsTree) SetExplanations(v []string) {
	o.Explanations = v
}

// GetExtrapolationLevel returns the ExtrapolationLevel field value if set, zero value otherwise.
func (o *UsqlResultAsTree) GetExtrapolationLevel() int32 {
	if o == nil || IsNil(o.ExtrapolationLevel) {
		var ret int32
		return ret
	}
	return *o.ExtrapolationLevel
}

// GetExtrapolationLevelOk returns a tuple with the ExtrapolationLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsqlResultAsTree) GetExtrapolationLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.ExtrapolationLevel) {
		return nil, false
	}
	return o.ExtrapolationLevel, true
}

// HasExtrapolationLevel returns a boolean if a field has been set.
func (o *UsqlResultAsTree) HasExtrapolationLevel() bool {
	if o != nil && !IsNil(o.ExtrapolationLevel) {
		return true
	}

	return false
}

// SetExtrapolationLevel gets a reference to the given int32 and assigns it to the ExtrapolationLevel field.
func (o *UsqlResultAsTree) SetExtrapolationLevel(v int32) {
	o.ExtrapolationLevel = &v
}

// GetLeafNames returns the LeafNames field value if set, zero value otherwise.
func (o *UsqlResultAsTree) GetLeafNames() []string {
	if o == nil || IsNil(o.LeafNames) {
		var ret []string
		return ret
	}
	return o.LeafNames
}

// GetLeafNamesOk returns a tuple with the LeafNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsqlResultAsTree) GetLeafNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.LeafNames) {
		return nil, false
	}
	return o.LeafNames, true
}

// HasLeafNames returns a boolean if a field has been set.
func (o *UsqlResultAsTree) HasLeafNames() bool {
	if o != nil && !IsNil(o.LeafNames) {
		return true
	}

	return false
}

// SetLeafNames gets a reference to the given []string and assigns it to the LeafNames field.
func (o *UsqlResultAsTree) SetLeafNames(v []string) {
	o.LeafNames = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *UsqlResultAsTree) GetValues() map[string]interface{} {
	if o == nil || IsNil(o.Values) {
		var ret map[string]interface{}
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsqlResultAsTree) GetValuesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Values) {
		return map[string]interface{}{}, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *UsqlResultAsTree) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]interface{} and assigns it to the Values field.
func (o *UsqlResultAsTree) SetValues(v map[string]interface{}) {
	o.Values = v
}

func (o UsqlResultAsTree) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsqlResultAsTree) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalColumnNames) {
		toSerialize["additionalColumnNames"] = o.AdditionalColumnNames
	}
	if !IsNil(o.AdditionalValues) {
		toSerialize["additionalValues"] = o.AdditionalValues
	}
	if !IsNil(o.BranchNames) {
		toSerialize["branchNames"] = o.BranchNames
	}
	if !IsNil(o.Explanations) {
		toSerialize["explanations"] = o.Explanations
	}
	if !IsNil(o.ExtrapolationLevel) {
		toSerialize["extrapolationLevel"] = o.ExtrapolationLevel
	}
	if !IsNil(o.LeafNames) {
		toSerialize["leafNames"] = o.LeafNames
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableUsqlResultAsTree struct {
	value *UsqlResultAsTree
	isSet bool
}

func (v NullableUsqlResultAsTree) Get() *UsqlResultAsTree {
	return v.value
}

func (v *NullableUsqlResultAsTree) Set(val *UsqlResultAsTree) {
	v.value = val
	v.isSet = true
}

func (v NullableUsqlResultAsTree) IsSet() bool {
	return v.isSet
}

func (v *NullableUsqlResultAsTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsqlResultAsTree(val *UsqlResultAsTree) *NullableUsqlResultAsTree {
	return &NullableUsqlResultAsTree{value: val, isSet: true}
}

func (v NullableUsqlResultAsTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsqlResultAsTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


