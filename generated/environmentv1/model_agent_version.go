/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the AgentVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentVersion{}

// AgentVersion Defines the version of the agent currently running on the entity.
type AgentVersion struct {
	// The major version number.
	Major *int32 `json:"major,omitempty"`
	// The minor version number.
	Minor *int32 `json:"minor,omitempty"`
	// The revision number.
	Revision *int32 `json:"revision,omitempty"`
	// A string representation of the SVN revision number.
	SourceRevision *string `json:"sourceRevision,omitempty"`
	// A timestamp string: format \"yyyymmdd-hhmmss
	Timestamp *string `json:"timestamp,omitempty"`
}

// NewAgentVersion instantiates a new AgentVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentVersion() *AgentVersion {
	this := AgentVersion{}
	return &this
}

// NewAgentVersionWithDefaults instantiates a new AgentVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentVersionWithDefaults() *AgentVersion {
	this := AgentVersion{}
	return &this
}

// GetMajor returns the Major field value if set, zero value otherwise.
func (o *AgentVersion) GetMajor() int32 {
	if o == nil || IsNil(o.Major) {
		var ret int32
		return ret
	}
	return *o.Major
}

// GetMajorOk returns a tuple with the Major field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentVersion) GetMajorOk() (*int32, bool) {
	if o == nil || IsNil(o.Major) {
		return nil, false
	}
	return o.Major, true
}

// HasMajor returns a boolean if a field has been set.
func (o *AgentVersion) HasMajor() bool {
	if o != nil && !IsNil(o.Major) {
		return true
	}

	return false
}

// SetMajor gets a reference to the given int32 and assigns it to the Major field.
func (o *AgentVersion) SetMajor(v int32) {
	o.Major = &v
}

// GetMinor returns the Minor field value if set, zero value otherwise.
func (o *AgentVersion) GetMinor() int32 {
	if o == nil || IsNil(o.Minor) {
		var ret int32
		return ret
	}
	return *o.Minor
}

// GetMinorOk returns a tuple with the Minor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentVersion) GetMinorOk() (*int32, bool) {
	if o == nil || IsNil(o.Minor) {
		return nil, false
	}
	return o.Minor, true
}

// HasMinor returns a boolean if a field has been set.
func (o *AgentVersion) HasMinor() bool {
	if o != nil && !IsNil(o.Minor) {
		return true
	}

	return false
}

// SetMinor gets a reference to the given int32 and assigns it to the Minor field.
func (o *AgentVersion) SetMinor(v int32) {
	o.Minor = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *AgentVersion) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentVersion) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *AgentVersion) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *AgentVersion) SetRevision(v int32) {
	o.Revision = &v
}

// GetSourceRevision returns the SourceRevision field value if set, zero value otherwise.
func (o *AgentVersion) GetSourceRevision() string {
	if o == nil || IsNil(o.SourceRevision) {
		var ret string
		return ret
	}
	return *o.SourceRevision
}

// GetSourceRevisionOk returns a tuple with the SourceRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentVersion) GetSourceRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.SourceRevision) {
		return nil, false
	}
	return o.SourceRevision, true
}

// HasSourceRevision returns a boolean if a field has been set.
func (o *AgentVersion) HasSourceRevision() bool {
	if o != nil && !IsNil(o.SourceRevision) {
		return true
	}

	return false
}

// SetSourceRevision gets a reference to the given string and assigns it to the SourceRevision field.
func (o *AgentVersion) SetSourceRevision(v string) {
	o.SourceRevision = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *AgentVersion) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentVersion) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *AgentVersion) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *AgentVersion) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o AgentVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Major) {
		toSerialize["major"] = o.Major
	}
	if !IsNil(o.Minor) {
		toSerialize["minor"] = o.Minor
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.SourceRevision) {
		toSerialize["sourceRevision"] = o.SourceRevision
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableAgentVersion struct {
	value *AgentVersion
	isSet bool
}

func (v NullableAgentVersion) Get() *AgentVersion {
	return v.value
}

func (v *NullableAgentVersion) Set(val *AgentVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentVersion(val *AgentVersion) *NullableAgentVersion {
	return &NullableAgentVersion{value: val, isSet: true}
}

func (v NullableAgentVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


