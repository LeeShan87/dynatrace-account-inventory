/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the UserSessionUserAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSessionUserAction{}

// UserSessionUserAction A user action.    A user action is a single action performed by the user as part of a user session, for example a mouse click.
type UserSessionUserAction struct {
	// The [user experience index](https://dt-url.net/apdexdoc) of the user action.
	ApdexCategory *string `json:"apdexCategory,omitempty"`
	// The name of the application where the user action has been recorded.
	Application *string `json:"application,omitempty"`
	// The time spent waiting for CDN resources for the user action, in milliseconds.
	CdnBusyTime *int32 `json:"cdnBusyTime,omitempty"`
	// The number of resources fetched from a CDN for the user action.
	CdnResources *int32 `json:"cdnResources,omitempty"`
	// The cumulative layout shift (CLS) is the total amount of all individual scores for every unexpected layout shift that occurs during the entire lifespan of the page.   The CLS is an important user-centric metric for measuring visual stability. It quantifies how often users experience unexpected layout shifts. A low CLS indicates that the page is delightful.
	CumulativeLayoutShift *float64 `json:"cumulativeLayoutShift,omitempty"`
	// The total number of custom errors during the user action.
	CustomErrorCount *int32 `json:"customErrorCount,omitempty"`
	// A list of custom properties of the user session with date values.
	DateProperties []DateProperty `json:"dateProperties,omitempty"`
	// The amount of time spent until the document for the user action became interactive, in milliseconds.
	DocumentInteractiveTime *int32 `json:"documentInteractiveTime,omitempty"`
	// The amount of time until the DOM tree is completed, in milliseconds.
	DomCompleteTime *int32 `json:"domCompleteTime,omitempty"`
	// The amount of time until the DOM tree is loaded, in milliseconds.
	DomContentLoadedTime *int32 `json:"domContentLoadedTime,omitempty"`
	// The DNS domain where the user action has been recorded.
	Domain *string `json:"domain,omitempty"`
	// A list of custom properties of the user session with floating-point numerical values.
	DoubleProperties []DoubleProperty `json:"doubleProperties,omitempty"`
	// The duration of the user action, in milliseconds.    This is calculated as the of time between the start and the end timestamps of the user action.
	Duration *int64 `json:"duration,omitempty"`
	// The end timestamp of the user action, in UTC milliseconds.
	EndTime *int64 `json:"endTime,omitempty"`
	// The first input delay (FID) is the time (in milliseconds) that the browser took to respond to the first user input.   The FID is an important user-centric metric for measuring load responsiveness. It quantifies the user experience when trying to interact with unresponsive pages. A low FID indicates that the page is usable.
	FirstInputDelay *int32 `json:"firstInputDelay,omitempty"`
	// The time spent waiting for resources from the originating server for the user action, in milliseconds.
	FirstPartyBusyTime *int32 `json:"firstPartyBusyTime,omitempty"`
	// The number of resources fetched from the originating server for the user action.
	FirstPartyResources *int32 `json:"firstPartyResources,omitempty"`
	// The amount of time spent on the frontend rendering for the user action, in milliseconds.
	FrontendTime *int32 `json:"frontendTime,omitempty"`
	// The user action has (`true`) or doesn't have (`false`) a crash.
	HasCrash *bool `json:"hasCrash,omitempty"`
	// The Dynatrace entity ID of the application where the user action has been recorded.    This information is useful when calling various REST APIs, for example as a key for time series queries.
	InternalApplicationId *string `json:"internalApplicationId,omitempty"`
	// The Dynatrace entity ID of the key user action.
	InternalKeyUserActionId *string `json:"internalKeyUserActionId,omitempty"`
	// The total number of Javascript errors during the user action.
	JavascriptErrorCount *int32 `json:"javascriptErrorCount,omitempty"`
	// The action is (`true`) or is not (`false`) a key action.
	KeyUserAction *bool `json:"keyUserAction,omitempty"`
	// The largest contentful paint (LCP) is the time (in milliseconds) that the largest element on the page took to render.   The LCP is an important user-centric metric for measuring load speed. It marks the point when the page's main content is likely loaded. A low LCP indicates that the page loads quickly.
	LargestContentfulPaint *int32 `json:"largestContentfulPaint,omitempty"`
	// The amount of time until the load event ended, in milliseconds.
	LoadEventEnd *int32 `json:"loadEventEnd,omitempty"`
	// The amount of time until the load event started, in milliseconds.
	LoadEventStart *int32 `json:"loadEventStart,omitempty"`
	// A list of custom properties of the user session with integer (short or long) values.
	LongProperties []LongProperty `json:"longProperties,omitempty"`
	// A list of conversion goals achieved by the user action.    Additionally, you can define conversion goals for a user session as a whole.
	MatchingConversionGoals []string `json:"matchingConversionGoals,omitempty"`
	// The name of the user action.    Typically, this is the name of the page that is loaded as part of a user action or a textual description of the action, such as a mouse click.
	Name *string `json:"name,omitempty"`
	// The timestamp of the navigation start, in UTC milliseconds.
	NavigationStart *int64 `json:"navigationStart,omitempty"`
	// The amount of time spent on the data transfer for the user action, in milliseconds.
	NetworkTime *int32 `json:"networkTime,omitempty"`
	// The total number of request errors during the user action.
	RequestErrorCount *int32 `json:"requestErrorCount,omitempty"`
	// The amount of time until the request started, in milliseconds.
	RequestStart *int32 `json:"requestStart,omitempty"`
	// The amount of time until the response ended, in milliseconds.
	ResponseEnd *int32 `json:"responseEnd,omitempty"`
	// The amount of time until the response started, in milliseconds.
	ResponseStart *int32 `json:"responseStart,omitempty"`
	// The amount of time spent on the server-side processing for the user action, in milliseconds.
	ServerTime *int32 `json:"serverTime,omitempty"`
	// The [speed index](https://dt-url.net/qk1a3r19) of the user action, in milliseconds.    This is calculated as average time it takes for all visible parts of a page to display.
	SpeedIndex *int32 `json:"speedIndex,omitempty"`
	// The start timestamp of the user action, in UTC milliseconds.
	StartTime *int64 `json:"startTime,omitempty"`
	// A list of custom properties of the user session with string values.
	StringProperties []StringProperty `json:"stringProperties,omitempty"`
	// The name of the [Synthetic event](https://dt-url.net/dq1e3rmm) that triggered the user action.
	SyntheticEvent *string `json:"syntheticEvent,omitempty"`
	// The ID of the [Synthetic event](https://dt-url.net/dq1e3rmm) that triggered the user action.
	SyntheticEventId *string `json:"syntheticEventId,omitempty"`
	// The target URL of the user action.
	TargetUrl *string `json:"targetUrl,omitempty"`
	// The time spent waiting for third party resources for the user action, in milliseconds.
	ThirdPartyBusyTime *int32 `json:"thirdPartyBusyTime,omitempty"`
	// The number of third party resources loaded for the user action.
	ThirdPartyResources *int32 `json:"thirdPartyResources,omitempty"`
	// The total blocking time is the total time (in milliseconds) between the first contentful paint and the time to interactive, during which the browser has been blocked long enough to prevent input responsiveness.
	// Deprecated
	TotalBlockingTime *int32 `json:"totalBlockingTime,omitempty"`
	// The type of the user action.
	Type *string `json:"type,omitempty"`
	// The total number of properties in the user action.
	UserActionPropertyCount *int32 `json:"userActionPropertyCount,omitempty"`
	// The amount of time until the page is [visually complete](https://dt-url.net/qk1a3r19), in milliseconds.
	VisuallyCompleteTime *int32 `json:"visuallyCompleteTime,omitempty"`
}

// NewUserSessionUserAction instantiates a new UserSessionUserAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSessionUserAction() *UserSessionUserAction {
	this := UserSessionUserAction{}
	return &this
}

// NewUserSessionUserActionWithDefaults instantiates a new UserSessionUserAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionUserActionWithDefaults() *UserSessionUserAction {
	this := UserSessionUserAction{}
	return &this
}

// GetApdexCategory returns the ApdexCategory field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetApdexCategory() string {
	if o == nil || IsNil(o.ApdexCategory) {
		var ret string
		return ret
	}
	return *o.ApdexCategory
}

// GetApdexCategoryOk returns a tuple with the ApdexCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetApdexCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.ApdexCategory) {
		return nil, false
	}
	return o.ApdexCategory, true
}

// HasApdexCategory returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasApdexCategory() bool {
	if o != nil && !IsNil(o.ApdexCategory) {
		return true
	}

	return false
}

// SetApdexCategory gets a reference to the given string and assigns it to the ApdexCategory field.
func (o *UserSessionUserAction) SetApdexCategory(v string) {
	o.ApdexCategory = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetApplication() string {
	if o == nil || IsNil(o.Application) {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetApplicationOk() (*string, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *UserSessionUserAction) SetApplication(v string) {
	o.Application = &v
}

// GetCdnBusyTime returns the CdnBusyTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetCdnBusyTime() int32 {
	if o == nil || IsNil(o.CdnBusyTime) {
		var ret int32
		return ret
	}
	return *o.CdnBusyTime
}

// GetCdnBusyTimeOk returns a tuple with the CdnBusyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetCdnBusyTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.CdnBusyTime) {
		return nil, false
	}
	return o.CdnBusyTime, true
}

// HasCdnBusyTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasCdnBusyTime() bool {
	if o != nil && !IsNil(o.CdnBusyTime) {
		return true
	}

	return false
}

// SetCdnBusyTime gets a reference to the given int32 and assigns it to the CdnBusyTime field.
func (o *UserSessionUserAction) SetCdnBusyTime(v int32) {
	o.CdnBusyTime = &v
}

// GetCdnResources returns the CdnResources field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetCdnResources() int32 {
	if o == nil || IsNil(o.CdnResources) {
		var ret int32
		return ret
	}
	return *o.CdnResources
}

// GetCdnResourcesOk returns a tuple with the CdnResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetCdnResourcesOk() (*int32, bool) {
	if o == nil || IsNil(o.CdnResources) {
		return nil, false
	}
	return o.CdnResources, true
}

// HasCdnResources returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasCdnResources() bool {
	if o != nil && !IsNil(o.CdnResources) {
		return true
	}

	return false
}

// SetCdnResources gets a reference to the given int32 and assigns it to the CdnResources field.
func (o *UserSessionUserAction) SetCdnResources(v int32) {
	o.CdnResources = &v
}

// GetCumulativeLayoutShift returns the CumulativeLayoutShift field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetCumulativeLayoutShift() float64 {
	if o == nil || IsNil(o.CumulativeLayoutShift) {
		var ret float64
		return ret
	}
	return *o.CumulativeLayoutShift
}

// GetCumulativeLayoutShiftOk returns a tuple with the CumulativeLayoutShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetCumulativeLayoutShiftOk() (*float64, bool) {
	if o == nil || IsNil(o.CumulativeLayoutShift) {
		return nil, false
	}
	return o.CumulativeLayoutShift, true
}

// HasCumulativeLayoutShift returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasCumulativeLayoutShift() bool {
	if o != nil && !IsNil(o.CumulativeLayoutShift) {
		return true
	}

	return false
}

// SetCumulativeLayoutShift gets a reference to the given float64 and assigns it to the CumulativeLayoutShift field.
func (o *UserSessionUserAction) SetCumulativeLayoutShift(v float64) {
	o.CumulativeLayoutShift = &v
}

// GetCustomErrorCount returns the CustomErrorCount field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetCustomErrorCount() int32 {
	if o == nil || IsNil(o.CustomErrorCount) {
		var ret int32
		return ret
	}
	return *o.CustomErrorCount
}

// GetCustomErrorCountOk returns a tuple with the CustomErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetCustomErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomErrorCount) {
		return nil, false
	}
	return o.CustomErrorCount, true
}

// HasCustomErrorCount returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasCustomErrorCount() bool {
	if o != nil && !IsNil(o.CustomErrorCount) {
		return true
	}

	return false
}

// SetCustomErrorCount gets a reference to the given int32 and assigns it to the CustomErrorCount field.
func (o *UserSessionUserAction) SetCustomErrorCount(v int32) {
	o.CustomErrorCount = &v
}

// GetDateProperties returns the DateProperties field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetDateProperties() []DateProperty {
	if o == nil || IsNil(o.DateProperties) {
		var ret []DateProperty
		return ret
	}
	return o.DateProperties
}

// GetDatePropertiesOk returns a tuple with the DateProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetDatePropertiesOk() ([]DateProperty, bool) {
	if o == nil || IsNil(o.DateProperties) {
		return nil, false
	}
	return o.DateProperties, true
}

// HasDateProperties returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasDateProperties() bool {
	if o != nil && !IsNil(o.DateProperties) {
		return true
	}

	return false
}

// SetDateProperties gets a reference to the given []DateProperty and assigns it to the DateProperties field.
func (o *UserSessionUserAction) SetDateProperties(v []DateProperty) {
	o.DateProperties = v
}

// GetDocumentInteractiveTime returns the DocumentInteractiveTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetDocumentInteractiveTime() int32 {
	if o == nil || IsNil(o.DocumentInteractiveTime) {
		var ret int32
		return ret
	}
	return *o.DocumentInteractiveTime
}

// GetDocumentInteractiveTimeOk returns a tuple with the DocumentInteractiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetDocumentInteractiveTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.DocumentInteractiveTime) {
		return nil, false
	}
	return o.DocumentInteractiveTime, true
}

// HasDocumentInteractiveTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasDocumentInteractiveTime() bool {
	if o != nil && !IsNil(o.DocumentInteractiveTime) {
		return true
	}

	return false
}

// SetDocumentInteractiveTime gets a reference to the given int32 and assigns it to the DocumentInteractiveTime field.
func (o *UserSessionUserAction) SetDocumentInteractiveTime(v int32) {
	o.DocumentInteractiveTime = &v
}

// GetDomCompleteTime returns the DomCompleteTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetDomCompleteTime() int32 {
	if o == nil || IsNil(o.DomCompleteTime) {
		var ret int32
		return ret
	}
	return *o.DomCompleteTime
}

// GetDomCompleteTimeOk returns a tuple with the DomCompleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetDomCompleteTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.DomCompleteTime) {
		return nil, false
	}
	return o.DomCompleteTime, true
}

// HasDomCompleteTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasDomCompleteTime() bool {
	if o != nil && !IsNil(o.DomCompleteTime) {
		return true
	}

	return false
}

// SetDomCompleteTime gets a reference to the given int32 and assigns it to the DomCompleteTime field.
func (o *UserSessionUserAction) SetDomCompleteTime(v int32) {
	o.DomCompleteTime = &v
}

// GetDomContentLoadedTime returns the DomContentLoadedTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetDomContentLoadedTime() int32 {
	if o == nil || IsNil(o.DomContentLoadedTime) {
		var ret int32
		return ret
	}
	return *o.DomContentLoadedTime
}

// GetDomContentLoadedTimeOk returns a tuple with the DomContentLoadedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetDomContentLoadedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.DomContentLoadedTime) {
		return nil, false
	}
	return o.DomContentLoadedTime, true
}

// HasDomContentLoadedTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasDomContentLoadedTime() bool {
	if o != nil && !IsNil(o.DomContentLoadedTime) {
		return true
	}

	return false
}

// SetDomContentLoadedTime gets a reference to the given int32 and assigns it to the DomContentLoadedTime field.
func (o *UserSessionUserAction) SetDomContentLoadedTime(v int32) {
	o.DomContentLoadedTime = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *UserSessionUserAction) SetDomain(v string) {
	o.Domain = &v
}

// GetDoubleProperties returns the DoubleProperties field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetDoubleProperties() []DoubleProperty {
	if o == nil || IsNil(o.DoubleProperties) {
		var ret []DoubleProperty
		return ret
	}
	return o.DoubleProperties
}

// GetDoublePropertiesOk returns a tuple with the DoubleProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetDoublePropertiesOk() ([]DoubleProperty, bool) {
	if o == nil || IsNil(o.DoubleProperties) {
		return nil, false
	}
	return o.DoubleProperties, true
}

// HasDoubleProperties returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasDoubleProperties() bool {
	if o != nil && !IsNil(o.DoubleProperties) {
		return true
	}

	return false
}

// SetDoubleProperties gets a reference to the given []DoubleProperty and assigns it to the DoubleProperties field.
func (o *UserSessionUserAction) SetDoubleProperties(v []DoubleProperty) {
	o.DoubleProperties = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetDuration() int64 {
	if o == nil || IsNil(o.Duration) {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *UserSessionUserAction) SetDuration(v int64) {
	o.Duration = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetEndTime() int64 {
	if o == nil || IsNil(o.EndTime) {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetEndTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *UserSessionUserAction) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetFirstInputDelay returns the FirstInputDelay field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetFirstInputDelay() int32 {
	if o == nil || IsNil(o.FirstInputDelay) {
		var ret int32
		return ret
	}
	return *o.FirstInputDelay
}

// GetFirstInputDelayOk returns a tuple with the FirstInputDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetFirstInputDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.FirstInputDelay) {
		return nil, false
	}
	return o.FirstInputDelay, true
}

// HasFirstInputDelay returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasFirstInputDelay() bool {
	if o != nil && !IsNil(o.FirstInputDelay) {
		return true
	}

	return false
}

// SetFirstInputDelay gets a reference to the given int32 and assigns it to the FirstInputDelay field.
func (o *UserSessionUserAction) SetFirstInputDelay(v int32) {
	o.FirstInputDelay = &v
}

// GetFirstPartyBusyTime returns the FirstPartyBusyTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetFirstPartyBusyTime() int32 {
	if o == nil || IsNil(o.FirstPartyBusyTime) {
		var ret int32
		return ret
	}
	return *o.FirstPartyBusyTime
}

// GetFirstPartyBusyTimeOk returns a tuple with the FirstPartyBusyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetFirstPartyBusyTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.FirstPartyBusyTime) {
		return nil, false
	}
	return o.FirstPartyBusyTime, true
}

// HasFirstPartyBusyTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasFirstPartyBusyTime() bool {
	if o != nil && !IsNil(o.FirstPartyBusyTime) {
		return true
	}

	return false
}

// SetFirstPartyBusyTime gets a reference to the given int32 and assigns it to the FirstPartyBusyTime field.
func (o *UserSessionUserAction) SetFirstPartyBusyTime(v int32) {
	o.FirstPartyBusyTime = &v
}

// GetFirstPartyResources returns the FirstPartyResources field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetFirstPartyResources() int32 {
	if o == nil || IsNil(o.FirstPartyResources) {
		var ret int32
		return ret
	}
	return *o.FirstPartyResources
}

// GetFirstPartyResourcesOk returns a tuple with the FirstPartyResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetFirstPartyResourcesOk() (*int32, bool) {
	if o == nil || IsNil(o.FirstPartyResources) {
		return nil, false
	}
	return o.FirstPartyResources, true
}

// HasFirstPartyResources returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasFirstPartyResources() bool {
	if o != nil && !IsNil(o.FirstPartyResources) {
		return true
	}

	return false
}

// SetFirstPartyResources gets a reference to the given int32 and assigns it to the FirstPartyResources field.
func (o *UserSessionUserAction) SetFirstPartyResources(v int32) {
	o.FirstPartyResources = &v
}

// GetFrontendTime returns the FrontendTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetFrontendTime() int32 {
	if o == nil || IsNil(o.FrontendTime) {
		var ret int32
		return ret
	}
	return *o.FrontendTime
}

// GetFrontendTimeOk returns a tuple with the FrontendTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetFrontendTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.FrontendTime) {
		return nil, false
	}
	return o.FrontendTime, true
}

// HasFrontendTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasFrontendTime() bool {
	if o != nil && !IsNil(o.FrontendTime) {
		return true
	}

	return false
}

// SetFrontendTime gets a reference to the given int32 and assigns it to the FrontendTime field.
func (o *UserSessionUserAction) SetFrontendTime(v int32) {
	o.FrontendTime = &v
}

// GetHasCrash returns the HasCrash field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetHasCrash() bool {
	if o == nil || IsNil(o.HasCrash) {
		var ret bool
		return ret
	}
	return *o.HasCrash
}

// GetHasCrashOk returns a tuple with the HasCrash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetHasCrashOk() (*bool, bool) {
	if o == nil || IsNil(o.HasCrash) {
		return nil, false
	}
	return o.HasCrash, true
}

// HasHasCrash returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasHasCrash() bool {
	if o != nil && !IsNil(o.HasCrash) {
		return true
	}

	return false
}

// SetHasCrash gets a reference to the given bool and assigns it to the HasCrash field.
func (o *UserSessionUserAction) SetHasCrash(v bool) {
	o.HasCrash = &v
}

// GetInternalApplicationId returns the InternalApplicationId field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetInternalApplicationId() string {
	if o == nil || IsNil(o.InternalApplicationId) {
		var ret string
		return ret
	}
	return *o.InternalApplicationId
}

// GetInternalApplicationIdOk returns a tuple with the InternalApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetInternalApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.InternalApplicationId) {
		return nil, false
	}
	return o.InternalApplicationId, true
}

// HasInternalApplicationId returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasInternalApplicationId() bool {
	if o != nil && !IsNil(o.InternalApplicationId) {
		return true
	}

	return false
}

// SetInternalApplicationId gets a reference to the given string and assigns it to the InternalApplicationId field.
func (o *UserSessionUserAction) SetInternalApplicationId(v string) {
	o.InternalApplicationId = &v
}

// GetInternalKeyUserActionId returns the InternalKeyUserActionId field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetInternalKeyUserActionId() string {
	if o == nil || IsNil(o.InternalKeyUserActionId) {
		var ret string
		return ret
	}
	return *o.InternalKeyUserActionId
}

// GetInternalKeyUserActionIdOk returns a tuple with the InternalKeyUserActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetInternalKeyUserActionIdOk() (*string, bool) {
	if o == nil || IsNil(o.InternalKeyUserActionId) {
		return nil, false
	}
	return o.InternalKeyUserActionId, true
}

// HasInternalKeyUserActionId returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasInternalKeyUserActionId() bool {
	if o != nil && !IsNil(o.InternalKeyUserActionId) {
		return true
	}

	return false
}

// SetInternalKeyUserActionId gets a reference to the given string and assigns it to the InternalKeyUserActionId field.
func (o *UserSessionUserAction) SetInternalKeyUserActionId(v string) {
	o.InternalKeyUserActionId = &v
}

// GetJavascriptErrorCount returns the JavascriptErrorCount field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetJavascriptErrorCount() int32 {
	if o == nil || IsNil(o.JavascriptErrorCount) {
		var ret int32
		return ret
	}
	return *o.JavascriptErrorCount
}

// GetJavascriptErrorCountOk returns a tuple with the JavascriptErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetJavascriptErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.JavascriptErrorCount) {
		return nil, false
	}
	return o.JavascriptErrorCount, true
}

// HasJavascriptErrorCount returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasJavascriptErrorCount() bool {
	if o != nil && !IsNil(o.JavascriptErrorCount) {
		return true
	}

	return false
}

// SetJavascriptErrorCount gets a reference to the given int32 and assigns it to the JavascriptErrorCount field.
func (o *UserSessionUserAction) SetJavascriptErrorCount(v int32) {
	o.JavascriptErrorCount = &v
}

// GetKeyUserAction returns the KeyUserAction field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetKeyUserAction() bool {
	if o == nil || IsNil(o.KeyUserAction) {
		var ret bool
		return ret
	}
	return *o.KeyUserAction
}

// GetKeyUserActionOk returns a tuple with the KeyUserAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetKeyUserActionOk() (*bool, bool) {
	if o == nil || IsNil(o.KeyUserAction) {
		return nil, false
	}
	return o.KeyUserAction, true
}

// HasKeyUserAction returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasKeyUserAction() bool {
	if o != nil && !IsNil(o.KeyUserAction) {
		return true
	}

	return false
}

// SetKeyUserAction gets a reference to the given bool and assigns it to the KeyUserAction field.
func (o *UserSessionUserAction) SetKeyUserAction(v bool) {
	o.KeyUserAction = &v
}

// GetLargestContentfulPaint returns the LargestContentfulPaint field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetLargestContentfulPaint() int32 {
	if o == nil || IsNil(o.LargestContentfulPaint) {
		var ret int32
		return ret
	}
	return *o.LargestContentfulPaint
}

// GetLargestContentfulPaintOk returns a tuple with the LargestContentfulPaint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetLargestContentfulPaintOk() (*int32, bool) {
	if o == nil || IsNil(o.LargestContentfulPaint) {
		return nil, false
	}
	return o.LargestContentfulPaint, true
}

// HasLargestContentfulPaint returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasLargestContentfulPaint() bool {
	if o != nil && !IsNil(o.LargestContentfulPaint) {
		return true
	}

	return false
}

// SetLargestContentfulPaint gets a reference to the given int32 and assigns it to the LargestContentfulPaint field.
func (o *UserSessionUserAction) SetLargestContentfulPaint(v int32) {
	o.LargestContentfulPaint = &v
}

// GetLoadEventEnd returns the LoadEventEnd field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetLoadEventEnd() int32 {
	if o == nil || IsNil(o.LoadEventEnd) {
		var ret int32
		return ret
	}
	return *o.LoadEventEnd
}

// GetLoadEventEndOk returns a tuple with the LoadEventEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetLoadEventEndOk() (*int32, bool) {
	if o == nil || IsNil(o.LoadEventEnd) {
		return nil, false
	}
	return o.LoadEventEnd, true
}

// HasLoadEventEnd returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasLoadEventEnd() bool {
	if o != nil && !IsNil(o.LoadEventEnd) {
		return true
	}

	return false
}

// SetLoadEventEnd gets a reference to the given int32 and assigns it to the LoadEventEnd field.
func (o *UserSessionUserAction) SetLoadEventEnd(v int32) {
	o.LoadEventEnd = &v
}

// GetLoadEventStart returns the LoadEventStart field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetLoadEventStart() int32 {
	if o == nil || IsNil(o.LoadEventStart) {
		var ret int32
		return ret
	}
	return *o.LoadEventStart
}

// GetLoadEventStartOk returns a tuple with the LoadEventStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetLoadEventStartOk() (*int32, bool) {
	if o == nil || IsNil(o.LoadEventStart) {
		return nil, false
	}
	return o.LoadEventStart, true
}

// HasLoadEventStart returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasLoadEventStart() bool {
	if o != nil && !IsNil(o.LoadEventStart) {
		return true
	}

	return false
}

// SetLoadEventStart gets a reference to the given int32 and assigns it to the LoadEventStart field.
func (o *UserSessionUserAction) SetLoadEventStart(v int32) {
	o.LoadEventStart = &v
}

// GetLongProperties returns the LongProperties field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetLongProperties() []LongProperty {
	if o == nil || IsNil(o.LongProperties) {
		var ret []LongProperty
		return ret
	}
	return o.LongProperties
}

// GetLongPropertiesOk returns a tuple with the LongProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetLongPropertiesOk() ([]LongProperty, bool) {
	if o == nil || IsNil(o.LongProperties) {
		return nil, false
	}
	return o.LongProperties, true
}

// HasLongProperties returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasLongProperties() bool {
	if o != nil && !IsNil(o.LongProperties) {
		return true
	}

	return false
}

// SetLongProperties gets a reference to the given []LongProperty and assigns it to the LongProperties field.
func (o *UserSessionUserAction) SetLongProperties(v []LongProperty) {
	o.LongProperties = v
}

// GetMatchingConversionGoals returns the MatchingConversionGoals field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetMatchingConversionGoals() []string {
	if o == nil || IsNil(o.MatchingConversionGoals) {
		var ret []string
		return ret
	}
	return o.MatchingConversionGoals
}

// GetMatchingConversionGoalsOk returns a tuple with the MatchingConversionGoals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetMatchingConversionGoalsOk() ([]string, bool) {
	if o == nil || IsNil(o.MatchingConversionGoals) {
		return nil, false
	}
	return o.MatchingConversionGoals, true
}

// HasMatchingConversionGoals returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasMatchingConversionGoals() bool {
	if o != nil && !IsNil(o.MatchingConversionGoals) {
		return true
	}

	return false
}

// SetMatchingConversionGoals gets a reference to the given []string and assigns it to the MatchingConversionGoals field.
func (o *UserSessionUserAction) SetMatchingConversionGoals(v []string) {
	o.MatchingConversionGoals = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserSessionUserAction) SetName(v string) {
	o.Name = &v
}

// GetNavigationStart returns the NavigationStart field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetNavigationStart() int64 {
	if o == nil || IsNil(o.NavigationStart) {
		var ret int64
		return ret
	}
	return *o.NavigationStart
}

// GetNavigationStartOk returns a tuple with the NavigationStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetNavigationStartOk() (*int64, bool) {
	if o == nil || IsNil(o.NavigationStart) {
		return nil, false
	}
	return o.NavigationStart, true
}

// HasNavigationStart returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasNavigationStart() bool {
	if o != nil && !IsNil(o.NavigationStart) {
		return true
	}

	return false
}

// SetNavigationStart gets a reference to the given int64 and assigns it to the NavigationStart field.
func (o *UserSessionUserAction) SetNavigationStart(v int64) {
	o.NavigationStart = &v
}

// GetNetworkTime returns the NetworkTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetNetworkTime() int32 {
	if o == nil || IsNil(o.NetworkTime) {
		var ret int32
		return ret
	}
	return *o.NetworkTime
}

// GetNetworkTimeOk returns a tuple with the NetworkTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetNetworkTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkTime) {
		return nil, false
	}
	return o.NetworkTime, true
}

// HasNetworkTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasNetworkTime() bool {
	if o != nil && !IsNil(o.NetworkTime) {
		return true
	}

	return false
}

// SetNetworkTime gets a reference to the given int32 and assigns it to the NetworkTime field.
func (o *UserSessionUserAction) SetNetworkTime(v int32) {
	o.NetworkTime = &v
}

// GetRequestErrorCount returns the RequestErrorCount field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetRequestErrorCount() int32 {
	if o == nil || IsNil(o.RequestErrorCount) {
		var ret int32
		return ret
	}
	return *o.RequestErrorCount
}

// GetRequestErrorCountOk returns a tuple with the RequestErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetRequestErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RequestErrorCount) {
		return nil, false
	}
	return o.RequestErrorCount, true
}

// HasRequestErrorCount returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasRequestErrorCount() bool {
	if o != nil && !IsNil(o.RequestErrorCount) {
		return true
	}

	return false
}

// SetRequestErrorCount gets a reference to the given int32 and assigns it to the RequestErrorCount field.
func (o *UserSessionUserAction) SetRequestErrorCount(v int32) {
	o.RequestErrorCount = &v
}

// GetRequestStart returns the RequestStart field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetRequestStart() int32 {
	if o == nil || IsNil(o.RequestStart) {
		var ret int32
		return ret
	}
	return *o.RequestStart
}

// GetRequestStartOk returns a tuple with the RequestStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetRequestStartOk() (*int32, bool) {
	if o == nil || IsNil(o.RequestStart) {
		return nil, false
	}
	return o.RequestStart, true
}

// HasRequestStart returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasRequestStart() bool {
	if o != nil && !IsNil(o.RequestStart) {
		return true
	}

	return false
}

// SetRequestStart gets a reference to the given int32 and assigns it to the RequestStart field.
func (o *UserSessionUserAction) SetRequestStart(v int32) {
	o.RequestStart = &v
}

// GetResponseEnd returns the ResponseEnd field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetResponseEnd() int32 {
	if o == nil || IsNil(o.ResponseEnd) {
		var ret int32
		return ret
	}
	return *o.ResponseEnd
}

// GetResponseEndOk returns a tuple with the ResponseEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetResponseEndOk() (*int32, bool) {
	if o == nil || IsNil(o.ResponseEnd) {
		return nil, false
	}
	return o.ResponseEnd, true
}

// HasResponseEnd returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasResponseEnd() bool {
	if o != nil && !IsNil(o.ResponseEnd) {
		return true
	}

	return false
}

// SetResponseEnd gets a reference to the given int32 and assigns it to the ResponseEnd field.
func (o *UserSessionUserAction) SetResponseEnd(v int32) {
	o.ResponseEnd = &v
}

// GetResponseStart returns the ResponseStart field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetResponseStart() int32 {
	if o == nil || IsNil(o.ResponseStart) {
		var ret int32
		return ret
	}
	return *o.ResponseStart
}

// GetResponseStartOk returns a tuple with the ResponseStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetResponseStartOk() (*int32, bool) {
	if o == nil || IsNil(o.ResponseStart) {
		return nil, false
	}
	return o.ResponseStart, true
}

// HasResponseStart returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasResponseStart() bool {
	if o != nil && !IsNil(o.ResponseStart) {
		return true
	}

	return false
}

// SetResponseStart gets a reference to the given int32 and assigns it to the ResponseStart field.
func (o *UserSessionUserAction) SetResponseStart(v int32) {
	o.ResponseStart = &v
}

// GetServerTime returns the ServerTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetServerTime() int32 {
	if o == nil || IsNil(o.ServerTime) {
		var ret int32
		return ret
	}
	return *o.ServerTime
}

// GetServerTimeOk returns a tuple with the ServerTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetServerTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerTime) {
		return nil, false
	}
	return o.ServerTime, true
}

// HasServerTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasServerTime() bool {
	if o != nil && !IsNil(o.ServerTime) {
		return true
	}

	return false
}

// SetServerTime gets a reference to the given int32 and assigns it to the ServerTime field.
func (o *UserSessionUserAction) SetServerTime(v int32) {
	o.ServerTime = &v
}

// GetSpeedIndex returns the SpeedIndex field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetSpeedIndex() int32 {
	if o == nil || IsNil(o.SpeedIndex) {
		var ret int32
		return ret
	}
	return *o.SpeedIndex
}

// GetSpeedIndexOk returns a tuple with the SpeedIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetSpeedIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.SpeedIndex) {
		return nil, false
	}
	return o.SpeedIndex, true
}

// HasSpeedIndex returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasSpeedIndex() bool {
	if o != nil && !IsNil(o.SpeedIndex) {
		return true
	}

	return false
}

// SetSpeedIndex gets a reference to the given int32 and assigns it to the SpeedIndex field.
func (o *UserSessionUserAction) SetSpeedIndex(v int32) {
	o.SpeedIndex = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetStartTime() int64 {
	if o == nil || IsNil(o.StartTime) {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *UserSessionUserAction) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetStringProperties returns the StringProperties field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetStringProperties() []StringProperty {
	if o == nil || IsNil(o.StringProperties) {
		var ret []StringProperty
		return ret
	}
	return o.StringProperties
}

// GetStringPropertiesOk returns a tuple with the StringProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetStringPropertiesOk() ([]StringProperty, bool) {
	if o == nil || IsNil(o.StringProperties) {
		return nil, false
	}
	return o.StringProperties, true
}

// HasStringProperties returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasStringProperties() bool {
	if o != nil && !IsNil(o.StringProperties) {
		return true
	}

	return false
}

// SetStringProperties gets a reference to the given []StringProperty and assigns it to the StringProperties field.
func (o *UserSessionUserAction) SetStringProperties(v []StringProperty) {
	o.StringProperties = v
}

// GetSyntheticEvent returns the SyntheticEvent field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetSyntheticEvent() string {
	if o == nil || IsNil(o.SyntheticEvent) {
		var ret string
		return ret
	}
	return *o.SyntheticEvent
}

// GetSyntheticEventOk returns a tuple with the SyntheticEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetSyntheticEventOk() (*string, bool) {
	if o == nil || IsNil(o.SyntheticEvent) {
		return nil, false
	}
	return o.SyntheticEvent, true
}

// HasSyntheticEvent returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasSyntheticEvent() bool {
	if o != nil && !IsNil(o.SyntheticEvent) {
		return true
	}

	return false
}

// SetSyntheticEvent gets a reference to the given string and assigns it to the SyntheticEvent field.
func (o *UserSessionUserAction) SetSyntheticEvent(v string) {
	o.SyntheticEvent = &v
}

// GetSyntheticEventId returns the SyntheticEventId field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetSyntheticEventId() string {
	if o == nil || IsNil(o.SyntheticEventId) {
		var ret string
		return ret
	}
	return *o.SyntheticEventId
}

// GetSyntheticEventIdOk returns a tuple with the SyntheticEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetSyntheticEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.SyntheticEventId) {
		return nil, false
	}
	return o.SyntheticEventId, true
}

// HasSyntheticEventId returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasSyntheticEventId() bool {
	if o != nil && !IsNil(o.SyntheticEventId) {
		return true
	}

	return false
}

// SetSyntheticEventId gets a reference to the given string and assigns it to the SyntheticEventId field.
func (o *UserSessionUserAction) SetSyntheticEventId(v string) {
	o.SyntheticEventId = &v
}

// GetTargetUrl returns the TargetUrl field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetTargetUrl() string {
	if o == nil || IsNil(o.TargetUrl) {
		var ret string
		return ret
	}
	return *o.TargetUrl
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetTargetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TargetUrl) {
		return nil, false
	}
	return o.TargetUrl, true
}

// HasTargetUrl returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasTargetUrl() bool {
	if o != nil && !IsNil(o.TargetUrl) {
		return true
	}

	return false
}

// SetTargetUrl gets a reference to the given string and assigns it to the TargetUrl field.
func (o *UserSessionUserAction) SetTargetUrl(v string) {
	o.TargetUrl = &v
}

// GetThirdPartyBusyTime returns the ThirdPartyBusyTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetThirdPartyBusyTime() int32 {
	if o == nil || IsNil(o.ThirdPartyBusyTime) {
		var ret int32
		return ret
	}
	return *o.ThirdPartyBusyTime
}

// GetThirdPartyBusyTimeOk returns a tuple with the ThirdPartyBusyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetThirdPartyBusyTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ThirdPartyBusyTime) {
		return nil, false
	}
	return o.ThirdPartyBusyTime, true
}

// HasThirdPartyBusyTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasThirdPartyBusyTime() bool {
	if o != nil && !IsNil(o.ThirdPartyBusyTime) {
		return true
	}

	return false
}

// SetThirdPartyBusyTime gets a reference to the given int32 and assigns it to the ThirdPartyBusyTime field.
func (o *UserSessionUserAction) SetThirdPartyBusyTime(v int32) {
	o.ThirdPartyBusyTime = &v
}

// GetThirdPartyResources returns the ThirdPartyResources field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetThirdPartyResources() int32 {
	if o == nil || IsNil(o.ThirdPartyResources) {
		var ret int32
		return ret
	}
	return *o.ThirdPartyResources
}

// GetThirdPartyResourcesOk returns a tuple with the ThirdPartyResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetThirdPartyResourcesOk() (*int32, bool) {
	if o == nil || IsNil(o.ThirdPartyResources) {
		return nil, false
	}
	return o.ThirdPartyResources, true
}

// HasThirdPartyResources returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasThirdPartyResources() bool {
	if o != nil && !IsNil(o.ThirdPartyResources) {
		return true
	}

	return false
}

// SetThirdPartyResources gets a reference to the given int32 and assigns it to the ThirdPartyResources field.
func (o *UserSessionUserAction) SetThirdPartyResources(v int32) {
	o.ThirdPartyResources = &v
}

// GetTotalBlockingTime returns the TotalBlockingTime field value if set, zero value otherwise.
// Deprecated
func (o *UserSessionUserAction) GetTotalBlockingTime() int32 {
	if o == nil || IsNil(o.TotalBlockingTime) {
		var ret int32
		return ret
	}
	return *o.TotalBlockingTime
}

// GetTotalBlockingTimeOk returns a tuple with the TotalBlockingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserSessionUserAction) GetTotalBlockingTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalBlockingTime) {
		return nil, false
	}
	return o.TotalBlockingTime, true
}

// HasTotalBlockingTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasTotalBlockingTime() bool {
	if o != nil && !IsNil(o.TotalBlockingTime) {
		return true
	}

	return false
}

// SetTotalBlockingTime gets a reference to the given int32 and assigns it to the TotalBlockingTime field.
// Deprecated
func (o *UserSessionUserAction) SetTotalBlockingTime(v int32) {
	o.TotalBlockingTime = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserSessionUserAction) SetType(v string) {
	o.Type = &v
}

// GetUserActionPropertyCount returns the UserActionPropertyCount field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetUserActionPropertyCount() int32 {
	if o == nil || IsNil(o.UserActionPropertyCount) {
		var ret int32
		return ret
	}
	return *o.UserActionPropertyCount
}

// GetUserActionPropertyCountOk returns a tuple with the UserActionPropertyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetUserActionPropertyCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UserActionPropertyCount) {
		return nil, false
	}
	return o.UserActionPropertyCount, true
}

// HasUserActionPropertyCount returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasUserActionPropertyCount() bool {
	if o != nil && !IsNil(o.UserActionPropertyCount) {
		return true
	}

	return false
}

// SetUserActionPropertyCount gets a reference to the given int32 and assigns it to the UserActionPropertyCount field.
func (o *UserSessionUserAction) SetUserActionPropertyCount(v int32) {
	o.UserActionPropertyCount = &v
}

// GetVisuallyCompleteTime returns the VisuallyCompleteTime field value if set, zero value otherwise.
func (o *UserSessionUserAction) GetVisuallyCompleteTime() int32 {
	if o == nil || IsNil(o.VisuallyCompleteTime) {
		var ret int32
		return ret
	}
	return *o.VisuallyCompleteTime
}

// GetVisuallyCompleteTimeOk returns a tuple with the VisuallyCompleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionUserAction) GetVisuallyCompleteTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.VisuallyCompleteTime) {
		return nil, false
	}
	return o.VisuallyCompleteTime, true
}

// HasVisuallyCompleteTime returns a boolean if a field has been set.
func (o *UserSessionUserAction) HasVisuallyCompleteTime() bool {
	if o != nil && !IsNil(o.VisuallyCompleteTime) {
		return true
	}

	return false
}

// SetVisuallyCompleteTime gets a reference to the given int32 and assigns it to the VisuallyCompleteTime field.
func (o *UserSessionUserAction) SetVisuallyCompleteTime(v int32) {
	o.VisuallyCompleteTime = &v
}

func (o UserSessionUserAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSessionUserAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApdexCategory) {
		toSerialize["apdexCategory"] = o.ApdexCategory
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.CdnBusyTime) {
		toSerialize["cdnBusyTime"] = o.CdnBusyTime
	}
	if !IsNil(o.CdnResources) {
		toSerialize["cdnResources"] = o.CdnResources
	}
	if !IsNil(o.CumulativeLayoutShift) {
		toSerialize["cumulativeLayoutShift"] = o.CumulativeLayoutShift
	}
	if !IsNil(o.CustomErrorCount) {
		toSerialize["customErrorCount"] = o.CustomErrorCount
	}
	if !IsNil(o.DateProperties) {
		toSerialize["dateProperties"] = o.DateProperties
	}
	if !IsNil(o.DocumentInteractiveTime) {
		toSerialize["documentInteractiveTime"] = o.DocumentInteractiveTime
	}
	if !IsNil(o.DomCompleteTime) {
		toSerialize["domCompleteTime"] = o.DomCompleteTime
	}
	if !IsNil(o.DomContentLoadedTime) {
		toSerialize["domContentLoadedTime"] = o.DomContentLoadedTime
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.DoubleProperties) {
		toSerialize["doubleProperties"] = o.DoubleProperties
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.FirstInputDelay) {
		toSerialize["firstInputDelay"] = o.FirstInputDelay
	}
	if !IsNil(o.FirstPartyBusyTime) {
		toSerialize["firstPartyBusyTime"] = o.FirstPartyBusyTime
	}
	if !IsNil(o.FirstPartyResources) {
		toSerialize["firstPartyResources"] = o.FirstPartyResources
	}
	if !IsNil(o.FrontendTime) {
		toSerialize["frontendTime"] = o.FrontendTime
	}
	if !IsNil(o.HasCrash) {
		toSerialize["hasCrash"] = o.HasCrash
	}
	if !IsNil(o.InternalApplicationId) {
		toSerialize["internalApplicationId"] = o.InternalApplicationId
	}
	if !IsNil(o.InternalKeyUserActionId) {
		toSerialize["internalKeyUserActionId"] = o.InternalKeyUserActionId
	}
	if !IsNil(o.JavascriptErrorCount) {
		toSerialize["javascriptErrorCount"] = o.JavascriptErrorCount
	}
	if !IsNil(o.KeyUserAction) {
		toSerialize["keyUserAction"] = o.KeyUserAction
	}
	if !IsNil(o.LargestContentfulPaint) {
		toSerialize["largestContentfulPaint"] = o.LargestContentfulPaint
	}
	if !IsNil(o.LoadEventEnd) {
		toSerialize["loadEventEnd"] = o.LoadEventEnd
	}
	if !IsNil(o.LoadEventStart) {
		toSerialize["loadEventStart"] = o.LoadEventStart
	}
	if !IsNil(o.LongProperties) {
		toSerialize["longProperties"] = o.LongProperties
	}
	if !IsNil(o.MatchingConversionGoals) {
		toSerialize["matchingConversionGoals"] = o.MatchingConversionGoals
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NavigationStart) {
		toSerialize["navigationStart"] = o.NavigationStart
	}
	if !IsNil(o.NetworkTime) {
		toSerialize["networkTime"] = o.NetworkTime
	}
	if !IsNil(o.RequestErrorCount) {
		toSerialize["requestErrorCount"] = o.RequestErrorCount
	}
	if !IsNil(o.RequestStart) {
		toSerialize["requestStart"] = o.RequestStart
	}
	if !IsNil(o.ResponseEnd) {
		toSerialize["responseEnd"] = o.ResponseEnd
	}
	if !IsNil(o.ResponseStart) {
		toSerialize["responseStart"] = o.ResponseStart
	}
	if !IsNil(o.ServerTime) {
		toSerialize["serverTime"] = o.ServerTime
	}
	if !IsNil(o.SpeedIndex) {
		toSerialize["speedIndex"] = o.SpeedIndex
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.StringProperties) {
		toSerialize["stringProperties"] = o.StringProperties
	}
	if !IsNil(o.SyntheticEvent) {
		toSerialize["syntheticEvent"] = o.SyntheticEvent
	}
	if !IsNil(o.SyntheticEventId) {
		toSerialize["syntheticEventId"] = o.SyntheticEventId
	}
	if !IsNil(o.TargetUrl) {
		toSerialize["targetUrl"] = o.TargetUrl
	}
	if !IsNil(o.ThirdPartyBusyTime) {
		toSerialize["thirdPartyBusyTime"] = o.ThirdPartyBusyTime
	}
	if !IsNil(o.ThirdPartyResources) {
		toSerialize["thirdPartyResources"] = o.ThirdPartyResources
	}
	if !IsNil(o.TotalBlockingTime) {
		toSerialize["totalBlockingTime"] = o.TotalBlockingTime
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserActionPropertyCount) {
		toSerialize["userActionPropertyCount"] = o.UserActionPropertyCount
	}
	if !IsNil(o.VisuallyCompleteTime) {
		toSerialize["visuallyCompleteTime"] = o.VisuallyCompleteTime
	}
	return toSerialize, nil
}

type NullableUserSessionUserAction struct {
	value *UserSessionUserAction
	isSet bool
}

func (v NullableUserSessionUserAction) Get() *UserSessionUserAction {
	return v.value
}

func (v *NullableUserSessionUserAction) Set(val *UserSessionUserAction) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSessionUserAction) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSessionUserAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSessionUserAction(val *UserSessionUserAction) *NullableUserSessionUserAction {
	return &NullableUserSessionUserAction{value: val, isSet: true}
}

func (v NullableUserSessionUserAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSessionUserAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


