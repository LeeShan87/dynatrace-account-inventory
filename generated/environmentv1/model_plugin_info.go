/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the PluginInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginInfo{}

// PluginInfo OneAgent plugin.
type PluginInfo struct {
	// A list of instances of the plugin.
	Instances []PluginInstance `json:"instances,omitempty"`
	// The name of the plugin.
	PluginName *string `json:"pluginName,omitempty"`
}

// NewPluginInfo instantiates a new PluginInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginInfo() *PluginInfo {
	this := PluginInfo{}
	return &this
}

// NewPluginInfoWithDefaults instantiates a new PluginInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginInfoWithDefaults() *PluginInfo {
	this := PluginInfo{}
	return &this
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *PluginInfo) GetInstances() []PluginInstance {
	if o == nil || IsNil(o.Instances) {
		var ret []PluginInstance
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginInfo) GetInstancesOk() ([]PluginInstance, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *PluginInfo) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []PluginInstance and assigns it to the Instances field.
func (o *PluginInfo) SetInstances(v []PluginInstance) {
	o.Instances = v
}

// GetPluginName returns the PluginName field value if set, zero value otherwise.
func (o *PluginInfo) GetPluginName() string {
	if o == nil || IsNil(o.PluginName) {
		var ret string
		return ret
	}
	return *o.PluginName
}

// GetPluginNameOk returns a tuple with the PluginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginInfo) GetPluginNameOk() (*string, bool) {
	if o == nil || IsNil(o.PluginName) {
		return nil, false
	}
	return o.PluginName, true
}

// HasPluginName returns a boolean if a field has been set.
func (o *PluginInfo) HasPluginName() bool {
	if o != nil && !IsNil(o.PluginName) {
		return true
	}

	return false
}

// SetPluginName gets a reference to the given string and assigns it to the PluginName field.
func (o *PluginInfo) SetPluginName(v string) {
	o.PluginName = &v
}

func (o PluginInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.PluginName) {
		toSerialize["pluginName"] = o.PluginName
	}
	return toSerialize, nil
}

type NullablePluginInfo struct {
	value *PluginInfo
	isSet bool
}

func (v NullablePluginInfo) Get() *PluginInfo {
	return v.value
}

func (v *NullablePluginInfo) Set(val *PluginInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginInfo(val *PluginInfo) *NullablePluginInfo {
	return &NullablePluginInfo{value: val, isSet: true}
}

func (v NullablePluginInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


