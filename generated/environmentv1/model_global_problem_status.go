/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the GlobalProblemStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalProblemStatus{}

// GlobalProblemStatus The count of open problems in your environment.
type GlobalProblemStatus struct {
	OpenProblemCounts *GlobalProblemStatusOpenProblemCounts `json:"openProblemCounts,omitempty"`
	// The total number of open problems in your environment.
	TotalOpenProblemsCount *int32 `json:"totalOpenProblemsCount,omitempty"`
}

// NewGlobalProblemStatus instantiates a new GlobalProblemStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalProblemStatus() *GlobalProblemStatus {
	this := GlobalProblemStatus{}
	return &this
}

// NewGlobalProblemStatusWithDefaults instantiates a new GlobalProblemStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalProblemStatusWithDefaults() *GlobalProblemStatus {
	this := GlobalProblemStatus{}
	return &this
}

// GetOpenProblemCounts returns the OpenProblemCounts field value if set, zero value otherwise.
func (o *GlobalProblemStatus) GetOpenProblemCounts() GlobalProblemStatusOpenProblemCounts {
	if o == nil || IsNil(o.OpenProblemCounts) {
		var ret GlobalProblemStatusOpenProblemCounts
		return ret
	}
	return *o.OpenProblemCounts
}

// GetOpenProblemCountsOk returns a tuple with the OpenProblemCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProblemStatus) GetOpenProblemCountsOk() (*GlobalProblemStatusOpenProblemCounts, bool) {
	if o == nil || IsNil(o.OpenProblemCounts) {
		return nil, false
	}
	return o.OpenProblemCounts, true
}

// HasOpenProblemCounts returns a boolean if a field has been set.
func (o *GlobalProblemStatus) HasOpenProblemCounts() bool {
	if o != nil && !IsNil(o.OpenProblemCounts) {
		return true
	}

	return false
}

// SetOpenProblemCounts gets a reference to the given GlobalProblemStatusOpenProblemCounts and assigns it to the OpenProblemCounts field.
func (o *GlobalProblemStatus) SetOpenProblemCounts(v GlobalProblemStatusOpenProblemCounts) {
	o.OpenProblemCounts = &v
}

// GetTotalOpenProblemsCount returns the TotalOpenProblemsCount field value if set, zero value otherwise.
func (o *GlobalProblemStatus) GetTotalOpenProblemsCount() int32 {
	if o == nil || IsNil(o.TotalOpenProblemsCount) {
		var ret int32
		return ret
	}
	return *o.TotalOpenProblemsCount
}

// GetTotalOpenProblemsCountOk returns a tuple with the TotalOpenProblemsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProblemStatus) GetTotalOpenProblemsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalOpenProblemsCount) {
		return nil, false
	}
	return o.TotalOpenProblemsCount, true
}

// HasTotalOpenProblemsCount returns a boolean if a field has been set.
func (o *GlobalProblemStatus) HasTotalOpenProblemsCount() bool {
	if o != nil && !IsNil(o.TotalOpenProblemsCount) {
		return true
	}

	return false
}

// SetTotalOpenProblemsCount gets a reference to the given int32 and assigns it to the TotalOpenProblemsCount field.
func (o *GlobalProblemStatus) SetTotalOpenProblemsCount(v int32) {
	o.TotalOpenProblemsCount = &v
}

func (o GlobalProblemStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalProblemStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OpenProblemCounts) {
		toSerialize["openProblemCounts"] = o.OpenProblemCounts
	}
	if !IsNil(o.TotalOpenProblemsCount) {
		toSerialize["totalOpenProblemsCount"] = o.TotalOpenProblemsCount
	}
	return toSerialize, nil
}

type NullableGlobalProblemStatus struct {
	value *GlobalProblemStatus
	isSet bool
}

func (v NullableGlobalProblemStatus) Get() *GlobalProblemStatus {
	return v.value
}

func (v *NullableGlobalProblemStatus) Set(val *GlobalProblemStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalProblemStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalProblemStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalProblemStatus(val *GlobalProblemStatus) *NullableGlobalProblemStatus {
	return &NullableGlobalProblemStatus{value: val, isSet: true}
}

func (v NullableGlobalProblemStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalProblemStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


