/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv1

import (
	"encoding/json"
)

// checks if the SyntheticLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntheticLocation{}

// SyntheticLocation Configuration of a synthetic location.    **countryCode**, **regionCode**, **city** parameters are optional as they can be retrieved based on **latitude** and **longitude** of location.   The actual set of fields depends on the type of the location. Find the list of actual objects in the description of the **type** field or see [Synthetic locations API v2 - JSON models](https://dt-url.net/3n43szj).
type SyntheticLocation struct {
	// The city of the location.
	City *string `json:"city,omitempty"`
	// The country code of the location.    To fetch the list of available country codes, use the [GET all countries](https://dt-url.net/37030go) request.
	CountryCode *string `json:"countryCode,omitempty"`
	// The Dynatrace entity ID of the location.
	EntityId string `json:"entityId"`
	// The latitude of the location in `DDD.dddd` format.
	Latitude float64 `json:"latitude"`
	// The longitude of the location in `DDD.dddd` format.
	Longitude float64 `json:"longitude"`
	// The name of the location.
	Name string `json:"name"`
	// The region code of the location.    To fetch the list of available region codes, use the [GET regions of the country](https://dt-url.net/az230x0) request.
	RegionCode *string `json:"regionCode,omitempty"`
	// The status of the location:   * `ENABLED`: The location is displayed as active in the UI. You can assign monitors to the location.  * `DISABLED`: The location is displayed as inactive in the UI. You can't assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location.  * `HIDDEN`: The location is not displayed in the UI. You can't assign monitors to the location. You can only set location as `HIDDEN` when no monitor is assigned to it.
	Status *string `json:"status,omitempty"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `PUBLIC` -> PublicSyntheticLocation  * `PRIVATE` -> PrivateSyntheticLocation  * `CLUSTER` -> PrivateSyntheticLocation  
	Type string `json:"type"`
}

// NewSyntheticLocation instantiates a new SyntheticLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticLocation(entityId string, latitude float64, longitude float64, name string, type_ string) *SyntheticLocation {
	this := SyntheticLocation{}
	this.EntityId = entityId
	this.Latitude = latitude
	this.Longitude = longitude
	this.Name = name
	this.Type = type_
	return &this
}

// NewSyntheticLocationWithDefaults instantiates a new SyntheticLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticLocationWithDefaults() *SyntheticLocation {
	this := SyntheticLocation{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *SyntheticLocation) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticLocation) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *SyntheticLocation) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *SyntheticLocation) SetCity(v string) {
	o.City = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *SyntheticLocation) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticLocation) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *SyntheticLocation) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *SyntheticLocation) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetEntityId returns the EntityId field value
func (o *SyntheticLocation) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *SyntheticLocation) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *SyntheticLocation) SetEntityId(v string) {
	o.EntityId = v
}

// GetLatitude returns the Latitude field value
func (o *SyntheticLocation) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *SyntheticLocation) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *SyntheticLocation) SetLatitude(v float64) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *SyntheticLocation) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *SyntheticLocation) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *SyntheticLocation) SetLongitude(v float64) {
	o.Longitude = v
}

// GetName returns the Name field value
func (o *SyntheticLocation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SyntheticLocation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SyntheticLocation) SetName(v string) {
	o.Name = v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *SyntheticLocation) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticLocation) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *SyntheticLocation) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *SyntheticLocation) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SyntheticLocation) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticLocation) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SyntheticLocation) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SyntheticLocation) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value
func (o *SyntheticLocation) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SyntheticLocation) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SyntheticLocation) SetType(v string) {
	o.Type = v
}

func (o SyntheticLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntheticLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	toSerialize["entityId"] = o.EntityId
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	toSerialize["name"] = o.Name
	if !IsNil(o.RegionCode) {
		toSerialize["regionCode"] = o.RegionCode
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableSyntheticLocation struct {
	value *SyntheticLocation
	isSet bool
}

func (v NullableSyntheticLocation) Get() *SyntheticLocation {
	return v.value
}

func (v *NullableSyntheticLocation) Set(val *SyntheticLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticLocation(val *SyntheticLocation) *NullableSyntheticLocation {
	return &NullableSyntheticLocation{value: val, isSet: true}
}

func (v NullableSyntheticLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


