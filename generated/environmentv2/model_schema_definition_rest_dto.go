/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SchemaDefinitionRestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaDefinitionRestDto{}

// SchemaDefinitionRestDto struct for SchemaDefinitionRestDto
type SchemaDefinitionRestDto struct {
	// A list of scopes where the schema can be used.
	AllowedScopes []string `json:"allowedScopes"`
	// A list of constrains limiting the values to be accepted by the schema.
	Constraints []ComplexConstraint `json:"constraints,omitempty"`
	// Constraints limiting the values to be deleted.
	DeletionConstraints []DeletionConstraint `json:"deletionConstraints,omitempty"`
	// A short description of the schema.
	Description string `json:"description"`
	// The display name of the schema.
	DisplayName string `json:"displayName"`
	// An extended description of the schema and/or links to documentation.
	Documentation *string `json:"documentation,omitempty"`
	// The version of the data format.
	Dynatrace string `json:"dynatrace"`
	// A list of definitions of enum properties.
	Enums map[string]EnumType `json:"enums"`
	// Name of the key property in this schema.
	KeyProperty *string `json:"keyProperty,omitempty"`
	// The maximum amount of objects per scope.   Only applicable when **multiObject** is set to `true`.
	MaxObjects int32 `json:"maxObjects"`
	// Metadata of the setting.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// Multiple (`true`) objects per scope are permitted or a single (`false`) object per scope is permitted.
	MultiObject bool `json:"multiObject"`
	// If `true` the order of objects has semantic significance.   Only applicable when **multiObject** is set to `true`.
	Ordered *bool `json:"ordered,omitempty"`
	// A list of schema's properties.
	Properties map[string]PropertyDefinition `json:"properties"`
	// Constraints limiting the values as a whole to be accepted in this configuration element.
	SchemaConstraints []SchemaConstraintRestDto `json:"schemaConstraints,omitempty"`
	// Names of the groups, which the schema belongs to.
	SchemaGroups []string `json:"schemaGroups,omitempty"`
	// The ID of the schema.
	SchemaId string `json:"schemaId"`
	// Table column definitions for use in the ui.
	TableColumns *map[string]TableColumn `json:"tableColumns,omitempty"`
	// A list of definitions of types.    A type is a complex property that contains its own set of subproperties.
	Types map[string]SchemaType `json:"types"`
	UiCustomization *UiCustomization `json:"uiCustomization,omitempty"`
	// The version of the schema.
	Version string `json:"version"`
}

// NewSchemaDefinitionRestDto instantiates a new SchemaDefinitionRestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaDefinitionRestDto(allowedScopes []string, description string, displayName string, dynatrace string, enums map[string]EnumType, maxObjects int32, multiObject bool, properties map[string]PropertyDefinition, schemaId string, types map[string]SchemaType, version string) *SchemaDefinitionRestDto {
	this := SchemaDefinitionRestDto{}
	this.AllowedScopes = allowedScopes
	this.Description = description
	this.DisplayName = displayName
	this.Dynatrace = dynatrace
	this.Enums = enums
	this.MaxObjects = maxObjects
	this.MultiObject = multiObject
	this.Properties = properties
	this.SchemaId = schemaId
	this.Types = types
	this.Version = version
	return &this
}

// NewSchemaDefinitionRestDtoWithDefaults instantiates a new SchemaDefinitionRestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaDefinitionRestDtoWithDefaults() *SchemaDefinitionRestDto {
	this := SchemaDefinitionRestDto{}
	return &this
}

// GetAllowedScopes returns the AllowedScopes field value
func (o *SchemaDefinitionRestDto) GetAllowedScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedScopes
}

// GetAllowedScopesOk returns a tuple with the AllowedScopes field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetAllowedScopesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedScopes, true
}

// SetAllowedScopes sets field value
func (o *SchemaDefinitionRestDto) SetAllowedScopes(v []string) {
	o.AllowedScopes = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetConstraints() []ComplexConstraint {
	if o == nil || IsNil(o.Constraints) {
		var ret []ComplexConstraint
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetConstraintsOk() ([]ComplexConstraint, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []ComplexConstraint and assigns it to the Constraints field.
func (o *SchemaDefinitionRestDto) SetConstraints(v []ComplexConstraint) {
	o.Constraints = v
}

// GetDeletionConstraints returns the DeletionConstraints field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetDeletionConstraints() []DeletionConstraint {
	if o == nil || IsNil(o.DeletionConstraints) {
		var ret []DeletionConstraint
		return ret
	}
	return o.DeletionConstraints
}

// GetDeletionConstraintsOk returns a tuple with the DeletionConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetDeletionConstraintsOk() ([]DeletionConstraint, bool) {
	if o == nil || IsNil(o.DeletionConstraints) {
		return nil, false
	}
	return o.DeletionConstraints, true
}

// HasDeletionConstraints returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasDeletionConstraints() bool {
	if o != nil && !IsNil(o.DeletionConstraints) {
		return true
	}

	return false
}

// SetDeletionConstraints gets a reference to the given []DeletionConstraint and assigns it to the DeletionConstraints field.
func (o *SchemaDefinitionRestDto) SetDeletionConstraints(v []DeletionConstraint) {
	o.DeletionConstraints = v
}

// GetDescription returns the Description field value
func (o *SchemaDefinitionRestDto) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SchemaDefinitionRestDto) SetDescription(v string) {
	o.Description = v
}

// GetDisplayName returns the DisplayName field value
func (o *SchemaDefinitionRestDto) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *SchemaDefinitionRestDto) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *SchemaDefinitionRestDto) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetDynatrace returns the Dynatrace field value
func (o *SchemaDefinitionRestDto) GetDynatrace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dynatrace
}

// GetDynatraceOk returns a tuple with the Dynatrace field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetDynatraceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dynatrace, true
}

// SetDynatrace sets field value
func (o *SchemaDefinitionRestDto) SetDynatrace(v string) {
	o.Dynatrace = v
}

// GetEnums returns the Enums field value
func (o *SchemaDefinitionRestDto) GetEnums() map[string]EnumType {
	if o == nil {
		var ret map[string]EnumType
		return ret
	}

	return o.Enums
}

// GetEnumsOk returns a tuple with the Enums field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetEnumsOk() (*map[string]EnumType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enums, true
}

// SetEnums sets field value
func (o *SchemaDefinitionRestDto) SetEnums(v map[string]EnumType) {
	o.Enums = v
}

// GetKeyProperty returns the KeyProperty field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetKeyProperty() string {
	if o == nil || IsNil(o.KeyProperty) {
		var ret string
		return ret
	}
	return *o.KeyProperty
}

// GetKeyPropertyOk returns a tuple with the KeyProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetKeyPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.KeyProperty) {
		return nil, false
	}
	return o.KeyProperty, true
}

// HasKeyProperty returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasKeyProperty() bool {
	if o != nil && !IsNil(o.KeyProperty) {
		return true
	}

	return false
}

// SetKeyProperty gets a reference to the given string and assigns it to the KeyProperty field.
func (o *SchemaDefinitionRestDto) SetKeyProperty(v string) {
	o.KeyProperty = &v
}

// GetMaxObjects returns the MaxObjects field value
func (o *SchemaDefinitionRestDto) GetMaxObjects() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxObjects
}

// GetMaxObjectsOk returns a tuple with the MaxObjects field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetMaxObjectsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxObjects, true
}

// SetMaxObjects sets field value
func (o *SchemaDefinitionRestDto) SetMaxObjects(v int32) {
	o.MaxObjects = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *SchemaDefinitionRestDto) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetMultiObject returns the MultiObject field value
func (o *SchemaDefinitionRestDto) GetMultiObject() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MultiObject
}

// GetMultiObjectOk returns a tuple with the MultiObject field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetMultiObjectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MultiObject, true
}

// SetMultiObject sets field value
func (o *SchemaDefinitionRestDto) SetMultiObject(v bool) {
	o.MultiObject = v
}

// GetOrdered returns the Ordered field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetOrdered() bool {
	if o == nil || IsNil(o.Ordered) {
		var ret bool
		return ret
	}
	return *o.Ordered
}

// GetOrderedOk returns a tuple with the Ordered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetOrderedOk() (*bool, bool) {
	if o == nil || IsNil(o.Ordered) {
		return nil, false
	}
	return o.Ordered, true
}

// HasOrdered returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasOrdered() bool {
	if o != nil && !IsNil(o.Ordered) {
		return true
	}

	return false
}

// SetOrdered gets a reference to the given bool and assigns it to the Ordered field.
func (o *SchemaDefinitionRestDto) SetOrdered(v bool) {
	o.Ordered = &v
}

// GetProperties returns the Properties field value
func (o *SchemaDefinitionRestDto) GetProperties() map[string]PropertyDefinition {
	if o == nil {
		var ret map[string]PropertyDefinition
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetPropertiesOk() (*map[string]PropertyDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *SchemaDefinitionRestDto) SetProperties(v map[string]PropertyDefinition) {
	o.Properties = v
}

// GetSchemaConstraints returns the SchemaConstraints field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetSchemaConstraints() []SchemaConstraintRestDto {
	if o == nil || IsNil(o.SchemaConstraints) {
		var ret []SchemaConstraintRestDto
		return ret
	}
	return o.SchemaConstraints
}

// GetSchemaConstraintsOk returns a tuple with the SchemaConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetSchemaConstraintsOk() ([]SchemaConstraintRestDto, bool) {
	if o == nil || IsNil(o.SchemaConstraints) {
		return nil, false
	}
	return o.SchemaConstraints, true
}

// HasSchemaConstraints returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasSchemaConstraints() bool {
	if o != nil && !IsNil(o.SchemaConstraints) {
		return true
	}

	return false
}

// SetSchemaConstraints gets a reference to the given []SchemaConstraintRestDto and assigns it to the SchemaConstraints field.
func (o *SchemaDefinitionRestDto) SetSchemaConstraints(v []SchemaConstraintRestDto) {
	o.SchemaConstraints = v
}

// GetSchemaGroups returns the SchemaGroups field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetSchemaGroups() []string {
	if o == nil || IsNil(o.SchemaGroups) {
		var ret []string
		return ret
	}
	return o.SchemaGroups
}

// GetSchemaGroupsOk returns a tuple with the SchemaGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetSchemaGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.SchemaGroups) {
		return nil, false
	}
	return o.SchemaGroups, true
}

// HasSchemaGroups returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasSchemaGroups() bool {
	if o != nil && !IsNil(o.SchemaGroups) {
		return true
	}

	return false
}

// SetSchemaGroups gets a reference to the given []string and assigns it to the SchemaGroups field.
func (o *SchemaDefinitionRestDto) SetSchemaGroups(v []string) {
	o.SchemaGroups = v
}

// GetSchemaId returns the SchemaId field value
func (o *SchemaDefinitionRestDto) GetSchemaId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetSchemaIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaId, true
}

// SetSchemaId sets field value
func (o *SchemaDefinitionRestDto) SetSchemaId(v string) {
	o.SchemaId = v
}

// GetTableColumns returns the TableColumns field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetTableColumns() map[string]TableColumn {
	if o == nil || IsNil(o.TableColumns) {
		var ret map[string]TableColumn
		return ret
	}
	return *o.TableColumns
}

// GetTableColumnsOk returns a tuple with the TableColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetTableColumnsOk() (*map[string]TableColumn, bool) {
	if o == nil || IsNil(o.TableColumns) {
		return nil, false
	}
	return o.TableColumns, true
}

// HasTableColumns returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasTableColumns() bool {
	if o != nil && !IsNil(o.TableColumns) {
		return true
	}

	return false
}

// SetTableColumns gets a reference to the given map[string]TableColumn and assigns it to the TableColumns field.
func (o *SchemaDefinitionRestDto) SetTableColumns(v map[string]TableColumn) {
	o.TableColumns = &v
}

// GetTypes returns the Types field value
func (o *SchemaDefinitionRestDto) GetTypes() map[string]SchemaType {
	if o == nil {
		var ret map[string]SchemaType
		return ret
	}

	return o.Types
}

// GetTypesOk returns a tuple with the Types field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetTypesOk() (*map[string]SchemaType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Types, true
}

// SetTypes sets field value
func (o *SchemaDefinitionRestDto) SetTypes(v map[string]SchemaType) {
	o.Types = v
}

// GetUiCustomization returns the UiCustomization field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetUiCustomization() UiCustomization {
	if o == nil || IsNil(o.UiCustomization) {
		var ret UiCustomization
		return ret
	}
	return *o.UiCustomization
}

// GetUiCustomizationOk returns a tuple with the UiCustomization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetUiCustomizationOk() (*UiCustomization, bool) {
	if o == nil || IsNil(o.UiCustomization) {
		return nil, false
	}
	return o.UiCustomization, true
}

// HasUiCustomization returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasUiCustomization() bool {
	if o != nil && !IsNil(o.UiCustomization) {
		return true
	}

	return false
}

// SetUiCustomization gets a reference to the given UiCustomization and assigns it to the UiCustomization field.
func (o *SchemaDefinitionRestDto) SetUiCustomization(v UiCustomization) {
	o.UiCustomization = &v
}

// GetVersion returns the Version field value
func (o *SchemaDefinitionRestDto) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *SchemaDefinitionRestDto) SetVersion(v string) {
	o.Version = v
}

func (o SchemaDefinitionRestDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaDefinitionRestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowedScopes"] = o.AllowedScopes
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.DeletionConstraints) {
		toSerialize["deletionConstraints"] = o.DeletionConstraints
	}
	toSerialize["description"] = o.Description
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	toSerialize["dynatrace"] = o.Dynatrace
	toSerialize["enums"] = o.Enums
	if !IsNil(o.KeyProperty) {
		toSerialize["keyProperty"] = o.KeyProperty
	}
	toSerialize["maxObjects"] = o.MaxObjects
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["multiObject"] = o.MultiObject
	if !IsNil(o.Ordered) {
		toSerialize["ordered"] = o.Ordered
	}
	toSerialize["properties"] = o.Properties
	if !IsNil(o.SchemaConstraints) {
		toSerialize["schemaConstraints"] = o.SchemaConstraints
	}
	if !IsNil(o.SchemaGroups) {
		toSerialize["schemaGroups"] = o.SchemaGroups
	}
	toSerialize["schemaId"] = o.SchemaId
	if !IsNil(o.TableColumns) {
		toSerialize["tableColumns"] = o.TableColumns
	}
	toSerialize["types"] = o.Types
	if !IsNil(o.UiCustomization) {
		toSerialize["uiCustomization"] = o.UiCustomization
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableSchemaDefinitionRestDto struct {
	value *SchemaDefinitionRestDto
	isSet bool
}

func (v NullableSchemaDefinitionRestDto) Get() *SchemaDefinitionRestDto {
	return v.value
}

func (v *NullableSchemaDefinitionRestDto) Set(val *SchemaDefinitionRestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDefinitionRestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDefinitionRestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDefinitionRestDto(val *SchemaDefinitionRestDto) *NullableSchemaDefinitionRestDto {
	return &NullableSchemaDefinitionRestDto{value: val, isSet: true}
}

func (v NullableSchemaDefinitionRestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDefinitionRestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


