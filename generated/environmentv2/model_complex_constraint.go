/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ComplexConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComplexConstraint{}

// ComplexConstraint A constraint on the values accepted for a complex settings property.
type ComplexConstraint struct {
	// Defines if modification of any property triggers secret resubmission check.
	CheckAllProperties *bool `json:"checkAllProperties,omitempty"`
	// A custom message for invalid values.
	CustomMessage *string `json:"customMessage,omitempty"`
	// The ID of a custom validator.
	CustomValidatorId *string `json:"customValidatorId,omitempty"`
	// The maximum number of properties that can be set.
	MaximumPropertyCount *int32 `json:"maximumPropertyCount,omitempty"`
	// The minimum number of properties that must be set.
	MinimumPropertyCount *int32 `json:"minimumPropertyCount,omitempty"`
	// A list of properties (defined by IDs) that are used to check the constraint.
	Properties []string `json:"properties,omitempty"`
	// The type of the constraint.
	Type string `json:"type"`
}

// NewComplexConstraint instantiates a new ComplexConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComplexConstraint(type_ string) *ComplexConstraint {
	this := ComplexConstraint{}
	this.Type = type_
	return &this
}

// NewComplexConstraintWithDefaults instantiates a new ComplexConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComplexConstraintWithDefaults() *ComplexConstraint {
	this := ComplexConstraint{}
	return &this
}

// GetCheckAllProperties returns the CheckAllProperties field value if set, zero value otherwise.
func (o *ComplexConstraint) GetCheckAllProperties() bool {
	if o == nil || IsNil(o.CheckAllProperties) {
		var ret bool
		return ret
	}
	return *o.CheckAllProperties
}

// GetCheckAllPropertiesOk returns a tuple with the CheckAllProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexConstraint) GetCheckAllPropertiesOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckAllProperties) {
		return nil, false
	}
	return o.CheckAllProperties, true
}

// HasCheckAllProperties returns a boolean if a field has been set.
func (o *ComplexConstraint) HasCheckAllProperties() bool {
	if o != nil && !IsNil(o.CheckAllProperties) {
		return true
	}

	return false
}

// SetCheckAllProperties gets a reference to the given bool and assigns it to the CheckAllProperties field.
func (o *ComplexConstraint) SetCheckAllProperties(v bool) {
	o.CheckAllProperties = &v
}

// GetCustomMessage returns the CustomMessage field value if set, zero value otherwise.
func (o *ComplexConstraint) GetCustomMessage() string {
	if o == nil || IsNil(o.CustomMessage) {
		var ret string
		return ret
	}
	return *o.CustomMessage
}

// GetCustomMessageOk returns a tuple with the CustomMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexConstraint) GetCustomMessageOk() (*string, bool) {
	if o == nil || IsNil(o.CustomMessage) {
		return nil, false
	}
	return o.CustomMessage, true
}

// HasCustomMessage returns a boolean if a field has been set.
func (o *ComplexConstraint) HasCustomMessage() bool {
	if o != nil && !IsNil(o.CustomMessage) {
		return true
	}

	return false
}

// SetCustomMessage gets a reference to the given string and assigns it to the CustomMessage field.
func (o *ComplexConstraint) SetCustomMessage(v string) {
	o.CustomMessage = &v
}

// GetCustomValidatorId returns the CustomValidatorId field value if set, zero value otherwise.
func (o *ComplexConstraint) GetCustomValidatorId() string {
	if o == nil || IsNil(o.CustomValidatorId) {
		var ret string
		return ret
	}
	return *o.CustomValidatorId
}

// GetCustomValidatorIdOk returns a tuple with the CustomValidatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexConstraint) GetCustomValidatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomValidatorId) {
		return nil, false
	}
	return o.CustomValidatorId, true
}

// HasCustomValidatorId returns a boolean if a field has been set.
func (o *ComplexConstraint) HasCustomValidatorId() bool {
	if o != nil && !IsNil(o.CustomValidatorId) {
		return true
	}

	return false
}

// SetCustomValidatorId gets a reference to the given string and assigns it to the CustomValidatorId field.
func (o *ComplexConstraint) SetCustomValidatorId(v string) {
	o.CustomValidatorId = &v
}

// GetMaximumPropertyCount returns the MaximumPropertyCount field value if set, zero value otherwise.
func (o *ComplexConstraint) GetMaximumPropertyCount() int32 {
	if o == nil || IsNil(o.MaximumPropertyCount) {
		var ret int32
		return ret
	}
	return *o.MaximumPropertyCount
}

// GetMaximumPropertyCountOk returns a tuple with the MaximumPropertyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexConstraint) GetMaximumPropertyCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumPropertyCount) {
		return nil, false
	}
	return o.MaximumPropertyCount, true
}

// HasMaximumPropertyCount returns a boolean if a field has been set.
func (o *ComplexConstraint) HasMaximumPropertyCount() bool {
	if o != nil && !IsNil(o.MaximumPropertyCount) {
		return true
	}

	return false
}

// SetMaximumPropertyCount gets a reference to the given int32 and assigns it to the MaximumPropertyCount field.
func (o *ComplexConstraint) SetMaximumPropertyCount(v int32) {
	o.MaximumPropertyCount = &v
}

// GetMinimumPropertyCount returns the MinimumPropertyCount field value if set, zero value otherwise.
func (o *ComplexConstraint) GetMinimumPropertyCount() int32 {
	if o == nil || IsNil(o.MinimumPropertyCount) {
		var ret int32
		return ret
	}
	return *o.MinimumPropertyCount
}

// GetMinimumPropertyCountOk returns a tuple with the MinimumPropertyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexConstraint) GetMinimumPropertyCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumPropertyCount) {
		return nil, false
	}
	return o.MinimumPropertyCount, true
}

// HasMinimumPropertyCount returns a boolean if a field has been set.
func (o *ComplexConstraint) HasMinimumPropertyCount() bool {
	if o != nil && !IsNil(o.MinimumPropertyCount) {
		return true
	}

	return false
}

// SetMinimumPropertyCount gets a reference to the given int32 and assigns it to the MinimumPropertyCount field.
func (o *ComplexConstraint) SetMinimumPropertyCount(v int32) {
	o.MinimumPropertyCount = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ComplexConstraint) GetProperties() []string {
	if o == nil || IsNil(o.Properties) {
		var ret []string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexConstraint) GetPropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ComplexConstraint) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []string and assigns it to the Properties field.
func (o *ComplexConstraint) SetProperties(v []string) {
	o.Properties = v
}

// GetType returns the Type field value
func (o *ComplexConstraint) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ComplexConstraint) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ComplexConstraint) SetType(v string) {
	o.Type = v
}

func (o ComplexConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComplexConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckAllProperties) {
		toSerialize["checkAllProperties"] = o.CheckAllProperties
	}
	if !IsNil(o.CustomMessage) {
		toSerialize["customMessage"] = o.CustomMessage
	}
	if !IsNil(o.CustomValidatorId) {
		toSerialize["customValidatorId"] = o.CustomValidatorId
	}
	if !IsNil(o.MaximumPropertyCount) {
		toSerialize["maximumPropertyCount"] = o.MaximumPropertyCount
	}
	if !IsNil(o.MinimumPropertyCount) {
		toSerialize["minimumPropertyCount"] = o.MinimumPropertyCount
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableComplexConstraint struct {
	value *ComplexConstraint
	isSet bool
}

func (v NullableComplexConstraint) Get() *ComplexConstraint {
	return v.value
}

func (v *NullableComplexConstraint) Set(val *ComplexConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableComplexConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableComplexConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComplexConstraint(val *ComplexConstraint) *NullableComplexConstraint {
	return &NullableComplexConstraint{value: val, isSet: true}
}

func (v NullableComplexConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComplexConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


