/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
	"fmt"
)

// CreateMonitoringConfiguration207ResponseInner struct for CreateMonitoringConfiguration207ResponseInner
type CreateMonitoringConfiguration207ResponseInner struct {
	ErrorEnvelope *ErrorEnvelope
	MonitoringConfigurationResponse *MonitoringConfigurationResponse
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CreateMonitoringConfiguration207ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ErrorEnvelope
	err = json.Unmarshal(data, &dst.ErrorEnvelope);
	if err == nil {
		jsonErrorEnvelope, _ := json.Marshal(dst.ErrorEnvelope)
		if string(jsonErrorEnvelope) == "{}" { // empty struct
			dst.ErrorEnvelope = nil
		} else {
			return nil // data stored in dst.ErrorEnvelope, return on the first match
		}
	} else {
		dst.ErrorEnvelope = nil
	}

	// try to unmarshal JSON data into MonitoringConfigurationResponse
	err = json.Unmarshal(data, &dst.MonitoringConfigurationResponse);
	if err == nil {
		jsonMonitoringConfigurationResponse, _ := json.Marshal(dst.MonitoringConfigurationResponse)
		if string(jsonMonitoringConfigurationResponse) == "{}" { // empty struct
			dst.MonitoringConfigurationResponse = nil
		} else {
			return nil // data stored in dst.MonitoringConfigurationResponse, return on the first match
		}
	} else {
		dst.MonitoringConfigurationResponse = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CreateMonitoringConfiguration207ResponseInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CreateMonitoringConfiguration207ResponseInner) MarshalJSON() ([]byte, error) {
	if src.ErrorEnvelope != nil {
		return json.Marshal(&src.ErrorEnvelope)
	}

	if src.MonitoringConfigurationResponse != nil {
		return json.Marshal(&src.MonitoringConfigurationResponse)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCreateMonitoringConfiguration207ResponseInner struct {
	value *CreateMonitoringConfiguration207ResponseInner
	isSet bool
}

func (v NullableCreateMonitoringConfiguration207ResponseInner) Get() *CreateMonitoringConfiguration207ResponseInner {
	return v.value
}

func (v *NullableCreateMonitoringConfiguration207ResponseInner) Set(val *CreateMonitoringConfiguration207ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMonitoringConfiguration207ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMonitoringConfiguration207ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMonitoringConfiguration207ResponseInner(val *CreateMonitoringConfiguration207ResponseInner) *NullableCreateMonitoringConfiguration207ResponseInner {
	return &NullableCreateMonitoringConfiguration207ResponseInner{value: val, isSet: true}
}

func (v NullableCreateMonitoringConfiguration207ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMonitoringConfiguration207ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


