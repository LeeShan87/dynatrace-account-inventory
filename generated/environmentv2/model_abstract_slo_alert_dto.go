/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the AbstractSloAlertDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractSloAlertDto{}

// AbstractSloAlertDto struct for AbstractSloAlertDto
type AbstractSloAlertDto struct {
	// Name of the alert.
	AlertName string `json:"alertName"`
	// Threshold of the alert. Status alerts trigger if they fall below this value, burn rate alerts trigger if they exceed the value.
	AlertThreshold float64 `json:"alertThreshold"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `BURN_RATE` -> BurnRateAlert  * `STATUS` -> StatusAlert  
	AlertType string `json:"alertType"`
}

// NewAbstractSloAlertDto instantiates a new AbstractSloAlertDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractSloAlertDto(alertName string, alertThreshold float64, alertType string) *AbstractSloAlertDto {
	this := AbstractSloAlertDto{}
	this.AlertName = alertName
	this.AlertThreshold = alertThreshold
	this.AlertType = alertType
	return &this
}

// NewAbstractSloAlertDtoWithDefaults instantiates a new AbstractSloAlertDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractSloAlertDtoWithDefaults() *AbstractSloAlertDto {
	this := AbstractSloAlertDto{}
	return &this
}

// GetAlertName returns the AlertName field value
func (o *AbstractSloAlertDto) GetAlertName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlertName
}

// GetAlertNameOk returns a tuple with the AlertName field value
// and a boolean to check if the value has been set.
func (o *AbstractSloAlertDto) GetAlertNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertName, true
}

// SetAlertName sets field value
func (o *AbstractSloAlertDto) SetAlertName(v string) {
	o.AlertName = v
}

// GetAlertThreshold returns the AlertThreshold field value
func (o *AbstractSloAlertDto) GetAlertThreshold() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AlertThreshold
}

// GetAlertThresholdOk returns a tuple with the AlertThreshold field value
// and a boolean to check if the value has been set.
func (o *AbstractSloAlertDto) GetAlertThresholdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertThreshold, true
}

// SetAlertThreshold sets field value
func (o *AbstractSloAlertDto) SetAlertThreshold(v float64) {
	o.AlertThreshold = v
}

// GetAlertType returns the AlertType field value
func (o *AbstractSloAlertDto) GetAlertType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value
// and a boolean to check if the value has been set.
func (o *AbstractSloAlertDto) GetAlertTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertType, true
}

// SetAlertType sets field value
func (o *AbstractSloAlertDto) SetAlertType(v string) {
	o.AlertType = v
}

func (o AbstractSloAlertDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractSloAlertDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alertName"] = o.AlertName
	toSerialize["alertThreshold"] = o.AlertThreshold
	toSerialize["alertType"] = o.AlertType
	return toSerialize, nil
}

type NullableAbstractSloAlertDto struct {
	value *AbstractSloAlertDto
	isSet bool
}

func (v NullableAbstractSloAlertDto) Get() *AbstractSloAlertDto {
	return v.value
}

func (v *NullableAbstractSloAlertDto) Set(val *AbstractSloAlertDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractSloAlertDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractSloAlertDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractSloAlertDto(val *AbstractSloAlertDto) *NullableAbstractSloAlertDto {
	return &NullableAbstractSloAlertDto{value: val, isSet: true}
}

func (v NullableAbstractSloAlertDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractSloAlertDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


