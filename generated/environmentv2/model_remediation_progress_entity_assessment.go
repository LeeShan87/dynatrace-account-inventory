/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RemediationProgressEntityAssessment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemediationProgressEntityAssessment{}

// RemediationProgressEntityAssessment Assessment of the remediation progress entity.
type RemediationProgressEntityAssessment struct {
	// The usage of vulnerable functions
	VulnerableFunctionUsage *string `json:"vulnerableFunctionUsage,omitempty"`
	// A list of vulnerable functions that are in use.
	VulnerableFunctionsInUse []VulnerableFunction `json:"vulnerableFunctionsInUse,omitempty"`
	// A list of vulnerable functions that are not available.
	VulnerableFunctionsNotAvailable []VulnerableFunction `json:"vulnerableFunctionsNotAvailable,omitempty"`
	// A list of vulnerable functions that are not in use.
	VulnerableFunctionsNotInUse []VulnerableFunction `json:"vulnerableFunctionsNotInUse,omitempty"`
}

// NewRemediationProgressEntityAssessment instantiates a new RemediationProgressEntityAssessment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemediationProgressEntityAssessment() *RemediationProgressEntityAssessment {
	this := RemediationProgressEntityAssessment{}
	return &this
}

// NewRemediationProgressEntityAssessmentWithDefaults instantiates a new RemediationProgressEntityAssessment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemediationProgressEntityAssessmentWithDefaults() *RemediationProgressEntityAssessment {
	this := RemediationProgressEntityAssessment{}
	return &this
}

// GetVulnerableFunctionUsage returns the VulnerableFunctionUsage field value if set, zero value otherwise.
func (o *RemediationProgressEntityAssessment) GetVulnerableFunctionUsage() string {
	if o == nil || IsNil(o.VulnerableFunctionUsage) {
		var ret string
		return ret
	}
	return *o.VulnerableFunctionUsage
}

// GetVulnerableFunctionUsageOk returns a tuple with the VulnerableFunctionUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationProgressEntityAssessment) GetVulnerableFunctionUsageOk() (*string, bool) {
	if o == nil || IsNil(o.VulnerableFunctionUsage) {
		return nil, false
	}
	return o.VulnerableFunctionUsage, true
}

// HasVulnerableFunctionUsage returns a boolean if a field has been set.
func (o *RemediationProgressEntityAssessment) HasVulnerableFunctionUsage() bool {
	if o != nil && !IsNil(o.VulnerableFunctionUsage) {
		return true
	}

	return false
}

// SetVulnerableFunctionUsage gets a reference to the given string and assigns it to the VulnerableFunctionUsage field.
func (o *RemediationProgressEntityAssessment) SetVulnerableFunctionUsage(v string) {
	o.VulnerableFunctionUsage = &v
}

// GetVulnerableFunctionsInUse returns the VulnerableFunctionsInUse field value if set, zero value otherwise.
func (o *RemediationProgressEntityAssessment) GetVulnerableFunctionsInUse() []VulnerableFunction {
	if o == nil || IsNil(o.VulnerableFunctionsInUse) {
		var ret []VulnerableFunction
		return ret
	}
	return o.VulnerableFunctionsInUse
}

// GetVulnerableFunctionsInUseOk returns a tuple with the VulnerableFunctionsInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationProgressEntityAssessment) GetVulnerableFunctionsInUseOk() ([]VulnerableFunction, bool) {
	if o == nil || IsNil(o.VulnerableFunctionsInUse) {
		return nil, false
	}
	return o.VulnerableFunctionsInUse, true
}

// HasVulnerableFunctionsInUse returns a boolean if a field has been set.
func (o *RemediationProgressEntityAssessment) HasVulnerableFunctionsInUse() bool {
	if o != nil && !IsNil(o.VulnerableFunctionsInUse) {
		return true
	}

	return false
}

// SetVulnerableFunctionsInUse gets a reference to the given []VulnerableFunction and assigns it to the VulnerableFunctionsInUse field.
func (o *RemediationProgressEntityAssessment) SetVulnerableFunctionsInUse(v []VulnerableFunction) {
	o.VulnerableFunctionsInUse = v
}

// GetVulnerableFunctionsNotAvailable returns the VulnerableFunctionsNotAvailable field value if set, zero value otherwise.
func (o *RemediationProgressEntityAssessment) GetVulnerableFunctionsNotAvailable() []VulnerableFunction {
	if o == nil || IsNil(o.VulnerableFunctionsNotAvailable) {
		var ret []VulnerableFunction
		return ret
	}
	return o.VulnerableFunctionsNotAvailable
}

// GetVulnerableFunctionsNotAvailableOk returns a tuple with the VulnerableFunctionsNotAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationProgressEntityAssessment) GetVulnerableFunctionsNotAvailableOk() ([]VulnerableFunction, bool) {
	if o == nil || IsNil(o.VulnerableFunctionsNotAvailable) {
		return nil, false
	}
	return o.VulnerableFunctionsNotAvailable, true
}

// HasVulnerableFunctionsNotAvailable returns a boolean if a field has been set.
func (o *RemediationProgressEntityAssessment) HasVulnerableFunctionsNotAvailable() bool {
	if o != nil && !IsNil(o.VulnerableFunctionsNotAvailable) {
		return true
	}

	return false
}

// SetVulnerableFunctionsNotAvailable gets a reference to the given []VulnerableFunction and assigns it to the VulnerableFunctionsNotAvailable field.
func (o *RemediationProgressEntityAssessment) SetVulnerableFunctionsNotAvailable(v []VulnerableFunction) {
	o.VulnerableFunctionsNotAvailable = v
}

// GetVulnerableFunctionsNotInUse returns the VulnerableFunctionsNotInUse field value if set, zero value otherwise.
func (o *RemediationProgressEntityAssessment) GetVulnerableFunctionsNotInUse() []VulnerableFunction {
	if o == nil || IsNil(o.VulnerableFunctionsNotInUse) {
		var ret []VulnerableFunction
		return ret
	}
	return o.VulnerableFunctionsNotInUse
}

// GetVulnerableFunctionsNotInUseOk returns a tuple with the VulnerableFunctionsNotInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationProgressEntityAssessment) GetVulnerableFunctionsNotInUseOk() ([]VulnerableFunction, bool) {
	if o == nil || IsNil(o.VulnerableFunctionsNotInUse) {
		return nil, false
	}
	return o.VulnerableFunctionsNotInUse, true
}

// HasVulnerableFunctionsNotInUse returns a boolean if a field has been set.
func (o *RemediationProgressEntityAssessment) HasVulnerableFunctionsNotInUse() bool {
	if o != nil && !IsNil(o.VulnerableFunctionsNotInUse) {
		return true
	}

	return false
}

// SetVulnerableFunctionsNotInUse gets a reference to the given []VulnerableFunction and assigns it to the VulnerableFunctionsNotInUse field.
func (o *RemediationProgressEntityAssessment) SetVulnerableFunctionsNotInUse(v []VulnerableFunction) {
	o.VulnerableFunctionsNotInUse = v
}

func (o RemediationProgressEntityAssessment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemediationProgressEntityAssessment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VulnerableFunctionUsage) {
		toSerialize["vulnerableFunctionUsage"] = o.VulnerableFunctionUsage
	}
	if !IsNil(o.VulnerableFunctionsInUse) {
		toSerialize["vulnerableFunctionsInUse"] = o.VulnerableFunctionsInUse
	}
	if !IsNil(o.VulnerableFunctionsNotAvailable) {
		toSerialize["vulnerableFunctionsNotAvailable"] = o.VulnerableFunctionsNotAvailable
	}
	if !IsNil(o.VulnerableFunctionsNotInUse) {
		toSerialize["vulnerableFunctionsNotInUse"] = o.VulnerableFunctionsNotInUse
	}
	return toSerialize, nil
}

type NullableRemediationProgressEntityAssessment struct {
	value *RemediationProgressEntityAssessment
	isSet bool
}

func (v NullableRemediationProgressEntityAssessment) Get() *RemediationProgressEntityAssessment {
	return v.value
}

func (v *NullableRemediationProgressEntityAssessment) Set(val *RemediationProgressEntityAssessment) {
	v.value = val
	v.isSet = true
}

func (v NullableRemediationProgressEntityAssessment) IsSet() bool {
	return v.isSet
}

func (v *NullableRemediationProgressEntityAssessment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemediationProgressEntityAssessment(val *RemediationProgressEntityAssessment) *NullableRemediationProgressEntityAssessment {
	return &NullableRemediationProgressEntityAssessment{value: val, isSet: true}
}

func (v NullableRemediationProgressEntityAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemediationProgressEntityAssessment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


