/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the CountryWithRegionsWithCities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryWithRegionsWithCities{}

// CountryWithRegionsWithCities Information about a country.
type CountryWithRegionsWithCities struct {
	// The ISO code of the country.
	CountryCode *string `json:"countryCode,omitempty"`
	// The name of the country.
	CountryName *string `json:"countryName,omitempty"`
	// The number of regions in the country.
	RegionCount *int32 `json:"regionCount,omitempty"`
	// The list of regions in the country.
	Regions []RegionWithCities `json:"regions,omitempty"`
}

// NewCountryWithRegionsWithCities instantiates a new CountryWithRegionsWithCities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryWithRegionsWithCities() *CountryWithRegionsWithCities {
	this := CountryWithRegionsWithCities{}
	return &this
}

// NewCountryWithRegionsWithCitiesWithDefaults instantiates a new CountryWithRegionsWithCities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryWithRegionsWithCitiesWithDefaults() *CountryWithRegionsWithCities {
	this := CountryWithRegionsWithCities{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *CountryWithRegionsWithCities) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryWithRegionsWithCities) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *CountryWithRegionsWithCities) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *CountryWithRegionsWithCities) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *CountryWithRegionsWithCities) GetCountryName() string {
	if o == nil || IsNil(o.CountryName) {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryWithRegionsWithCities) GetCountryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CountryName) {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *CountryWithRegionsWithCities) HasCountryName() bool {
	if o != nil && !IsNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *CountryWithRegionsWithCities) SetCountryName(v string) {
	o.CountryName = &v
}

// GetRegionCount returns the RegionCount field value if set, zero value otherwise.
func (o *CountryWithRegionsWithCities) GetRegionCount() int32 {
	if o == nil || IsNil(o.RegionCount) {
		var ret int32
		return ret
	}
	return *o.RegionCount
}

// GetRegionCountOk returns a tuple with the RegionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryWithRegionsWithCities) GetRegionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RegionCount) {
		return nil, false
	}
	return o.RegionCount, true
}

// HasRegionCount returns a boolean if a field has been set.
func (o *CountryWithRegionsWithCities) HasRegionCount() bool {
	if o != nil && !IsNil(o.RegionCount) {
		return true
	}

	return false
}

// SetRegionCount gets a reference to the given int32 and assigns it to the RegionCount field.
func (o *CountryWithRegionsWithCities) SetRegionCount(v int32) {
	o.RegionCount = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *CountryWithRegionsWithCities) GetRegions() []RegionWithCities {
	if o == nil || IsNil(o.Regions) {
		var ret []RegionWithCities
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryWithRegionsWithCities) GetRegionsOk() ([]RegionWithCities, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *CountryWithRegionsWithCities) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []RegionWithCities and assigns it to the Regions field.
func (o *CountryWithRegionsWithCities) SetRegions(v []RegionWithCities) {
	o.Regions = v
}

func (o CountryWithRegionsWithCities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryWithRegionsWithCities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.CountryName) {
		toSerialize["countryName"] = o.CountryName
	}
	if !IsNil(o.RegionCount) {
		toSerialize["regionCount"] = o.RegionCount
	}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	return toSerialize, nil
}

type NullableCountryWithRegionsWithCities struct {
	value *CountryWithRegionsWithCities
	isSet bool
}

func (v NullableCountryWithRegionsWithCities) Get() *CountryWithRegionsWithCities {
	return v.value
}

func (v *NullableCountryWithRegionsWithCities) Set(val *CountryWithRegionsWithCities) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryWithRegionsWithCities) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryWithRegionsWithCities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryWithRegionsWithCities(val *CountryWithRegionsWithCities) *NullableCountryWithRegionsWithCities {
	return &NullableCountryWithRegionsWithCities{value: val, isSet: true}
}

func (v NullableCountryWithRegionsWithCities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryWithRegionsWithCities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


