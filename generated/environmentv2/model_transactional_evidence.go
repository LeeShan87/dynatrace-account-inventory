/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the TransactionalEvidence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionalEvidence{}

// TransactionalEvidence The transactional evidence of the problem.   A behavior of a metric in an transaction that indicates the problem and/or is its root cause.
type TransactionalEvidence struct {
	// The end time of the evidence, in UTC milliseconds
	EndTime int64 `json:"endTime"`
	// The unit of the metric.
	Unit string `json:"unit"`
	// The metric's value after the problem start.
	ValueAfterChangePoint float32 `json:"valueAfterChangePoint"`
	// The metric's value before the problem start.
	ValueBeforeChangePoint float32 `json:"valueBeforeChangePoint"`
}

// NewTransactionalEvidence instantiates a new TransactionalEvidence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionalEvidence(endTime int64, unit string, valueAfterChangePoint float32, valueBeforeChangePoint float32, displayName string, entity EntityStub, evidenceType string, rootCauseRelevant bool, startTime int64) *TransactionalEvidence {
	this := TransactionalEvidence{}
	this.DisplayName = displayName
	this.Entity = entity
	this.EvidenceType = evidenceType
	this.RootCauseRelevant = rootCauseRelevant
	this.StartTime = startTime
	this.EndTime = endTime
	this.Unit = unit
	this.ValueAfterChangePoint = valueAfterChangePoint
	this.ValueBeforeChangePoint = valueBeforeChangePoint
	return &this
}

// NewTransactionalEvidenceWithDefaults instantiates a new TransactionalEvidence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionalEvidenceWithDefaults() *TransactionalEvidence {
	this := TransactionalEvidence{}
	return &this
}

// GetEndTime returns the EndTime field value
func (o *TransactionalEvidence) GetEndTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *TransactionalEvidence) GetEndTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *TransactionalEvidence) SetEndTime(v int64) {
	o.EndTime = v
}

// GetUnit returns the Unit field value
func (o *TransactionalEvidence) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *TransactionalEvidence) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *TransactionalEvidence) SetUnit(v string) {
	o.Unit = v
}

// GetValueAfterChangePoint returns the ValueAfterChangePoint field value
func (o *TransactionalEvidence) GetValueAfterChangePoint() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ValueAfterChangePoint
}

// GetValueAfterChangePointOk returns a tuple with the ValueAfterChangePoint field value
// and a boolean to check if the value has been set.
func (o *TransactionalEvidence) GetValueAfterChangePointOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueAfterChangePoint, true
}

// SetValueAfterChangePoint sets field value
func (o *TransactionalEvidence) SetValueAfterChangePoint(v float32) {
	o.ValueAfterChangePoint = v
}

// GetValueBeforeChangePoint returns the ValueBeforeChangePoint field value
func (o *TransactionalEvidence) GetValueBeforeChangePoint() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ValueBeforeChangePoint
}

// GetValueBeforeChangePointOk returns a tuple with the ValueBeforeChangePoint field value
// and a boolean to check if the value has been set.
func (o *TransactionalEvidence) GetValueBeforeChangePointOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueBeforeChangePoint, true
}

// SetValueBeforeChangePoint sets field value
func (o *TransactionalEvidence) SetValueBeforeChangePoint(v float32) {
	o.ValueBeforeChangePoint = v
}

func (o TransactionalEvidence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionalEvidence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endTime"] = o.EndTime
	toSerialize["unit"] = o.Unit
	toSerialize["valueAfterChangePoint"] = o.ValueAfterChangePoint
	toSerialize["valueBeforeChangePoint"] = o.ValueBeforeChangePoint
	return toSerialize, nil
}

type NullableTransactionalEvidence struct {
	value *TransactionalEvidence
	isSet bool
}

func (v NullableTransactionalEvidence) Get() *TransactionalEvidence {
	return v.value
}

func (v *NullableTransactionalEvidence) Set(val *TransactionalEvidence) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionalEvidence) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionalEvidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionalEvidence(val *TransactionalEvidence) *NullableTransactionalEvidence {
	return &NullableTransactionalEvidence{value: val, isSet: true}
}

func (v NullableTransactionalEvidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionalEvidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


