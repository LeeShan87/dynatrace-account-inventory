/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the UnitList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnitList{}

// UnitList A list of units along with their properties.
type UnitList struct {
	// The total number of units in the result.
	TotalCount int64 `json:"totalCount"`
	// A list of units.
	Units []Unit `json:"units"`
}

// NewUnitList instantiates a new UnitList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnitList(totalCount int64, units []Unit) *UnitList {
	this := UnitList{}
	this.TotalCount = totalCount
	this.Units = units
	return &this
}

// NewUnitListWithDefaults instantiates a new UnitList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnitListWithDefaults() *UnitList {
	this := UnitList{}
	return &this
}

// GetTotalCount returns the TotalCount field value
func (o *UnitList) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *UnitList) GetTotalCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *UnitList) SetTotalCount(v int64) {
	o.TotalCount = v
}

// GetUnits returns the Units field value
func (o *UnitList) GetUnits() []Unit {
	if o == nil {
		var ret []Unit
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *UnitList) GetUnitsOk() ([]Unit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Units, true
}

// SetUnits sets field value
func (o *UnitList) SetUnits(v []Unit) {
	o.Units = v
}

func (o UnitList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnitList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalCount"] = o.TotalCount
	toSerialize["units"] = o.Units
	return toSerialize, nil
}

type NullableUnitList struct {
	value *UnitList
	isSet bool
}

func (v NullableUnitList) Get() *UnitList {
	return v.value
}

func (v *NullableUnitList) Set(val *UnitList) {
	v.value = val
	v.isSet = true
}

func (v NullableUnitList) IsSet() bool {
	return v.isSet
}

func (v *NullableUnitList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnitList(val *UnitList) *NullableUnitList {
	return &NullableUnitList{value: val, isSet: true}
}

func (v NullableUnitList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnitList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


