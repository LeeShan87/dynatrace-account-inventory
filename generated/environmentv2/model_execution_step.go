/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ExecutionStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionStep{}

// ExecutionStep Contains detailed information about the monitor's step execution.
type ExecutionStep struct {
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `BROWSER` -> BMAction  * `HTTP` -> MonitorRequestExecutionResult  
	MonitorType string `json:"monitorType"`
}

// NewExecutionStep instantiates a new ExecutionStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionStep(monitorType string) *ExecutionStep {
	this := ExecutionStep{}
	this.MonitorType = monitorType
	return &this
}

// NewExecutionStepWithDefaults instantiates a new ExecutionStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionStepWithDefaults() *ExecutionStep {
	this := ExecutionStep{}
	return &this
}

// GetMonitorType returns the MonitorType field value
func (o *ExecutionStep) GetMonitorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonitorType
}

// GetMonitorTypeOk returns a tuple with the MonitorType field value
// and a boolean to check if the value has been set.
func (o *ExecutionStep) GetMonitorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonitorType, true
}

// SetMonitorType sets field value
func (o *ExecutionStep) SetMonitorType(v string) {
	o.MonitorType = v
}

func (o ExecutionStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["monitorType"] = o.MonitorType
	return toSerialize, nil
}

type NullableExecutionStep struct {
	value *ExecutionStep
	isSet bool
}

func (v NullableExecutionStep) Get() *ExecutionStep {
	return v.value
}

func (v *NullableExecutionStep) Set(val *ExecutionStep) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionStep) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionStep(val *ExecutionStep) *NullableExecutionStep {
	return &NullableExecutionStep{value: val, isSet: true}
}

func (v NullableExecutionStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


