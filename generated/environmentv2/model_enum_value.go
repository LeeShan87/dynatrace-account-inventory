/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EnumValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnumValue{}

// EnumValue An allowed value for an enum property.
type EnumValue struct {
	// A short description of the value.
	Description *string `json:"description,omitempty"`
	// The display name of the value.
	DisplayName string `json:"displayName"`
	// The name of the value in an existing Java enum class.
	EnumInstance *string `json:"enumInstance,omitempty"`
	// The icon of the value.
	Icon *string `json:"icon,omitempty"`
	// The allowed value of the enum.
	Value map[string]interface{} `json:"value"`
}

// NewEnumValue instantiates a new EnumValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnumValue(displayName string, value map[string]interface{}) *EnumValue {
	this := EnumValue{}
	this.DisplayName = displayName
	this.Value = value
	return &this
}

// NewEnumValueWithDefaults instantiates a new EnumValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnumValueWithDefaults() *EnumValue {
	this := EnumValue{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnumValue) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumValue) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnumValue) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnumValue) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value
func (o *EnumValue) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *EnumValue) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *EnumValue) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEnumInstance returns the EnumInstance field value if set, zero value otherwise.
func (o *EnumValue) GetEnumInstance() string {
	if o == nil || IsNil(o.EnumInstance) {
		var ret string
		return ret
	}
	return *o.EnumInstance
}

// GetEnumInstanceOk returns a tuple with the EnumInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumValue) GetEnumInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.EnumInstance) {
		return nil, false
	}
	return o.EnumInstance, true
}

// HasEnumInstance returns a boolean if a field has been set.
func (o *EnumValue) HasEnumInstance() bool {
	if o != nil && !IsNil(o.EnumInstance) {
		return true
	}

	return false
}

// SetEnumInstance gets a reference to the given string and assigns it to the EnumInstance field.
func (o *EnumValue) SetEnumInstance(v string) {
	o.EnumInstance = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *EnumValue) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumValue) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *EnumValue) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *EnumValue) SetIcon(v string) {
	o.Icon = &v
}

// GetValue returns the Value field value
func (o *EnumValue) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *EnumValue) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *EnumValue) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o EnumValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnumValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.EnumInstance) {
		toSerialize["enumInstance"] = o.EnumInstance
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableEnumValue struct {
	value *EnumValue
	isSet bool
}

func (v NullableEnumValue) Get() *EnumValue {
	return v.value
}

func (v *NullableEnumValue) Set(val *EnumValue) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumValue) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumValue(val *EnumValue) *NullableEnumValue {
	return &NullableEnumValue{value: val, isSet: true}
}

func (v NullableEnumValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


