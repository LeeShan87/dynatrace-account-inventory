/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the TableColumn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableColumn{}

// TableColumn The definition of a table column to be used in the ui.
type TableColumn struct {
	// Pattern with references to properties to create a single value for the column.
	Pattern string `json:"pattern"`
}

// NewTableColumn instantiates a new TableColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableColumn(pattern string) *TableColumn {
	this := TableColumn{}
	this.Pattern = pattern
	return &this
}

// NewTableColumnWithDefaults instantiates a new TableColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableColumnWithDefaults() *TableColumn {
	this := TableColumn{}
	return &this
}

// GetPattern returns the Pattern field value
func (o *TableColumn) GetPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value
// and a boolean to check if the value has been set.
func (o *TableColumn) GetPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pattern, true
}

// SetPattern sets field value
func (o *TableColumn) SetPattern(v string) {
	o.Pattern = v
}

func (o TableColumn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableColumn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pattern"] = o.Pattern
	return toSerialize, nil
}

type NullableTableColumn struct {
	value *TableColumn
	isSet bool
}

func (v NullableTableColumn) Get() *TableColumn {
	return v.value
}

func (v *NullableTableColumn) Set(val *TableColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableTableColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableTableColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableColumn(val *TableColumn) *NullableTableColumn {
	return &NullableTableColumn{value: val, isSet: true}
}

func (v NullableTableColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


