/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Entity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Entity{}

// Entity The properties of a monitored entity.
type Entity struct {
	// The name of the entity, displayed in the UI.
	DisplayName *string `json:"displayName,omitempty"`
	// The ID of the entity.
	EntityId *string `json:"entityId,omitempty"`
	// The timestamp at which the entity was first seen, in UTC milliseconds.
	FirstSeenTms *int64 `json:"firstSeenTms,omitempty"`
	// A list of relationships where the entity occupies the FROM position.
	FromRelationships *map[string][]EntityId `json:"fromRelationships,omitempty"`
	Icon *EntityIcon `json:"icon,omitempty"`
	// The timestamp at which the entity was last seen, in UTC milliseconds.
	LastSeenTms *int64 `json:"lastSeenTms,omitempty"`
	// A set of management zones to which the entity belongs.
	ManagementZones []ManagementZone `json:"managementZones,omitempty"`
	// A list of additional properties of the entity.
	Properties map[string]map[string]interface{} `json:"properties,omitempty"`
	// A set of tags assigned to the entity.
	Tags []METag `json:"tags,omitempty"`
	// A list of relationships where the entity occupies the TO position.
	ToRelationships *map[string][]EntityId `json:"toRelationships,omitempty"`
	// The type of the entity.
	Type *string `json:"type,omitempty"`
}

// NewEntity instantiates a new Entity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntity() *Entity {
	this := Entity{}
	return &this
}

// NewEntityWithDefaults instantiates a new Entity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityWithDefaults() *Entity {
	this := Entity{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Entity) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Entity) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Entity) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *Entity) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *Entity) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *Entity) SetEntityId(v string) {
	o.EntityId = &v
}

// GetFirstSeenTms returns the FirstSeenTms field value if set, zero value otherwise.
func (o *Entity) GetFirstSeenTms() int64 {
	if o == nil || IsNil(o.FirstSeenTms) {
		var ret int64
		return ret
	}
	return *o.FirstSeenTms
}

// GetFirstSeenTmsOk returns a tuple with the FirstSeenTms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetFirstSeenTmsOk() (*int64, bool) {
	if o == nil || IsNil(o.FirstSeenTms) {
		return nil, false
	}
	return o.FirstSeenTms, true
}

// HasFirstSeenTms returns a boolean if a field has been set.
func (o *Entity) HasFirstSeenTms() bool {
	if o != nil && !IsNil(o.FirstSeenTms) {
		return true
	}

	return false
}

// SetFirstSeenTms gets a reference to the given int64 and assigns it to the FirstSeenTms field.
func (o *Entity) SetFirstSeenTms(v int64) {
	o.FirstSeenTms = &v
}

// GetFromRelationships returns the FromRelationships field value if set, zero value otherwise.
func (o *Entity) GetFromRelationships() map[string][]EntityId {
	if o == nil || IsNil(o.FromRelationships) {
		var ret map[string][]EntityId
		return ret
	}
	return *o.FromRelationships
}

// GetFromRelationshipsOk returns a tuple with the FromRelationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetFromRelationshipsOk() (*map[string][]EntityId, bool) {
	if o == nil || IsNil(o.FromRelationships) {
		return nil, false
	}
	return o.FromRelationships, true
}

// HasFromRelationships returns a boolean if a field has been set.
func (o *Entity) HasFromRelationships() bool {
	if o != nil && !IsNil(o.FromRelationships) {
		return true
	}

	return false
}

// SetFromRelationships gets a reference to the given map[string][]EntityId and assigns it to the FromRelationships field.
func (o *Entity) SetFromRelationships(v map[string][]EntityId) {
	o.FromRelationships = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *Entity) GetIcon() EntityIcon {
	if o == nil || IsNil(o.Icon) {
		var ret EntityIcon
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetIconOk() (*EntityIcon, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Entity) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given EntityIcon and assigns it to the Icon field.
func (o *Entity) SetIcon(v EntityIcon) {
	o.Icon = &v
}

// GetLastSeenTms returns the LastSeenTms field value if set, zero value otherwise.
func (o *Entity) GetLastSeenTms() int64 {
	if o == nil || IsNil(o.LastSeenTms) {
		var ret int64
		return ret
	}
	return *o.LastSeenTms
}

// GetLastSeenTmsOk returns a tuple with the LastSeenTms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetLastSeenTmsOk() (*int64, bool) {
	if o == nil || IsNil(o.LastSeenTms) {
		return nil, false
	}
	return o.LastSeenTms, true
}

// HasLastSeenTms returns a boolean if a field has been set.
func (o *Entity) HasLastSeenTms() bool {
	if o != nil && !IsNil(o.LastSeenTms) {
		return true
	}

	return false
}

// SetLastSeenTms gets a reference to the given int64 and assigns it to the LastSeenTms field.
func (o *Entity) SetLastSeenTms(v int64) {
	o.LastSeenTms = &v
}

// GetManagementZones returns the ManagementZones field value if set, zero value otherwise.
func (o *Entity) GetManagementZones() []ManagementZone {
	if o == nil || IsNil(o.ManagementZones) {
		var ret []ManagementZone
		return ret
	}
	return o.ManagementZones
}

// GetManagementZonesOk returns a tuple with the ManagementZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetManagementZonesOk() ([]ManagementZone, bool) {
	if o == nil || IsNil(o.ManagementZones) {
		return nil, false
	}
	return o.ManagementZones, true
}

// HasManagementZones returns a boolean if a field has been set.
func (o *Entity) HasManagementZones() bool {
	if o != nil && !IsNil(o.ManagementZones) {
		return true
	}

	return false
}

// SetManagementZones gets a reference to the given []ManagementZone and assigns it to the ManagementZones field.
func (o *Entity) SetManagementZones(v []ManagementZone) {
	o.ManagementZones = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Entity) GetProperties() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Entity) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the Properties field.
func (o *Entity) SetProperties(v map[string]map[string]interface{}) {
	o.Properties = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Entity) GetTags() []METag {
	if o == nil || IsNil(o.Tags) {
		var ret []METag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetTagsOk() ([]METag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Entity) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []METag and assigns it to the Tags field.
func (o *Entity) SetTags(v []METag) {
	o.Tags = v
}

// GetToRelationships returns the ToRelationships field value if set, zero value otherwise.
func (o *Entity) GetToRelationships() map[string][]EntityId {
	if o == nil || IsNil(o.ToRelationships) {
		var ret map[string][]EntityId
		return ret
	}
	return *o.ToRelationships
}

// GetToRelationshipsOk returns a tuple with the ToRelationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetToRelationshipsOk() (*map[string][]EntityId, bool) {
	if o == nil || IsNil(o.ToRelationships) {
		return nil, false
	}
	return o.ToRelationships, true
}

// HasToRelationships returns a boolean if a field has been set.
func (o *Entity) HasToRelationships() bool {
	if o != nil && !IsNil(o.ToRelationships) {
		return true
	}

	return false
}

// SetToRelationships gets a reference to the given map[string][]EntityId and assigns it to the ToRelationships field.
func (o *Entity) SetToRelationships(v map[string][]EntityId) {
	o.ToRelationships = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Entity) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Entity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Entity) SetType(v string) {
	o.Type = &v
}

func (o Entity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Entity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.FirstSeenTms) {
		toSerialize["firstSeenTms"] = o.FirstSeenTms
	}
	if !IsNil(o.FromRelationships) {
		toSerialize["fromRelationships"] = o.FromRelationships
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.LastSeenTms) {
		toSerialize["lastSeenTms"] = o.LastSeenTms
	}
	if !IsNil(o.ManagementZones) {
		toSerialize["managementZones"] = o.ManagementZones
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ToRelationships) {
		toSerialize["toRelationships"] = o.ToRelationships
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableEntity struct {
	value *Entity
	isSet bool
}

func (v NullableEntity) Get() *Entity {
	return v.value
}

func (v *NullableEntity) Set(val *Entity) {
	v.value = val
	v.isSet = true
}

func (v NullableEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntity(val *Entity) *NullableEntity {
	return &NullableEntity{value: val, isSet: true}
}

func (v NullableEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


