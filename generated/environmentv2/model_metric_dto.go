/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the MetricDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricDto{}

// MetricDto Metric gathered by an extension
type MetricDto struct {
	// Metric key
	Key *string `json:"key,omitempty"`
	Metadata *MetricMetadataDto `json:"metadata,omitempty"`
}

// NewMetricDto instantiates a new MetricDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricDto() *MetricDto {
	this := MetricDto{}
	return &this
}

// NewMetricDtoWithDefaults instantiates a new MetricDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDtoWithDefaults() *MetricDto {
	this := MetricDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MetricDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MetricDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MetricDto) SetKey(v string) {
	o.Key = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *MetricDto) GetMetadata() MetricMetadataDto {
	if o == nil || IsNil(o.Metadata) {
		var ret MetricMetadataDto
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDto) GetMetadataOk() (*MetricMetadataDto, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *MetricDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given MetricMetadataDto and assigns it to the Metadata field.
func (o *MetricDto) SetMetadata(v MetricMetadataDto) {
	o.Metadata = &v
}

func (o MetricDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableMetricDto struct {
	value *MetricDto
	isSet bool
}

func (v NullableMetricDto) Get() *MetricDto {
	return v.value
}

func (v *NullableMetricDto) Set(val *MetricDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricDto(val *MetricDto) *NullableMetricDto {
	return &NullableMetricDto{value: val, isSet: true}
}

func (v NullableMetricDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


