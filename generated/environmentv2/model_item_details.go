/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ItemDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemDetails{}

// ItemDetails Public metadata for an item.
type ItemDetails struct {
	// Url for the author's logo.
	AuthorLogo NullableString `json:"authorLogo,omitempty"`
	// Name of the author of the item.
	AuthorName NullableString `json:"authorName,omitempty"`
	// Checks if the item is compatible with the cluster version.
	ClusterCompatible NullableBool `json:"clusterCompatible,omitempty"`
	// The maximum supported cluster version for this item.
	ClusterMaxVersion NullableInt32 `json:"clusterMaxVersion,omitempty"`
	// The minimum cluster version required to use this item.
	ClusterMinVersion NullableInt32 `json:"clusterMinVersion,omitempty"`
	// Description of the item.
	Description NullableString `json:"description,omitempty"`
	DescriptionBlocks []DescriptionBlock `json:"descriptionBlocks,omitempty"`
	// An absolute link to a documentation page explaining the item.
	DocumentationLink NullableString `json:"documentationLink,omitempty"`
	Extension1Details NullableExtension1Details `json:"extension1Details,omitempty"`
	Extension2Details NullableExtension2Details `json:"extension2Details,omitempty"`
	// Unique Id of the item.
	ItemId *string `json:"itemId,omitempty"`
	// The logo of the item. Can be a URL or Base64 encoded. Intended for <image> html tags.
	Logo NullableString `json:"logo,omitempty"`
	// An absolute link to a marketing page promoting how the item can be used with dynatrace.
	MarketingLink NullableString `json:"marketingLink,omitempty"`
	// Name of the item.
	Name *string `json:"name,omitempty"`
	// The reason why the item is not compatible with the cluster version.
	NotCompatibleReason NullableString `json:"notCompatibleReason,omitempty"`
	// Related items.
	RelatedItems []RelatedItem `json:"relatedItems,omitempty"`
	// Grouping of items with keywords.
	Tags []string `json:"tags,omitempty"`
	TechnologyDetails NullableTechnologyDetails `json:"technologyDetails,omitempty"`
	// Represents the type of item. It can be TECHNOLOGY, EXTENSION1 or EXTENSION2.
	Type *string `json:"type,omitempty"`
}

// NewItemDetails instantiates a new ItemDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemDetails() *ItemDetails {
	this := ItemDetails{}
	return &this
}

// NewItemDetailsWithDefaults instantiates a new ItemDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemDetailsWithDefaults() *ItemDetails {
	this := ItemDetails{}
	return &this
}

// GetAuthorLogo returns the AuthorLogo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetAuthorLogo() string {
	if o == nil || IsNil(o.AuthorLogo.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorLogo.Get()
}

// GetAuthorLogoOk returns a tuple with the AuthorLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetAuthorLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorLogo.Get(), o.AuthorLogo.IsSet()
}

// HasAuthorLogo returns a boolean if a field has been set.
func (o *ItemDetails) HasAuthorLogo() bool {
	if o != nil && o.AuthorLogo.IsSet() {
		return true
	}

	return false
}

// SetAuthorLogo gets a reference to the given NullableString and assigns it to the AuthorLogo field.
func (o *ItemDetails) SetAuthorLogo(v string) {
	o.AuthorLogo.Set(&v)
}
// SetAuthorLogoNil sets the value for AuthorLogo to be an explicit nil
func (o *ItemDetails) SetAuthorLogoNil() {
	o.AuthorLogo.Set(nil)
}

// UnsetAuthorLogo ensures that no value is present for AuthorLogo, not even an explicit nil
func (o *ItemDetails) UnsetAuthorLogo() {
	o.AuthorLogo.Unset()
}

// GetAuthorName returns the AuthorName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetAuthorName() string {
	if o == nil || IsNil(o.AuthorName.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorName.Get()
}

// GetAuthorNameOk returns a tuple with the AuthorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetAuthorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorName.Get(), o.AuthorName.IsSet()
}

// HasAuthorName returns a boolean if a field has been set.
func (o *ItemDetails) HasAuthorName() bool {
	if o != nil && o.AuthorName.IsSet() {
		return true
	}

	return false
}

// SetAuthorName gets a reference to the given NullableString and assigns it to the AuthorName field.
func (o *ItemDetails) SetAuthorName(v string) {
	o.AuthorName.Set(&v)
}
// SetAuthorNameNil sets the value for AuthorName to be an explicit nil
func (o *ItemDetails) SetAuthorNameNil() {
	o.AuthorName.Set(nil)
}

// UnsetAuthorName ensures that no value is present for AuthorName, not even an explicit nil
func (o *ItemDetails) UnsetAuthorName() {
	o.AuthorName.Unset()
}

// GetClusterCompatible returns the ClusterCompatible field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetClusterCompatible() bool {
	if o == nil || IsNil(o.ClusterCompatible.Get()) {
		var ret bool
		return ret
	}
	return *o.ClusterCompatible.Get()
}

// GetClusterCompatibleOk returns a tuple with the ClusterCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetClusterCompatibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterCompatible.Get(), o.ClusterCompatible.IsSet()
}

// HasClusterCompatible returns a boolean if a field has been set.
func (o *ItemDetails) HasClusterCompatible() bool {
	if o != nil && o.ClusterCompatible.IsSet() {
		return true
	}

	return false
}

// SetClusterCompatible gets a reference to the given NullableBool and assigns it to the ClusterCompatible field.
func (o *ItemDetails) SetClusterCompatible(v bool) {
	o.ClusterCompatible.Set(&v)
}
// SetClusterCompatibleNil sets the value for ClusterCompatible to be an explicit nil
func (o *ItemDetails) SetClusterCompatibleNil() {
	o.ClusterCompatible.Set(nil)
}

// UnsetClusterCompatible ensures that no value is present for ClusterCompatible, not even an explicit nil
func (o *ItemDetails) UnsetClusterCompatible() {
	o.ClusterCompatible.Unset()
}

// GetClusterMaxVersion returns the ClusterMaxVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetClusterMaxVersion() int32 {
	if o == nil || IsNil(o.ClusterMaxVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.ClusterMaxVersion.Get()
}

// GetClusterMaxVersionOk returns a tuple with the ClusterMaxVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetClusterMaxVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterMaxVersion.Get(), o.ClusterMaxVersion.IsSet()
}

// HasClusterMaxVersion returns a boolean if a field has been set.
func (o *ItemDetails) HasClusterMaxVersion() bool {
	if o != nil && o.ClusterMaxVersion.IsSet() {
		return true
	}

	return false
}

// SetClusterMaxVersion gets a reference to the given NullableInt32 and assigns it to the ClusterMaxVersion field.
func (o *ItemDetails) SetClusterMaxVersion(v int32) {
	o.ClusterMaxVersion.Set(&v)
}
// SetClusterMaxVersionNil sets the value for ClusterMaxVersion to be an explicit nil
func (o *ItemDetails) SetClusterMaxVersionNil() {
	o.ClusterMaxVersion.Set(nil)
}

// UnsetClusterMaxVersion ensures that no value is present for ClusterMaxVersion, not even an explicit nil
func (o *ItemDetails) UnsetClusterMaxVersion() {
	o.ClusterMaxVersion.Unset()
}

// GetClusterMinVersion returns the ClusterMinVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetClusterMinVersion() int32 {
	if o == nil || IsNil(o.ClusterMinVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.ClusterMinVersion.Get()
}

// GetClusterMinVersionOk returns a tuple with the ClusterMinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetClusterMinVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterMinVersion.Get(), o.ClusterMinVersion.IsSet()
}

// HasClusterMinVersion returns a boolean if a field has been set.
func (o *ItemDetails) HasClusterMinVersion() bool {
	if o != nil && o.ClusterMinVersion.IsSet() {
		return true
	}

	return false
}

// SetClusterMinVersion gets a reference to the given NullableInt32 and assigns it to the ClusterMinVersion field.
func (o *ItemDetails) SetClusterMinVersion(v int32) {
	o.ClusterMinVersion.Set(&v)
}
// SetClusterMinVersionNil sets the value for ClusterMinVersion to be an explicit nil
func (o *ItemDetails) SetClusterMinVersionNil() {
	o.ClusterMinVersion.Set(nil)
}

// UnsetClusterMinVersion ensures that no value is present for ClusterMinVersion, not even an explicit nil
func (o *ItemDetails) UnsetClusterMinVersion() {
	o.ClusterMinVersion.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ItemDetails) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ItemDetails) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ItemDetails) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ItemDetails) UnsetDescription() {
	o.Description.Unset()
}

// GetDescriptionBlocks returns the DescriptionBlocks field value if set, zero value otherwise.
func (o *ItemDetails) GetDescriptionBlocks() []DescriptionBlock {
	if o == nil || IsNil(o.DescriptionBlocks) {
		var ret []DescriptionBlock
		return ret
	}
	return o.DescriptionBlocks
}

// GetDescriptionBlocksOk returns a tuple with the DescriptionBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetails) GetDescriptionBlocksOk() ([]DescriptionBlock, bool) {
	if o == nil || IsNil(o.DescriptionBlocks) {
		return nil, false
	}
	return o.DescriptionBlocks, true
}

// HasDescriptionBlocks returns a boolean if a field has been set.
func (o *ItemDetails) HasDescriptionBlocks() bool {
	if o != nil && !IsNil(o.DescriptionBlocks) {
		return true
	}

	return false
}

// SetDescriptionBlocks gets a reference to the given []DescriptionBlock and assigns it to the DescriptionBlocks field.
func (o *ItemDetails) SetDescriptionBlocks(v []DescriptionBlock) {
	o.DescriptionBlocks = v
}

// GetDocumentationLink returns the DocumentationLink field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetDocumentationLink() string {
	if o == nil || IsNil(o.DocumentationLink.Get()) {
		var ret string
		return ret
	}
	return *o.DocumentationLink.Get()
}

// GetDocumentationLinkOk returns a tuple with the DocumentationLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetDocumentationLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentationLink.Get(), o.DocumentationLink.IsSet()
}

// HasDocumentationLink returns a boolean if a field has been set.
func (o *ItemDetails) HasDocumentationLink() bool {
	if o != nil && o.DocumentationLink.IsSet() {
		return true
	}

	return false
}

// SetDocumentationLink gets a reference to the given NullableString and assigns it to the DocumentationLink field.
func (o *ItemDetails) SetDocumentationLink(v string) {
	o.DocumentationLink.Set(&v)
}
// SetDocumentationLinkNil sets the value for DocumentationLink to be an explicit nil
func (o *ItemDetails) SetDocumentationLinkNil() {
	o.DocumentationLink.Set(nil)
}

// UnsetDocumentationLink ensures that no value is present for DocumentationLink, not even an explicit nil
func (o *ItemDetails) UnsetDocumentationLink() {
	o.DocumentationLink.Unset()
}

// GetExtension1Details returns the Extension1Details field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetExtension1Details() Extension1Details {
	if o == nil || IsNil(o.Extension1Details.Get()) {
		var ret Extension1Details
		return ret
	}
	return *o.Extension1Details.Get()
}

// GetExtension1DetailsOk returns a tuple with the Extension1Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetExtension1DetailsOk() (*Extension1Details, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extension1Details.Get(), o.Extension1Details.IsSet()
}

// HasExtension1Details returns a boolean if a field has been set.
func (o *ItemDetails) HasExtension1Details() bool {
	if o != nil && o.Extension1Details.IsSet() {
		return true
	}

	return false
}

// SetExtension1Details gets a reference to the given NullableExtension1Details and assigns it to the Extension1Details field.
func (o *ItemDetails) SetExtension1Details(v Extension1Details) {
	o.Extension1Details.Set(&v)
}
// SetExtension1DetailsNil sets the value for Extension1Details to be an explicit nil
func (o *ItemDetails) SetExtension1DetailsNil() {
	o.Extension1Details.Set(nil)
}

// UnsetExtension1Details ensures that no value is present for Extension1Details, not even an explicit nil
func (o *ItemDetails) UnsetExtension1Details() {
	o.Extension1Details.Unset()
}

// GetExtension2Details returns the Extension2Details field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetExtension2Details() Extension2Details {
	if o == nil || IsNil(o.Extension2Details.Get()) {
		var ret Extension2Details
		return ret
	}
	return *o.Extension2Details.Get()
}

// GetExtension2DetailsOk returns a tuple with the Extension2Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetExtension2DetailsOk() (*Extension2Details, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extension2Details.Get(), o.Extension2Details.IsSet()
}

// HasExtension2Details returns a boolean if a field has been set.
func (o *ItemDetails) HasExtension2Details() bool {
	if o != nil && o.Extension2Details.IsSet() {
		return true
	}

	return false
}

// SetExtension2Details gets a reference to the given NullableExtension2Details and assigns it to the Extension2Details field.
func (o *ItemDetails) SetExtension2Details(v Extension2Details) {
	o.Extension2Details.Set(&v)
}
// SetExtension2DetailsNil sets the value for Extension2Details to be an explicit nil
func (o *ItemDetails) SetExtension2DetailsNil() {
	o.Extension2Details.Set(nil)
}

// UnsetExtension2Details ensures that no value is present for Extension2Details, not even an explicit nil
func (o *ItemDetails) UnsetExtension2Details() {
	o.Extension2Details.Unset()
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *ItemDetails) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetails) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *ItemDetails) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *ItemDetails) SetItemId(v string) {
	o.ItemId = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetLogo() string {
	if o == nil || IsNil(o.Logo.Get()) {
		var ret string
		return ret
	}
	return *o.Logo.Get()
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logo.Get(), o.Logo.IsSet()
}

// HasLogo returns a boolean if a field has been set.
func (o *ItemDetails) HasLogo() bool {
	if o != nil && o.Logo.IsSet() {
		return true
	}

	return false
}

// SetLogo gets a reference to the given NullableString and assigns it to the Logo field.
func (o *ItemDetails) SetLogo(v string) {
	o.Logo.Set(&v)
}
// SetLogoNil sets the value for Logo to be an explicit nil
func (o *ItemDetails) SetLogoNil() {
	o.Logo.Set(nil)
}

// UnsetLogo ensures that no value is present for Logo, not even an explicit nil
func (o *ItemDetails) UnsetLogo() {
	o.Logo.Unset()
}

// GetMarketingLink returns the MarketingLink field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetMarketingLink() string {
	if o == nil || IsNil(o.MarketingLink.Get()) {
		var ret string
		return ret
	}
	return *o.MarketingLink.Get()
}

// GetMarketingLinkOk returns a tuple with the MarketingLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetMarketingLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarketingLink.Get(), o.MarketingLink.IsSet()
}

// HasMarketingLink returns a boolean if a field has been set.
func (o *ItemDetails) HasMarketingLink() bool {
	if o != nil && o.MarketingLink.IsSet() {
		return true
	}

	return false
}

// SetMarketingLink gets a reference to the given NullableString and assigns it to the MarketingLink field.
func (o *ItemDetails) SetMarketingLink(v string) {
	o.MarketingLink.Set(&v)
}
// SetMarketingLinkNil sets the value for MarketingLink to be an explicit nil
func (o *ItemDetails) SetMarketingLinkNil() {
	o.MarketingLink.Set(nil)
}

// UnsetMarketingLink ensures that no value is present for MarketingLink, not even an explicit nil
func (o *ItemDetails) UnsetMarketingLink() {
	o.MarketingLink.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ItemDetails) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetails) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ItemDetails) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ItemDetails) SetName(v string) {
	o.Name = &v
}

// GetNotCompatibleReason returns the NotCompatibleReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetNotCompatibleReason() string {
	if o == nil || IsNil(o.NotCompatibleReason.Get()) {
		var ret string
		return ret
	}
	return *o.NotCompatibleReason.Get()
}

// GetNotCompatibleReasonOk returns a tuple with the NotCompatibleReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetNotCompatibleReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotCompatibleReason.Get(), o.NotCompatibleReason.IsSet()
}

// HasNotCompatibleReason returns a boolean if a field has been set.
func (o *ItemDetails) HasNotCompatibleReason() bool {
	if o != nil && o.NotCompatibleReason.IsSet() {
		return true
	}

	return false
}

// SetNotCompatibleReason gets a reference to the given NullableString and assigns it to the NotCompatibleReason field.
func (o *ItemDetails) SetNotCompatibleReason(v string) {
	o.NotCompatibleReason.Set(&v)
}
// SetNotCompatibleReasonNil sets the value for NotCompatibleReason to be an explicit nil
func (o *ItemDetails) SetNotCompatibleReasonNil() {
	o.NotCompatibleReason.Set(nil)
}

// UnsetNotCompatibleReason ensures that no value is present for NotCompatibleReason, not even an explicit nil
func (o *ItemDetails) UnsetNotCompatibleReason() {
	o.NotCompatibleReason.Unset()
}

// GetRelatedItems returns the RelatedItems field value if set, zero value otherwise.
func (o *ItemDetails) GetRelatedItems() []RelatedItem {
	if o == nil || IsNil(o.RelatedItems) {
		var ret []RelatedItem
		return ret
	}
	return o.RelatedItems
}

// GetRelatedItemsOk returns a tuple with the RelatedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetails) GetRelatedItemsOk() ([]RelatedItem, bool) {
	if o == nil || IsNil(o.RelatedItems) {
		return nil, false
	}
	return o.RelatedItems, true
}

// HasRelatedItems returns a boolean if a field has been set.
func (o *ItemDetails) HasRelatedItems() bool {
	if o != nil && !IsNil(o.RelatedItems) {
		return true
	}

	return false
}

// SetRelatedItems gets a reference to the given []RelatedItem and assigns it to the RelatedItems field.
func (o *ItemDetails) SetRelatedItems(v []RelatedItem) {
	o.RelatedItems = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ItemDetails) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetails) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ItemDetails) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ItemDetails) SetTags(v []string) {
	o.Tags = v
}

// GetTechnologyDetails returns the TechnologyDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemDetails) GetTechnologyDetails() TechnologyDetails {
	if o == nil || IsNil(o.TechnologyDetails.Get()) {
		var ret TechnologyDetails
		return ret
	}
	return *o.TechnologyDetails.Get()
}

// GetTechnologyDetailsOk returns a tuple with the TechnologyDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemDetails) GetTechnologyDetailsOk() (*TechnologyDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.TechnologyDetails.Get(), o.TechnologyDetails.IsSet()
}

// HasTechnologyDetails returns a boolean if a field has been set.
func (o *ItemDetails) HasTechnologyDetails() bool {
	if o != nil && o.TechnologyDetails.IsSet() {
		return true
	}

	return false
}

// SetTechnologyDetails gets a reference to the given NullableTechnologyDetails and assigns it to the TechnologyDetails field.
func (o *ItemDetails) SetTechnologyDetails(v TechnologyDetails) {
	o.TechnologyDetails.Set(&v)
}
// SetTechnologyDetailsNil sets the value for TechnologyDetails to be an explicit nil
func (o *ItemDetails) SetTechnologyDetailsNil() {
	o.TechnologyDetails.Set(nil)
}

// UnsetTechnologyDetails ensures that no value is present for TechnologyDetails, not even an explicit nil
func (o *ItemDetails) UnsetTechnologyDetails() {
	o.TechnologyDetails.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ItemDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ItemDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ItemDetails) SetType(v string) {
	o.Type = &v
}

func (o ItemDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthorLogo.IsSet() {
		toSerialize["authorLogo"] = o.AuthorLogo.Get()
	}
	if o.AuthorName.IsSet() {
		toSerialize["authorName"] = o.AuthorName.Get()
	}
	if o.ClusterCompatible.IsSet() {
		toSerialize["clusterCompatible"] = o.ClusterCompatible.Get()
	}
	if o.ClusterMaxVersion.IsSet() {
		toSerialize["clusterMaxVersion"] = o.ClusterMaxVersion.Get()
	}
	if o.ClusterMinVersion.IsSet() {
		toSerialize["clusterMinVersion"] = o.ClusterMinVersion.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.DescriptionBlocks) {
		toSerialize["descriptionBlocks"] = o.DescriptionBlocks
	}
	if o.DocumentationLink.IsSet() {
		toSerialize["documentationLink"] = o.DocumentationLink.Get()
	}
	if o.Extension1Details.IsSet() {
		toSerialize["extension1Details"] = o.Extension1Details.Get()
	}
	if o.Extension2Details.IsSet() {
		toSerialize["extension2Details"] = o.Extension2Details.Get()
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if o.Logo.IsSet() {
		toSerialize["logo"] = o.Logo.Get()
	}
	if o.MarketingLink.IsSet() {
		toSerialize["marketingLink"] = o.MarketingLink.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.NotCompatibleReason.IsSet() {
		toSerialize["notCompatibleReason"] = o.NotCompatibleReason.Get()
	}
	if !IsNil(o.RelatedItems) {
		toSerialize["relatedItems"] = o.RelatedItems
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if o.TechnologyDetails.IsSet() {
		toSerialize["technologyDetails"] = o.TechnologyDetails.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableItemDetails struct {
	value *ItemDetails
	isSet bool
}

func (v NullableItemDetails) Get() *ItemDetails {
	return v.value
}

func (v *NullableItemDetails) Set(val *ItemDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableItemDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableItemDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemDetails(val *ItemDetails) *NullableItemDetails {
	return &NullableItemDetails{value: val, isSet: true}
}

func (v NullableItemDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


