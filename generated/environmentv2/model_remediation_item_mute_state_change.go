/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RemediationItemMuteStateChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemediationItemMuteStateChange{}

// RemediationItemMuteStateChange An updated configuration of the remediation item's mute state.
type RemediationItemMuteStateChange struct {
	// A comment about the mute state change reason.
	Comment string `json:"comment"`
	// The desired mute state of the remediation item.
	Muted bool `json:"muted"`
	// The reason for the mute state change.
	Reason string `json:"reason"`
}

// NewRemediationItemMuteStateChange instantiates a new RemediationItemMuteStateChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemediationItemMuteStateChange(comment string, muted bool, reason string) *RemediationItemMuteStateChange {
	this := RemediationItemMuteStateChange{}
	this.Comment = comment
	this.Muted = muted
	this.Reason = reason
	return &this
}

// NewRemediationItemMuteStateChangeWithDefaults instantiates a new RemediationItemMuteStateChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemediationItemMuteStateChangeWithDefaults() *RemediationItemMuteStateChange {
	this := RemediationItemMuteStateChange{}
	return &this
}

// GetComment returns the Comment field value
func (o *RemediationItemMuteStateChange) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *RemediationItemMuteStateChange) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *RemediationItemMuteStateChange) SetComment(v string) {
	o.Comment = v
}

// GetMuted returns the Muted field value
func (o *RemediationItemMuteStateChange) GetMuted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Muted
}

// GetMutedOk returns a tuple with the Muted field value
// and a boolean to check if the value has been set.
func (o *RemediationItemMuteStateChange) GetMutedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Muted, true
}

// SetMuted sets field value
func (o *RemediationItemMuteStateChange) SetMuted(v bool) {
	o.Muted = v
}

// GetReason returns the Reason field value
func (o *RemediationItemMuteStateChange) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *RemediationItemMuteStateChange) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *RemediationItemMuteStateChange) SetReason(v string) {
	o.Reason = v
}

func (o RemediationItemMuteStateChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemediationItemMuteStateChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comment"] = o.Comment
	toSerialize["muted"] = o.Muted
	toSerialize["reason"] = o.Reason
	return toSerialize, nil
}

type NullableRemediationItemMuteStateChange struct {
	value *RemediationItemMuteStateChange
	isSet bool
}

func (v NullableRemediationItemMuteStateChange) Get() *RemediationItemMuteStateChange {
	return v.value
}

func (v *NullableRemediationItemMuteStateChange) Set(val *RemediationItemMuteStateChange) {
	v.value = val
	v.isSet = true
}

func (v NullableRemediationItemMuteStateChange) IsSet() bool {
	return v.isSet
}

func (v *NullableRemediationItemMuteStateChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemediationItemMuteStateChange(val *RemediationItemMuteStateChange) *NullableRemediationItemMuteStateChange {
	return &NullableRemediationItemMuteStateChange{value: val, isSet: true}
}

func (v NullableRemediationItemMuteStateChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemediationItemMuteStateChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


