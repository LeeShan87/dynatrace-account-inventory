/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SLO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SLO{}

// SLO Parameters of a service-level objective (SLO).
type SLO struct {
	// The key for the SLO's error budget burn rate func metric.
	BurnRateMetricKey string `json:"burnRateMetricKey"`
	// The denominator value used to evaluate the SLO when **useRateMetric** is set to `false`.
	// Deprecated
	DenominatorValue *float64 `json:"denominatorValue,omitempty"`
	// A short description of the SLO.
	Description *string `json:"description,omitempty"`
	// The SLO is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// The error of the SLO calculation.   If the value differs from `NONE`, there is something wrong with the SLO calculation.
	Error string `json:"error"`
	// The error budget of the calculated SLO.   The error budget is the difference between the calculated and target values. A positive number means all is good; a negative number means trouble.  Has the value of the evaluated error budget or the value of `-1`:   * If there is an error with the SLO calculation; in that case check the value of the **error** property.  * If the evaluate parameter has not been set to `true`; in that case the **error** property will contain no error.
	ErrorBudget float64 `json:"errorBudget"`
	ErrorBudgetBurnRate SloBurnRate `json:"errorBudgetBurnRate"`
	// The key for the SLO's error budget func metric.
	ErrorBudgetMetricKey string `json:"errorBudgetMetricKey"`
	// The calculated status value of the SLO. Has the value of the evaluated SLO status or the value of `-1`:   * If there is an error with the SLO calculation; in that case check the value of the **error** property.  * If the evaluate parameter has not been set to `true`; in that case the **error** property will contain no error.
	EvaluatedPercentage float64 `json:"evaluatedPercentage"`
	// The evaluation type of the SLO.
	EvaluationType string `json:"evaluationType"`
	// The entity filter for the SLO evaluation. The total length of the entitySelector string in SLOs is limited to 1,000 characters. Use the [syntax of entity selector](https://dt-url.net/entityselector).
	Filter string `json:"filter"`
	// The ID of the SLO
	Id string `json:"id"`
	// The total count metric (the denominator in rate calculation).   Required when the **useRateMetric** is set to `false`.
	// Deprecated
	MetricDenominator *string `json:"metricDenominator,omitempty"`
	// The percentage-based metric expression for the calculation of the SLO.
	MetricExpression string `json:"metricExpression"`
	// The key for the SLO's status func metric.
	MetricKey string `json:"metricKey"`
	// The metric for the count of successes (the numerator in rate calculation).   Required when the **useRateMetric** is set to `false`.
	// Deprecated
	MetricNumerator *string `json:"metricNumerator,omitempty"`
	// The percentage-based metric for the calculation of the SLO.   Required when the **useRateMetric** is set to `true`.
	// Deprecated
	MetricRate *string `json:"metricRate,omitempty"`
	// The name of the SLO.
	Name string `json:"name"`
	// The key for the SLO's normalized error budget func metric.
	NormalizedErrorBudgetMetricKey string `json:"normalizedErrorBudgetMetricKey"`
	// The numerator value used to evaluate the SLO when **useRateMetric** is set to `false`.
	// Deprecated
	NumeratorValue *float64 `json:"numeratorValue,omitempty"`
	// The entity filter for fetching the number of problems related to an SLO. Auto-generated in case no filter has been added to the SLO.
	// Deprecated
	ProblemFilters []string `json:"problemFilters,omitempty"`
	// Number of open problems related to the SLO.   Has the value of `-1` if there's an error with fetching SLO related problems.
	RelatedOpenProblems *int32 `json:"relatedOpenProblems,omitempty"`
	// Total number of problems related to the SLO.   Has the value of `-1` if there's an error with fetching SLO related problems.
	RelatedTotalProblems *int32 `json:"relatedTotalProblems,omitempty"`
	// The status of the calculated SLO.
	Status string `json:"status"`
	// The target value of the SLO.
	Target float64 `json:"target"`
	// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector.
	Timeframe string `json:"timeframe"`
	// The type of the metric to use for SLO calculation:   * `true`: An existing percentage-based metric.  * `false`: A ratio of two metrics.   For a list of available metrics, see [Built-in metric page](https://dt-url.net/be03kow) or try the [GET metrics](https://dt-url.net/8e43kxf) API call.
	// Deprecated
	UseRateMetric *bool `json:"useRateMetric,omitempty"`
	// The warning value of the SLO.    At warning state the SLO is still fulfilled but is getting close to failure.
	Warning float64 `json:"warning"`
}

// NewSLO instantiates a new SLO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLO(burnRateMetricKey string, enabled bool, error_ string, errorBudget float64, errorBudgetBurnRate SloBurnRate, errorBudgetMetricKey string, evaluatedPercentage float64, evaluationType string, filter string, id string, metricExpression string, metricKey string, name string, normalizedErrorBudgetMetricKey string, status string, target float64, timeframe string, warning float64) *SLO {
	this := SLO{}
	this.BurnRateMetricKey = burnRateMetricKey
	this.Enabled = enabled
	this.Error = error_
	this.ErrorBudget = errorBudget
	this.ErrorBudgetBurnRate = errorBudgetBurnRate
	this.ErrorBudgetMetricKey = errorBudgetMetricKey
	this.EvaluatedPercentage = evaluatedPercentage
	this.EvaluationType = evaluationType
	this.Filter = filter
	this.Id = id
	this.MetricExpression = metricExpression
	this.MetricKey = metricKey
	this.Name = name
	this.NormalizedErrorBudgetMetricKey = normalizedErrorBudgetMetricKey
	this.Status = status
	this.Target = target
	this.Timeframe = timeframe
	this.Warning = warning
	return &this
}

// NewSLOWithDefaults instantiates a new SLO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLOWithDefaults() *SLO {
	this := SLO{}
	return &this
}

// GetBurnRateMetricKey returns the BurnRateMetricKey field value
func (o *SLO) GetBurnRateMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BurnRateMetricKey
}

// GetBurnRateMetricKeyOk returns a tuple with the BurnRateMetricKey field value
// and a boolean to check if the value has been set.
func (o *SLO) GetBurnRateMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BurnRateMetricKey, true
}

// SetBurnRateMetricKey sets field value
func (o *SLO) SetBurnRateMetricKey(v string) {
	o.BurnRateMetricKey = v
}

// GetDenominatorValue returns the DenominatorValue field value if set, zero value otherwise.
// Deprecated
func (o *SLO) GetDenominatorValue() float64 {
	if o == nil || IsNil(o.DenominatorValue) {
		var ret float64
		return ret
	}
	return *o.DenominatorValue
}

// GetDenominatorValueOk returns a tuple with the DenominatorValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SLO) GetDenominatorValueOk() (*float64, bool) {
	if o == nil || IsNil(o.DenominatorValue) {
		return nil, false
	}
	return o.DenominatorValue, true
}

// HasDenominatorValue returns a boolean if a field has been set.
func (o *SLO) HasDenominatorValue() bool {
	if o != nil && !IsNil(o.DenominatorValue) {
		return true
	}

	return false
}

// SetDenominatorValue gets a reference to the given float64 and assigns it to the DenominatorValue field.
// Deprecated
func (o *SLO) SetDenominatorValue(v float64) {
	o.DenominatorValue = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SLO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SLO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SLO) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *SLO) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SLO) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SLO) SetEnabled(v bool) {
	o.Enabled = v
}

// GetError returns the Error field value
func (o *SLO) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *SLO) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *SLO) SetError(v string) {
	o.Error = v
}

// GetErrorBudget returns the ErrorBudget field value
func (o *SLO) GetErrorBudget() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ErrorBudget
}

// GetErrorBudgetOk returns a tuple with the ErrorBudget field value
// and a boolean to check if the value has been set.
func (o *SLO) GetErrorBudgetOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorBudget, true
}

// SetErrorBudget sets field value
func (o *SLO) SetErrorBudget(v float64) {
	o.ErrorBudget = v
}

// GetErrorBudgetBurnRate returns the ErrorBudgetBurnRate field value
func (o *SLO) GetErrorBudgetBurnRate() SloBurnRate {
	if o == nil {
		var ret SloBurnRate
		return ret
	}

	return o.ErrorBudgetBurnRate
}

// GetErrorBudgetBurnRateOk returns a tuple with the ErrorBudgetBurnRate field value
// and a boolean to check if the value has been set.
func (o *SLO) GetErrorBudgetBurnRateOk() (*SloBurnRate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorBudgetBurnRate, true
}

// SetErrorBudgetBurnRate sets field value
func (o *SLO) SetErrorBudgetBurnRate(v SloBurnRate) {
	o.ErrorBudgetBurnRate = v
}

// GetErrorBudgetMetricKey returns the ErrorBudgetMetricKey field value
func (o *SLO) GetErrorBudgetMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorBudgetMetricKey
}

// GetErrorBudgetMetricKeyOk returns a tuple with the ErrorBudgetMetricKey field value
// and a boolean to check if the value has been set.
func (o *SLO) GetErrorBudgetMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorBudgetMetricKey, true
}

// SetErrorBudgetMetricKey sets field value
func (o *SLO) SetErrorBudgetMetricKey(v string) {
	o.ErrorBudgetMetricKey = v
}

// GetEvaluatedPercentage returns the EvaluatedPercentage field value
func (o *SLO) GetEvaluatedPercentage() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.EvaluatedPercentage
}

// GetEvaluatedPercentageOk returns a tuple with the EvaluatedPercentage field value
// and a boolean to check if the value has been set.
func (o *SLO) GetEvaluatedPercentageOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EvaluatedPercentage, true
}

// SetEvaluatedPercentage sets field value
func (o *SLO) SetEvaluatedPercentage(v float64) {
	o.EvaluatedPercentage = v
}

// GetEvaluationType returns the EvaluationType field value
func (o *SLO) GetEvaluationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EvaluationType
}

// GetEvaluationTypeOk returns a tuple with the EvaluationType field value
// and a boolean to check if the value has been set.
func (o *SLO) GetEvaluationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EvaluationType, true
}

// SetEvaluationType sets field value
func (o *SLO) SetEvaluationType(v string) {
	o.EvaluationType = v
}

// GetFilter returns the Filter field value
func (o *SLO) GetFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *SLO) GetFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *SLO) SetFilter(v string) {
	o.Filter = v
}

// GetId returns the Id field value
func (o *SLO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SLO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SLO) SetId(v string) {
	o.Id = v
}

// GetMetricDenominator returns the MetricDenominator field value if set, zero value otherwise.
// Deprecated
func (o *SLO) GetMetricDenominator() string {
	if o == nil || IsNil(o.MetricDenominator) {
		var ret string
		return ret
	}
	return *o.MetricDenominator
}

// GetMetricDenominatorOk returns a tuple with the MetricDenominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SLO) GetMetricDenominatorOk() (*string, bool) {
	if o == nil || IsNil(o.MetricDenominator) {
		return nil, false
	}
	return o.MetricDenominator, true
}

// HasMetricDenominator returns a boolean if a field has been set.
func (o *SLO) HasMetricDenominator() bool {
	if o != nil && !IsNil(o.MetricDenominator) {
		return true
	}

	return false
}

// SetMetricDenominator gets a reference to the given string and assigns it to the MetricDenominator field.
// Deprecated
func (o *SLO) SetMetricDenominator(v string) {
	o.MetricDenominator = &v
}

// GetMetricExpression returns the MetricExpression field value
func (o *SLO) GetMetricExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricExpression
}

// GetMetricExpressionOk returns a tuple with the MetricExpression field value
// and a boolean to check if the value has been set.
func (o *SLO) GetMetricExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricExpression, true
}

// SetMetricExpression sets field value
func (o *SLO) SetMetricExpression(v string) {
	o.MetricExpression = v
}

// GetMetricKey returns the MetricKey field value
func (o *SLO) GetMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricKey
}

// GetMetricKeyOk returns a tuple with the MetricKey field value
// and a boolean to check if the value has been set.
func (o *SLO) GetMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricKey, true
}

// SetMetricKey sets field value
func (o *SLO) SetMetricKey(v string) {
	o.MetricKey = v
}

// GetMetricNumerator returns the MetricNumerator field value if set, zero value otherwise.
// Deprecated
func (o *SLO) GetMetricNumerator() string {
	if o == nil || IsNil(o.MetricNumerator) {
		var ret string
		return ret
	}
	return *o.MetricNumerator
}

// GetMetricNumeratorOk returns a tuple with the MetricNumerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SLO) GetMetricNumeratorOk() (*string, bool) {
	if o == nil || IsNil(o.MetricNumerator) {
		return nil, false
	}
	return o.MetricNumerator, true
}

// HasMetricNumerator returns a boolean if a field has been set.
func (o *SLO) HasMetricNumerator() bool {
	if o != nil && !IsNil(o.MetricNumerator) {
		return true
	}

	return false
}

// SetMetricNumerator gets a reference to the given string and assigns it to the MetricNumerator field.
// Deprecated
func (o *SLO) SetMetricNumerator(v string) {
	o.MetricNumerator = &v
}

// GetMetricRate returns the MetricRate field value if set, zero value otherwise.
// Deprecated
func (o *SLO) GetMetricRate() string {
	if o == nil || IsNil(o.MetricRate) {
		var ret string
		return ret
	}
	return *o.MetricRate
}

// GetMetricRateOk returns a tuple with the MetricRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SLO) GetMetricRateOk() (*string, bool) {
	if o == nil || IsNil(o.MetricRate) {
		return nil, false
	}
	return o.MetricRate, true
}

// HasMetricRate returns a boolean if a field has been set.
func (o *SLO) HasMetricRate() bool {
	if o != nil && !IsNil(o.MetricRate) {
		return true
	}

	return false
}

// SetMetricRate gets a reference to the given string and assigns it to the MetricRate field.
// Deprecated
func (o *SLO) SetMetricRate(v string) {
	o.MetricRate = &v
}

// GetName returns the Name field value
func (o *SLO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SLO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SLO) SetName(v string) {
	o.Name = v
}

// GetNormalizedErrorBudgetMetricKey returns the NormalizedErrorBudgetMetricKey field value
func (o *SLO) GetNormalizedErrorBudgetMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NormalizedErrorBudgetMetricKey
}

// GetNormalizedErrorBudgetMetricKeyOk returns a tuple with the NormalizedErrorBudgetMetricKey field value
// and a boolean to check if the value has been set.
func (o *SLO) GetNormalizedErrorBudgetMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NormalizedErrorBudgetMetricKey, true
}

// SetNormalizedErrorBudgetMetricKey sets field value
func (o *SLO) SetNormalizedErrorBudgetMetricKey(v string) {
	o.NormalizedErrorBudgetMetricKey = v
}

// GetNumeratorValue returns the NumeratorValue field value if set, zero value otherwise.
// Deprecated
func (o *SLO) GetNumeratorValue() float64 {
	if o == nil || IsNil(o.NumeratorValue) {
		var ret float64
		return ret
	}
	return *o.NumeratorValue
}

// GetNumeratorValueOk returns a tuple with the NumeratorValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SLO) GetNumeratorValueOk() (*float64, bool) {
	if o == nil || IsNil(o.NumeratorValue) {
		return nil, false
	}
	return o.NumeratorValue, true
}

// HasNumeratorValue returns a boolean if a field has been set.
func (o *SLO) HasNumeratorValue() bool {
	if o != nil && !IsNil(o.NumeratorValue) {
		return true
	}

	return false
}

// SetNumeratorValue gets a reference to the given float64 and assigns it to the NumeratorValue field.
// Deprecated
func (o *SLO) SetNumeratorValue(v float64) {
	o.NumeratorValue = &v
}

// GetProblemFilters returns the ProblemFilters field value if set, zero value otherwise.
// Deprecated
func (o *SLO) GetProblemFilters() []string {
	if o == nil || IsNil(o.ProblemFilters) {
		var ret []string
		return ret
	}
	return o.ProblemFilters
}

// GetProblemFiltersOk returns a tuple with the ProblemFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SLO) GetProblemFiltersOk() ([]string, bool) {
	if o == nil || IsNil(o.ProblemFilters) {
		return nil, false
	}
	return o.ProblemFilters, true
}

// HasProblemFilters returns a boolean if a field has been set.
func (o *SLO) HasProblemFilters() bool {
	if o != nil && !IsNil(o.ProblemFilters) {
		return true
	}

	return false
}

// SetProblemFilters gets a reference to the given []string and assigns it to the ProblemFilters field.
// Deprecated
func (o *SLO) SetProblemFilters(v []string) {
	o.ProblemFilters = v
}

// GetRelatedOpenProblems returns the RelatedOpenProblems field value if set, zero value otherwise.
func (o *SLO) GetRelatedOpenProblems() int32 {
	if o == nil || IsNil(o.RelatedOpenProblems) {
		var ret int32
		return ret
	}
	return *o.RelatedOpenProblems
}

// GetRelatedOpenProblemsOk returns a tuple with the RelatedOpenProblems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetRelatedOpenProblemsOk() (*int32, bool) {
	if o == nil || IsNil(o.RelatedOpenProblems) {
		return nil, false
	}
	return o.RelatedOpenProblems, true
}

// HasRelatedOpenProblems returns a boolean if a field has been set.
func (o *SLO) HasRelatedOpenProblems() bool {
	if o != nil && !IsNil(o.RelatedOpenProblems) {
		return true
	}

	return false
}

// SetRelatedOpenProblems gets a reference to the given int32 and assigns it to the RelatedOpenProblems field.
func (o *SLO) SetRelatedOpenProblems(v int32) {
	o.RelatedOpenProblems = &v
}

// GetRelatedTotalProblems returns the RelatedTotalProblems field value if set, zero value otherwise.
func (o *SLO) GetRelatedTotalProblems() int32 {
	if o == nil || IsNil(o.RelatedTotalProblems) {
		var ret int32
		return ret
	}
	return *o.RelatedTotalProblems
}

// GetRelatedTotalProblemsOk returns a tuple with the RelatedTotalProblems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetRelatedTotalProblemsOk() (*int32, bool) {
	if o == nil || IsNil(o.RelatedTotalProblems) {
		return nil, false
	}
	return o.RelatedTotalProblems, true
}

// HasRelatedTotalProblems returns a boolean if a field has been set.
func (o *SLO) HasRelatedTotalProblems() bool {
	if o != nil && !IsNil(o.RelatedTotalProblems) {
		return true
	}

	return false
}

// SetRelatedTotalProblems gets a reference to the given int32 and assigns it to the RelatedTotalProblems field.
func (o *SLO) SetRelatedTotalProblems(v int32) {
	o.RelatedTotalProblems = &v
}

// GetStatus returns the Status field value
func (o *SLO) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SLO) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SLO) SetStatus(v string) {
	o.Status = v
}

// GetTarget returns the Target field value
func (o *SLO) GetTarget() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *SLO) GetTargetOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *SLO) SetTarget(v float64) {
	o.Target = v
}

// GetTimeframe returns the Timeframe field value
func (o *SLO) GetTimeframe() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timeframe
}

// GetTimeframeOk returns a tuple with the Timeframe field value
// and a boolean to check if the value has been set.
func (o *SLO) GetTimeframeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeframe, true
}

// SetTimeframe sets field value
func (o *SLO) SetTimeframe(v string) {
	o.Timeframe = v
}

// GetUseRateMetric returns the UseRateMetric field value if set, zero value otherwise.
// Deprecated
func (o *SLO) GetUseRateMetric() bool {
	if o == nil || IsNil(o.UseRateMetric) {
		var ret bool
		return ret
	}
	return *o.UseRateMetric
}

// GetUseRateMetricOk returns a tuple with the UseRateMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SLO) GetUseRateMetricOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRateMetric) {
		return nil, false
	}
	return o.UseRateMetric, true
}

// HasUseRateMetric returns a boolean if a field has been set.
func (o *SLO) HasUseRateMetric() bool {
	if o != nil && !IsNil(o.UseRateMetric) {
		return true
	}

	return false
}

// SetUseRateMetric gets a reference to the given bool and assigns it to the UseRateMetric field.
// Deprecated
func (o *SLO) SetUseRateMetric(v bool) {
	o.UseRateMetric = &v
}

// GetWarning returns the Warning field value
func (o *SLO) GetWarning() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Warning
}

// GetWarningOk returns a tuple with the Warning field value
// and a boolean to check if the value has been set.
func (o *SLO) GetWarningOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Warning, true
}

// SetWarning sets field value
func (o *SLO) SetWarning(v float64) {
	o.Warning = v
}

func (o SLO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SLO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["burnRateMetricKey"] = o.BurnRateMetricKey
	if !IsNil(o.DenominatorValue) {
		toSerialize["denominatorValue"] = o.DenominatorValue
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["error"] = o.Error
	toSerialize["errorBudget"] = o.ErrorBudget
	toSerialize["errorBudgetBurnRate"] = o.ErrorBudgetBurnRate
	toSerialize["errorBudgetMetricKey"] = o.ErrorBudgetMetricKey
	toSerialize["evaluatedPercentage"] = o.EvaluatedPercentage
	toSerialize["evaluationType"] = o.EvaluationType
	toSerialize["filter"] = o.Filter
	toSerialize["id"] = o.Id
	if !IsNil(o.MetricDenominator) {
		toSerialize["metricDenominator"] = o.MetricDenominator
	}
	toSerialize["metricExpression"] = o.MetricExpression
	toSerialize["metricKey"] = o.MetricKey
	if !IsNil(o.MetricNumerator) {
		toSerialize["metricNumerator"] = o.MetricNumerator
	}
	if !IsNil(o.MetricRate) {
		toSerialize["metricRate"] = o.MetricRate
	}
	toSerialize["name"] = o.Name
	toSerialize["normalizedErrorBudgetMetricKey"] = o.NormalizedErrorBudgetMetricKey
	if !IsNil(o.NumeratorValue) {
		toSerialize["numeratorValue"] = o.NumeratorValue
	}
	if !IsNil(o.ProblemFilters) {
		toSerialize["problemFilters"] = o.ProblemFilters
	}
	if !IsNil(o.RelatedOpenProblems) {
		toSerialize["relatedOpenProblems"] = o.RelatedOpenProblems
	}
	if !IsNil(o.RelatedTotalProblems) {
		toSerialize["relatedTotalProblems"] = o.RelatedTotalProblems
	}
	toSerialize["status"] = o.Status
	toSerialize["target"] = o.Target
	toSerialize["timeframe"] = o.Timeframe
	if !IsNil(o.UseRateMetric) {
		toSerialize["useRateMetric"] = o.UseRateMetric
	}
	toSerialize["warning"] = o.Warning
	return toSerialize, nil
}

type NullableSLO struct {
	value *SLO
	isSet bool
}

func (v NullableSLO) Get() *SLO {
	return v.value
}

func (v *NullableSLO) Set(val *SLO) {
	v.value = val
	v.isSet = true
}

func (v NullableSLO) IsSet() bool {
	return v.isSet
}

func (v *NullableSLO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLO(val *SLO) *NullableSLO {
	return &NullableSLO{value: val, isSet: true}
}

func (v NullableSLO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


