/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the BizEventIngestError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BizEventIngestError{}

// BizEventIngestError struct for BizEventIngestError
type BizEventIngestError struct {
	Id *string `json:"id,omitempty"`
	Index *int32 `json:"index,omitempty"`
	Message *string `json:"message,omitempty"`
	Source *string `json:"source,omitempty"`
}

// NewBizEventIngestError instantiates a new BizEventIngestError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBizEventIngestError() *BizEventIngestError {
	this := BizEventIngestError{}
	return &this
}

// NewBizEventIngestErrorWithDefaults instantiates a new BizEventIngestError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBizEventIngestErrorWithDefaults() *BizEventIngestError {
	this := BizEventIngestError{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BizEventIngestError) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BizEventIngestError) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BizEventIngestError) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BizEventIngestError) SetId(v string) {
	o.Id = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *BizEventIngestError) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BizEventIngestError) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *BizEventIngestError) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *BizEventIngestError) SetIndex(v int32) {
	o.Index = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *BizEventIngestError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BizEventIngestError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *BizEventIngestError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *BizEventIngestError) SetMessage(v string) {
	o.Message = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *BizEventIngestError) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BizEventIngestError) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *BizEventIngestError) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *BizEventIngestError) SetSource(v string) {
	o.Source = &v
}

func (o BizEventIngestError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BizEventIngestError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableBizEventIngestError struct {
	value *BizEventIngestError
	isSet bool
}

func (v NullableBizEventIngestError) Get() *BizEventIngestError {
	return v.value
}

func (v *NullableBizEventIngestError) Set(val *BizEventIngestError) {
	v.value = val
	v.isSet = true
}

func (v NullableBizEventIngestError) IsSet() bool {
	return v.isSet
}

func (v *NullableBizEventIngestError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBizEventIngestError(val *BizEventIngestError) *NullableBizEventIngestError {
	return &NullableBizEventIngestError{value: val, isSet: true}
}

func (v NullableBizEventIngestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBizEventIngestError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


