/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Invocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invocation{}

// Invocation Invocation of a function, e.g. the `entitySelector` function.
type Invocation struct {
	// Arguments to pass to the function, e.g. entity selector source code.
	Args []string `json:"args,omitempty"`
	// Function that is invoked, e.g. `entitySelector`.
	Function *string `json:"function,omitempty"`
}

// NewInvocation instantiates a new Invocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvocation() *Invocation {
	this := Invocation{}
	return &this
}

// NewInvocationWithDefaults instantiates a new Invocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvocationWithDefaults() *Invocation {
	this := Invocation{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *Invocation) GetArgs() []string {
	if o == nil || IsNil(o.Args) {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invocation) GetArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *Invocation) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *Invocation) SetArgs(v []string) {
	o.Args = v
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *Invocation) GetFunction() string {
	if o == nil || IsNil(o.Function) {
		var ret string
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invocation) GetFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.Function) {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *Invocation) HasFunction() bool {
	if o != nil && !IsNil(o.Function) {
		return true
	}

	return false
}

// SetFunction gets a reference to the given string and assigns it to the Function field.
func (o *Invocation) SetFunction(v string) {
	o.Function = &v
}

func (o Invocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.Function) {
		toSerialize["function"] = o.Function
	}
	return toSerialize, nil
}

type NullableInvocation struct {
	value *Invocation
	isSet bool
}

func (v NullableInvocation) Get() *Invocation {
	return v.value
}

func (v *NullableInvocation) Set(val *Invocation) {
	v.value = val
	v.isSet = true
}

func (v NullableInvocation) IsSet() bool {
	return v.isSet
}

func (v *NullableInvocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvocation(val *Invocation) *NullableInvocation {
	return &NullableInvocation{value: val, isSet: true}
}

func (v NullableInvocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


