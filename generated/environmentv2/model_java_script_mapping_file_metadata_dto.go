/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the JavaScriptMappingFileMetadataDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JavaScriptMappingFileMetadataDto{}

// JavaScriptMappingFileMetadataDto struct for JavaScriptMappingFileMetadataDto
type JavaScriptMappingFileMetadataDto struct {
	// Whether the file is pinned and therefore not automatically deleted.
	Pinned *bool `json:"pinned,omitempty"`
}

// NewJavaScriptMappingFileMetadataDto instantiates a new JavaScriptMappingFileMetadataDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJavaScriptMappingFileMetadataDto() *JavaScriptMappingFileMetadataDto {
	this := JavaScriptMappingFileMetadataDto{}
	return &this
}

// NewJavaScriptMappingFileMetadataDtoWithDefaults instantiates a new JavaScriptMappingFileMetadataDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJavaScriptMappingFileMetadataDtoWithDefaults() *JavaScriptMappingFileMetadataDto {
	this := JavaScriptMappingFileMetadataDto{}
	return &this
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *JavaScriptMappingFileMetadataDto) GetPinned() bool {
	if o == nil || IsNil(o.Pinned) {
		var ret bool
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaScriptMappingFileMetadataDto) GetPinnedOk() (*bool, bool) {
	if o == nil || IsNil(o.Pinned) {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *JavaScriptMappingFileMetadataDto) HasPinned() bool {
	if o != nil && !IsNil(o.Pinned) {
		return true
	}

	return false
}

// SetPinned gets a reference to the given bool and assigns it to the Pinned field.
func (o *JavaScriptMappingFileMetadataDto) SetPinned(v bool) {
	o.Pinned = &v
}

func (o JavaScriptMappingFileMetadataDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JavaScriptMappingFileMetadataDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pinned) {
		toSerialize["pinned"] = o.Pinned
	}
	return toSerialize, nil
}

type NullableJavaScriptMappingFileMetadataDto struct {
	value *JavaScriptMappingFileMetadataDto
	isSet bool
}

func (v NullableJavaScriptMappingFileMetadataDto) Get() *JavaScriptMappingFileMetadataDto {
	return v.value
}

func (v *NullableJavaScriptMappingFileMetadataDto) Set(val *JavaScriptMappingFileMetadataDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJavaScriptMappingFileMetadataDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJavaScriptMappingFileMetadataDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJavaScriptMappingFileMetadataDto(val *JavaScriptMappingFileMetadataDto) *NullableJavaScriptMappingFileMetadataDto {
	return &NullableJavaScriptMappingFileMetadataDto{value: val, isSet: true}
}

func (v NullableJavaScriptMappingFileMetadataDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJavaScriptMappingFileMetadataDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


