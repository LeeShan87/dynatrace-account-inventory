/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the VulnerableFunctionProcessGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerableFunctionProcessGroups{}

// VulnerableFunctionProcessGroups A vulnerable function including its usage by specific process groups in context of the security problem.
type VulnerableFunctionProcessGroups struct {
	Function *VulnerableFunction `json:"function,omitempty"`
	// The process group identifiers, where this vulnerable function is in use.
	ProcessGroupsInUse []string `json:"processGroupsInUse,omitempty"`
	// The process group identifiers, where information about the usage of this function not available.
	ProcessGroupsNotAvailable []string `json:"processGroupsNotAvailable,omitempty"`
	// The process group identifiers, where this vulnerable function is not in use.
	ProcessGroupsNotInUse []string `json:"processGroupsNotInUse,omitempty"`
	// The vulnerable function usage based on the given process groups: * IN_USE if at least one process group calls this vulnerable function. * NOT_IN_USE if all process groups do not call this vulnerable function. * NOT_AVAILABLE if vulnerable function usage could not be calculated for at least one process group and no process group calls this vulnerable function.
	Usage *string `json:"usage,omitempty"`
}

// NewVulnerableFunctionProcessGroups instantiates a new VulnerableFunctionProcessGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerableFunctionProcessGroups() *VulnerableFunctionProcessGroups {
	this := VulnerableFunctionProcessGroups{}
	return &this
}

// NewVulnerableFunctionProcessGroupsWithDefaults instantiates a new VulnerableFunctionProcessGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerableFunctionProcessGroupsWithDefaults() *VulnerableFunctionProcessGroups {
	this := VulnerableFunctionProcessGroups{}
	return &this
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *VulnerableFunctionProcessGroups) GetFunction() VulnerableFunction {
	if o == nil || IsNil(o.Function) {
		var ret VulnerableFunction
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerableFunctionProcessGroups) GetFunctionOk() (*VulnerableFunction, bool) {
	if o == nil || IsNil(o.Function) {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *VulnerableFunctionProcessGroups) HasFunction() bool {
	if o != nil && !IsNil(o.Function) {
		return true
	}

	return false
}

// SetFunction gets a reference to the given VulnerableFunction and assigns it to the Function field.
func (o *VulnerableFunctionProcessGroups) SetFunction(v VulnerableFunction) {
	o.Function = &v
}

// GetProcessGroupsInUse returns the ProcessGroupsInUse field value if set, zero value otherwise.
func (o *VulnerableFunctionProcessGroups) GetProcessGroupsInUse() []string {
	if o == nil || IsNil(o.ProcessGroupsInUse) {
		var ret []string
		return ret
	}
	return o.ProcessGroupsInUse
}

// GetProcessGroupsInUseOk returns a tuple with the ProcessGroupsInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerableFunctionProcessGroups) GetProcessGroupsInUseOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessGroupsInUse) {
		return nil, false
	}
	return o.ProcessGroupsInUse, true
}

// HasProcessGroupsInUse returns a boolean if a field has been set.
func (o *VulnerableFunctionProcessGroups) HasProcessGroupsInUse() bool {
	if o != nil && !IsNil(o.ProcessGroupsInUse) {
		return true
	}

	return false
}

// SetProcessGroupsInUse gets a reference to the given []string and assigns it to the ProcessGroupsInUse field.
func (o *VulnerableFunctionProcessGroups) SetProcessGroupsInUse(v []string) {
	o.ProcessGroupsInUse = v
}

// GetProcessGroupsNotAvailable returns the ProcessGroupsNotAvailable field value if set, zero value otherwise.
func (o *VulnerableFunctionProcessGroups) GetProcessGroupsNotAvailable() []string {
	if o == nil || IsNil(o.ProcessGroupsNotAvailable) {
		var ret []string
		return ret
	}
	return o.ProcessGroupsNotAvailable
}

// GetProcessGroupsNotAvailableOk returns a tuple with the ProcessGroupsNotAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerableFunctionProcessGroups) GetProcessGroupsNotAvailableOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessGroupsNotAvailable) {
		return nil, false
	}
	return o.ProcessGroupsNotAvailable, true
}

// HasProcessGroupsNotAvailable returns a boolean if a field has been set.
func (o *VulnerableFunctionProcessGroups) HasProcessGroupsNotAvailable() bool {
	if o != nil && !IsNil(o.ProcessGroupsNotAvailable) {
		return true
	}

	return false
}

// SetProcessGroupsNotAvailable gets a reference to the given []string and assigns it to the ProcessGroupsNotAvailable field.
func (o *VulnerableFunctionProcessGroups) SetProcessGroupsNotAvailable(v []string) {
	o.ProcessGroupsNotAvailable = v
}

// GetProcessGroupsNotInUse returns the ProcessGroupsNotInUse field value if set, zero value otherwise.
func (o *VulnerableFunctionProcessGroups) GetProcessGroupsNotInUse() []string {
	if o == nil || IsNil(o.ProcessGroupsNotInUse) {
		var ret []string
		return ret
	}
	return o.ProcessGroupsNotInUse
}

// GetProcessGroupsNotInUseOk returns a tuple with the ProcessGroupsNotInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerableFunctionProcessGroups) GetProcessGroupsNotInUseOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessGroupsNotInUse) {
		return nil, false
	}
	return o.ProcessGroupsNotInUse, true
}

// HasProcessGroupsNotInUse returns a boolean if a field has been set.
func (o *VulnerableFunctionProcessGroups) HasProcessGroupsNotInUse() bool {
	if o != nil && !IsNil(o.ProcessGroupsNotInUse) {
		return true
	}

	return false
}

// SetProcessGroupsNotInUse gets a reference to the given []string and assigns it to the ProcessGroupsNotInUse field.
func (o *VulnerableFunctionProcessGroups) SetProcessGroupsNotInUse(v []string) {
	o.ProcessGroupsNotInUse = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *VulnerableFunctionProcessGroups) GetUsage() string {
	if o == nil || IsNil(o.Usage) {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerableFunctionProcessGroups) GetUsageOk() (*string, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *VulnerableFunctionProcessGroups) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *VulnerableFunctionProcessGroups) SetUsage(v string) {
	o.Usage = &v
}

func (o VulnerableFunctionProcessGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerableFunctionProcessGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Function) {
		toSerialize["function"] = o.Function
	}
	if !IsNil(o.ProcessGroupsInUse) {
		toSerialize["processGroupsInUse"] = o.ProcessGroupsInUse
	}
	if !IsNil(o.ProcessGroupsNotAvailable) {
		toSerialize["processGroupsNotAvailable"] = o.ProcessGroupsNotAvailable
	}
	if !IsNil(o.ProcessGroupsNotInUse) {
		toSerialize["processGroupsNotInUse"] = o.ProcessGroupsNotInUse
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableVulnerableFunctionProcessGroups struct {
	value *VulnerableFunctionProcessGroups
	isSet bool
}

func (v NullableVulnerableFunctionProcessGroups) Get() *VulnerableFunctionProcessGroups {
	return v.value
}

func (v *NullableVulnerableFunctionProcessGroups) Set(val *VulnerableFunctionProcessGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerableFunctionProcessGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerableFunctionProcessGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerableFunctionProcessGroups(val *VulnerableFunctionProcessGroups) *NullableVulnerableFunctionProcessGroups {
	return &NullableVulnerableFunctionProcessGroups{value: val, isSet: true}
}

func (v NullableVulnerableFunctionProcessGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerableFunctionProcessGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


