/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Attack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attack{}

// Attack Describes an attack.
type Attack struct {
	AffectedEntities *AffectedEntities `json:"affectedEntities,omitempty"`
	// The ID of the attack.
	AttackId *string `json:"attackId,omitempty"`
	AttackTarget *AttackTarget `json:"attackTarget,omitempty"`
	// The type of the attack.
	AttackType *string `json:"attackType,omitempty"`
	Attacker *Attacker `json:"attacker,omitempty"`
	// The display ID of the attack.
	DisplayId *string `json:"displayId,omitempty"`
	// The display name of the attack.
	DisplayName *string `json:"displayName,omitempty"`
	Entrypoint *AttackEntrypoint `json:"entrypoint,omitempty"`
	// A list of management zones which the affected entities belong to.
	ManagementZones []ManagementZone `json:"managementZones,omitempty"`
	Request *RequestInformation `json:"request,omitempty"`
	SecurityProblem *AttackSecurityProblem `json:"securityProblem,omitempty"`
	// The state of the attack.
	State *string `json:"state,omitempty"`
	// The technology of the attack.
	Technology *string `json:"technology,omitempty"`
	// The timestamp when the attack occurred.
	Timestamp *int64 `json:"timestamp,omitempty"`
	Vulnerability *Vulnerability `json:"vulnerability,omitempty"`
}

// NewAttack instantiates a new Attack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttack() *Attack {
	this := Attack{}
	return &this
}

// NewAttackWithDefaults instantiates a new Attack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttackWithDefaults() *Attack {
	this := Attack{}
	return &this
}

// GetAffectedEntities returns the AffectedEntities field value if set, zero value otherwise.
func (o *Attack) GetAffectedEntities() AffectedEntities {
	if o == nil || IsNil(o.AffectedEntities) {
		var ret AffectedEntities
		return ret
	}
	return *o.AffectedEntities
}

// GetAffectedEntitiesOk returns a tuple with the AffectedEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetAffectedEntitiesOk() (*AffectedEntities, bool) {
	if o == nil || IsNil(o.AffectedEntities) {
		return nil, false
	}
	return o.AffectedEntities, true
}

// HasAffectedEntities returns a boolean if a field has been set.
func (o *Attack) HasAffectedEntities() bool {
	if o != nil && !IsNil(o.AffectedEntities) {
		return true
	}

	return false
}

// SetAffectedEntities gets a reference to the given AffectedEntities and assigns it to the AffectedEntities field.
func (o *Attack) SetAffectedEntities(v AffectedEntities) {
	o.AffectedEntities = &v
}

// GetAttackId returns the AttackId field value if set, zero value otherwise.
func (o *Attack) GetAttackId() string {
	if o == nil || IsNil(o.AttackId) {
		var ret string
		return ret
	}
	return *o.AttackId
}

// GetAttackIdOk returns a tuple with the AttackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetAttackIdOk() (*string, bool) {
	if o == nil || IsNil(o.AttackId) {
		return nil, false
	}
	return o.AttackId, true
}

// HasAttackId returns a boolean if a field has been set.
func (o *Attack) HasAttackId() bool {
	if o != nil && !IsNil(o.AttackId) {
		return true
	}

	return false
}

// SetAttackId gets a reference to the given string and assigns it to the AttackId field.
func (o *Attack) SetAttackId(v string) {
	o.AttackId = &v
}

// GetAttackTarget returns the AttackTarget field value if set, zero value otherwise.
func (o *Attack) GetAttackTarget() AttackTarget {
	if o == nil || IsNil(o.AttackTarget) {
		var ret AttackTarget
		return ret
	}
	return *o.AttackTarget
}

// GetAttackTargetOk returns a tuple with the AttackTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetAttackTargetOk() (*AttackTarget, bool) {
	if o == nil || IsNil(o.AttackTarget) {
		return nil, false
	}
	return o.AttackTarget, true
}

// HasAttackTarget returns a boolean if a field has been set.
func (o *Attack) HasAttackTarget() bool {
	if o != nil && !IsNil(o.AttackTarget) {
		return true
	}

	return false
}

// SetAttackTarget gets a reference to the given AttackTarget and assigns it to the AttackTarget field.
func (o *Attack) SetAttackTarget(v AttackTarget) {
	o.AttackTarget = &v
}

// GetAttackType returns the AttackType field value if set, zero value otherwise.
func (o *Attack) GetAttackType() string {
	if o == nil || IsNil(o.AttackType) {
		var ret string
		return ret
	}
	return *o.AttackType
}

// GetAttackTypeOk returns a tuple with the AttackType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetAttackTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AttackType) {
		return nil, false
	}
	return o.AttackType, true
}

// HasAttackType returns a boolean if a field has been set.
func (o *Attack) HasAttackType() bool {
	if o != nil && !IsNil(o.AttackType) {
		return true
	}

	return false
}

// SetAttackType gets a reference to the given string and assigns it to the AttackType field.
func (o *Attack) SetAttackType(v string) {
	o.AttackType = &v
}

// GetAttacker returns the Attacker field value if set, zero value otherwise.
func (o *Attack) GetAttacker() Attacker {
	if o == nil || IsNil(o.Attacker) {
		var ret Attacker
		return ret
	}
	return *o.Attacker
}

// GetAttackerOk returns a tuple with the Attacker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetAttackerOk() (*Attacker, bool) {
	if o == nil || IsNil(o.Attacker) {
		return nil, false
	}
	return o.Attacker, true
}

// HasAttacker returns a boolean if a field has been set.
func (o *Attack) HasAttacker() bool {
	if o != nil && !IsNil(o.Attacker) {
		return true
	}

	return false
}

// SetAttacker gets a reference to the given Attacker and assigns it to the Attacker field.
func (o *Attack) SetAttacker(v Attacker) {
	o.Attacker = &v
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *Attack) GetDisplayId() string {
	if o == nil || IsNil(o.DisplayId) {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetDisplayIdOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayId) {
		return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *Attack) HasDisplayId() bool {
	if o != nil && !IsNil(o.DisplayId) {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *Attack) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Attack) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Attack) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Attack) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEntrypoint returns the Entrypoint field value if set, zero value otherwise.
func (o *Attack) GetEntrypoint() AttackEntrypoint {
	if o == nil || IsNil(o.Entrypoint) {
		var ret AttackEntrypoint
		return ret
	}
	return *o.Entrypoint
}

// GetEntrypointOk returns a tuple with the Entrypoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetEntrypointOk() (*AttackEntrypoint, bool) {
	if o == nil || IsNil(o.Entrypoint) {
		return nil, false
	}
	return o.Entrypoint, true
}

// HasEntrypoint returns a boolean if a field has been set.
func (o *Attack) HasEntrypoint() bool {
	if o != nil && !IsNil(o.Entrypoint) {
		return true
	}

	return false
}

// SetEntrypoint gets a reference to the given AttackEntrypoint and assigns it to the Entrypoint field.
func (o *Attack) SetEntrypoint(v AttackEntrypoint) {
	o.Entrypoint = &v
}

// GetManagementZones returns the ManagementZones field value if set, zero value otherwise.
func (o *Attack) GetManagementZones() []ManagementZone {
	if o == nil || IsNil(o.ManagementZones) {
		var ret []ManagementZone
		return ret
	}
	return o.ManagementZones
}

// GetManagementZonesOk returns a tuple with the ManagementZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetManagementZonesOk() ([]ManagementZone, bool) {
	if o == nil || IsNil(o.ManagementZones) {
		return nil, false
	}
	return o.ManagementZones, true
}

// HasManagementZones returns a boolean if a field has been set.
func (o *Attack) HasManagementZones() bool {
	if o != nil && !IsNil(o.ManagementZones) {
		return true
	}

	return false
}

// SetManagementZones gets a reference to the given []ManagementZone and assigns it to the ManagementZones field.
func (o *Attack) SetManagementZones(v []ManagementZone) {
	o.ManagementZones = v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *Attack) GetRequest() RequestInformation {
	if o == nil || IsNil(o.Request) {
		var ret RequestInformation
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetRequestOk() (*RequestInformation, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *Attack) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given RequestInformation and assigns it to the Request field.
func (o *Attack) SetRequest(v RequestInformation) {
	o.Request = &v
}

// GetSecurityProblem returns the SecurityProblem field value if set, zero value otherwise.
func (o *Attack) GetSecurityProblem() AttackSecurityProblem {
	if o == nil || IsNil(o.SecurityProblem) {
		var ret AttackSecurityProblem
		return ret
	}
	return *o.SecurityProblem
}

// GetSecurityProblemOk returns a tuple with the SecurityProblem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetSecurityProblemOk() (*AttackSecurityProblem, bool) {
	if o == nil || IsNil(o.SecurityProblem) {
		return nil, false
	}
	return o.SecurityProblem, true
}

// HasSecurityProblem returns a boolean if a field has been set.
func (o *Attack) HasSecurityProblem() bool {
	if o != nil && !IsNil(o.SecurityProblem) {
		return true
	}

	return false
}

// SetSecurityProblem gets a reference to the given AttackSecurityProblem and assigns it to the SecurityProblem field.
func (o *Attack) SetSecurityProblem(v AttackSecurityProblem) {
	o.SecurityProblem = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Attack) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Attack) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Attack) SetState(v string) {
	o.State = &v
}

// GetTechnology returns the Technology field value if set, zero value otherwise.
func (o *Attack) GetTechnology() string {
	if o == nil || IsNil(o.Technology) {
		var ret string
		return ret
	}
	return *o.Technology
}

// GetTechnologyOk returns a tuple with the Technology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetTechnologyOk() (*string, bool) {
	if o == nil || IsNil(o.Technology) {
		return nil, false
	}
	return o.Technology, true
}

// HasTechnology returns a boolean if a field has been set.
func (o *Attack) HasTechnology() bool {
	if o != nil && !IsNil(o.Technology) {
		return true
	}

	return false
}

// SetTechnology gets a reference to the given string and assigns it to the Technology field.
func (o *Attack) SetTechnology(v string) {
	o.Technology = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Attack) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Attack) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *Attack) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetVulnerability returns the Vulnerability field value if set, zero value otherwise.
func (o *Attack) GetVulnerability() Vulnerability {
	if o == nil || IsNil(o.Vulnerability) {
		var ret Vulnerability
		return ret
	}
	return *o.Vulnerability
}

// GetVulnerabilityOk returns a tuple with the Vulnerability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attack) GetVulnerabilityOk() (*Vulnerability, bool) {
	if o == nil || IsNil(o.Vulnerability) {
		return nil, false
	}
	return o.Vulnerability, true
}

// HasVulnerability returns a boolean if a field has been set.
func (o *Attack) HasVulnerability() bool {
	if o != nil && !IsNil(o.Vulnerability) {
		return true
	}

	return false
}

// SetVulnerability gets a reference to the given Vulnerability and assigns it to the Vulnerability field.
func (o *Attack) SetVulnerability(v Vulnerability) {
	o.Vulnerability = &v
}

func (o Attack) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AffectedEntities) {
		toSerialize["affectedEntities"] = o.AffectedEntities
	}
	if !IsNil(o.AttackId) {
		toSerialize["attackId"] = o.AttackId
	}
	if !IsNil(o.AttackTarget) {
		toSerialize["attackTarget"] = o.AttackTarget
	}
	if !IsNil(o.AttackType) {
		toSerialize["attackType"] = o.AttackType
	}
	if !IsNil(o.Attacker) {
		toSerialize["attacker"] = o.Attacker
	}
	if !IsNil(o.DisplayId) {
		toSerialize["displayId"] = o.DisplayId
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Entrypoint) {
		toSerialize["entrypoint"] = o.Entrypoint
	}
	if !IsNil(o.ManagementZones) {
		toSerialize["managementZones"] = o.ManagementZones
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.SecurityProblem) {
		toSerialize["securityProblem"] = o.SecurityProblem
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Technology) {
		toSerialize["technology"] = o.Technology
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Vulnerability) {
		toSerialize["vulnerability"] = o.Vulnerability
	}
	return toSerialize, nil
}

type NullableAttack struct {
	value *Attack
	isSet bool
}

func (v NullableAttack) Get() *Attack {
	return v.value
}

func (v *NullableAttack) Set(val *Attack) {
	v.value = val
	v.isSet = true
}

func (v NullableAttack) IsSet() bool {
	return v.isSet
}

func (v *NullableAttack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttack(val *Attack) *NullableAttack {
	return &NullableAttack{value: val, isSet: true}
}

func (v NullableAttack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


