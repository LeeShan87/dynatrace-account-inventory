/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SecurityProblemsBulkUnmuteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityProblemsBulkUnmuteResponse{}

// SecurityProblemsBulkUnmuteResponse Response of un-muting several security problems.
type SecurityProblemsBulkUnmuteResponse struct {
	// The summary of which security problems were un-muted and which already were un-muted previously.
	Summary []SecurityProblemBulkMutingSummary `json:"summary"`
}

// NewSecurityProblemsBulkUnmuteResponse instantiates a new SecurityProblemsBulkUnmuteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityProblemsBulkUnmuteResponse(summary []SecurityProblemBulkMutingSummary) *SecurityProblemsBulkUnmuteResponse {
	this := SecurityProblemsBulkUnmuteResponse{}
	this.Summary = summary
	return &this
}

// NewSecurityProblemsBulkUnmuteResponseWithDefaults instantiates a new SecurityProblemsBulkUnmuteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityProblemsBulkUnmuteResponseWithDefaults() *SecurityProblemsBulkUnmuteResponse {
	this := SecurityProblemsBulkUnmuteResponse{}
	return &this
}

// GetSummary returns the Summary field value
func (o *SecurityProblemsBulkUnmuteResponse) GetSummary() []SecurityProblemBulkMutingSummary {
	if o == nil {
		var ret []SecurityProblemBulkMutingSummary
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *SecurityProblemsBulkUnmuteResponse) GetSummaryOk() ([]SecurityProblemBulkMutingSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary, true
}

// SetSummary sets field value
func (o *SecurityProblemsBulkUnmuteResponse) SetSummary(v []SecurityProblemBulkMutingSummary) {
	o.Summary = v
}

func (o SecurityProblemsBulkUnmuteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityProblemsBulkUnmuteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["summary"] = o.Summary
	return toSerialize, nil
}

type NullableSecurityProblemsBulkUnmuteResponse struct {
	value *SecurityProblemsBulkUnmuteResponse
	isSet bool
}

func (v NullableSecurityProblemsBulkUnmuteResponse) Get() *SecurityProblemsBulkUnmuteResponse {
	return v.value
}

func (v *NullableSecurityProblemsBulkUnmuteResponse) Set(val *SecurityProblemsBulkUnmuteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityProblemsBulkUnmuteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityProblemsBulkUnmuteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityProblemsBulkUnmuteResponse(val *SecurityProblemsBulkUnmuteResponse) *NullableSecurityProblemsBulkUnmuteResponse {
	return &NullableSecurityProblemsBulkUnmuteResponse{value: val, isSet: true}
}

func (v NullableSecurityProblemsBulkUnmuteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityProblemsBulkUnmuteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


