/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the AssetInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetInfo{}

// AssetInfo Assets types and its count
type AssetInfo struct {
	AssetType *string `json:"assetType,omitempty"`
	Count *int32 `json:"count,omitempty"`
}

// NewAssetInfo instantiates a new AssetInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetInfo() *AssetInfo {
	this := AssetInfo{}
	return &this
}

// NewAssetInfoWithDefaults instantiates a new AssetInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetInfoWithDefaults() *AssetInfo {
	this := AssetInfo{}
	return &this
}

// GetAssetType returns the AssetType field value if set, zero value otherwise.
func (o *AssetInfo) GetAssetType() string {
	if o == nil || IsNil(o.AssetType) {
		var ret string
		return ret
	}
	return *o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetInfo) GetAssetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AssetType) {
		return nil, false
	}
	return o.AssetType, true
}

// HasAssetType returns a boolean if a field has been set.
func (o *AssetInfo) HasAssetType() bool {
	if o != nil && !IsNil(o.AssetType) {
		return true
	}

	return false
}

// SetAssetType gets a reference to the given string and assigns it to the AssetType field.
func (o *AssetInfo) SetAssetType(v string) {
	o.AssetType = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *AssetInfo) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetInfo) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *AssetInfo) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *AssetInfo) SetCount(v int32) {
	o.Count = &v
}

func (o AssetInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetType) {
		toSerialize["assetType"] = o.AssetType
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableAssetInfo struct {
	value *AssetInfo
	isSet bool
}

func (v NullableAssetInfo) Get() *AssetInfo {
	return v.value
}

func (v *NullableAssetInfo) Set(val *AssetInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetInfo(val *AssetInfo) *NullableAssetInfo {
	return &NullableAssetInfo{value: val, isSet: true}
}

func (v NullableAssetInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


