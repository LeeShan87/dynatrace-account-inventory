/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RiskAssessmentSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskAssessmentSnapshot{}

// RiskAssessmentSnapshot A snapshot of the risk assessment of a security problem.
type RiskAssessmentSnapshot struct {
	// The level of exposure of affected entities.
	Exposure *string `json:"exposure,omitempty"`
	// The number of currently affected entities.
	NumberOfAffectedEntities *int32 `json:"numberOfAffectedEntities,omitempty"`
	// The number of data assets that are currently reachable by affected entities.
	NumberOfReachableDataAssets *int32 `json:"numberOfReachableDataAssets,omitempty"`
	// The availability status of public exploits.
	PublicExploit *string `json:"publicExploit,omitempty"`
	// The Davis risk level.    It is calculated by Dynatrace on the basis of CVSS score.
	RiskLevel *string `json:"riskLevel,omitempty"`
	// The Davis risk score (1-10).    It is calculated by Dynatrace on the basis of CVSS score.
	RiskScore *float32 `json:"riskScore,omitempty"`
	// The state of vulnerable code execution.
	VulnerableFunctionUsage *string `json:"vulnerableFunctionUsage,omitempty"`
}

// NewRiskAssessmentSnapshot instantiates a new RiskAssessmentSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskAssessmentSnapshot() *RiskAssessmentSnapshot {
	this := RiskAssessmentSnapshot{}
	return &this
}

// NewRiskAssessmentSnapshotWithDefaults instantiates a new RiskAssessmentSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskAssessmentSnapshotWithDefaults() *RiskAssessmentSnapshot {
	this := RiskAssessmentSnapshot{}
	return &this
}

// GetExposure returns the Exposure field value if set, zero value otherwise.
func (o *RiskAssessmentSnapshot) GetExposure() string {
	if o == nil || IsNil(o.Exposure) {
		var ret string
		return ret
	}
	return *o.Exposure
}

// GetExposureOk returns a tuple with the Exposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessmentSnapshot) GetExposureOk() (*string, bool) {
	if o == nil || IsNil(o.Exposure) {
		return nil, false
	}
	return o.Exposure, true
}

// HasExposure returns a boolean if a field has been set.
func (o *RiskAssessmentSnapshot) HasExposure() bool {
	if o != nil && !IsNil(o.Exposure) {
		return true
	}

	return false
}

// SetExposure gets a reference to the given string and assigns it to the Exposure field.
func (o *RiskAssessmentSnapshot) SetExposure(v string) {
	o.Exposure = &v
}

// GetNumberOfAffectedEntities returns the NumberOfAffectedEntities field value if set, zero value otherwise.
func (o *RiskAssessmentSnapshot) GetNumberOfAffectedEntities() int32 {
	if o == nil || IsNil(o.NumberOfAffectedEntities) {
		var ret int32
		return ret
	}
	return *o.NumberOfAffectedEntities
}

// GetNumberOfAffectedEntitiesOk returns a tuple with the NumberOfAffectedEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessmentSnapshot) GetNumberOfAffectedEntitiesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfAffectedEntities) {
		return nil, false
	}
	return o.NumberOfAffectedEntities, true
}

// HasNumberOfAffectedEntities returns a boolean if a field has been set.
func (o *RiskAssessmentSnapshot) HasNumberOfAffectedEntities() bool {
	if o != nil && !IsNil(o.NumberOfAffectedEntities) {
		return true
	}

	return false
}

// SetNumberOfAffectedEntities gets a reference to the given int32 and assigns it to the NumberOfAffectedEntities field.
func (o *RiskAssessmentSnapshot) SetNumberOfAffectedEntities(v int32) {
	o.NumberOfAffectedEntities = &v
}

// GetNumberOfReachableDataAssets returns the NumberOfReachableDataAssets field value if set, zero value otherwise.
func (o *RiskAssessmentSnapshot) GetNumberOfReachableDataAssets() int32 {
	if o == nil || IsNil(o.NumberOfReachableDataAssets) {
		var ret int32
		return ret
	}
	return *o.NumberOfReachableDataAssets
}

// GetNumberOfReachableDataAssetsOk returns a tuple with the NumberOfReachableDataAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessmentSnapshot) GetNumberOfReachableDataAssetsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfReachableDataAssets) {
		return nil, false
	}
	return o.NumberOfReachableDataAssets, true
}

// HasNumberOfReachableDataAssets returns a boolean if a field has been set.
func (o *RiskAssessmentSnapshot) HasNumberOfReachableDataAssets() bool {
	if o != nil && !IsNil(o.NumberOfReachableDataAssets) {
		return true
	}

	return false
}

// SetNumberOfReachableDataAssets gets a reference to the given int32 and assigns it to the NumberOfReachableDataAssets field.
func (o *RiskAssessmentSnapshot) SetNumberOfReachableDataAssets(v int32) {
	o.NumberOfReachableDataAssets = &v
}

// GetPublicExploit returns the PublicExploit field value if set, zero value otherwise.
func (o *RiskAssessmentSnapshot) GetPublicExploit() string {
	if o == nil || IsNil(o.PublicExploit) {
		var ret string
		return ret
	}
	return *o.PublicExploit
}

// GetPublicExploitOk returns a tuple with the PublicExploit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessmentSnapshot) GetPublicExploitOk() (*string, bool) {
	if o == nil || IsNil(o.PublicExploit) {
		return nil, false
	}
	return o.PublicExploit, true
}

// HasPublicExploit returns a boolean if a field has been set.
func (o *RiskAssessmentSnapshot) HasPublicExploit() bool {
	if o != nil && !IsNil(o.PublicExploit) {
		return true
	}

	return false
}

// SetPublicExploit gets a reference to the given string and assigns it to the PublicExploit field.
func (o *RiskAssessmentSnapshot) SetPublicExploit(v string) {
	o.PublicExploit = &v
}

// GetRiskLevel returns the RiskLevel field value if set, zero value otherwise.
func (o *RiskAssessmentSnapshot) GetRiskLevel() string {
	if o == nil || IsNil(o.RiskLevel) {
		var ret string
		return ret
	}
	return *o.RiskLevel
}

// GetRiskLevelOk returns a tuple with the RiskLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessmentSnapshot) GetRiskLevelOk() (*string, bool) {
	if o == nil || IsNil(o.RiskLevel) {
		return nil, false
	}
	return o.RiskLevel, true
}

// HasRiskLevel returns a boolean if a field has been set.
func (o *RiskAssessmentSnapshot) HasRiskLevel() bool {
	if o != nil && !IsNil(o.RiskLevel) {
		return true
	}

	return false
}

// SetRiskLevel gets a reference to the given string and assigns it to the RiskLevel field.
func (o *RiskAssessmentSnapshot) SetRiskLevel(v string) {
	o.RiskLevel = &v
}

// GetRiskScore returns the RiskScore field value if set, zero value otherwise.
func (o *RiskAssessmentSnapshot) GetRiskScore() float32 {
	if o == nil || IsNil(o.RiskScore) {
		var ret float32
		return ret
	}
	return *o.RiskScore
}

// GetRiskScoreOk returns a tuple with the RiskScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessmentSnapshot) GetRiskScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.RiskScore) {
		return nil, false
	}
	return o.RiskScore, true
}

// HasRiskScore returns a boolean if a field has been set.
func (o *RiskAssessmentSnapshot) HasRiskScore() bool {
	if o != nil && !IsNil(o.RiskScore) {
		return true
	}

	return false
}

// SetRiskScore gets a reference to the given float32 and assigns it to the RiskScore field.
func (o *RiskAssessmentSnapshot) SetRiskScore(v float32) {
	o.RiskScore = &v
}

// GetVulnerableFunctionUsage returns the VulnerableFunctionUsage field value if set, zero value otherwise.
func (o *RiskAssessmentSnapshot) GetVulnerableFunctionUsage() string {
	if o == nil || IsNil(o.VulnerableFunctionUsage) {
		var ret string
		return ret
	}
	return *o.VulnerableFunctionUsage
}

// GetVulnerableFunctionUsageOk returns a tuple with the VulnerableFunctionUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessmentSnapshot) GetVulnerableFunctionUsageOk() (*string, bool) {
	if o == nil || IsNil(o.VulnerableFunctionUsage) {
		return nil, false
	}
	return o.VulnerableFunctionUsage, true
}

// HasVulnerableFunctionUsage returns a boolean if a field has been set.
func (o *RiskAssessmentSnapshot) HasVulnerableFunctionUsage() bool {
	if o != nil && !IsNil(o.VulnerableFunctionUsage) {
		return true
	}

	return false
}

// SetVulnerableFunctionUsage gets a reference to the given string and assigns it to the VulnerableFunctionUsage field.
func (o *RiskAssessmentSnapshot) SetVulnerableFunctionUsage(v string) {
	o.VulnerableFunctionUsage = &v
}

func (o RiskAssessmentSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskAssessmentSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exposure) {
		toSerialize["exposure"] = o.Exposure
	}
	if !IsNil(o.NumberOfAffectedEntities) {
		toSerialize["numberOfAffectedEntities"] = o.NumberOfAffectedEntities
	}
	if !IsNil(o.NumberOfReachableDataAssets) {
		toSerialize["numberOfReachableDataAssets"] = o.NumberOfReachableDataAssets
	}
	if !IsNil(o.PublicExploit) {
		toSerialize["publicExploit"] = o.PublicExploit
	}
	if !IsNil(o.RiskLevel) {
		toSerialize["riskLevel"] = o.RiskLevel
	}
	if !IsNil(o.RiskScore) {
		toSerialize["riskScore"] = o.RiskScore
	}
	if !IsNil(o.VulnerableFunctionUsage) {
		toSerialize["vulnerableFunctionUsage"] = o.VulnerableFunctionUsage
	}
	return toSerialize, nil
}

type NullableRiskAssessmentSnapshot struct {
	value *RiskAssessmentSnapshot
	isSet bool
}

func (v NullableRiskAssessmentSnapshot) Get() *RiskAssessmentSnapshot {
	return v.value
}

func (v *NullableRiskAssessmentSnapshot) Set(val *RiskAssessmentSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskAssessmentSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskAssessmentSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskAssessmentSnapshot(val *RiskAssessmentSnapshot) *NullableRiskAssessmentSnapshot {
	return &NullableRiskAssessmentSnapshot{value: val, isSet: true}
}

func (v NullableRiskAssessmentSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskAssessmentSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


