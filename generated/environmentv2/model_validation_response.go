/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ValidationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationResponse{}

// ValidationResponse struct for ValidationResponse
type ValidationResponse struct {
	Error *MetricIngestError `json:"error,omitempty"`
	LinesInvalid *int32 `json:"linesInvalid,omitempty"`
	LinesOk *int32 `json:"linesOk,omitempty"`
	Warnings *Warnings `json:"warnings,omitempty"`
}

// NewValidationResponse instantiates a new ValidationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationResponse() *ValidationResponse {
	this := ValidationResponse{}
	return &this
}

// NewValidationResponseWithDefaults instantiates a new ValidationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationResponseWithDefaults() *ValidationResponse {
	this := ValidationResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ValidationResponse) GetError() MetricIngestError {
	if o == nil || IsNil(o.Error) {
		var ret MetricIngestError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationResponse) GetErrorOk() (*MetricIngestError, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ValidationResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given MetricIngestError and assigns it to the Error field.
func (o *ValidationResponse) SetError(v MetricIngestError) {
	o.Error = &v
}

// GetLinesInvalid returns the LinesInvalid field value if set, zero value otherwise.
func (o *ValidationResponse) GetLinesInvalid() int32 {
	if o == nil || IsNil(o.LinesInvalid) {
		var ret int32
		return ret
	}
	return *o.LinesInvalid
}

// GetLinesInvalidOk returns a tuple with the LinesInvalid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationResponse) GetLinesInvalidOk() (*int32, bool) {
	if o == nil || IsNil(o.LinesInvalid) {
		return nil, false
	}
	return o.LinesInvalid, true
}

// HasLinesInvalid returns a boolean if a field has been set.
func (o *ValidationResponse) HasLinesInvalid() bool {
	if o != nil && !IsNil(o.LinesInvalid) {
		return true
	}

	return false
}

// SetLinesInvalid gets a reference to the given int32 and assigns it to the LinesInvalid field.
func (o *ValidationResponse) SetLinesInvalid(v int32) {
	o.LinesInvalid = &v
}

// GetLinesOk returns the LinesOk field value if set, zero value otherwise.
func (o *ValidationResponse) GetLinesOk() int32 {
	if o == nil || IsNil(o.LinesOk) {
		var ret int32
		return ret
	}
	return *o.LinesOk
}

// GetLinesOkOk returns a tuple with the LinesOk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationResponse) GetLinesOkOk() (*int32, bool) {
	if o == nil || IsNil(o.LinesOk) {
		return nil, false
	}
	return o.LinesOk, true
}

// HasLinesOk returns a boolean if a field has been set.
func (o *ValidationResponse) HasLinesOk() bool {
	if o != nil && !IsNil(o.LinesOk) {
		return true
	}

	return false
}

// SetLinesOk gets a reference to the given int32 and assigns it to the LinesOk field.
func (o *ValidationResponse) SetLinesOk(v int32) {
	o.LinesOk = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ValidationResponse) GetWarnings() Warnings {
	if o == nil || IsNil(o.Warnings) {
		var ret Warnings
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationResponse) GetWarningsOk() (*Warnings, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ValidationResponse) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given Warnings and assigns it to the Warnings field.
func (o *ValidationResponse) SetWarnings(v Warnings) {
	o.Warnings = &v
}

func (o ValidationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.LinesInvalid) {
		toSerialize["linesInvalid"] = o.LinesInvalid
	}
	if !IsNil(o.LinesOk) {
		toSerialize["linesOk"] = o.LinesOk
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableValidationResponse struct {
	value *ValidationResponse
	isSet bool
}

func (v NullableValidationResponse) Get() *ValidationResponse {
	return v.value
}

func (v *NullableValidationResponse) Set(val *ValidationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationResponse(val *ValidationResponse) *NullableValidationResponse {
	return &NullableValidationResponse{value: val, isSet: true}
}

func (v NullableValidationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


