/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RelatedAttacksList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelatedAttacksList{}

// RelatedAttacksList A list of related attacks of the security problem.   Related attacks are attacks on the exposed security problem.
type RelatedAttacksList struct {
	// A list of related attack ids.
	Attacks []string `json:"attacks,omitempty"`
}

// NewRelatedAttacksList instantiates a new RelatedAttacksList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedAttacksList() *RelatedAttacksList {
	this := RelatedAttacksList{}
	return &this
}

// NewRelatedAttacksListWithDefaults instantiates a new RelatedAttacksList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedAttacksListWithDefaults() *RelatedAttacksList {
	this := RelatedAttacksList{}
	return &this
}

// GetAttacks returns the Attacks field value if set, zero value otherwise.
func (o *RelatedAttacksList) GetAttacks() []string {
	if o == nil || IsNil(o.Attacks) {
		var ret []string
		return ret
	}
	return o.Attacks
}

// GetAttacksOk returns a tuple with the Attacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedAttacksList) GetAttacksOk() ([]string, bool) {
	if o == nil || IsNil(o.Attacks) {
		return nil, false
	}
	return o.Attacks, true
}

// HasAttacks returns a boolean if a field has been set.
func (o *RelatedAttacksList) HasAttacks() bool {
	if o != nil && !IsNil(o.Attacks) {
		return true
	}

	return false
}

// SetAttacks gets a reference to the given []string and assigns it to the Attacks field.
func (o *RelatedAttacksList) SetAttacks(v []string) {
	o.Attacks = v
}

func (o RelatedAttacksList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelatedAttacksList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attacks) {
		toSerialize["attacks"] = o.Attacks
	}
	return toSerialize, nil
}

type NullableRelatedAttacksList struct {
	value *RelatedAttacksList
	isSet bool
}

func (v NullableRelatedAttacksList) Get() *RelatedAttacksList {
	return v.value
}

func (v *NullableRelatedAttacksList) Set(val *RelatedAttacksList) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedAttacksList) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedAttacksList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedAttacksList(val *RelatedAttacksList) *NullableRelatedAttacksList {
	return &NullableRelatedAttacksList{value: val, isSet: true}
}

func (v NullableRelatedAttacksList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedAttacksList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


