/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EffectiveSettingsValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EffectiveSettingsValue{}

// EffectiveSettingsValue An effective settings value.
type EffectiveSettingsValue struct {
	// The user (identified by a user ID or a public token ID) who performed that most recent modification.
	Author *string `json:"author,omitempty"`
	// The timestamp of the creation.
	Created *int64 `json:"created,omitempty"`
	// The external identifier of the settings object.
	ExternalId *string `json:"externalId,omitempty"`
	// The timestamp of the last modification.
	Modified *int64 `json:"modified,omitempty"`
	// The origin of the settings value.
	Origin *string `json:"origin,omitempty"`
	// The schema on which the object is based.
	SchemaId *string `json:"schemaId,omitempty"`
	// The version of the schema on which the object is based.
	SchemaVersion *string `json:"schemaVersion,omitempty"`
	// A searchable summary string of the setting value. Plain text without Markdown.
	SearchSummary *string `json:"searchSummary,omitempty"`
	// A short summary of settings. This can contain Markdown and will be escaped accordingly.
	Summary *string `json:"summary,omitempty"`
	// The value of the setting.    It defines the actual values of settings' parameters.   The actual content depends on the object's schema.
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewEffectiveSettingsValue instantiates a new EffectiveSettingsValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEffectiveSettingsValue() *EffectiveSettingsValue {
	this := EffectiveSettingsValue{}
	return &this
}

// NewEffectiveSettingsValueWithDefaults instantiates a new EffectiveSettingsValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEffectiveSettingsValueWithDefaults() *EffectiveSettingsValue {
	this := EffectiveSettingsValue{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *EffectiveSettingsValue) SetAuthor(v string) {
	o.Author = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetCreated() int64 {
	if o == nil || IsNil(o.Created) {
		var ret int64
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetCreatedOk() (*int64, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int64 and assigns it to the Created field.
func (o *EffectiveSettingsValue) SetCreated(v int64) {
	o.Created = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *EffectiveSettingsValue) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetModified() int64 {
	if o == nil || IsNil(o.Modified) {
		var ret int64
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetModifiedOk() (*int64, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given int64 and assigns it to the Modified field.
func (o *EffectiveSettingsValue) SetModified(v int64) {
	o.Modified = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *EffectiveSettingsValue) SetOrigin(v string) {
	o.Origin = &v
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetSchemaId() string {
	if o == nil || IsNil(o.SchemaId) {
		var ret string
		return ret
	}
	return *o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetSchemaIdOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaId) {
		return nil, false
	}
	return o.SchemaId, true
}

// HasSchemaId returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasSchemaId() bool {
	if o != nil && !IsNil(o.SchemaId) {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given string and assigns it to the SchemaId field.
func (o *EffectiveSettingsValue) SetSchemaId(v string) {
	o.SchemaId = &v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetSchemaVersion() string {
	if o == nil || IsNil(o.SchemaVersion) {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetSchemaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaVersion) {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasSchemaVersion() bool {
	if o != nil && !IsNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *EffectiveSettingsValue) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

// GetSearchSummary returns the SearchSummary field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetSearchSummary() string {
	if o == nil || IsNil(o.SearchSummary) {
		var ret string
		return ret
	}
	return *o.SearchSummary
}

// GetSearchSummaryOk returns a tuple with the SearchSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetSearchSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.SearchSummary) {
		return nil, false
	}
	return o.SearchSummary, true
}

// HasSearchSummary returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasSearchSummary() bool {
	if o != nil && !IsNil(o.SearchSummary) {
		return true
	}

	return false
}

// SetSearchSummary gets a reference to the given string and assigns it to the SearchSummary field.
func (o *EffectiveSettingsValue) SetSearchSummary(v string) {
	o.SearchSummary = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *EffectiveSettingsValue) SetSummary(v string) {
	o.Summary = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EffectiveSettingsValue) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveSettingsValue) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EffectiveSettingsValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *EffectiveSettingsValue) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o EffectiveSettingsValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EffectiveSettingsValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.SchemaId) {
		toSerialize["schemaId"] = o.SchemaId
	}
	if !IsNil(o.SchemaVersion) {
		toSerialize["schemaVersion"] = o.SchemaVersion
	}
	if !IsNil(o.SearchSummary) {
		toSerialize["searchSummary"] = o.SearchSummary
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableEffectiveSettingsValue struct {
	value *EffectiveSettingsValue
	isSet bool
}

func (v NullableEffectiveSettingsValue) Get() *EffectiveSettingsValue {
	return v.value
}

func (v *NullableEffectiveSettingsValue) Set(val *EffectiveSettingsValue) {
	v.value = val
	v.isSet = true
}

func (v NullableEffectiveSettingsValue) IsSet() bool {
	return v.isSet
}

func (v *NullableEffectiveSettingsValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEffectiveSettingsValue(val *EffectiveSettingsValue) *NullableEffectiveSettingsValue {
	return &NullableEffectiveSettingsValue{value: val, isSet: true}
}

func (v NullableEffectiveSettingsValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEffectiveSettingsValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


