/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the DatasourceDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasourceDefinition{}

// DatasourceDefinition Configuration of a datasource for a property.
type DatasourceDefinition struct {
	// The properties to filter the datasource options on.
	FilterProperties []string `json:"filterProperties"`
	// Whether this datasource expects full setting payload as the context.
	FullContext bool `json:"fullContext"`
	// The identifier of a custom data source of the property's value.
	Identifier string `json:"identifier"`
	// When to reset datasource value in the UI on filter change.
	ResetValue *string `json:"resetValue,omitempty"`
	// If true, the datasource should use the api to filter the results instead of client-side filtering.
	UseApiSearch bool `json:"useApiSearch"`
	// Whether to validate input to only allow values returned by the datasource.
	Validate bool `json:"validate"`
}

// NewDatasourceDefinition instantiates a new DatasourceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceDefinition(filterProperties []string, fullContext bool, identifier string, useApiSearch bool, validate bool) *DatasourceDefinition {
	this := DatasourceDefinition{}
	this.FilterProperties = filterProperties
	this.FullContext = fullContext
	this.Identifier = identifier
	this.UseApiSearch = useApiSearch
	this.Validate = validate
	return &this
}

// NewDatasourceDefinitionWithDefaults instantiates a new DatasourceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceDefinitionWithDefaults() *DatasourceDefinition {
	this := DatasourceDefinition{}
	return &this
}

// GetFilterProperties returns the FilterProperties field value
func (o *DatasourceDefinition) GetFilterProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FilterProperties
}

// GetFilterPropertiesOk returns a tuple with the FilterProperties field value
// and a boolean to check if the value has been set.
func (o *DatasourceDefinition) GetFilterPropertiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterProperties, true
}

// SetFilterProperties sets field value
func (o *DatasourceDefinition) SetFilterProperties(v []string) {
	o.FilterProperties = v
}

// GetFullContext returns the FullContext field value
func (o *DatasourceDefinition) GetFullContext() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FullContext
}

// GetFullContextOk returns a tuple with the FullContext field value
// and a boolean to check if the value has been set.
func (o *DatasourceDefinition) GetFullContextOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullContext, true
}

// SetFullContext sets field value
func (o *DatasourceDefinition) SetFullContext(v bool) {
	o.FullContext = v
}

// GetIdentifier returns the Identifier field value
func (o *DatasourceDefinition) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *DatasourceDefinition) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *DatasourceDefinition) SetIdentifier(v string) {
	o.Identifier = v
}

// GetResetValue returns the ResetValue field value if set, zero value otherwise.
func (o *DatasourceDefinition) GetResetValue() string {
	if o == nil || IsNil(o.ResetValue) {
		var ret string
		return ret
	}
	return *o.ResetValue
}

// GetResetValueOk returns a tuple with the ResetValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceDefinition) GetResetValueOk() (*string, bool) {
	if o == nil || IsNil(o.ResetValue) {
		return nil, false
	}
	return o.ResetValue, true
}

// HasResetValue returns a boolean if a field has been set.
func (o *DatasourceDefinition) HasResetValue() bool {
	if o != nil && !IsNil(o.ResetValue) {
		return true
	}

	return false
}

// SetResetValue gets a reference to the given string and assigns it to the ResetValue field.
func (o *DatasourceDefinition) SetResetValue(v string) {
	o.ResetValue = &v
}

// GetUseApiSearch returns the UseApiSearch field value
func (o *DatasourceDefinition) GetUseApiSearch() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseApiSearch
}

// GetUseApiSearchOk returns a tuple with the UseApiSearch field value
// and a boolean to check if the value has been set.
func (o *DatasourceDefinition) GetUseApiSearchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseApiSearch, true
}

// SetUseApiSearch sets field value
func (o *DatasourceDefinition) SetUseApiSearch(v bool) {
	o.UseApiSearch = v
}

// GetValidate returns the Validate field value
func (o *DatasourceDefinition) GetValidate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Validate
}

// GetValidateOk returns a tuple with the Validate field value
// and a boolean to check if the value has been set.
func (o *DatasourceDefinition) GetValidateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Validate, true
}

// SetValidate sets field value
func (o *DatasourceDefinition) SetValidate(v bool) {
	o.Validate = v
}

func (o DatasourceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasourceDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterProperties"] = o.FilterProperties
	toSerialize["fullContext"] = o.FullContext
	toSerialize["identifier"] = o.Identifier
	if !IsNil(o.ResetValue) {
		toSerialize["resetValue"] = o.ResetValue
	}
	toSerialize["useApiSearch"] = o.UseApiSearch
	toSerialize["validate"] = o.Validate
	return toSerialize, nil
}

type NullableDatasourceDefinition struct {
	value *DatasourceDefinition
	isSet bool
}

func (v NullableDatasourceDefinition) Get() *DatasourceDefinition {
	return v.value
}

func (v *NullableDatasourceDefinition) Set(val *DatasourceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceDefinition(val *DatasourceDefinition) *NullableDatasourceDefinition {
	return &NullableDatasourceDefinition{value: val, isSet: true}
}

func (v NullableDatasourceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


