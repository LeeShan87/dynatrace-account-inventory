/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SettingsObjectResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsObjectResponse{}

// SettingsObjectResponse The response to a creation- or update-request.
type SettingsObjectResponse struct {
	// The HTTP status code for the object.
	Code int32 `json:"code"`
	Error *Error `json:"error,omitempty"`
	// The value of the setting.    It defines the actual values of settings' parameters.   The actual content depends on the object's schema.
	InvalidValue map[string]interface{} `json:"invalidValue,omitempty"`
	// For a successful request, the ID of the created or modified settings object.
	ObjectId *string `json:"objectId,omitempty"`
}

// NewSettingsObjectResponse instantiates a new SettingsObjectResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsObjectResponse(code int32) *SettingsObjectResponse {
	this := SettingsObjectResponse{}
	this.Code = code
	return &this
}

// NewSettingsObjectResponseWithDefaults instantiates a new SettingsObjectResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsObjectResponseWithDefaults() *SettingsObjectResponse {
	this := SettingsObjectResponse{}
	return &this
}

// GetCode returns the Code field value
func (o *SettingsObjectResponse) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *SettingsObjectResponse) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *SettingsObjectResponse) SetCode(v int32) {
	o.Code = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SettingsObjectResponse) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObjectResponse) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SettingsObjectResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *SettingsObjectResponse) SetError(v Error) {
	o.Error = &v
}

// GetInvalidValue returns the InvalidValue field value if set, zero value otherwise.
func (o *SettingsObjectResponse) GetInvalidValue() map[string]interface{} {
	if o == nil || IsNil(o.InvalidValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.InvalidValue
}

// GetInvalidValueOk returns a tuple with the InvalidValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObjectResponse) GetInvalidValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InvalidValue) {
		return map[string]interface{}{}, false
	}
	return o.InvalidValue, true
}

// HasInvalidValue returns a boolean if a field has been set.
func (o *SettingsObjectResponse) HasInvalidValue() bool {
	if o != nil && !IsNil(o.InvalidValue) {
		return true
	}

	return false
}

// SetInvalidValue gets a reference to the given map[string]interface{} and assigns it to the InvalidValue field.
func (o *SettingsObjectResponse) SetInvalidValue(v map[string]interface{}) {
	o.InvalidValue = v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *SettingsObjectResponse) GetObjectId() string {
	if o == nil || IsNil(o.ObjectId) {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObjectResponse) GetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *SettingsObjectResponse) HasObjectId() bool {
	if o != nil && !IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *SettingsObjectResponse) SetObjectId(v string) {
	o.ObjectId = &v
}

func (o SettingsObjectResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsObjectResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.InvalidValue) {
		toSerialize["invalidValue"] = o.InvalidValue
	}
	if !IsNil(o.ObjectId) {
		toSerialize["objectId"] = o.ObjectId
	}
	return toSerialize, nil
}

type NullableSettingsObjectResponse struct {
	value *SettingsObjectResponse
	isSet bool
}

func (v NullableSettingsObjectResponse) Get() *SettingsObjectResponse {
	return v.value
}

func (v *NullableSettingsObjectResponse) Set(val *SettingsObjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsObjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsObjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsObjectResponse(val *SettingsObjectResponse) *NullableSettingsObjectResponse {
	return &NullableSettingsObjectResponse{value: val, isSet: true}
}

func (v NullableSettingsObjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsObjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


