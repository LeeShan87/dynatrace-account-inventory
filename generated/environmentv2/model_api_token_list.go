/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ApiTokenList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiTokenList{}

// ApiTokenList A list of API tokens.
type ApiTokenList struct {
	// A list of API tokens.
	ApiTokens []ApiToken `json:"apiTokens,omitempty"`
	// The cursor for the next page of results. Has the value of `null` on the last page.   Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result.
	NextPageKey *string `json:"nextPageKey,omitempty"`
	// The number of entries per page.
	PageSize *int32 `json:"pageSize,omitempty"`
	// The total number of entries in the result.
	TotalCount int64 `json:"totalCount"`
}

// NewApiTokenList instantiates a new ApiTokenList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTokenList(totalCount int64) *ApiTokenList {
	this := ApiTokenList{}
	this.TotalCount = totalCount
	return &this
}

// NewApiTokenListWithDefaults instantiates a new ApiTokenList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTokenListWithDefaults() *ApiTokenList {
	this := ApiTokenList{}
	return &this
}

// GetApiTokens returns the ApiTokens field value if set, zero value otherwise.
func (o *ApiTokenList) GetApiTokens() []ApiToken {
	if o == nil || IsNil(o.ApiTokens) {
		var ret []ApiToken
		return ret
	}
	return o.ApiTokens
}

// GetApiTokensOk returns a tuple with the ApiTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTokenList) GetApiTokensOk() ([]ApiToken, bool) {
	if o == nil || IsNil(o.ApiTokens) {
		return nil, false
	}
	return o.ApiTokens, true
}

// HasApiTokens returns a boolean if a field has been set.
func (o *ApiTokenList) HasApiTokens() bool {
	if o != nil && !IsNil(o.ApiTokens) {
		return true
	}

	return false
}

// SetApiTokens gets a reference to the given []ApiToken and assigns it to the ApiTokens field.
func (o *ApiTokenList) SetApiTokens(v []ApiToken) {
	o.ApiTokens = v
}

// GetNextPageKey returns the NextPageKey field value if set, zero value otherwise.
func (o *ApiTokenList) GetNextPageKey() string {
	if o == nil || IsNil(o.NextPageKey) {
		var ret string
		return ret
	}
	return *o.NextPageKey
}

// GetNextPageKeyOk returns a tuple with the NextPageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTokenList) GetNextPageKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageKey) {
		return nil, false
	}
	return o.NextPageKey, true
}

// HasNextPageKey returns a boolean if a field has been set.
func (o *ApiTokenList) HasNextPageKey() bool {
	if o != nil && !IsNil(o.NextPageKey) {
		return true
	}

	return false
}

// SetNextPageKey gets a reference to the given string and assigns it to the NextPageKey field.
func (o *ApiTokenList) SetNextPageKey(v string) {
	o.NextPageKey = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *ApiTokenList) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTokenList) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *ApiTokenList) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *ApiTokenList) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetTotalCount returns the TotalCount field value
func (o *ApiTokenList) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *ApiTokenList) GetTotalCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *ApiTokenList) SetTotalCount(v int64) {
	o.TotalCount = v
}

func (o ApiTokenList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiTokenList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiTokens) {
		toSerialize["apiTokens"] = o.ApiTokens
	}
	if !IsNil(o.NextPageKey) {
		toSerialize["nextPageKey"] = o.NextPageKey
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	toSerialize["totalCount"] = o.TotalCount
	return toSerialize, nil
}

type NullableApiTokenList struct {
	value *ApiTokenList
	isSet bool
}

func (v NullableApiTokenList) Get() *ApiTokenList {
	return v.value
}

func (v *NullableApiTokenList) Set(val *ApiTokenList) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTokenList) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTokenList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTokenList(val *ApiTokenList) *NullableApiTokenList {
	return &NullableApiTokenList{value: val, isSet: true}
}

func (v NullableApiTokenList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTokenList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


