/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EventIngest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventIngest{}

// EventIngest The configuration of an event to be ingested.
type EventIngest struct {
	// The end time of the event, in UTC milliseconds.  If not set, the start time plus timeout is used.
	EndTime *int64 `json:"endTime,omitempty"`
	// The [entity selector](https://dt-url.net/apientityselector), defining a set of Dynatrace entities to be associated with the event.  Only entities that have been active within the last 24 hours can be selected.    If not set, the event is associated with the environment (`dt.entity.environment`) entity.
	EntitySelector *string `json:"entitySelector,omitempty"`
	// The type of the event.
	EventType string `json:"eventType"`
	// A map of event properties.  Keys with prefix `dt.*` are generally disallowed, with the exceptions of `dt.event.*`, `dt.davis.*` and `dt.entity.*`. These reserved keys may be used to set event properties with predefined semantics within the Dynatrace product. `dt.entity.*` keys may be used to provide additional information on an event, but will not lead to the event being tied to the specified entities. All other keys are interpreted as user-defined event properties.  Values of Dynatrace-reserved properties must fulfill the requirements of the respective property.
	Properties *map[string]string `json:"properties,omitempty"`
	// The start time of the event, in UTC milliseconds.  If not set, the current timestamp is used.  Depending on the event type, the start time must not lie in the future more than 5 minutes for trigger events and 7 days for info events.
	StartTime *int64 `json:"startTime,omitempty"`
	// The timeout of the event, in minutes.  If not set, 15 is used.  The timeout will automatically be capped to a maximum of 360 minutes (6 hours).  Problem-opening events can be refreshed and therefore kept open by sending the same payload again.
	Timeout *int32 `json:"timeout,omitempty"`
	// The title of the event.
	Title string `json:"title"`
}

// NewEventIngest instantiates a new EventIngest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventIngest(eventType string, title string) *EventIngest {
	this := EventIngest{}
	this.EventType = eventType
	this.Title = title
	return &this
}

// NewEventIngestWithDefaults instantiates a new EventIngest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventIngestWithDefaults() *EventIngest {
	this := EventIngest{}
	return &this
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *EventIngest) GetEndTime() int64 {
	if o == nil || IsNil(o.EndTime) {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventIngest) GetEndTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *EventIngest) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *EventIngest) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetEntitySelector returns the EntitySelector field value if set, zero value otherwise.
func (o *EventIngest) GetEntitySelector() string {
	if o == nil || IsNil(o.EntitySelector) {
		var ret string
		return ret
	}
	return *o.EntitySelector
}

// GetEntitySelectorOk returns a tuple with the EntitySelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventIngest) GetEntitySelectorOk() (*string, bool) {
	if o == nil || IsNil(o.EntitySelector) {
		return nil, false
	}
	return o.EntitySelector, true
}

// HasEntitySelector returns a boolean if a field has been set.
func (o *EventIngest) HasEntitySelector() bool {
	if o != nil && !IsNil(o.EntitySelector) {
		return true
	}

	return false
}

// SetEntitySelector gets a reference to the given string and assigns it to the EntitySelector field.
func (o *EventIngest) SetEntitySelector(v string) {
	o.EntitySelector = &v
}

// GetEventType returns the EventType field value
func (o *EventIngest) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *EventIngest) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *EventIngest) SetEventType(v string) {
	o.EventType = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *EventIngest) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventIngest) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *EventIngest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *EventIngest) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *EventIngest) GetStartTime() int64 {
	if o == nil || IsNil(o.StartTime) {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventIngest) GetStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *EventIngest) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *EventIngest) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *EventIngest) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventIngest) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *EventIngest) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *EventIngest) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetTitle returns the Title field value
func (o *EventIngest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *EventIngest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *EventIngest) SetTitle(v string) {
	o.Title = v
}

func (o EventIngest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventIngest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.EntitySelector) {
		toSerialize["entitySelector"] = o.EntitySelector
	}
	toSerialize["eventType"] = o.EventType
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

type NullableEventIngest struct {
	value *EventIngest
	isSet bool
}

func (v NullableEventIngest) Get() *EventIngest {
	return v.value
}

func (v *NullableEventIngest) Set(val *EventIngest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventIngest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventIngest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventIngest(val *EventIngest) *NullableEventIngest {
	return &NullableEventIngest{value: val, isSet: true}
}

func (v NullableEventIngest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventIngest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


