/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ActiveGatesAutoUpdateConfigurationAPIService ActiveGatesAutoUpdateConfigurationAPI service
type ActiveGatesAutoUpdateConfigurationAPIService service

type ApiGetAutoUpdateConfigByIdRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationAPIService
	agId string
}

func (r ApiGetAutoUpdateConfigByIdRequest) Execute() (*ActiveGateAutoUpdateConfig, *http.Response, error) {
	return r.ApiService.GetAutoUpdateConfigByIdExecute(r)
}

/*
GetAutoUpdateConfigById Gets the configuration of auto-update for the specified ActiveGate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agId The ID of the required ActiveGate.
 @return ApiGetAutoUpdateConfigByIdRequest
*/
func (a *ActiveGatesAutoUpdateConfigurationAPIService) GetAutoUpdateConfigById(ctx context.Context, agId string) ApiGetAutoUpdateConfigByIdRequest {
	return ApiGetAutoUpdateConfigByIdRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

// Execute executes the request
//  @return ActiveGateAutoUpdateConfig
func (a *ActiveGatesAutoUpdateConfigurationAPIService) GetAutoUpdateConfigByIdExecute(r ApiGetAutoUpdateConfigByIdRequest) (*ActiveGateAutoUpdateConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActiveGateAutoUpdateConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationAPIService.GetAutoUpdateConfigById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/autoUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", url.PathEscape(parameterValueToString(r.agId, "agId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGlobalAutoUpdateConfigForTenantRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationAPIService
}

func (r ApiGetGlobalAutoUpdateConfigForTenantRequest) Execute() (*ActiveGateGlobalAutoUpdateConfig, *http.Response, error) {
	return r.ApiService.GetGlobalAutoUpdateConfigForTenantExecute(r)
}

/*
GetGlobalAutoUpdateConfigForTenant Gets the global auto-update configuration of environment ActiveGates.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetGlobalAutoUpdateConfigForTenantRequest
*/
func (a *ActiveGatesAutoUpdateConfigurationAPIService) GetGlobalAutoUpdateConfigForTenant(ctx context.Context) ApiGetGlobalAutoUpdateConfigForTenantRequest {
	return ApiGetGlobalAutoUpdateConfigForTenantRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ActiveGateGlobalAutoUpdateConfig
func (a *ActiveGatesAutoUpdateConfigurationAPIService) GetGlobalAutoUpdateConfigForTenantExecute(r ApiGetGlobalAutoUpdateConfigForTenantRequest) (*ActiveGateGlobalAutoUpdateConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActiveGateGlobalAutoUpdateConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationAPIService.GetGlobalAutoUpdateConfigForTenant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/autoUpdate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAutoUpdateConfigByIdRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationAPIService
	agId string
	activeGateAutoUpdateConfig *ActiveGateAutoUpdateConfig
}

// JSON body of the request, containing auto update parameters.
func (r ApiPutAutoUpdateConfigByIdRequest) ActiveGateAutoUpdateConfig(activeGateAutoUpdateConfig ActiveGateAutoUpdateConfig) ApiPutAutoUpdateConfigByIdRequest {
	r.activeGateAutoUpdateConfig = &activeGateAutoUpdateConfig
	return r
}

func (r ApiPutAutoUpdateConfigByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutAutoUpdateConfigByIdExecute(r)
}

/*
PutAutoUpdateConfigById Updates the configuration of auto-update for the specified ActiveGate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agId The ID of the required ActiveGate.
 @return ApiPutAutoUpdateConfigByIdRequest
*/
func (a *ActiveGatesAutoUpdateConfigurationAPIService) PutAutoUpdateConfigById(ctx context.Context, agId string) ApiPutAutoUpdateConfigByIdRequest {
	return ApiPutAutoUpdateConfigByIdRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

// Execute executes the request
func (a *ActiveGatesAutoUpdateConfigurationAPIService) PutAutoUpdateConfigByIdExecute(r ApiPutAutoUpdateConfigByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationAPIService.PutAutoUpdateConfigById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/autoUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", url.PathEscape(parameterValueToString(r.agId, "agId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.activeGateAutoUpdateConfig == nil {
		return nil, reportError("activeGateAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutGlobalAutoUpdateConfigForTenantRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationAPIService
	activeGateGlobalAutoUpdateConfig *ActiveGateGlobalAutoUpdateConfig
}

// JSON body of the request, containing global auto update parameters.
func (r ApiPutGlobalAutoUpdateConfigForTenantRequest) ActiveGateGlobalAutoUpdateConfig(activeGateGlobalAutoUpdateConfig ActiveGateGlobalAutoUpdateConfig) ApiPutGlobalAutoUpdateConfigForTenantRequest {
	r.activeGateGlobalAutoUpdateConfig = &activeGateGlobalAutoUpdateConfig
	return r
}

func (r ApiPutGlobalAutoUpdateConfigForTenantRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutGlobalAutoUpdateConfigForTenantExecute(r)
}

/*
PutGlobalAutoUpdateConfigForTenant Puts the global auto-update configuration of environment ActiveGates.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPutGlobalAutoUpdateConfigForTenantRequest
*/
func (a *ActiveGatesAutoUpdateConfigurationAPIService) PutGlobalAutoUpdateConfigForTenant(ctx context.Context) ApiPutGlobalAutoUpdateConfigForTenantRequest {
	return ApiPutGlobalAutoUpdateConfigForTenantRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ActiveGatesAutoUpdateConfigurationAPIService) PutGlobalAutoUpdateConfigForTenantExecute(r ApiPutGlobalAutoUpdateConfigForTenantRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationAPIService.PutGlobalAutoUpdateConfigForTenant")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/autoUpdate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.activeGateGlobalAutoUpdateConfig == nil {
		return nil, reportError("activeGateGlobalAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateGlobalAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiValidateAutoUpdateConfigByIdRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationAPIService
	agId string
	activeGateAutoUpdateConfig *ActiveGateAutoUpdateConfig
}

// JSON body of the request, containing auto update parameters.
func (r ApiValidateAutoUpdateConfigByIdRequest) ActiveGateAutoUpdateConfig(activeGateAutoUpdateConfig ActiveGateAutoUpdateConfig) ApiValidateAutoUpdateConfigByIdRequest {
	r.activeGateAutoUpdateConfig = &activeGateAutoUpdateConfig
	return r
}

func (r ApiValidateAutoUpdateConfigByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.ValidateAutoUpdateConfigByIdExecute(r)
}

/*
ValidateAutoUpdateConfigById Validates the payload for the `POST /activeGates/{agId}/autoUpdate` request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agId The ID of the required ActiveGate.
 @return ApiValidateAutoUpdateConfigByIdRequest
*/
func (a *ActiveGatesAutoUpdateConfigurationAPIService) ValidateAutoUpdateConfigById(ctx context.Context, agId string) ApiValidateAutoUpdateConfigByIdRequest {
	return ApiValidateAutoUpdateConfigByIdRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

// Execute executes the request
func (a *ActiveGatesAutoUpdateConfigurationAPIService) ValidateAutoUpdateConfigByIdExecute(r ApiValidateAutoUpdateConfigByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationAPIService.ValidateAutoUpdateConfigById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/autoUpdate/validator"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", url.PathEscape(parameterValueToString(r.agId, "agId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.activeGateAutoUpdateConfig == nil {
		return nil, reportError("activeGateAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiValidateGlobalAutoUpdateConfigForTenantRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationAPIService
	activeGateGlobalAutoUpdateConfig *ActiveGateGlobalAutoUpdateConfig
}

// JSON body of the request, containing global auto update parameters.
func (r ApiValidateGlobalAutoUpdateConfigForTenantRequest) ActiveGateGlobalAutoUpdateConfig(activeGateGlobalAutoUpdateConfig ActiveGateGlobalAutoUpdateConfig) ApiValidateGlobalAutoUpdateConfigForTenantRequest {
	r.activeGateGlobalAutoUpdateConfig = &activeGateGlobalAutoUpdateConfig
	return r
}

func (r ApiValidateGlobalAutoUpdateConfigForTenantRequest) Execute() (*http.Response, error) {
	return r.ApiService.ValidateGlobalAutoUpdateConfigForTenantExecute(r)
}

/*
ValidateGlobalAutoUpdateConfigForTenant Validates the payload for the `POST /activeGates/autoUpdate` request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiValidateGlobalAutoUpdateConfigForTenantRequest
*/
func (a *ActiveGatesAutoUpdateConfigurationAPIService) ValidateGlobalAutoUpdateConfigForTenant(ctx context.Context) ApiValidateGlobalAutoUpdateConfigForTenantRequest {
	return ApiValidateGlobalAutoUpdateConfigForTenantRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ActiveGatesAutoUpdateConfigurationAPIService) ValidateGlobalAutoUpdateConfigForTenantExecute(r ApiValidateGlobalAutoUpdateConfigForTenantRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationAPIService.ValidateGlobalAutoUpdateConfigForTenant")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/autoUpdate/validator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.activeGateGlobalAutoUpdateConfig == nil {
		return nil, reportError("activeGateGlobalAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateGlobalAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
