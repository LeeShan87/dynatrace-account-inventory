/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EntryPointUsageSegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntryPointUsageSegment{}

// EntryPointUsageSegment Describes one segment that was passed into a usage and the associated source name and type.
type EntryPointUsageSegment struct {
	// The type of this input segment.
	SegmentType *string `json:"segmentType,omitempty"`
	// The value of this input segment.
	SegmentValue *string `json:"segmentValue,omitempty"`
	// The name used in the source for this segment.
	SourceArgumentName *string `json:"sourceArgumentName,omitempty"`
	// The type of the HTTP request part that contains the value that was used in this segment.
	SourceType *string `json:"sourceType,omitempty"`
}

// NewEntryPointUsageSegment instantiates a new EntryPointUsageSegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryPointUsageSegment() *EntryPointUsageSegment {
	this := EntryPointUsageSegment{}
	return &this
}

// NewEntryPointUsageSegmentWithDefaults instantiates a new EntryPointUsageSegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryPointUsageSegmentWithDefaults() *EntryPointUsageSegment {
	this := EntryPointUsageSegment{}
	return &this
}

// GetSegmentType returns the SegmentType field value if set, zero value otherwise.
func (o *EntryPointUsageSegment) GetSegmentType() string {
	if o == nil || IsNil(o.SegmentType) {
		var ret string
		return ret
	}
	return *o.SegmentType
}

// GetSegmentTypeOk returns a tuple with the SegmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryPointUsageSegment) GetSegmentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SegmentType) {
		return nil, false
	}
	return o.SegmentType, true
}

// HasSegmentType returns a boolean if a field has been set.
func (o *EntryPointUsageSegment) HasSegmentType() bool {
	if o != nil && !IsNil(o.SegmentType) {
		return true
	}

	return false
}

// SetSegmentType gets a reference to the given string and assigns it to the SegmentType field.
func (o *EntryPointUsageSegment) SetSegmentType(v string) {
	o.SegmentType = &v
}

// GetSegmentValue returns the SegmentValue field value if set, zero value otherwise.
func (o *EntryPointUsageSegment) GetSegmentValue() string {
	if o == nil || IsNil(o.SegmentValue) {
		var ret string
		return ret
	}
	return *o.SegmentValue
}

// GetSegmentValueOk returns a tuple with the SegmentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryPointUsageSegment) GetSegmentValueOk() (*string, bool) {
	if o == nil || IsNil(o.SegmentValue) {
		return nil, false
	}
	return o.SegmentValue, true
}

// HasSegmentValue returns a boolean if a field has been set.
func (o *EntryPointUsageSegment) HasSegmentValue() bool {
	if o != nil && !IsNil(o.SegmentValue) {
		return true
	}

	return false
}

// SetSegmentValue gets a reference to the given string and assigns it to the SegmentValue field.
func (o *EntryPointUsageSegment) SetSegmentValue(v string) {
	o.SegmentValue = &v
}

// GetSourceArgumentName returns the SourceArgumentName field value if set, zero value otherwise.
func (o *EntryPointUsageSegment) GetSourceArgumentName() string {
	if o == nil || IsNil(o.SourceArgumentName) {
		var ret string
		return ret
	}
	return *o.SourceArgumentName
}

// GetSourceArgumentNameOk returns a tuple with the SourceArgumentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryPointUsageSegment) GetSourceArgumentNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceArgumentName) {
		return nil, false
	}
	return o.SourceArgumentName, true
}

// HasSourceArgumentName returns a boolean if a field has been set.
func (o *EntryPointUsageSegment) HasSourceArgumentName() bool {
	if o != nil && !IsNil(o.SourceArgumentName) {
		return true
	}

	return false
}

// SetSourceArgumentName gets a reference to the given string and assigns it to the SourceArgumentName field.
func (o *EntryPointUsageSegment) SetSourceArgumentName(v string) {
	o.SourceArgumentName = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *EntryPointUsageSegment) GetSourceType() string {
	if o == nil || IsNil(o.SourceType) {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryPointUsageSegment) GetSourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *EntryPointUsageSegment) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *EntryPointUsageSegment) SetSourceType(v string) {
	o.SourceType = &v
}

func (o EntryPointUsageSegment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntryPointUsageSegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SegmentType) {
		toSerialize["segmentType"] = o.SegmentType
	}
	if !IsNil(o.SegmentValue) {
		toSerialize["segmentValue"] = o.SegmentValue
	}
	if !IsNil(o.SourceArgumentName) {
		toSerialize["sourceArgumentName"] = o.SourceArgumentName
	}
	if !IsNil(o.SourceType) {
		toSerialize["sourceType"] = o.SourceType
	}
	return toSerialize, nil
}

type NullableEntryPointUsageSegment struct {
	value *EntryPointUsageSegment
	isSet bool
}

func (v NullableEntryPointUsageSegment) Get() *EntryPointUsageSegment {
	return v.value
}

func (v *NullableEntryPointUsageSegment) Set(val *EntryPointUsageSegment) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryPointUsageSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryPointUsageSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryPointUsageSegment(val *EntryPointUsageSegment) *NullableEntryPointUsageSegment {
	return &NullableEntryPointUsageSegment{value: val, isSet: true}
}

func (v NullableEntryPointUsageSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryPointUsageSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


