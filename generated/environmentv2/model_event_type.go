/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EventType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventType{}

// EventType Configuration of an event type.
type EventType struct {
	// A short description of the event type.
	Description *string `json:"description,omitempty"`
	// The display name of the event type.
	DisplayName *string `json:"displayName,omitempty"`
	// The severity level associated with the event type.
	SeverityLevel *string `json:"severityLevel,omitempty"`
	// The event type.
	Type *string `json:"type,omitempty"`
}

// NewEventType instantiates a new EventType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventType() *EventType {
	this := EventType{}
	return &this
}

// NewEventTypeWithDefaults instantiates a new EventType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTypeWithDefaults() *EventType {
	this := EventType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EventType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EventType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EventType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSeverityLevel returns the SeverityLevel field value if set, zero value otherwise.
func (o *EventType) GetSeverityLevel() string {
	if o == nil || IsNil(o.SeverityLevel) {
		var ret string
		return ret
	}
	return *o.SeverityLevel
}

// GetSeverityLevelOk returns a tuple with the SeverityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventType) GetSeverityLevelOk() (*string, bool) {
	if o == nil || IsNil(o.SeverityLevel) {
		return nil, false
	}
	return o.SeverityLevel, true
}

// HasSeverityLevel returns a boolean if a field has been set.
func (o *EventType) HasSeverityLevel() bool {
	if o != nil && !IsNil(o.SeverityLevel) {
		return true
	}

	return false
}

// SetSeverityLevel gets a reference to the given string and assigns it to the SeverityLevel field.
func (o *EventType) SetSeverityLevel(v string) {
	o.SeverityLevel = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventType) SetType(v string) {
	o.Type = &v
}

func (o EventType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.SeverityLevel) {
		toSerialize["severityLevel"] = o.SeverityLevel
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableEventType struct {
	value *EventType
	isSet bool
}

func (v NullableEventType) Get() *EventType {
	return v.value
}

func (v *NullableEventType) Set(val *EventType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventType(val *EventType) *NullableEventType {
	return &NullableEventType{value: val, isSet: true}
}

func (v NullableEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


