/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ExtensionReleaseNotes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionReleaseNotes{}

// ExtensionReleaseNotes Releases notes for an extension.
type ExtensionReleaseNotes struct {
	// Release notes in markdown format
	Markdown *string `json:"markdown,omitempty"`
}

// NewExtensionReleaseNotes instantiates a new ExtensionReleaseNotes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionReleaseNotes() *ExtensionReleaseNotes {
	this := ExtensionReleaseNotes{}
	return &this
}

// NewExtensionReleaseNotesWithDefaults instantiates a new ExtensionReleaseNotes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionReleaseNotesWithDefaults() *ExtensionReleaseNotes {
	this := ExtensionReleaseNotes{}
	return &this
}

// GetMarkdown returns the Markdown field value if set, zero value otherwise.
func (o *ExtensionReleaseNotes) GetMarkdown() string {
	if o == nil || IsNil(o.Markdown) {
		var ret string
		return ret
	}
	return *o.Markdown
}

// GetMarkdownOk returns a tuple with the Markdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionReleaseNotes) GetMarkdownOk() (*string, bool) {
	if o == nil || IsNil(o.Markdown) {
		return nil, false
	}
	return o.Markdown, true
}

// HasMarkdown returns a boolean if a field has been set.
func (o *ExtensionReleaseNotes) HasMarkdown() bool {
	if o != nil && !IsNil(o.Markdown) {
		return true
	}

	return false
}

// SetMarkdown gets a reference to the given string and assigns it to the Markdown field.
func (o *ExtensionReleaseNotes) SetMarkdown(v string) {
	o.Markdown = &v
}

func (o ExtensionReleaseNotes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionReleaseNotes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Markdown) {
		toSerialize["markdown"] = o.Markdown
	}
	return toSerialize, nil
}

type NullableExtensionReleaseNotes struct {
	value *ExtensionReleaseNotes
	isSet bool
}

func (v NullableExtensionReleaseNotes) Get() *ExtensionReleaseNotes {
	return v.value
}

func (v *NullableExtensionReleaseNotes) Set(val *ExtensionReleaseNotes) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionReleaseNotes) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionReleaseNotes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionReleaseNotes(val *ExtensionReleaseNotes) *NullableExtensionReleaseNotes {
	return &NullableExtensionReleaseNotes{value: val, isSet: true}
}

func (v NullableExtensionReleaseNotes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionReleaseNotes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


