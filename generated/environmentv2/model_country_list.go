/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the CountryList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryList{}

// CountryList The list of countries.
type CountryList struct {
	// The list of countries.
	Countries []Country `json:"countries,omitempty"`
	// The number of countries.
	CountryCount *int32 `json:"countryCount,omitempty"`
}

// NewCountryList instantiates a new CountryList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryList() *CountryList {
	this := CountryList{}
	return &this
}

// NewCountryListWithDefaults instantiates a new CountryList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryListWithDefaults() *CountryList {
	this := CountryList{}
	return &this
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *CountryList) GetCountries() []Country {
	if o == nil || IsNil(o.Countries) {
		var ret []Country
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryList) GetCountriesOk() ([]Country, bool) {
	if o == nil || IsNil(o.Countries) {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *CountryList) HasCountries() bool {
	if o != nil && !IsNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []Country and assigns it to the Countries field.
func (o *CountryList) SetCountries(v []Country) {
	o.Countries = v
}

// GetCountryCount returns the CountryCount field value if set, zero value otherwise.
func (o *CountryList) GetCountryCount() int32 {
	if o == nil || IsNil(o.CountryCount) {
		var ret int32
		return ret
	}
	return *o.CountryCount
}

// GetCountryCountOk returns a tuple with the CountryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryList) GetCountryCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CountryCount) {
		return nil, false
	}
	return o.CountryCount, true
}

// HasCountryCount returns a boolean if a field has been set.
func (o *CountryList) HasCountryCount() bool {
	if o != nil && !IsNil(o.CountryCount) {
		return true
	}

	return false
}

// SetCountryCount gets a reference to the given int32 and assigns it to the CountryCount field.
func (o *CountryList) SetCountryCount(v int32) {
	o.CountryCount = &v
}

func (o CountryList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	if !IsNil(o.CountryCount) {
		toSerialize["countryCount"] = o.CountryCount
	}
	return toSerialize, nil
}

type NullableCountryList struct {
	value *CountryList
	isSet bool
}

func (v NullableCountryList) Get() *CountryList {
	return v.value
}

func (v *NullableCountryList) Set(val *CountryList) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryList) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryList(val *CountryList) *NullableCountryList {
	return &NullableCountryList{value: val, isSet: true}
}

func (v NullableCountryList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


