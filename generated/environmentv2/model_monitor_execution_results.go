/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the MonitorExecutionResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorExecutionResults{}

// MonitorExecutionResults Results of the execution of all HTTP monitor's requests.
type MonitorExecutionResults struct {
	// The list with the results of the requests executed on assigned locations.
	LocationsExecutionResults []LocationExecutionResults `json:"locationsExecutionResults,omitempty"`
	// Monitor id.
	MonitorId *string `json:"monitorId,omitempty"`
}

// NewMonitorExecutionResults instantiates a new MonitorExecutionResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorExecutionResults() *MonitorExecutionResults {
	this := MonitorExecutionResults{}
	return &this
}

// NewMonitorExecutionResultsWithDefaults instantiates a new MonitorExecutionResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorExecutionResultsWithDefaults() *MonitorExecutionResults {
	this := MonitorExecutionResults{}
	return &this
}

// GetLocationsExecutionResults returns the LocationsExecutionResults field value if set, zero value otherwise.
func (o *MonitorExecutionResults) GetLocationsExecutionResults() []LocationExecutionResults {
	if o == nil || IsNil(o.LocationsExecutionResults) {
		var ret []LocationExecutionResults
		return ret
	}
	return o.LocationsExecutionResults
}

// GetLocationsExecutionResultsOk returns a tuple with the LocationsExecutionResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorExecutionResults) GetLocationsExecutionResultsOk() ([]LocationExecutionResults, bool) {
	if o == nil || IsNil(o.LocationsExecutionResults) {
		return nil, false
	}
	return o.LocationsExecutionResults, true
}

// HasLocationsExecutionResults returns a boolean if a field has been set.
func (o *MonitorExecutionResults) HasLocationsExecutionResults() bool {
	if o != nil && !IsNil(o.LocationsExecutionResults) {
		return true
	}

	return false
}

// SetLocationsExecutionResults gets a reference to the given []LocationExecutionResults and assigns it to the LocationsExecutionResults field.
func (o *MonitorExecutionResults) SetLocationsExecutionResults(v []LocationExecutionResults) {
	o.LocationsExecutionResults = v
}

// GetMonitorId returns the MonitorId field value if set, zero value otherwise.
func (o *MonitorExecutionResults) GetMonitorId() string {
	if o == nil || IsNil(o.MonitorId) {
		var ret string
		return ret
	}
	return *o.MonitorId
}

// GetMonitorIdOk returns a tuple with the MonitorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorExecutionResults) GetMonitorIdOk() (*string, bool) {
	if o == nil || IsNil(o.MonitorId) {
		return nil, false
	}
	return o.MonitorId, true
}

// HasMonitorId returns a boolean if a field has been set.
func (o *MonitorExecutionResults) HasMonitorId() bool {
	if o != nil && !IsNil(o.MonitorId) {
		return true
	}

	return false
}

// SetMonitorId gets a reference to the given string and assigns it to the MonitorId field.
func (o *MonitorExecutionResults) SetMonitorId(v string) {
	o.MonitorId = &v
}

func (o MonitorExecutionResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorExecutionResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationsExecutionResults) {
		toSerialize["locationsExecutionResults"] = o.LocationsExecutionResults
	}
	if !IsNil(o.MonitorId) {
		toSerialize["monitorId"] = o.MonitorId
	}
	return toSerialize, nil
}

type NullableMonitorExecutionResults struct {
	value *MonitorExecutionResults
	isSet bool
}

func (v NullableMonitorExecutionResults) Get() *MonitorExecutionResults {
	return v.value
}

func (v *NullableMonitorExecutionResults) Set(val *MonitorExecutionResults) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorExecutionResults) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorExecutionResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorExecutionResults(val *MonitorExecutionResults) *NullableMonitorExecutionResults {
	return &NullableMonitorExecutionResults{value: val, isSet: true}
}

func (v NullableMonitorExecutionResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorExecutionResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


