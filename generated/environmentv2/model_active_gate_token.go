/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ActiveGateToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveGateToken{}

// ActiveGateToken Metadata of an ActiveGate token.
type ActiveGateToken struct {
	// The type of the ActiveGate for which the token is valid.
	ActiveGateType string `json:"activeGateType"`
	// The token creation date in ISO 8601 format (`yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`).
	CreationDate string `json:"creationDate"`
	// The token expiration date in ISO 8601 format (`yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`).    If not set, the token never expires.
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// The ActiveGate token identifier, consisting of [prefix and public part](https://dt-url.net/rn00tjg) of the token.
	Id string `json:"id"`
	// The token last used date in ISO 8601 format (`yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`).
	LastUsedDate *string `json:"lastUsedDate,omitempty"`
	// The name of the token.
	Name string `json:"name"`
	// The owner of the token.
	Owner string `json:"owner"`
	// The token is a seed token (`true`) or an individual token (`false`).
	SeedToken *bool `json:"seedToken,omitempty"`
}

// NewActiveGateToken instantiates a new ActiveGateToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveGateToken(activeGateType string, creationDate string, id string, name string, owner string) *ActiveGateToken {
	this := ActiveGateToken{}
	this.ActiveGateType = activeGateType
	this.CreationDate = creationDate
	this.Id = id
	this.Name = name
	this.Owner = owner
	return &this
}

// NewActiveGateTokenWithDefaults instantiates a new ActiveGateToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveGateTokenWithDefaults() *ActiveGateToken {
	this := ActiveGateToken{}
	return &this
}

// GetActiveGateType returns the ActiveGateType field value
func (o *ActiveGateToken) GetActiveGateType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActiveGateType
}

// GetActiveGateTypeOk returns a tuple with the ActiveGateType field value
// and a boolean to check if the value has been set.
func (o *ActiveGateToken) GetActiveGateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveGateType, true
}

// SetActiveGateType sets field value
func (o *ActiveGateToken) SetActiveGateType(v string) {
	o.ActiveGateType = v
}

// GetCreationDate returns the CreationDate field value
func (o *ActiveGateToken) GetCreationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *ActiveGateToken) GetCreationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *ActiveGateToken) SetCreationDate(v string) {
	o.CreationDate = v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *ActiveGateToken) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGateToken) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *ActiveGateToken) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *ActiveGateToken) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetId returns the Id field value
func (o *ActiveGateToken) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActiveGateToken) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActiveGateToken) SetId(v string) {
	o.Id = v
}

// GetLastUsedDate returns the LastUsedDate field value if set, zero value otherwise.
func (o *ActiveGateToken) GetLastUsedDate() string {
	if o == nil || IsNil(o.LastUsedDate) {
		var ret string
		return ret
	}
	return *o.LastUsedDate
}

// GetLastUsedDateOk returns a tuple with the LastUsedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGateToken) GetLastUsedDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastUsedDate) {
		return nil, false
	}
	return o.LastUsedDate, true
}

// HasLastUsedDate returns a boolean if a field has been set.
func (o *ActiveGateToken) HasLastUsedDate() bool {
	if o != nil && !IsNil(o.LastUsedDate) {
		return true
	}

	return false
}

// SetLastUsedDate gets a reference to the given string and assigns it to the LastUsedDate field.
func (o *ActiveGateToken) SetLastUsedDate(v string) {
	o.LastUsedDate = &v
}

// GetName returns the Name field value
func (o *ActiveGateToken) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ActiveGateToken) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ActiveGateToken) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value
func (o *ActiveGateToken) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ActiveGateToken) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ActiveGateToken) SetOwner(v string) {
	o.Owner = v
}

// GetSeedToken returns the SeedToken field value if set, zero value otherwise.
func (o *ActiveGateToken) GetSeedToken() bool {
	if o == nil || IsNil(o.SeedToken) {
		var ret bool
		return ret
	}
	return *o.SeedToken
}

// GetSeedTokenOk returns a tuple with the SeedToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGateToken) GetSeedTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.SeedToken) {
		return nil, false
	}
	return o.SeedToken, true
}

// HasSeedToken returns a boolean if a field has been set.
func (o *ActiveGateToken) HasSeedToken() bool {
	if o != nil && !IsNil(o.SeedToken) {
		return true
	}

	return false
}

// SetSeedToken gets a reference to the given bool and assigns it to the SeedToken field.
func (o *ActiveGateToken) SetSeedToken(v bool) {
	o.SeedToken = &v
}

func (o ActiveGateToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveGateToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activeGateType"] = o.ActiveGateType
	toSerialize["creationDate"] = o.CreationDate
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.LastUsedDate) {
		toSerialize["lastUsedDate"] = o.LastUsedDate
	}
	toSerialize["name"] = o.Name
	toSerialize["owner"] = o.Owner
	if !IsNil(o.SeedToken) {
		toSerialize["seedToken"] = o.SeedToken
	}
	return toSerialize, nil
}

type NullableActiveGateToken struct {
	value *ActiveGateToken
	isSet bool
}

func (v NullableActiveGateToken) Get() *ActiveGateToken {
	return v.value
}

func (v *NullableActiveGateToken) Set(val *ActiveGateToken) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveGateToken) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveGateToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveGateToken(val *ActiveGateToken) *NullableActiveGateToken {
	return &NullableActiveGateToken{value: val, isSet: true}
}

func (v NullableActiveGateToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveGateToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


