/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the AttackEntrypoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttackEntrypoint{}

// AttackEntrypoint Describes the entrypoint used by an attacker to start a specific attack.
type AttackEntrypoint struct {
	CodeLocation *CodeLocation `json:"codeLocation,omitempty"`
	EntrypointFunction *FunctionDefinition `json:"entrypointFunction,omitempty"`
	// All relevant payload data that has been sent during the attack.
	Payload []AttackEntrypointPayloadInner `json:"payload,omitempty"`
}

// NewAttackEntrypoint instantiates a new AttackEntrypoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttackEntrypoint() *AttackEntrypoint {
	this := AttackEntrypoint{}
	return &this
}

// NewAttackEntrypointWithDefaults instantiates a new AttackEntrypoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttackEntrypointWithDefaults() *AttackEntrypoint {
	this := AttackEntrypoint{}
	return &this
}

// GetCodeLocation returns the CodeLocation field value if set, zero value otherwise.
func (o *AttackEntrypoint) GetCodeLocation() CodeLocation {
	if o == nil || IsNil(o.CodeLocation) {
		var ret CodeLocation
		return ret
	}
	return *o.CodeLocation
}

// GetCodeLocationOk returns a tuple with the CodeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttackEntrypoint) GetCodeLocationOk() (*CodeLocation, bool) {
	if o == nil || IsNil(o.CodeLocation) {
		return nil, false
	}
	return o.CodeLocation, true
}

// HasCodeLocation returns a boolean if a field has been set.
func (o *AttackEntrypoint) HasCodeLocation() bool {
	if o != nil && !IsNil(o.CodeLocation) {
		return true
	}

	return false
}

// SetCodeLocation gets a reference to the given CodeLocation and assigns it to the CodeLocation field.
func (o *AttackEntrypoint) SetCodeLocation(v CodeLocation) {
	o.CodeLocation = &v
}

// GetEntrypointFunction returns the EntrypointFunction field value if set, zero value otherwise.
func (o *AttackEntrypoint) GetEntrypointFunction() FunctionDefinition {
	if o == nil || IsNil(o.EntrypointFunction) {
		var ret FunctionDefinition
		return ret
	}
	return *o.EntrypointFunction
}

// GetEntrypointFunctionOk returns a tuple with the EntrypointFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttackEntrypoint) GetEntrypointFunctionOk() (*FunctionDefinition, bool) {
	if o == nil || IsNil(o.EntrypointFunction) {
		return nil, false
	}
	return o.EntrypointFunction, true
}

// HasEntrypointFunction returns a boolean if a field has been set.
func (o *AttackEntrypoint) HasEntrypointFunction() bool {
	if o != nil && !IsNil(o.EntrypointFunction) {
		return true
	}

	return false
}

// SetEntrypointFunction gets a reference to the given FunctionDefinition and assigns it to the EntrypointFunction field.
func (o *AttackEntrypoint) SetEntrypointFunction(v FunctionDefinition) {
	o.EntrypointFunction = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *AttackEntrypoint) GetPayload() []AttackEntrypointPayloadInner {
	if o == nil || IsNil(o.Payload) {
		var ret []AttackEntrypointPayloadInner
		return ret
	}
	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttackEntrypoint) GetPayloadOk() ([]AttackEntrypointPayloadInner, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *AttackEntrypoint) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given []AttackEntrypointPayloadInner and assigns it to the Payload field.
func (o *AttackEntrypoint) SetPayload(v []AttackEntrypointPayloadInner) {
	o.Payload = v
}

func (o AttackEntrypoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttackEntrypoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeLocation) {
		toSerialize["codeLocation"] = o.CodeLocation
	}
	if !IsNil(o.EntrypointFunction) {
		toSerialize["entrypointFunction"] = o.EntrypointFunction
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableAttackEntrypoint struct {
	value *AttackEntrypoint
	isSet bool
}

func (v NullableAttackEntrypoint) Get() *AttackEntrypoint {
	return v.value
}

func (v *NullableAttackEntrypoint) Set(val *AttackEntrypoint) {
	v.value = val
	v.isSet = true
}

func (v NullableAttackEntrypoint) IsSet() bool {
	return v.isSet
}

func (v *NullableAttackEntrypoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttackEntrypoint(val *AttackEntrypoint) *NullableAttackEntrypoint {
	return &NullableAttackEntrypoint{value: val, isSet: true}
}

func (v NullableAttackEntrypoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttackEntrypoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


