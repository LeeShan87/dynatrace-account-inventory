/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the BizEventIngestResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BizEventIngestResult{}

// BizEventIngestResult Result received after ingesting business events.
type BizEventIngestResult struct {
	// A list of business events ingest errors.
	Errors []BizEventIngestError `json:"errors,omitempty"`
}

// NewBizEventIngestResult instantiates a new BizEventIngestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBizEventIngestResult() *BizEventIngestResult {
	this := BizEventIngestResult{}
	return &this
}

// NewBizEventIngestResultWithDefaults instantiates a new BizEventIngestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBizEventIngestResultWithDefaults() *BizEventIngestResult {
	this := BizEventIngestResult{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *BizEventIngestResult) GetErrors() []BizEventIngestError {
	if o == nil || IsNil(o.Errors) {
		var ret []BizEventIngestError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BizEventIngestResult) GetErrorsOk() ([]BizEventIngestError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *BizEventIngestResult) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []BizEventIngestError and assigns it to the Errors field.
func (o *BizEventIngestResult) SetErrors(v []BizEventIngestError) {
	o.Errors = v
}

func (o BizEventIngestResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BizEventIngestResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableBizEventIngestResult struct {
	value *BizEventIngestResult
	isSet bool
}

func (v NullableBizEventIngestResult) Get() *BizEventIngestResult {
	return v.value
}

func (v *NullableBizEventIngestResult) Set(val *BizEventIngestResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBizEventIngestResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBizEventIngestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBizEventIngestResult(val *BizEventIngestResult) *NullableBizEventIngestResult {
	return &NullableBizEventIngestResult{value: val, isSet: true}
}

func (v NullableBizEventIngestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBizEventIngestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


