/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EventIngestResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventIngestResults{}

// EventIngestResults The results of an event ingest.
type EventIngestResults struct {
	// The result of each created event report.
	EventIngestResults []EventIngestResult `json:"eventIngestResults,omitempty"`
	// The number of created event reports.
	ReportCount *int32 `json:"reportCount,omitempty"`
}

// NewEventIngestResults instantiates a new EventIngestResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventIngestResults() *EventIngestResults {
	this := EventIngestResults{}
	return &this
}

// NewEventIngestResultsWithDefaults instantiates a new EventIngestResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventIngestResultsWithDefaults() *EventIngestResults {
	this := EventIngestResults{}
	return &this
}

// GetEventIngestResults returns the EventIngestResults field value if set, zero value otherwise.
func (o *EventIngestResults) GetEventIngestResults() []EventIngestResult {
	if o == nil || IsNil(o.EventIngestResults) {
		var ret []EventIngestResult
		return ret
	}
	return o.EventIngestResults
}

// GetEventIngestResultsOk returns a tuple with the EventIngestResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventIngestResults) GetEventIngestResultsOk() ([]EventIngestResult, bool) {
	if o == nil || IsNil(o.EventIngestResults) {
		return nil, false
	}
	return o.EventIngestResults, true
}

// HasEventIngestResults returns a boolean if a field has been set.
func (o *EventIngestResults) HasEventIngestResults() bool {
	if o != nil && !IsNil(o.EventIngestResults) {
		return true
	}

	return false
}

// SetEventIngestResults gets a reference to the given []EventIngestResult and assigns it to the EventIngestResults field.
func (o *EventIngestResults) SetEventIngestResults(v []EventIngestResult) {
	o.EventIngestResults = v
}

// GetReportCount returns the ReportCount field value if set, zero value otherwise.
func (o *EventIngestResults) GetReportCount() int32 {
	if o == nil || IsNil(o.ReportCount) {
		var ret int32
		return ret
	}
	return *o.ReportCount
}

// GetReportCountOk returns a tuple with the ReportCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventIngestResults) GetReportCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ReportCount) {
		return nil, false
	}
	return o.ReportCount, true
}

// HasReportCount returns a boolean if a field has been set.
func (o *EventIngestResults) HasReportCount() bool {
	if o != nil && !IsNil(o.ReportCount) {
		return true
	}

	return false
}

// SetReportCount gets a reference to the given int32 and assigns it to the ReportCount field.
func (o *EventIngestResults) SetReportCount(v int32) {
	o.ReportCount = &v
}

func (o EventIngestResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventIngestResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventIngestResults) {
		toSerialize["eventIngestResults"] = o.EventIngestResults
	}
	if !IsNil(o.ReportCount) {
		toSerialize["reportCount"] = o.ReportCount
	}
	return toSerialize, nil
}

type NullableEventIngestResults struct {
	value *EventIngestResults
	isSet bool
}

func (v NullableEventIngestResults) Get() *EventIngestResults {
	return v.value
}

func (v *NullableEventIngestResults) Set(val *EventIngestResults) {
	v.value = val
	v.isSet = true
}

func (v NullableEventIngestResults) IsSet() bool {
	return v.isSet
}

func (v *NullableEventIngestResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventIngestResults(val *EventIngestResults) *NullableEventIngestResults {
	return &NullableEventIngestResults{value: val, isSet: true}
}

func (v NullableEventIngestResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventIngestResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


