/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EntityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityType{}

// EntityType A list of properties of the monitored entity type.
type EntityType struct {
	// The dimension key used within metrics for this monitored entity.
	DimensionKey *string `json:"dimensionKey,omitempty"`
	// The display name of the monitored entity.
	DisplayName *string `json:"displayName,omitempty"`
	// Whether the entity creation limit for the given type has been exceeded
	EntityLimitExceeded *bool `json:"entityLimitExceeded,omitempty"`
	// A list of possible relationships where the monitored entity type occupies the FROM position
	FromRelationships []ToPosition `json:"fromRelationships,omitempty"`
	// The placeholder for the list of management zones of an actual entity.
	ManagementZones *string `json:"managementZones,omitempty"`
	// A list of additional properties of the monitored entity type.
	Properties []EntityTypePropertyDto `json:"properties,omitempty"`
	// The placeholder for the list of tags of an actual entity.
	Tags *string `json:"tags,omitempty"`
	// A list of possible relationships where the monitored entity type occupies the TO position.
	ToRelationships []FromPosition `json:"toRelationships,omitempty"`
	// The type of the monitored entity.
	Type *string `json:"type,omitempty"`
}

// NewEntityType instantiates a new EntityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityType() *EntityType {
	this := EntityType{}
	return &this
}

// NewEntityTypeWithDefaults instantiates a new EntityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityTypeWithDefaults() *EntityType {
	this := EntityType{}
	return &this
}

// GetDimensionKey returns the DimensionKey field value if set, zero value otherwise.
func (o *EntityType) GetDimensionKey() string {
	if o == nil || IsNil(o.DimensionKey) {
		var ret string
		return ret
	}
	return *o.DimensionKey
}

// GetDimensionKeyOk returns a tuple with the DimensionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityType) GetDimensionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionKey) {
		return nil, false
	}
	return o.DimensionKey, true
}

// HasDimensionKey returns a boolean if a field has been set.
func (o *EntityType) HasDimensionKey() bool {
	if o != nil && !IsNil(o.DimensionKey) {
		return true
	}

	return false
}

// SetDimensionKey gets a reference to the given string and assigns it to the DimensionKey field.
func (o *EntityType) SetDimensionKey(v string) {
	o.DimensionKey = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EntityType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EntityType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EntityType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEntityLimitExceeded returns the EntityLimitExceeded field value if set, zero value otherwise.
func (o *EntityType) GetEntityLimitExceeded() bool {
	if o == nil || IsNil(o.EntityLimitExceeded) {
		var ret bool
		return ret
	}
	return *o.EntityLimitExceeded
}

// GetEntityLimitExceededOk returns a tuple with the EntityLimitExceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityType) GetEntityLimitExceededOk() (*bool, bool) {
	if o == nil || IsNil(o.EntityLimitExceeded) {
		return nil, false
	}
	return o.EntityLimitExceeded, true
}

// HasEntityLimitExceeded returns a boolean if a field has been set.
func (o *EntityType) HasEntityLimitExceeded() bool {
	if o != nil && !IsNil(o.EntityLimitExceeded) {
		return true
	}

	return false
}

// SetEntityLimitExceeded gets a reference to the given bool and assigns it to the EntityLimitExceeded field.
func (o *EntityType) SetEntityLimitExceeded(v bool) {
	o.EntityLimitExceeded = &v
}

// GetFromRelationships returns the FromRelationships field value if set, zero value otherwise.
func (o *EntityType) GetFromRelationships() []ToPosition {
	if o == nil || IsNil(o.FromRelationships) {
		var ret []ToPosition
		return ret
	}
	return o.FromRelationships
}

// GetFromRelationshipsOk returns a tuple with the FromRelationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityType) GetFromRelationshipsOk() ([]ToPosition, bool) {
	if o == nil || IsNil(o.FromRelationships) {
		return nil, false
	}
	return o.FromRelationships, true
}

// HasFromRelationships returns a boolean if a field has been set.
func (o *EntityType) HasFromRelationships() bool {
	if o != nil && !IsNil(o.FromRelationships) {
		return true
	}

	return false
}

// SetFromRelationships gets a reference to the given []ToPosition and assigns it to the FromRelationships field.
func (o *EntityType) SetFromRelationships(v []ToPosition) {
	o.FromRelationships = v
}

// GetManagementZones returns the ManagementZones field value if set, zero value otherwise.
func (o *EntityType) GetManagementZones() string {
	if o == nil || IsNil(o.ManagementZones) {
		var ret string
		return ret
	}
	return *o.ManagementZones
}

// GetManagementZonesOk returns a tuple with the ManagementZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityType) GetManagementZonesOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementZones) {
		return nil, false
	}
	return o.ManagementZones, true
}

// HasManagementZones returns a boolean if a field has been set.
func (o *EntityType) HasManagementZones() bool {
	if o != nil && !IsNil(o.ManagementZones) {
		return true
	}

	return false
}

// SetManagementZones gets a reference to the given string and assigns it to the ManagementZones field.
func (o *EntityType) SetManagementZones(v string) {
	o.ManagementZones = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *EntityType) GetProperties() []EntityTypePropertyDto {
	if o == nil || IsNil(o.Properties) {
		var ret []EntityTypePropertyDto
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityType) GetPropertiesOk() ([]EntityTypePropertyDto, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *EntityType) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []EntityTypePropertyDto and assigns it to the Properties field.
func (o *EntityType) SetProperties(v []EntityTypePropertyDto) {
	o.Properties = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EntityType) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityType) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EntityType) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *EntityType) SetTags(v string) {
	o.Tags = &v
}

// GetToRelationships returns the ToRelationships field value if set, zero value otherwise.
func (o *EntityType) GetToRelationships() []FromPosition {
	if o == nil || IsNil(o.ToRelationships) {
		var ret []FromPosition
		return ret
	}
	return o.ToRelationships
}

// GetToRelationshipsOk returns a tuple with the ToRelationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityType) GetToRelationshipsOk() ([]FromPosition, bool) {
	if o == nil || IsNil(o.ToRelationships) {
		return nil, false
	}
	return o.ToRelationships, true
}

// HasToRelationships returns a boolean if a field has been set.
func (o *EntityType) HasToRelationships() bool {
	if o != nil && !IsNil(o.ToRelationships) {
		return true
	}

	return false
}

// SetToRelationships gets a reference to the given []FromPosition and assigns it to the ToRelationships field.
func (o *EntityType) SetToRelationships(v []FromPosition) {
	o.ToRelationships = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntityType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntityType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntityType) SetType(v string) {
	o.Type = &v
}

func (o EntityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DimensionKey) {
		toSerialize["dimensionKey"] = o.DimensionKey
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EntityLimitExceeded) {
		toSerialize["entityLimitExceeded"] = o.EntityLimitExceeded
	}
	if !IsNil(o.FromRelationships) {
		toSerialize["fromRelationships"] = o.FromRelationships
	}
	if !IsNil(o.ManagementZones) {
		toSerialize["managementZones"] = o.ManagementZones
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ToRelationships) {
		toSerialize["toRelationships"] = o.ToRelationships
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableEntityType struct {
	value *EntityType
	isSet bool
}

func (v NullableEntityType) Get() *EntityType {
	return v.value
}

func (v *NullableEntityType) Set(val *EntityType) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityType) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityType(val *EntityType) *NullableEntityType {
	return &NullableEntityType{value: val, isSet: true}
}

func (v NullableEntityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


