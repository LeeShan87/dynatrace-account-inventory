/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Attacker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attacker{}

// Attacker Attacker of an attack.
type Attacker struct {
	Location *AttackerLocation `json:"location,omitempty"`
	// The source IP of the attacker.
	SourceIp *string `json:"sourceIp,omitempty"`
}

// NewAttacker instantiates a new Attacker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttacker() *Attacker {
	this := Attacker{}
	return &this
}

// NewAttackerWithDefaults instantiates a new Attacker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttackerWithDefaults() *Attacker {
	this := Attacker{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Attacker) GetLocation() AttackerLocation {
	if o == nil || IsNil(o.Location) {
		var ret AttackerLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attacker) GetLocationOk() (*AttackerLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Attacker) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given AttackerLocation and assigns it to the Location field.
func (o *Attacker) SetLocation(v AttackerLocation) {
	o.Location = &v
}

// GetSourceIp returns the SourceIp field value if set, zero value otherwise.
func (o *Attacker) GetSourceIp() string {
	if o == nil || IsNil(o.SourceIp) {
		var ret string
		return ret
	}
	return *o.SourceIp
}

// GetSourceIpOk returns a tuple with the SourceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attacker) GetSourceIpOk() (*string, bool) {
	if o == nil || IsNil(o.SourceIp) {
		return nil, false
	}
	return o.SourceIp, true
}

// HasSourceIp returns a boolean if a field has been set.
func (o *Attacker) HasSourceIp() bool {
	if o != nil && !IsNil(o.SourceIp) {
		return true
	}

	return false
}

// SetSourceIp gets a reference to the given string and assigns it to the SourceIp field.
func (o *Attacker) SetSourceIp(v string) {
	o.SourceIp = &v
}

func (o Attacker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attacker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.SourceIp) {
		toSerialize["sourceIp"] = o.SourceIp
	}
	return toSerialize, nil
}

type NullableAttacker struct {
	value *Attacker
	isSet bool
}

func (v NullableAttacker) Get() *Attacker {
	return v.value
}

func (v *NullableAttacker) Set(val *Attacker) {
	v.value = val
	v.isSet = true
}

func (v NullableAttacker) IsSet() bool {
	return v.isSet
}

func (v *NullableAttacker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttacker(val *Attacker) *NullableAttacker {
	return &NullableAttacker{value: val, isSet: true}
}

func (v NullableAttacker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttacker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


