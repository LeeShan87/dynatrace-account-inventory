/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the MonitoredEntityStates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitoredEntityStates{}

// MonitoredEntityStates Monitoring state of the process group instance.
type MonitoredEntityStates struct {
	// The Dynatrace entity ID of the process group instance.
	EntityId *string `json:"entityId,omitempty"`
	// Additional parameters of the monitoring state.
	Params []MonitoredEntityStateParam `json:"params,omitempty"`
	// The type of the monitoring state.
	Severity *string `json:"severity,omitempty"`
	// The name of the monitoring state.
	State *string `json:"state,omitempty"`
}

// NewMonitoredEntityStates instantiates a new MonitoredEntityStates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoredEntityStates() *MonitoredEntityStates {
	this := MonitoredEntityStates{}
	return &this
}

// NewMonitoredEntityStatesWithDefaults instantiates a new MonitoredEntityStates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoredEntityStatesWithDefaults() *MonitoredEntityStates {
	this := MonitoredEntityStates{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *MonitoredEntityStates) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoredEntityStates) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *MonitoredEntityStates) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *MonitoredEntityStates) SetEntityId(v string) {
	o.EntityId = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *MonitoredEntityStates) GetParams() []MonitoredEntityStateParam {
	if o == nil || IsNil(o.Params) {
		var ret []MonitoredEntityStateParam
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoredEntityStates) GetParamsOk() ([]MonitoredEntityStateParam, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *MonitoredEntityStates) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given []MonitoredEntityStateParam and assigns it to the Params field.
func (o *MonitoredEntityStates) SetParams(v []MonitoredEntityStateParam) {
	o.Params = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *MonitoredEntityStates) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoredEntityStates) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *MonitoredEntityStates) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *MonitoredEntityStates) SetSeverity(v string) {
	o.Severity = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *MonitoredEntityStates) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoredEntityStates) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *MonitoredEntityStates) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *MonitoredEntityStates) SetState(v string) {
	o.State = &v
}

func (o MonitoredEntityStates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitoredEntityStates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableMonitoredEntityStates struct {
	value *MonitoredEntityStates
	isSet bool
}

func (v NullableMonitoredEntityStates) Get() *MonitoredEntityStates {
	return v.value
}

func (v *NullableMonitoredEntityStates) Set(val *MonitoredEntityStates) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoredEntityStates) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoredEntityStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoredEntityStates(val *MonitoredEntityStates) *NullableMonitoredEntityStates {
	return &NullableMonitoredEntityStates{value: val, isSet: true}
}

func (v NullableMonitoredEntityStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoredEntityStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


