/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the CountryRegions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryRegions{}

// CountryRegions Information about a country.
type CountryRegions struct {
	// The ISO code of the country.
	Code *string `json:"code,omitempty"`
	// The name of the country.
	Name *string `json:"name,omitempty"`
	// The number of regions in the country.
	RegionCount *int32 `json:"regionCount,omitempty"`
	// The list of regions in the country.
	Regions []Region `json:"regions,omitempty"`
}

// NewCountryRegions instantiates a new CountryRegions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryRegions() *CountryRegions {
	this := CountryRegions{}
	return &this
}

// NewCountryRegionsWithDefaults instantiates a new CountryRegions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryRegionsWithDefaults() *CountryRegions {
	this := CountryRegions{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CountryRegions) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryRegions) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CountryRegions) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CountryRegions) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CountryRegions) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryRegions) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CountryRegions) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CountryRegions) SetName(v string) {
	o.Name = &v
}

// GetRegionCount returns the RegionCount field value if set, zero value otherwise.
func (o *CountryRegions) GetRegionCount() int32 {
	if o == nil || IsNil(o.RegionCount) {
		var ret int32
		return ret
	}
	return *o.RegionCount
}

// GetRegionCountOk returns a tuple with the RegionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryRegions) GetRegionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RegionCount) {
		return nil, false
	}
	return o.RegionCount, true
}

// HasRegionCount returns a boolean if a field has been set.
func (o *CountryRegions) HasRegionCount() bool {
	if o != nil && !IsNil(o.RegionCount) {
		return true
	}

	return false
}

// SetRegionCount gets a reference to the given int32 and assigns it to the RegionCount field.
func (o *CountryRegions) SetRegionCount(v int32) {
	o.RegionCount = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *CountryRegions) GetRegions() []Region {
	if o == nil || IsNil(o.Regions) {
		var ret []Region
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryRegions) GetRegionsOk() ([]Region, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *CountryRegions) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []Region and assigns it to the Regions field.
func (o *CountryRegions) SetRegions(v []Region) {
	o.Regions = v
}

func (o CountryRegions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryRegions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RegionCount) {
		toSerialize["regionCount"] = o.RegionCount
	}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	return toSerialize, nil
}

type NullableCountryRegions struct {
	value *CountryRegions
	isSet bool
}

func (v NullableCountryRegions) Get() *CountryRegions {
	return v.value
}

func (v *NullableCountryRegions) Set(val *CountryRegions) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryRegions) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryRegions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryRegions(val *CountryRegions) *NullableCountryRegions {
	return &NullableCountryRegions{value: val, isSet: true}
}

func (v NullableCountryRegions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryRegions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


