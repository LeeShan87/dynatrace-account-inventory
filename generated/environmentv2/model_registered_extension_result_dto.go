/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RegisteredExtensionResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisteredExtensionResultDto{}

// RegisteredExtensionResultDto struct for RegisteredExtensionResultDto
type RegisteredExtensionResultDto struct {
	// FQN of the extension registered in the tenant.
	ExtensionName *string `json:"extensionName,omitempty"`
	// Version number of the extension.
	ExtensionVersion *string `json:"extensionVersion,omitempty"`
}

// NewRegisteredExtensionResultDto instantiates a new RegisteredExtensionResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredExtensionResultDto() *RegisteredExtensionResultDto {
	this := RegisteredExtensionResultDto{}
	return &this
}

// NewRegisteredExtensionResultDtoWithDefaults instantiates a new RegisteredExtensionResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredExtensionResultDtoWithDefaults() *RegisteredExtensionResultDto {
	this := RegisteredExtensionResultDto{}
	return &this
}

// GetExtensionName returns the ExtensionName field value if set, zero value otherwise.
func (o *RegisteredExtensionResultDto) GetExtensionName() string {
	if o == nil || IsNil(o.ExtensionName) {
		var ret string
		return ret
	}
	return *o.ExtensionName
}

// GetExtensionNameOk returns a tuple with the ExtensionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredExtensionResultDto) GetExtensionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExtensionName) {
		return nil, false
	}
	return o.ExtensionName, true
}

// HasExtensionName returns a boolean if a field has been set.
func (o *RegisteredExtensionResultDto) HasExtensionName() bool {
	if o != nil && !IsNil(o.ExtensionName) {
		return true
	}

	return false
}

// SetExtensionName gets a reference to the given string and assigns it to the ExtensionName field.
func (o *RegisteredExtensionResultDto) SetExtensionName(v string) {
	o.ExtensionName = &v
}

// GetExtensionVersion returns the ExtensionVersion field value if set, zero value otherwise.
func (o *RegisteredExtensionResultDto) GetExtensionVersion() string {
	if o == nil || IsNil(o.ExtensionVersion) {
		var ret string
		return ret
	}
	return *o.ExtensionVersion
}

// GetExtensionVersionOk returns a tuple with the ExtensionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredExtensionResultDto) GetExtensionVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ExtensionVersion) {
		return nil, false
	}
	return o.ExtensionVersion, true
}

// HasExtensionVersion returns a boolean if a field has been set.
func (o *RegisteredExtensionResultDto) HasExtensionVersion() bool {
	if o != nil && !IsNil(o.ExtensionVersion) {
		return true
	}

	return false
}

// SetExtensionVersion gets a reference to the given string and assigns it to the ExtensionVersion field.
func (o *RegisteredExtensionResultDto) SetExtensionVersion(v string) {
	o.ExtensionVersion = &v
}

func (o RegisteredExtensionResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisteredExtensionResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExtensionName) {
		toSerialize["extensionName"] = o.ExtensionName
	}
	if !IsNil(o.ExtensionVersion) {
		toSerialize["extensionVersion"] = o.ExtensionVersion
	}
	return toSerialize, nil
}

type NullableRegisteredExtensionResultDto struct {
	value *RegisteredExtensionResultDto
	isSet bool
}

func (v NullableRegisteredExtensionResultDto) Get() *RegisteredExtensionResultDto {
	return v.value
}

func (v *NullableRegisteredExtensionResultDto) Set(val *RegisteredExtensionResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredExtensionResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredExtensionResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredExtensionResultDto(val *RegisteredExtensionResultDto) *NullableRegisteredExtensionResultDto {
	return &NullableRegisteredExtensionResultDto{value: val, isSet: true}
}

func (v NullableRegisteredExtensionResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredExtensionResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


