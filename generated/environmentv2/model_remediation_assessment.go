/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RemediationAssessment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemediationAssessment{}

// RemediationAssessment Assessment of the remediation item.
type RemediationAssessment struct {
	// The reachability of related data assets by affected entities.
	DataAssets *string `json:"dataAssets,omitempty"`
	// The level of exposure of affected entities.
	Exposure *string `json:"exposure,omitempty"`
	// The number of related data assets.
	NumberOfDataAssets *int64 `json:"numberOfDataAssets,omitempty"`
	// The usage of vulnerable functions
	VulnerableFunctionUsage *string `json:"vulnerableFunctionUsage,omitempty"`
	// A list of vulnerable functions that are in use.
	VulnerableFunctionsInUse []VulnerableFunction `json:"vulnerableFunctionsInUse,omitempty"`
	// A list of vulnerable functions that are not available.
	VulnerableFunctionsNotAvailable []VulnerableFunction `json:"vulnerableFunctionsNotAvailable,omitempty"`
	// A list of vulnerable functions that are not in use.
	VulnerableFunctionsNotInUse []VulnerableFunction `json:"vulnerableFunctionsNotInUse,omitempty"`
}

// NewRemediationAssessment instantiates a new RemediationAssessment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemediationAssessment() *RemediationAssessment {
	this := RemediationAssessment{}
	return &this
}

// NewRemediationAssessmentWithDefaults instantiates a new RemediationAssessment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemediationAssessmentWithDefaults() *RemediationAssessment {
	this := RemediationAssessment{}
	return &this
}

// GetDataAssets returns the DataAssets field value if set, zero value otherwise.
func (o *RemediationAssessment) GetDataAssets() string {
	if o == nil || IsNil(o.DataAssets) {
		var ret string
		return ret
	}
	return *o.DataAssets
}

// GetDataAssetsOk returns a tuple with the DataAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationAssessment) GetDataAssetsOk() (*string, bool) {
	if o == nil || IsNil(o.DataAssets) {
		return nil, false
	}
	return o.DataAssets, true
}

// HasDataAssets returns a boolean if a field has been set.
func (o *RemediationAssessment) HasDataAssets() bool {
	if o != nil && !IsNil(o.DataAssets) {
		return true
	}

	return false
}

// SetDataAssets gets a reference to the given string and assigns it to the DataAssets field.
func (o *RemediationAssessment) SetDataAssets(v string) {
	o.DataAssets = &v
}

// GetExposure returns the Exposure field value if set, zero value otherwise.
func (o *RemediationAssessment) GetExposure() string {
	if o == nil || IsNil(o.Exposure) {
		var ret string
		return ret
	}
	return *o.Exposure
}

// GetExposureOk returns a tuple with the Exposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationAssessment) GetExposureOk() (*string, bool) {
	if o == nil || IsNil(o.Exposure) {
		return nil, false
	}
	return o.Exposure, true
}

// HasExposure returns a boolean if a field has been set.
func (o *RemediationAssessment) HasExposure() bool {
	if o != nil && !IsNil(o.Exposure) {
		return true
	}

	return false
}

// SetExposure gets a reference to the given string and assigns it to the Exposure field.
func (o *RemediationAssessment) SetExposure(v string) {
	o.Exposure = &v
}

// GetNumberOfDataAssets returns the NumberOfDataAssets field value if set, zero value otherwise.
func (o *RemediationAssessment) GetNumberOfDataAssets() int64 {
	if o == nil || IsNil(o.NumberOfDataAssets) {
		var ret int64
		return ret
	}
	return *o.NumberOfDataAssets
}

// GetNumberOfDataAssetsOk returns a tuple with the NumberOfDataAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationAssessment) GetNumberOfDataAssetsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfDataAssets) {
		return nil, false
	}
	return o.NumberOfDataAssets, true
}

// HasNumberOfDataAssets returns a boolean if a field has been set.
func (o *RemediationAssessment) HasNumberOfDataAssets() bool {
	if o != nil && !IsNil(o.NumberOfDataAssets) {
		return true
	}

	return false
}

// SetNumberOfDataAssets gets a reference to the given int64 and assigns it to the NumberOfDataAssets field.
func (o *RemediationAssessment) SetNumberOfDataAssets(v int64) {
	o.NumberOfDataAssets = &v
}

// GetVulnerableFunctionUsage returns the VulnerableFunctionUsage field value if set, zero value otherwise.
func (o *RemediationAssessment) GetVulnerableFunctionUsage() string {
	if o == nil || IsNil(o.VulnerableFunctionUsage) {
		var ret string
		return ret
	}
	return *o.VulnerableFunctionUsage
}

// GetVulnerableFunctionUsageOk returns a tuple with the VulnerableFunctionUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationAssessment) GetVulnerableFunctionUsageOk() (*string, bool) {
	if o == nil || IsNil(o.VulnerableFunctionUsage) {
		return nil, false
	}
	return o.VulnerableFunctionUsage, true
}

// HasVulnerableFunctionUsage returns a boolean if a field has been set.
func (o *RemediationAssessment) HasVulnerableFunctionUsage() bool {
	if o != nil && !IsNil(o.VulnerableFunctionUsage) {
		return true
	}

	return false
}

// SetVulnerableFunctionUsage gets a reference to the given string and assigns it to the VulnerableFunctionUsage field.
func (o *RemediationAssessment) SetVulnerableFunctionUsage(v string) {
	o.VulnerableFunctionUsage = &v
}

// GetVulnerableFunctionsInUse returns the VulnerableFunctionsInUse field value if set, zero value otherwise.
func (o *RemediationAssessment) GetVulnerableFunctionsInUse() []VulnerableFunction {
	if o == nil || IsNil(o.VulnerableFunctionsInUse) {
		var ret []VulnerableFunction
		return ret
	}
	return o.VulnerableFunctionsInUse
}

// GetVulnerableFunctionsInUseOk returns a tuple with the VulnerableFunctionsInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationAssessment) GetVulnerableFunctionsInUseOk() ([]VulnerableFunction, bool) {
	if o == nil || IsNil(o.VulnerableFunctionsInUse) {
		return nil, false
	}
	return o.VulnerableFunctionsInUse, true
}

// HasVulnerableFunctionsInUse returns a boolean if a field has been set.
func (o *RemediationAssessment) HasVulnerableFunctionsInUse() bool {
	if o != nil && !IsNil(o.VulnerableFunctionsInUse) {
		return true
	}

	return false
}

// SetVulnerableFunctionsInUse gets a reference to the given []VulnerableFunction and assigns it to the VulnerableFunctionsInUse field.
func (o *RemediationAssessment) SetVulnerableFunctionsInUse(v []VulnerableFunction) {
	o.VulnerableFunctionsInUse = v
}

// GetVulnerableFunctionsNotAvailable returns the VulnerableFunctionsNotAvailable field value if set, zero value otherwise.
func (o *RemediationAssessment) GetVulnerableFunctionsNotAvailable() []VulnerableFunction {
	if o == nil || IsNil(o.VulnerableFunctionsNotAvailable) {
		var ret []VulnerableFunction
		return ret
	}
	return o.VulnerableFunctionsNotAvailable
}

// GetVulnerableFunctionsNotAvailableOk returns a tuple with the VulnerableFunctionsNotAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationAssessment) GetVulnerableFunctionsNotAvailableOk() ([]VulnerableFunction, bool) {
	if o == nil || IsNil(o.VulnerableFunctionsNotAvailable) {
		return nil, false
	}
	return o.VulnerableFunctionsNotAvailable, true
}

// HasVulnerableFunctionsNotAvailable returns a boolean if a field has been set.
func (o *RemediationAssessment) HasVulnerableFunctionsNotAvailable() bool {
	if o != nil && !IsNil(o.VulnerableFunctionsNotAvailable) {
		return true
	}

	return false
}

// SetVulnerableFunctionsNotAvailable gets a reference to the given []VulnerableFunction and assigns it to the VulnerableFunctionsNotAvailable field.
func (o *RemediationAssessment) SetVulnerableFunctionsNotAvailable(v []VulnerableFunction) {
	o.VulnerableFunctionsNotAvailable = v
}

// GetVulnerableFunctionsNotInUse returns the VulnerableFunctionsNotInUse field value if set, zero value otherwise.
func (o *RemediationAssessment) GetVulnerableFunctionsNotInUse() []VulnerableFunction {
	if o == nil || IsNil(o.VulnerableFunctionsNotInUse) {
		var ret []VulnerableFunction
		return ret
	}
	return o.VulnerableFunctionsNotInUse
}

// GetVulnerableFunctionsNotInUseOk returns a tuple with the VulnerableFunctionsNotInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationAssessment) GetVulnerableFunctionsNotInUseOk() ([]VulnerableFunction, bool) {
	if o == nil || IsNil(o.VulnerableFunctionsNotInUse) {
		return nil, false
	}
	return o.VulnerableFunctionsNotInUse, true
}

// HasVulnerableFunctionsNotInUse returns a boolean if a field has been set.
func (o *RemediationAssessment) HasVulnerableFunctionsNotInUse() bool {
	if o != nil && !IsNil(o.VulnerableFunctionsNotInUse) {
		return true
	}

	return false
}

// SetVulnerableFunctionsNotInUse gets a reference to the given []VulnerableFunction and assigns it to the VulnerableFunctionsNotInUse field.
func (o *RemediationAssessment) SetVulnerableFunctionsNotInUse(v []VulnerableFunction) {
	o.VulnerableFunctionsNotInUse = v
}

func (o RemediationAssessment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemediationAssessment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataAssets) {
		toSerialize["dataAssets"] = o.DataAssets
	}
	if !IsNil(o.Exposure) {
		toSerialize["exposure"] = o.Exposure
	}
	if !IsNil(o.NumberOfDataAssets) {
		toSerialize["numberOfDataAssets"] = o.NumberOfDataAssets
	}
	if !IsNil(o.VulnerableFunctionUsage) {
		toSerialize["vulnerableFunctionUsage"] = o.VulnerableFunctionUsage
	}
	if !IsNil(o.VulnerableFunctionsInUse) {
		toSerialize["vulnerableFunctionsInUse"] = o.VulnerableFunctionsInUse
	}
	if !IsNil(o.VulnerableFunctionsNotAvailable) {
		toSerialize["vulnerableFunctionsNotAvailable"] = o.VulnerableFunctionsNotAvailable
	}
	if !IsNil(o.VulnerableFunctionsNotInUse) {
		toSerialize["vulnerableFunctionsNotInUse"] = o.VulnerableFunctionsNotInUse
	}
	return toSerialize, nil
}

type NullableRemediationAssessment struct {
	value *RemediationAssessment
	isSet bool
}

func (v NullableRemediationAssessment) Get() *RemediationAssessment {
	return v.value
}

func (v *NullableRemediationAssessment) Set(val *RemediationAssessment) {
	v.value = val
	v.isSet = true
}

func (v NullableRemediationAssessment) IsSet() bool {
	return v.isSet
}

func (v *NullableRemediationAssessment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemediationAssessment(val *RemediationAssessment) *NullableRemediationAssessment {
	return &NullableRemediationAssessment{value: val, isSet: true}
}

func (v NullableRemediationAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemediationAssessment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


