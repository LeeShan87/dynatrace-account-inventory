/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DavisSecurityAdvisorAPIService DavisSecurityAdvisorAPI service
type DavisSecurityAdvisorAPIService service

type ApiGetAdviceForSecurityProblemsRequest struct {
	ctx context.Context
	ApiService *DavisSecurityAdvisorAPIService
	managementZoneFilter *string
	nextPageKey *string
	pageSize *int64
}

// To specify management zones, use one of the options listed below. For each option you can specify multiple comma-separated values. If several values are specified, the **OR** logic applies. All values are case-sensitive and must be quoted.   * Management zone ID: ids(\&quot;mzId-1\&quot;, \&quot;mzId-2\&quot;).  * Management zone names: names(\&quot;mz-1\&quot;, \&quot;mz-2\&quot;).   You can specify several comma-separated criteria (for example, &#x60;names(\&quot;myMz\&quot;),ids(\&quot;9130632296508575249\&quot;)&#x60;).
func (r ApiGetAdviceForSecurityProblemsRequest) ManagementZoneFilter(managementZoneFilter string) ApiGetAdviceForSecurityProblemsRequest {
	r.managementZoneFilter = &managementZoneFilter
	return r
}

// The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters. 
func (r ApiGetAdviceForSecurityProblemsRequest) NextPageKey(nextPageKey string) ApiGetAdviceForSecurityProblemsRequest {
	r.nextPageKey = &nextPageKey
	return r
}

// The amount of security advices in a single response payload.   The maximal allowed page size is 500.   If not set, 5 is used.
func (r ApiGetAdviceForSecurityProblemsRequest) PageSize(pageSize int64) ApiGetAdviceForSecurityProblemsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetAdviceForSecurityProblemsRequest) Execute() (*DavisSecurityAdviceList, *http.Response, error) {
	return r.ApiService.GetAdviceForSecurityProblemsExecute(r)
}

/*
GetAdviceForSecurityProblems Provides advice for security problems.

You can narrow down the output by providing the management zone and pagination. If you specify a management zone, only problems originating from that zone are included to the request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAdviceForSecurityProblemsRequest
*/
func (a *DavisSecurityAdvisorAPIService) GetAdviceForSecurityProblems(ctx context.Context) ApiGetAdviceForSecurityProblemsRequest {
	return ApiGetAdviceForSecurityProblemsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DavisSecurityAdviceList
func (a *DavisSecurityAdvisorAPIService) GetAdviceForSecurityProblemsExecute(r ApiGetAdviceForSecurityProblemsRequest) (*DavisSecurityAdviceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DavisSecurityAdviceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DavisSecurityAdvisorAPIService.GetAdviceForSecurityProblems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/davis/securityAdvices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.managementZoneFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managementZoneFilter", r.managementZoneFilter, "")
	}
	if r.nextPageKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextPageKey", r.nextPageKey, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
