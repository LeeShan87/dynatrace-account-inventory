/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the AssetSchemaDetailsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetSchemaDetailsDto{}

// AssetSchemaDetailsDto Settings schema details for asset
type AssetSchemaDetailsDto struct {
	// Asset key
	Key *string `json:"key,omitempty"`
	// Asset schema id
	SchemaId *string `json:"schemaId,omitempty"`
	// Asset configuration scope
	Scope *string `json:"scope,omitempty"`
}

// NewAssetSchemaDetailsDto instantiates a new AssetSchemaDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetSchemaDetailsDto() *AssetSchemaDetailsDto {
	this := AssetSchemaDetailsDto{}
	return &this
}

// NewAssetSchemaDetailsDtoWithDefaults instantiates a new AssetSchemaDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetSchemaDetailsDtoWithDefaults() *AssetSchemaDetailsDto {
	this := AssetSchemaDetailsDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AssetSchemaDetailsDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetSchemaDetailsDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AssetSchemaDetailsDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AssetSchemaDetailsDto) SetKey(v string) {
	o.Key = &v
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise.
func (o *AssetSchemaDetailsDto) GetSchemaId() string {
	if o == nil || IsNil(o.SchemaId) {
		var ret string
		return ret
	}
	return *o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetSchemaDetailsDto) GetSchemaIdOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaId) {
		return nil, false
	}
	return o.SchemaId, true
}

// HasSchemaId returns a boolean if a field has been set.
func (o *AssetSchemaDetailsDto) HasSchemaId() bool {
	if o != nil && !IsNil(o.SchemaId) {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given string and assigns it to the SchemaId field.
func (o *AssetSchemaDetailsDto) SetSchemaId(v string) {
	o.SchemaId = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *AssetSchemaDetailsDto) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetSchemaDetailsDto) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *AssetSchemaDetailsDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *AssetSchemaDetailsDto) SetScope(v string) {
	o.Scope = &v
}

func (o AssetSchemaDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetSchemaDetailsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.SchemaId) {
		toSerialize["schemaId"] = o.SchemaId
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableAssetSchemaDetailsDto struct {
	value *AssetSchemaDetailsDto
	isSet bool
}

func (v NullableAssetSchemaDetailsDto) Get() *AssetSchemaDetailsDto {
	return v.value
}

func (v *NullableAssetSchemaDetailsDto) Set(val *AssetSchemaDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetSchemaDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetSchemaDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetSchemaDetailsDto(val *AssetSchemaDetailsDto) *NullableAssetSchemaDetailsDto {
	return &NullableAssetSchemaDetailsDto{value: val, isSet: true}
}

func (v NullableAssetSchemaDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetSchemaDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


