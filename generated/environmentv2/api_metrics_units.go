/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MetricsUnitsAPIService MetricsUnitsAPI service
type MetricsUnitsAPIService service

type ApiAllUnitsRequest struct {
	ctx context.Context
	ApiService *MetricsUnitsAPIService
	unitSelector *string
	fields *string
}

// Selects units to be included to the response. Available criteria:  * Compatibility: &#x60;compatibleTo(\&quot;unit\&quot;,\&quot;display-format\&quot;)&#x60;. Returns units that can be converted to the specified unit. The optional display format (&#x60;binary&#x60; or &#x60;decimal&#x60;) argument is supported by bit- and byte-based units and returns only units for the specified format.
func (r ApiAllUnitsRequest) UnitSelector(unitSelector string) ApiAllUnitsRequest {
	r.unitSelector = &unitSelector
	return r
}

// Defines the list of properties to be included in the response. The ID of the unit is **always** included. The following additional properties are available:   * &#x60;displayName&#x60;: The display name of the unit.  * &#x60;symbol&#x60;: The symbol of the unit.  * &#x60;description&#x60;: A short description of the unit.  By default, the ID, the display name, and the symbol are included.   To add properties, list them with leading plus &#x60;+&#x60;. To exclude default properties, list them with leading minus &#x60;-&#x60;.  To specify several properties, join them with a comma (for example &#x60;fields&#x3D;+description,-symbol&#x60;).  If you specify just one property, the response contains the unitId and the specified property. To return unit IDs only, specify &#x60;unitId&#x60; here.
func (r ApiAllUnitsRequest) Fields(fields string) ApiAllUnitsRequest {
	r.fields = &fields
	return r
}

func (r ApiAllUnitsRequest) Execute() (*UnitList, *http.Response, error) {
	return r.ApiService.AllUnitsExecute(r)
}

/*
AllUnits Lists all available units

You can narrow down the output by providing filter criteria in the **unitSelector** field.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAllUnitsRequest
*/
func (a *MetricsUnitsAPIService) AllUnits(ctx context.Context) ApiAllUnitsRequest {
	return ApiAllUnitsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UnitList
func (a *MetricsUnitsAPIService) AllUnitsExecute(r ApiAllUnitsRequest) (*UnitList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnitList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsUnitsAPIService.AllUnits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/units"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.unitSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unitSelector", r.unitSelector, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConvertRequest struct {
	ctx context.Context
	ApiService *MetricsUnitsAPIService
	unitId string
	value *float64
	targetUnit *string
	numberFormat *string
}

// The value to be converted.
func (r ApiConvertRequest) Value(value float64) ApiConvertRequest {
	r.value = &value
	return r
}

// The ID of the target unit.   If not set, the request finds an appropriate target unit automatically, based on the specified number format.
func (r ApiConvertRequest) TargetUnit(targetUnit string) ApiConvertRequest {
	r.targetUnit = &targetUnit
	return r
}

// The preferred number format of the target value. You can specify the following formats:   * &#x60;binary&#x60;  * &#x60;decimal&#x60;   &#x60;Only used if the target unit if not set.
func (r ApiConvertRequest) NumberFormat(numberFormat string) ApiConvertRequest {
	r.numberFormat = &numberFormat
	return r
}

func (r ApiConvertRequest) Execute() (*UnitConversionResult, *http.Response, error) {
	return r.ApiService.ConvertExecute(r)
}

/*
Convert Converts a value from a source unit into a target unit

If no target unit is set, the request finds an appropriate target unit automatically, taking into account the preferred number format (if specified).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param unitId The ID of the source unit.
 @return ApiConvertRequest
*/
func (a *MetricsUnitsAPIService) Convert(ctx context.Context, unitId string) ApiConvertRequest {
	return ApiConvertRequest{
		ApiService: a,
		ctx: ctx,
		unitId: unitId,
	}
}

// Execute executes the request
//  @return UnitConversionResult
func (a *MetricsUnitsAPIService) ConvertExecute(r ApiConvertRequest) (*UnitConversionResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnitConversionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsUnitsAPIService.Convert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/units/{unitId}/convert"
	localVarPath = strings.Replace(localVarPath, "{"+"unitId"+"}", url.PathEscape(parameterValueToString(r.unitId, "unitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.value == nil {
		return localVarReturnValue, nil, reportError("value is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	if r.targetUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "targetUnit", r.targetUnit, "")
	}
	if r.numberFormat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberFormat", r.numberFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnitRequest struct {
	ctx context.Context
	ApiService *MetricsUnitsAPIService
	unitId string
}

func (r ApiUnitRequest) Execute() (*Unit, *http.Response, error) {
	return r.ApiService.UnitExecute(r)
}

/*
Unit Gets the properties of the specified unit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param unitId The ID of the required unit.
 @return ApiUnitRequest
*/
func (a *MetricsUnitsAPIService) Unit(ctx context.Context, unitId string) ApiUnitRequest {
	return ApiUnitRequest{
		ApiService: a,
		ctx: ctx,
		unitId: unitId,
	}
}

// Execute executes the request
//  @return Unit
func (a *MetricsUnitsAPIService) UnitExecute(r ApiUnitRequest) (*Unit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Unit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsUnitsAPIService.Unit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/units/{unitId}"
	localVarPath = strings.Replace(localVarPath, "{"+"unitId"+"}", url.PathEscape(parameterValueToString(r.unitId, "unitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
