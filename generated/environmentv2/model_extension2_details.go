/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Extension2Details type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Extension2Details{}

// Extension2Details Additional details of the extension.
type Extension2Details struct {
	// Whether this extension is available in the central hub catalog.
	Distributed *bool `json:"distributed,omitempty"`
	// Fully qualified name of the extension.
	ExtensionName *string `json:"extensionName,omitempty"`
	// Recommended version of this extension to use. This is the latest compatible published release.
	RecommendedCatalogVersion NullableString `json:"recommendedCatalogVersion,omitempty"`
	// Releases for the extension.
	Releases []ExtensionRelease `json:"releases,omitempty"`
}

// NewExtension2Details instantiates a new Extension2Details object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtension2Details() *Extension2Details {
	this := Extension2Details{}
	return &this
}

// NewExtension2DetailsWithDefaults instantiates a new Extension2Details object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtension2DetailsWithDefaults() *Extension2Details {
	this := Extension2Details{}
	return &this
}

// GetDistributed returns the Distributed field value if set, zero value otherwise.
func (o *Extension2Details) GetDistributed() bool {
	if o == nil || IsNil(o.Distributed) {
		var ret bool
		return ret
	}
	return *o.Distributed
}

// GetDistributedOk returns a tuple with the Distributed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension2Details) GetDistributedOk() (*bool, bool) {
	if o == nil || IsNil(o.Distributed) {
		return nil, false
	}
	return o.Distributed, true
}

// HasDistributed returns a boolean if a field has been set.
func (o *Extension2Details) HasDistributed() bool {
	if o != nil && !IsNil(o.Distributed) {
		return true
	}

	return false
}

// SetDistributed gets a reference to the given bool and assigns it to the Distributed field.
func (o *Extension2Details) SetDistributed(v bool) {
	o.Distributed = &v
}

// GetExtensionName returns the ExtensionName field value if set, zero value otherwise.
func (o *Extension2Details) GetExtensionName() string {
	if o == nil || IsNil(o.ExtensionName) {
		var ret string
		return ret
	}
	return *o.ExtensionName
}

// GetExtensionNameOk returns a tuple with the ExtensionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension2Details) GetExtensionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExtensionName) {
		return nil, false
	}
	return o.ExtensionName, true
}

// HasExtensionName returns a boolean if a field has been set.
func (o *Extension2Details) HasExtensionName() bool {
	if o != nil && !IsNil(o.ExtensionName) {
		return true
	}

	return false
}

// SetExtensionName gets a reference to the given string and assigns it to the ExtensionName field.
func (o *Extension2Details) SetExtensionName(v string) {
	o.ExtensionName = &v
}

// GetRecommendedCatalogVersion returns the RecommendedCatalogVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Extension2Details) GetRecommendedCatalogVersion() string {
	if o == nil || IsNil(o.RecommendedCatalogVersion.Get()) {
		var ret string
		return ret
	}
	return *o.RecommendedCatalogVersion.Get()
}

// GetRecommendedCatalogVersionOk returns a tuple with the RecommendedCatalogVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Extension2Details) GetRecommendedCatalogVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecommendedCatalogVersion.Get(), o.RecommendedCatalogVersion.IsSet()
}

// HasRecommendedCatalogVersion returns a boolean if a field has been set.
func (o *Extension2Details) HasRecommendedCatalogVersion() bool {
	if o != nil && o.RecommendedCatalogVersion.IsSet() {
		return true
	}

	return false
}

// SetRecommendedCatalogVersion gets a reference to the given NullableString and assigns it to the RecommendedCatalogVersion field.
func (o *Extension2Details) SetRecommendedCatalogVersion(v string) {
	o.RecommendedCatalogVersion.Set(&v)
}
// SetRecommendedCatalogVersionNil sets the value for RecommendedCatalogVersion to be an explicit nil
func (o *Extension2Details) SetRecommendedCatalogVersionNil() {
	o.RecommendedCatalogVersion.Set(nil)
}

// UnsetRecommendedCatalogVersion ensures that no value is present for RecommendedCatalogVersion, not even an explicit nil
func (o *Extension2Details) UnsetRecommendedCatalogVersion() {
	o.RecommendedCatalogVersion.Unset()
}

// GetReleases returns the Releases field value if set, zero value otherwise.
func (o *Extension2Details) GetReleases() []ExtensionRelease {
	if o == nil || IsNil(o.Releases) {
		var ret []ExtensionRelease
		return ret
	}
	return o.Releases
}

// GetReleasesOk returns a tuple with the Releases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension2Details) GetReleasesOk() ([]ExtensionRelease, bool) {
	if o == nil || IsNil(o.Releases) {
		return nil, false
	}
	return o.Releases, true
}

// HasReleases returns a boolean if a field has been set.
func (o *Extension2Details) HasReleases() bool {
	if o != nil && !IsNil(o.Releases) {
		return true
	}

	return false
}

// SetReleases gets a reference to the given []ExtensionRelease and assigns it to the Releases field.
func (o *Extension2Details) SetReleases(v []ExtensionRelease) {
	o.Releases = v
}

func (o Extension2Details) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Extension2Details) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Distributed) {
		toSerialize["distributed"] = o.Distributed
	}
	if !IsNil(o.ExtensionName) {
		toSerialize["extensionName"] = o.ExtensionName
	}
	if o.RecommendedCatalogVersion.IsSet() {
		toSerialize["recommendedCatalogVersion"] = o.RecommendedCatalogVersion.Get()
	}
	if !IsNil(o.Releases) {
		toSerialize["releases"] = o.Releases
	}
	return toSerialize, nil
}

type NullableExtension2Details struct {
	value *Extension2Details
	isSet bool
}

func (v NullableExtension2Details) Get() *Extension2Details {
	return v.value
}

func (v *NullableExtension2Details) Set(val *Extension2Details) {
	v.value = val
	v.isSet = true
}

func (v NullableExtension2Details) IsSet() bool {
	return v.isSet
}

func (v *NullableExtension2Details) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtension2Details(val *Extension2Details) *NullableExtension2Details {
	return &NullableExtension2Details{value: val, isSet: true}
}

func (v NullableExtension2Details) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtension2Details) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


