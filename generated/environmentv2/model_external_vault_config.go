/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ExternalVaultConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalVaultConfig{}

// ExternalVaultConfig Configuration for external vault synchronization for username and password credentials.
type ExternalVaultConfig struct {
	CredentialsUsedForExternalSynchronization []string `json:"credentialsUsedForExternalSynchronization,omitempty"`
	PasswordSecretName *string `json:"passwordSecretName,omitempty"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `HASHICORP_VAULT_APPROLE` -> HashicorpApproleConfig  * `HASHICORP_VAULT_CERTIFICATE` -> HashicorpCertificateConfig  * `AZURE_KEY_VAULT_CLIENT_SECRET` -> AzureClientSecretConfig  * `CYBERARK_VAULT_USERNAME_PASSWORD` -> CyberArkUsernamePasswordConfig  * `CYBERARK_VAULT_ALLOWED_LOCATION` -> CyberArkAllowedLocationConfig  
	SourceAuthMethod *string `json:"sourceAuthMethod,omitempty"`
	TokenSecretName *string `json:"tokenSecretName,omitempty"`
	Type *string `json:"type,omitempty"`
	UsernameSecretName *string `json:"usernameSecretName,omitempty"`
	VaultUrl *string `json:"vaultUrl,omitempty"`
}

// NewExternalVaultConfig instantiates a new ExternalVaultConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalVaultConfig() *ExternalVaultConfig {
	this := ExternalVaultConfig{}
	return &this
}

// NewExternalVaultConfigWithDefaults instantiates a new ExternalVaultConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalVaultConfigWithDefaults() *ExternalVaultConfig {
	this := ExternalVaultConfig{}
	return &this
}

// GetCredentialsUsedForExternalSynchronization returns the CredentialsUsedForExternalSynchronization field value if set, zero value otherwise.
func (o *ExternalVaultConfig) GetCredentialsUsedForExternalSynchronization() []string {
	if o == nil || IsNil(o.CredentialsUsedForExternalSynchronization) {
		var ret []string
		return ret
	}
	return o.CredentialsUsedForExternalSynchronization
}

// GetCredentialsUsedForExternalSynchronizationOk returns a tuple with the CredentialsUsedForExternalSynchronization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVaultConfig) GetCredentialsUsedForExternalSynchronizationOk() ([]string, bool) {
	if o == nil || IsNil(o.CredentialsUsedForExternalSynchronization) {
		return nil, false
	}
	return o.CredentialsUsedForExternalSynchronization, true
}

// HasCredentialsUsedForExternalSynchronization returns a boolean if a field has been set.
func (o *ExternalVaultConfig) HasCredentialsUsedForExternalSynchronization() bool {
	if o != nil && !IsNil(o.CredentialsUsedForExternalSynchronization) {
		return true
	}

	return false
}

// SetCredentialsUsedForExternalSynchronization gets a reference to the given []string and assigns it to the CredentialsUsedForExternalSynchronization field.
func (o *ExternalVaultConfig) SetCredentialsUsedForExternalSynchronization(v []string) {
	o.CredentialsUsedForExternalSynchronization = v
}

// GetPasswordSecretName returns the PasswordSecretName field value if set, zero value otherwise.
func (o *ExternalVaultConfig) GetPasswordSecretName() string {
	if o == nil || IsNil(o.PasswordSecretName) {
		var ret string
		return ret
	}
	return *o.PasswordSecretName
}

// GetPasswordSecretNameOk returns a tuple with the PasswordSecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVaultConfig) GetPasswordSecretNameOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordSecretName) {
		return nil, false
	}
	return o.PasswordSecretName, true
}

// HasPasswordSecretName returns a boolean if a field has been set.
func (o *ExternalVaultConfig) HasPasswordSecretName() bool {
	if o != nil && !IsNil(o.PasswordSecretName) {
		return true
	}

	return false
}

// SetPasswordSecretName gets a reference to the given string and assigns it to the PasswordSecretName field.
func (o *ExternalVaultConfig) SetPasswordSecretName(v string) {
	o.PasswordSecretName = &v
}

// GetSourceAuthMethod returns the SourceAuthMethod field value if set, zero value otherwise.
func (o *ExternalVaultConfig) GetSourceAuthMethod() string {
	if o == nil || IsNil(o.SourceAuthMethod) {
		var ret string
		return ret
	}
	return *o.SourceAuthMethod
}

// GetSourceAuthMethodOk returns a tuple with the SourceAuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVaultConfig) GetSourceAuthMethodOk() (*string, bool) {
	if o == nil || IsNil(o.SourceAuthMethod) {
		return nil, false
	}
	return o.SourceAuthMethod, true
}

// HasSourceAuthMethod returns a boolean if a field has been set.
func (o *ExternalVaultConfig) HasSourceAuthMethod() bool {
	if o != nil && !IsNil(o.SourceAuthMethod) {
		return true
	}

	return false
}

// SetSourceAuthMethod gets a reference to the given string and assigns it to the SourceAuthMethod field.
func (o *ExternalVaultConfig) SetSourceAuthMethod(v string) {
	o.SourceAuthMethod = &v
}

// GetTokenSecretName returns the TokenSecretName field value if set, zero value otherwise.
func (o *ExternalVaultConfig) GetTokenSecretName() string {
	if o == nil || IsNil(o.TokenSecretName) {
		var ret string
		return ret
	}
	return *o.TokenSecretName
}

// GetTokenSecretNameOk returns a tuple with the TokenSecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVaultConfig) GetTokenSecretNameOk() (*string, bool) {
	if o == nil || IsNil(o.TokenSecretName) {
		return nil, false
	}
	return o.TokenSecretName, true
}

// HasTokenSecretName returns a boolean if a field has been set.
func (o *ExternalVaultConfig) HasTokenSecretName() bool {
	if o != nil && !IsNil(o.TokenSecretName) {
		return true
	}

	return false
}

// SetTokenSecretName gets a reference to the given string and assigns it to the TokenSecretName field.
func (o *ExternalVaultConfig) SetTokenSecretName(v string) {
	o.TokenSecretName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExternalVaultConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVaultConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExternalVaultConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExternalVaultConfig) SetType(v string) {
	o.Type = &v
}

// GetUsernameSecretName returns the UsernameSecretName field value if set, zero value otherwise.
func (o *ExternalVaultConfig) GetUsernameSecretName() string {
	if o == nil || IsNil(o.UsernameSecretName) {
		var ret string
		return ret
	}
	return *o.UsernameSecretName
}

// GetUsernameSecretNameOk returns a tuple with the UsernameSecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVaultConfig) GetUsernameSecretNameOk() (*string, bool) {
	if o == nil || IsNil(o.UsernameSecretName) {
		return nil, false
	}
	return o.UsernameSecretName, true
}

// HasUsernameSecretName returns a boolean if a field has been set.
func (o *ExternalVaultConfig) HasUsernameSecretName() bool {
	if o != nil && !IsNil(o.UsernameSecretName) {
		return true
	}

	return false
}

// SetUsernameSecretName gets a reference to the given string and assigns it to the UsernameSecretName field.
func (o *ExternalVaultConfig) SetUsernameSecretName(v string) {
	o.UsernameSecretName = &v
}

// GetVaultUrl returns the VaultUrl field value if set, zero value otherwise.
func (o *ExternalVaultConfig) GetVaultUrl() string {
	if o == nil || IsNil(o.VaultUrl) {
		var ret string
		return ret
	}
	return *o.VaultUrl
}

// GetVaultUrlOk returns a tuple with the VaultUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalVaultConfig) GetVaultUrlOk() (*string, bool) {
	if o == nil || IsNil(o.VaultUrl) {
		return nil, false
	}
	return o.VaultUrl, true
}

// HasVaultUrl returns a boolean if a field has been set.
func (o *ExternalVaultConfig) HasVaultUrl() bool {
	if o != nil && !IsNil(o.VaultUrl) {
		return true
	}

	return false
}

// SetVaultUrl gets a reference to the given string and assigns it to the VaultUrl field.
func (o *ExternalVaultConfig) SetVaultUrl(v string) {
	o.VaultUrl = &v
}

func (o ExternalVaultConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalVaultConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CredentialsUsedForExternalSynchronization) {
		toSerialize["credentialsUsedForExternalSynchronization"] = o.CredentialsUsedForExternalSynchronization
	}
	if !IsNil(o.PasswordSecretName) {
		toSerialize["passwordSecretName"] = o.PasswordSecretName
	}
	if !IsNil(o.SourceAuthMethod) {
		toSerialize["sourceAuthMethod"] = o.SourceAuthMethod
	}
	if !IsNil(o.TokenSecretName) {
		toSerialize["tokenSecretName"] = o.TokenSecretName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UsernameSecretName) {
		toSerialize["usernameSecretName"] = o.UsernameSecretName
	}
	if !IsNil(o.VaultUrl) {
		toSerialize["vaultUrl"] = o.VaultUrl
	}
	return toSerialize, nil
}

type NullableExternalVaultConfig struct {
	value *ExternalVaultConfig
	isSet bool
}

func (v NullableExternalVaultConfig) Get() *ExternalVaultConfig {
	return v.value
}

func (v *NullableExternalVaultConfig) Set(val *ExternalVaultConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalVaultConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalVaultConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalVaultConfig(val *ExternalVaultConfig) *NullableExternalVaultConfig {
	return &NullableExternalVaultConfig{value: val, isSet: true}
}

func (v NullableExternalVaultConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalVaultConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


