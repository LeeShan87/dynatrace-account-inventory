/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the VulnerableFunctionsContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerableFunctionsContainer{}

// VulnerableFunctionsContainer A list of vulnerable functions, their security problem wide usages and their usages per process group. Optional: A list of vulnerable function usages per process group for a security problem.
type VulnerableFunctionsContainer struct {
	// A list of vulnerable functions, their security problem wide usages and their usages per process group.
	VulnerableFunctions []VulnerableFunctionProcessGroups `json:"vulnerableFunctions,omitempty"`
	// A list of vulnerable function usages per process group for a security problem. The result is sorted based on the following criteria:  * the number of vulnerable functions in use (descending). * the number of vulnerable functions not in use (descending). * the number of vulnerable functions not available (descending). * the process group identifier (ascending)
	VulnerableFunctionsByProcessGroup []ProcessGroupVulnerableFunctions `json:"vulnerableFunctionsByProcessGroup,omitempty"`
}

// NewVulnerableFunctionsContainer instantiates a new VulnerableFunctionsContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerableFunctionsContainer() *VulnerableFunctionsContainer {
	this := VulnerableFunctionsContainer{}
	return &this
}

// NewVulnerableFunctionsContainerWithDefaults instantiates a new VulnerableFunctionsContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerableFunctionsContainerWithDefaults() *VulnerableFunctionsContainer {
	this := VulnerableFunctionsContainer{}
	return &this
}

// GetVulnerableFunctions returns the VulnerableFunctions field value if set, zero value otherwise.
func (o *VulnerableFunctionsContainer) GetVulnerableFunctions() []VulnerableFunctionProcessGroups {
	if o == nil || IsNil(o.VulnerableFunctions) {
		var ret []VulnerableFunctionProcessGroups
		return ret
	}
	return o.VulnerableFunctions
}

// GetVulnerableFunctionsOk returns a tuple with the VulnerableFunctions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerableFunctionsContainer) GetVulnerableFunctionsOk() ([]VulnerableFunctionProcessGroups, bool) {
	if o == nil || IsNil(o.VulnerableFunctions) {
		return nil, false
	}
	return o.VulnerableFunctions, true
}

// HasVulnerableFunctions returns a boolean if a field has been set.
func (o *VulnerableFunctionsContainer) HasVulnerableFunctions() bool {
	if o != nil && !IsNil(o.VulnerableFunctions) {
		return true
	}

	return false
}

// SetVulnerableFunctions gets a reference to the given []VulnerableFunctionProcessGroups and assigns it to the VulnerableFunctions field.
func (o *VulnerableFunctionsContainer) SetVulnerableFunctions(v []VulnerableFunctionProcessGroups) {
	o.VulnerableFunctions = v
}

// GetVulnerableFunctionsByProcessGroup returns the VulnerableFunctionsByProcessGroup field value if set, zero value otherwise.
func (o *VulnerableFunctionsContainer) GetVulnerableFunctionsByProcessGroup() []ProcessGroupVulnerableFunctions {
	if o == nil || IsNil(o.VulnerableFunctionsByProcessGroup) {
		var ret []ProcessGroupVulnerableFunctions
		return ret
	}
	return o.VulnerableFunctionsByProcessGroup
}

// GetVulnerableFunctionsByProcessGroupOk returns a tuple with the VulnerableFunctionsByProcessGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerableFunctionsContainer) GetVulnerableFunctionsByProcessGroupOk() ([]ProcessGroupVulnerableFunctions, bool) {
	if o == nil || IsNil(o.VulnerableFunctionsByProcessGroup) {
		return nil, false
	}
	return o.VulnerableFunctionsByProcessGroup, true
}

// HasVulnerableFunctionsByProcessGroup returns a boolean if a field has been set.
func (o *VulnerableFunctionsContainer) HasVulnerableFunctionsByProcessGroup() bool {
	if o != nil && !IsNil(o.VulnerableFunctionsByProcessGroup) {
		return true
	}

	return false
}

// SetVulnerableFunctionsByProcessGroup gets a reference to the given []ProcessGroupVulnerableFunctions and assigns it to the VulnerableFunctionsByProcessGroup field.
func (o *VulnerableFunctionsContainer) SetVulnerableFunctionsByProcessGroup(v []ProcessGroupVulnerableFunctions) {
	o.VulnerableFunctionsByProcessGroup = v
}

func (o VulnerableFunctionsContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerableFunctionsContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VulnerableFunctions) {
		toSerialize["vulnerableFunctions"] = o.VulnerableFunctions
	}
	if !IsNil(o.VulnerableFunctionsByProcessGroup) {
		toSerialize["vulnerableFunctionsByProcessGroup"] = o.VulnerableFunctionsByProcessGroup
	}
	return toSerialize, nil
}

type NullableVulnerableFunctionsContainer struct {
	value *VulnerableFunctionsContainer
	isSet bool
}

func (v NullableVulnerableFunctionsContainer) Get() *VulnerableFunctionsContainer {
	return v.value
}

func (v *NullableVulnerableFunctionsContainer) Set(val *VulnerableFunctionsContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerableFunctionsContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerableFunctionsContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerableFunctionsContainer(val *VulnerableFunctionsContainer) *NullableVulnerableFunctionsContainer {
	return &NullableVulnerableFunctionsContainer{value: val, isSet: true}
}

func (v NullableVulnerableFunctionsContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerableFunctionsContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


