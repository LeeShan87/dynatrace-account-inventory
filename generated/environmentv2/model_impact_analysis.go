/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ImpactAnalysis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImpactAnalysis{}

// ImpactAnalysis A list of all impacts of the problem.
type ImpactAnalysis struct {
	// A list of all impacts of the problem.
	Impacts []Impact `json:"impacts"`
}

// NewImpactAnalysis instantiates a new ImpactAnalysis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImpactAnalysis(impacts []Impact) *ImpactAnalysis {
	this := ImpactAnalysis{}
	this.Impacts = impacts
	return &this
}

// NewImpactAnalysisWithDefaults instantiates a new ImpactAnalysis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImpactAnalysisWithDefaults() *ImpactAnalysis {
	this := ImpactAnalysis{}
	return &this
}

// GetImpacts returns the Impacts field value
func (o *ImpactAnalysis) GetImpacts() []Impact {
	if o == nil {
		var ret []Impact
		return ret
	}

	return o.Impacts
}

// GetImpactsOk returns a tuple with the Impacts field value
// and a boolean to check if the value has been set.
func (o *ImpactAnalysis) GetImpactsOk() ([]Impact, bool) {
	if o == nil {
		return nil, false
	}
	return o.Impacts, true
}

// SetImpacts sets field value
func (o *ImpactAnalysis) SetImpacts(v []Impact) {
	o.Impacts = v
}

func (o ImpactAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImpactAnalysis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["impacts"] = o.Impacts
	return toSerialize, nil
}

type NullableImpactAnalysis struct {
	value *ImpactAnalysis
	isSet bool
}

func (v NullableImpactAnalysis) Get() *ImpactAnalysis {
	return v.value
}

func (v *NullableImpactAnalysis) Set(val *ImpactAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableImpactAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableImpactAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImpactAnalysis(val *ImpactAnalysis) *NullableImpactAnalysis {
	return &NullableImpactAnalysis{value: val, isSet: true}
}

func (v NullableImpactAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImpactAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


