/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ProcessGroupVulnerableFunctions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessGroupVulnerableFunctions{}

// ProcessGroupVulnerableFunctions The vulnerable functions of a process group including their usage.
type ProcessGroupVulnerableFunctions struct {
	// A list of vulnerable functions in use.
	FunctionsInUse []VulnerableFunction `json:"functionsInUse,omitempty"`
	// A list of vulnerable functions with unknown state.
	FunctionsNotAvailable []VulnerableFunction `json:"functionsNotAvailable,omitempty"`
	// A list of vulnerable functions not in use.
	FunctionsNotInUse []VulnerableFunction `json:"functionsNotInUse,omitempty"`
	// The process group identifier.
	ProcessGroup *string `json:"processGroup,omitempty"`
}

// NewProcessGroupVulnerableFunctions instantiates a new ProcessGroupVulnerableFunctions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessGroupVulnerableFunctions() *ProcessGroupVulnerableFunctions {
	this := ProcessGroupVulnerableFunctions{}
	return &this
}

// NewProcessGroupVulnerableFunctionsWithDefaults instantiates a new ProcessGroupVulnerableFunctions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessGroupVulnerableFunctionsWithDefaults() *ProcessGroupVulnerableFunctions {
	this := ProcessGroupVulnerableFunctions{}
	return &this
}

// GetFunctionsInUse returns the FunctionsInUse field value if set, zero value otherwise.
func (o *ProcessGroupVulnerableFunctions) GetFunctionsInUse() []VulnerableFunction {
	if o == nil || IsNil(o.FunctionsInUse) {
		var ret []VulnerableFunction
		return ret
	}
	return o.FunctionsInUse
}

// GetFunctionsInUseOk returns a tuple with the FunctionsInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupVulnerableFunctions) GetFunctionsInUseOk() ([]VulnerableFunction, bool) {
	if o == nil || IsNil(o.FunctionsInUse) {
		return nil, false
	}
	return o.FunctionsInUse, true
}

// HasFunctionsInUse returns a boolean if a field has been set.
func (o *ProcessGroupVulnerableFunctions) HasFunctionsInUse() bool {
	if o != nil && !IsNil(o.FunctionsInUse) {
		return true
	}

	return false
}

// SetFunctionsInUse gets a reference to the given []VulnerableFunction and assigns it to the FunctionsInUse field.
func (o *ProcessGroupVulnerableFunctions) SetFunctionsInUse(v []VulnerableFunction) {
	o.FunctionsInUse = v
}

// GetFunctionsNotAvailable returns the FunctionsNotAvailable field value if set, zero value otherwise.
func (o *ProcessGroupVulnerableFunctions) GetFunctionsNotAvailable() []VulnerableFunction {
	if o == nil || IsNil(o.FunctionsNotAvailable) {
		var ret []VulnerableFunction
		return ret
	}
	return o.FunctionsNotAvailable
}

// GetFunctionsNotAvailableOk returns a tuple with the FunctionsNotAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupVulnerableFunctions) GetFunctionsNotAvailableOk() ([]VulnerableFunction, bool) {
	if o == nil || IsNil(o.FunctionsNotAvailable) {
		return nil, false
	}
	return o.FunctionsNotAvailable, true
}

// HasFunctionsNotAvailable returns a boolean if a field has been set.
func (o *ProcessGroupVulnerableFunctions) HasFunctionsNotAvailable() bool {
	if o != nil && !IsNil(o.FunctionsNotAvailable) {
		return true
	}

	return false
}

// SetFunctionsNotAvailable gets a reference to the given []VulnerableFunction and assigns it to the FunctionsNotAvailable field.
func (o *ProcessGroupVulnerableFunctions) SetFunctionsNotAvailable(v []VulnerableFunction) {
	o.FunctionsNotAvailable = v
}

// GetFunctionsNotInUse returns the FunctionsNotInUse field value if set, zero value otherwise.
func (o *ProcessGroupVulnerableFunctions) GetFunctionsNotInUse() []VulnerableFunction {
	if o == nil || IsNil(o.FunctionsNotInUse) {
		var ret []VulnerableFunction
		return ret
	}
	return o.FunctionsNotInUse
}

// GetFunctionsNotInUseOk returns a tuple with the FunctionsNotInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupVulnerableFunctions) GetFunctionsNotInUseOk() ([]VulnerableFunction, bool) {
	if o == nil || IsNil(o.FunctionsNotInUse) {
		return nil, false
	}
	return o.FunctionsNotInUse, true
}

// HasFunctionsNotInUse returns a boolean if a field has been set.
func (o *ProcessGroupVulnerableFunctions) HasFunctionsNotInUse() bool {
	if o != nil && !IsNil(o.FunctionsNotInUse) {
		return true
	}

	return false
}

// SetFunctionsNotInUse gets a reference to the given []VulnerableFunction and assigns it to the FunctionsNotInUse field.
func (o *ProcessGroupVulnerableFunctions) SetFunctionsNotInUse(v []VulnerableFunction) {
	o.FunctionsNotInUse = v
}

// GetProcessGroup returns the ProcessGroup field value if set, zero value otherwise.
func (o *ProcessGroupVulnerableFunctions) GetProcessGroup() string {
	if o == nil || IsNil(o.ProcessGroup) {
		var ret string
		return ret
	}
	return *o.ProcessGroup
}

// GetProcessGroupOk returns a tuple with the ProcessGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupVulnerableFunctions) GetProcessGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessGroup) {
		return nil, false
	}
	return o.ProcessGroup, true
}

// HasProcessGroup returns a boolean if a field has been set.
func (o *ProcessGroupVulnerableFunctions) HasProcessGroup() bool {
	if o != nil && !IsNil(o.ProcessGroup) {
		return true
	}

	return false
}

// SetProcessGroup gets a reference to the given string and assigns it to the ProcessGroup field.
func (o *ProcessGroupVulnerableFunctions) SetProcessGroup(v string) {
	o.ProcessGroup = &v
}

func (o ProcessGroupVulnerableFunctions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessGroupVulnerableFunctions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FunctionsInUse) {
		toSerialize["functionsInUse"] = o.FunctionsInUse
	}
	if !IsNil(o.FunctionsNotAvailable) {
		toSerialize["functionsNotAvailable"] = o.FunctionsNotAvailable
	}
	if !IsNil(o.FunctionsNotInUse) {
		toSerialize["functionsNotInUse"] = o.FunctionsNotInUse
	}
	if !IsNil(o.ProcessGroup) {
		toSerialize["processGroup"] = o.ProcessGroup
	}
	return toSerialize, nil
}

type NullableProcessGroupVulnerableFunctions struct {
	value *ProcessGroupVulnerableFunctions
	isSet bool
}

func (v NullableProcessGroupVulnerableFunctions) Get() *ProcessGroupVulnerableFunctions {
	return v.value
}

func (v *NullableProcessGroupVulnerableFunctions) Set(val *ProcessGroupVulnerableFunctions) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessGroupVulnerableFunctions) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessGroupVulnerableFunctions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessGroupVulnerableFunctions(val *ProcessGroupVulnerableFunctions) *NullableProcessGroupVulnerableFunctions {
	return &NullableProcessGroupVulnerableFunctions{value: val, isSet: true}
}

func (v NullableProcessGroupVulnerableFunctions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessGroupVulnerableFunctions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


