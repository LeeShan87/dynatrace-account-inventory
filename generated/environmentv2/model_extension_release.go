/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ExtensionRelease type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionRelease{}

// ExtensionRelease Extensions releases information
type ExtensionRelease struct {
	// Represents whether this version is active version
	Active *bool `json:"active,omitempty"`
	// Sha256 hash for the distributed extension.
	ArtifactSha256 NullableString `json:"artifactSha256,omitempty"`
	// Assets types and its count
	AssetsInfo []AssetInfo `json:"assetsInfo,omitempty"`
	// Configured feature sets for an installed release
	ConfiguredFeatureSets []string `json:"configuredFeatureSets,omitempty"`
	// Available data sources for the given release
	DataSources []string `json:"dataSources,omitempty"`
	// Represents whether the release is distributed
	Distributed *bool `json:"distributed,omitempty"`
	// Feature sets contained in the given release
	FeatureSets *map[string]FeatureSetDetails `json:"featureSets,omitempty"`
	// Minimum cluster version for the release
	MinClusterVersion NullableInt32 `json:"minClusterVersion,omitempty"`
	// Represents whether extension is already registered
	Registered *bool `json:"registered,omitempty"`
	// Release notes for the extension.
	ReleaseNotes NullableString `json:"releaseNotes,omitempty"`
	// Represents whether the extension is unpublished.
	Unpublished *bool `json:"unpublished,omitempty"`
	// The description why the extension was unpublished.
	UnpublishedDescription NullableString `json:"unpublishedDescription,omitempty"`
	// The severity of unpublished extension. 5 indicates an error state
	UnpublishedSeverity NullableInt32 `json:"unpublishedSeverity,omitempty"`
	// Version number of the extension.
	Version *string `json:"version,omitempty"`
}

// NewExtensionRelease instantiates a new ExtensionRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionRelease() *ExtensionRelease {
	this := ExtensionRelease{}
	return &this
}

// NewExtensionReleaseWithDefaults instantiates a new ExtensionRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionReleaseWithDefaults() *ExtensionRelease {
	this := ExtensionRelease{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ExtensionRelease) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRelease) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ExtensionRelease) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ExtensionRelease) SetActive(v bool) {
	o.Active = &v
}

// GetArtifactSha256 returns the ArtifactSha256 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtensionRelease) GetArtifactSha256() string {
	if o == nil || IsNil(o.ArtifactSha256.Get()) {
		var ret string
		return ret
	}
	return *o.ArtifactSha256.Get()
}

// GetArtifactSha256Ok returns a tuple with the ArtifactSha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtensionRelease) GetArtifactSha256Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArtifactSha256.Get(), o.ArtifactSha256.IsSet()
}

// HasArtifactSha256 returns a boolean if a field has been set.
func (o *ExtensionRelease) HasArtifactSha256() bool {
	if o != nil && o.ArtifactSha256.IsSet() {
		return true
	}

	return false
}

// SetArtifactSha256 gets a reference to the given NullableString and assigns it to the ArtifactSha256 field.
func (o *ExtensionRelease) SetArtifactSha256(v string) {
	o.ArtifactSha256.Set(&v)
}
// SetArtifactSha256Nil sets the value for ArtifactSha256 to be an explicit nil
func (o *ExtensionRelease) SetArtifactSha256Nil() {
	o.ArtifactSha256.Set(nil)
}

// UnsetArtifactSha256 ensures that no value is present for ArtifactSha256, not even an explicit nil
func (o *ExtensionRelease) UnsetArtifactSha256() {
	o.ArtifactSha256.Unset()
}

// GetAssetsInfo returns the AssetsInfo field value if set, zero value otherwise.
func (o *ExtensionRelease) GetAssetsInfo() []AssetInfo {
	if o == nil || IsNil(o.AssetsInfo) {
		var ret []AssetInfo
		return ret
	}
	return o.AssetsInfo
}

// GetAssetsInfoOk returns a tuple with the AssetsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRelease) GetAssetsInfoOk() ([]AssetInfo, bool) {
	if o == nil || IsNil(o.AssetsInfo) {
		return nil, false
	}
	return o.AssetsInfo, true
}

// HasAssetsInfo returns a boolean if a field has been set.
func (o *ExtensionRelease) HasAssetsInfo() bool {
	if o != nil && !IsNil(o.AssetsInfo) {
		return true
	}

	return false
}

// SetAssetsInfo gets a reference to the given []AssetInfo and assigns it to the AssetsInfo field.
func (o *ExtensionRelease) SetAssetsInfo(v []AssetInfo) {
	o.AssetsInfo = v
}

// GetConfiguredFeatureSets returns the ConfiguredFeatureSets field value if set, zero value otherwise.
func (o *ExtensionRelease) GetConfiguredFeatureSets() []string {
	if o == nil || IsNil(o.ConfiguredFeatureSets) {
		var ret []string
		return ret
	}
	return o.ConfiguredFeatureSets
}

// GetConfiguredFeatureSetsOk returns a tuple with the ConfiguredFeatureSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRelease) GetConfiguredFeatureSetsOk() ([]string, bool) {
	if o == nil || IsNil(o.ConfiguredFeatureSets) {
		return nil, false
	}
	return o.ConfiguredFeatureSets, true
}

// HasConfiguredFeatureSets returns a boolean if a field has been set.
func (o *ExtensionRelease) HasConfiguredFeatureSets() bool {
	if o != nil && !IsNil(o.ConfiguredFeatureSets) {
		return true
	}

	return false
}

// SetConfiguredFeatureSets gets a reference to the given []string and assigns it to the ConfiguredFeatureSets field.
func (o *ExtensionRelease) SetConfiguredFeatureSets(v []string) {
	o.ConfiguredFeatureSets = v
}

// GetDataSources returns the DataSources field value if set, zero value otherwise.
func (o *ExtensionRelease) GetDataSources() []string {
	if o == nil || IsNil(o.DataSources) {
		var ret []string
		return ret
	}
	return o.DataSources
}

// GetDataSourcesOk returns a tuple with the DataSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRelease) GetDataSourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.DataSources) {
		return nil, false
	}
	return o.DataSources, true
}

// HasDataSources returns a boolean if a field has been set.
func (o *ExtensionRelease) HasDataSources() bool {
	if o != nil && !IsNil(o.DataSources) {
		return true
	}

	return false
}

// SetDataSources gets a reference to the given []string and assigns it to the DataSources field.
func (o *ExtensionRelease) SetDataSources(v []string) {
	o.DataSources = v
}

// GetDistributed returns the Distributed field value if set, zero value otherwise.
func (o *ExtensionRelease) GetDistributed() bool {
	if o == nil || IsNil(o.Distributed) {
		var ret bool
		return ret
	}
	return *o.Distributed
}

// GetDistributedOk returns a tuple with the Distributed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRelease) GetDistributedOk() (*bool, bool) {
	if o == nil || IsNil(o.Distributed) {
		return nil, false
	}
	return o.Distributed, true
}

// HasDistributed returns a boolean if a field has been set.
func (o *ExtensionRelease) HasDistributed() bool {
	if o != nil && !IsNil(o.Distributed) {
		return true
	}

	return false
}

// SetDistributed gets a reference to the given bool and assigns it to the Distributed field.
func (o *ExtensionRelease) SetDistributed(v bool) {
	o.Distributed = &v
}

// GetFeatureSets returns the FeatureSets field value if set, zero value otherwise.
func (o *ExtensionRelease) GetFeatureSets() map[string]FeatureSetDetails {
	if o == nil || IsNil(o.FeatureSets) {
		var ret map[string]FeatureSetDetails
		return ret
	}
	return *o.FeatureSets
}

// GetFeatureSetsOk returns a tuple with the FeatureSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRelease) GetFeatureSetsOk() (*map[string]FeatureSetDetails, bool) {
	if o == nil || IsNil(o.FeatureSets) {
		return nil, false
	}
	return o.FeatureSets, true
}

// HasFeatureSets returns a boolean if a field has been set.
func (o *ExtensionRelease) HasFeatureSets() bool {
	if o != nil && !IsNil(o.FeatureSets) {
		return true
	}

	return false
}

// SetFeatureSets gets a reference to the given map[string]FeatureSetDetails and assigns it to the FeatureSets field.
func (o *ExtensionRelease) SetFeatureSets(v map[string]FeatureSetDetails) {
	o.FeatureSets = &v
}

// GetMinClusterVersion returns the MinClusterVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtensionRelease) GetMinClusterVersion() int32 {
	if o == nil || IsNil(o.MinClusterVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.MinClusterVersion.Get()
}

// GetMinClusterVersionOk returns a tuple with the MinClusterVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtensionRelease) GetMinClusterVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinClusterVersion.Get(), o.MinClusterVersion.IsSet()
}

// HasMinClusterVersion returns a boolean if a field has been set.
func (o *ExtensionRelease) HasMinClusterVersion() bool {
	if o != nil && o.MinClusterVersion.IsSet() {
		return true
	}

	return false
}

// SetMinClusterVersion gets a reference to the given NullableInt32 and assigns it to the MinClusterVersion field.
func (o *ExtensionRelease) SetMinClusterVersion(v int32) {
	o.MinClusterVersion.Set(&v)
}
// SetMinClusterVersionNil sets the value for MinClusterVersion to be an explicit nil
func (o *ExtensionRelease) SetMinClusterVersionNil() {
	o.MinClusterVersion.Set(nil)
}

// UnsetMinClusterVersion ensures that no value is present for MinClusterVersion, not even an explicit nil
func (o *ExtensionRelease) UnsetMinClusterVersion() {
	o.MinClusterVersion.Unset()
}

// GetRegistered returns the Registered field value if set, zero value otherwise.
func (o *ExtensionRelease) GetRegistered() bool {
	if o == nil || IsNil(o.Registered) {
		var ret bool
		return ret
	}
	return *o.Registered
}

// GetRegisteredOk returns a tuple with the Registered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRelease) GetRegisteredOk() (*bool, bool) {
	if o == nil || IsNil(o.Registered) {
		return nil, false
	}
	return o.Registered, true
}

// HasRegistered returns a boolean if a field has been set.
func (o *ExtensionRelease) HasRegistered() bool {
	if o != nil && !IsNil(o.Registered) {
		return true
	}

	return false
}

// SetRegistered gets a reference to the given bool and assigns it to the Registered field.
func (o *ExtensionRelease) SetRegistered(v bool) {
	o.Registered = &v
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtensionRelease) GetReleaseNotes() string {
	if o == nil || IsNil(o.ReleaseNotes.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseNotes.Get()
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtensionRelease) GetReleaseNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseNotes.Get(), o.ReleaseNotes.IsSet()
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *ExtensionRelease) HasReleaseNotes() bool {
	if o != nil && o.ReleaseNotes.IsSet() {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given NullableString and assigns it to the ReleaseNotes field.
func (o *ExtensionRelease) SetReleaseNotes(v string) {
	o.ReleaseNotes.Set(&v)
}
// SetReleaseNotesNil sets the value for ReleaseNotes to be an explicit nil
func (o *ExtensionRelease) SetReleaseNotesNil() {
	o.ReleaseNotes.Set(nil)
}

// UnsetReleaseNotes ensures that no value is present for ReleaseNotes, not even an explicit nil
func (o *ExtensionRelease) UnsetReleaseNotes() {
	o.ReleaseNotes.Unset()
}

// GetUnpublished returns the Unpublished field value if set, zero value otherwise.
func (o *ExtensionRelease) GetUnpublished() bool {
	if o == nil || IsNil(o.Unpublished) {
		var ret bool
		return ret
	}
	return *o.Unpublished
}

// GetUnpublishedOk returns a tuple with the Unpublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRelease) GetUnpublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unpublished) {
		return nil, false
	}
	return o.Unpublished, true
}

// HasUnpublished returns a boolean if a field has been set.
func (o *ExtensionRelease) HasUnpublished() bool {
	if o != nil && !IsNil(o.Unpublished) {
		return true
	}

	return false
}

// SetUnpublished gets a reference to the given bool and assigns it to the Unpublished field.
func (o *ExtensionRelease) SetUnpublished(v bool) {
	o.Unpublished = &v
}

// GetUnpublishedDescription returns the UnpublishedDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtensionRelease) GetUnpublishedDescription() string {
	if o == nil || IsNil(o.UnpublishedDescription.Get()) {
		var ret string
		return ret
	}
	return *o.UnpublishedDescription.Get()
}

// GetUnpublishedDescriptionOk returns a tuple with the UnpublishedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtensionRelease) GetUnpublishedDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnpublishedDescription.Get(), o.UnpublishedDescription.IsSet()
}

// HasUnpublishedDescription returns a boolean if a field has been set.
func (o *ExtensionRelease) HasUnpublishedDescription() bool {
	if o != nil && o.UnpublishedDescription.IsSet() {
		return true
	}

	return false
}

// SetUnpublishedDescription gets a reference to the given NullableString and assigns it to the UnpublishedDescription field.
func (o *ExtensionRelease) SetUnpublishedDescription(v string) {
	o.UnpublishedDescription.Set(&v)
}
// SetUnpublishedDescriptionNil sets the value for UnpublishedDescription to be an explicit nil
func (o *ExtensionRelease) SetUnpublishedDescriptionNil() {
	o.UnpublishedDescription.Set(nil)
}

// UnsetUnpublishedDescription ensures that no value is present for UnpublishedDescription, not even an explicit nil
func (o *ExtensionRelease) UnsetUnpublishedDescription() {
	o.UnpublishedDescription.Unset()
}

// GetUnpublishedSeverity returns the UnpublishedSeverity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtensionRelease) GetUnpublishedSeverity() int32 {
	if o == nil || IsNil(o.UnpublishedSeverity.Get()) {
		var ret int32
		return ret
	}
	return *o.UnpublishedSeverity.Get()
}

// GetUnpublishedSeverityOk returns a tuple with the UnpublishedSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtensionRelease) GetUnpublishedSeverityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnpublishedSeverity.Get(), o.UnpublishedSeverity.IsSet()
}

// HasUnpublishedSeverity returns a boolean if a field has been set.
func (o *ExtensionRelease) HasUnpublishedSeverity() bool {
	if o != nil && o.UnpublishedSeverity.IsSet() {
		return true
	}

	return false
}

// SetUnpublishedSeverity gets a reference to the given NullableInt32 and assigns it to the UnpublishedSeverity field.
func (o *ExtensionRelease) SetUnpublishedSeverity(v int32) {
	o.UnpublishedSeverity.Set(&v)
}
// SetUnpublishedSeverityNil sets the value for UnpublishedSeverity to be an explicit nil
func (o *ExtensionRelease) SetUnpublishedSeverityNil() {
	o.UnpublishedSeverity.Set(nil)
}

// UnsetUnpublishedSeverity ensures that no value is present for UnpublishedSeverity, not even an explicit nil
func (o *ExtensionRelease) UnsetUnpublishedSeverity() {
	o.UnpublishedSeverity.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExtensionRelease) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRelease) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExtensionRelease) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExtensionRelease) SetVersion(v string) {
	o.Version = &v
}

func (o ExtensionRelease) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionRelease) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if o.ArtifactSha256.IsSet() {
		toSerialize["artifactSha256"] = o.ArtifactSha256.Get()
	}
	if !IsNil(o.AssetsInfo) {
		toSerialize["assetsInfo"] = o.AssetsInfo
	}
	if !IsNil(o.ConfiguredFeatureSets) {
		toSerialize["configuredFeatureSets"] = o.ConfiguredFeatureSets
	}
	if !IsNil(o.DataSources) {
		toSerialize["dataSources"] = o.DataSources
	}
	if !IsNil(o.Distributed) {
		toSerialize["distributed"] = o.Distributed
	}
	if !IsNil(o.FeatureSets) {
		toSerialize["featureSets"] = o.FeatureSets
	}
	if o.MinClusterVersion.IsSet() {
		toSerialize["minClusterVersion"] = o.MinClusterVersion.Get()
	}
	if !IsNil(o.Registered) {
		toSerialize["registered"] = o.Registered
	}
	if o.ReleaseNotes.IsSet() {
		toSerialize["releaseNotes"] = o.ReleaseNotes.Get()
	}
	if !IsNil(o.Unpublished) {
		toSerialize["unpublished"] = o.Unpublished
	}
	if o.UnpublishedDescription.IsSet() {
		toSerialize["unpublishedDescription"] = o.UnpublishedDescription.Get()
	}
	if o.UnpublishedSeverity.IsSet() {
		toSerialize["unpublishedSeverity"] = o.UnpublishedSeverity.Get()
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableExtensionRelease struct {
	value *ExtensionRelease
	isSet bool
}

func (v NullableExtensionRelease) Get() *ExtensionRelease {
	return v.value
}

func (v *NullableExtensionRelease) Set(val *ExtensionRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionRelease(val *ExtensionRelease) *NullableExtensionRelease {
	return &NullableExtensionRelease{value: val, isSet: true}
}

func (v NullableExtensionRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


