/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RemoteConfigurationManagementEntityValidationError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteConfigurationManagementEntityValidationError{}

// RemoteConfigurationManagementEntityValidationError Entity validation error for remote configuration management.
type RemoteConfigurationManagementEntityValidationError struct {
	// The ID of the entity for which validation failed.
	Entity *string `json:"entity,omitempty"`
	// The reason of entity validation failure.
	Reasons []string `json:"reasons,omitempty"`
}

// NewRemoteConfigurationManagementEntityValidationError instantiates a new RemoteConfigurationManagementEntityValidationError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteConfigurationManagementEntityValidationError() *RemoteConfigurationManagementEntityValidationError {
	this := RemoteConfigurationManagementEntityValidationError{}
	return &this
}

// NewRemoteConfigurationManagementEntityValidationErrorWithDefaults instantiates a new RemoteConfigurationManagementEntityValidationError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteConfigurationManagementEntityValidationErrorWithDefaults() *RemoteConfigurationManagementEntityValidationError {
	this := RemoteConfigurationManagementEntityValidationError{}
	return &this
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *RemoteConfigurationManagementEntityValidationError) GetEntity() string {
	if o == nil || IsNil(o.Entity) {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteConfigurationManagementEntityValidationError) GetEntityOk() (*string, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *RemoteConfigurationManagementEntityValidationError) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *RemoteConfigurationManagementEntityValidationError) SetEntity(v string) {
	o.Entity = &v
}

// GetReasons returns the Reasons field value if set, zero value otherwise.
func (o *RemoteConfigurationManagementEntityValidationError) GetReasons() []string {
	if o == nil || IsNil(o.Reasons) {
		var ret []string
		return ret
	}
	return o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteConfigurationManagementEntityValidationError) GetReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.Reasons) {
		return nil, false
	}
	return o.Reasons, true
}

// HasReasons returns a boolean if a field has been set.
func (o *RemoteConfigurationManagementEntityValidationError) HasReasons() bool {
	if o != nil && !IsNil(o.Reasons) {
		return true
	}

	return false
}

// SetReasons gets a reference to the given []string and assigns it to the Reasons field.
func (o *RemoteConfigurationManagementEntityValidationError) SetReasons(v []string) {
	o.Reasons = v
}

func (o RemoteConfigurationManagementEntityValidationError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteConfigurationManagementEntityValidationError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.Reasons) {
		toSerialize["reasons"] = o.Reasons
	}
	return toSerialize, nil
}

type NullableRemoteConfigurationManagementEntityValidationError struct {
	value *RemoteConfigurationManagementEntityValidationError
	isSet bool
}

func (v NullableRemoteConfigurationManagementEntityValidationError) Get() *RemoteConfigurationManagementEntityValidationError {
	return v.value
}

func (v *NullableRemoteConfigurationManagementEntityValidationError) Set(val *RemoteConfigurationManagementEntityValidationError) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteConfigurationManagementEntityValidationError) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteConfigurationManagementEntityValidationError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteConfigurationManagementEntityValidationError(val *RemoteConfigurationManagementEntityValidationError) *NullableRemoteConfigurationManagementEntityValidationError {
	return &NullableRemoteConfigurationManagementEntityValidationError{value: val, isSet: true}
}

func (v NullableRemoteConfigurationManagementEntityValidationError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteConfigurationManagementEntityValidationError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


