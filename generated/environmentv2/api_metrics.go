/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MetricsAPIService MetricsAPI service
type MetricsAPIService service

type ApiAllMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	nextPageKey *string
	pageSize *int64
	metricSelector *string
	text *string
	fields *string
	writtenSince *string
	metadataSelector *string
}

// The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters. 
func (r ApiAllMetricsRequest) NextPageKey(nextPageKey string) ApiAllMetricsRequest {
	r.nextPageKey = &nextPageKey
	return r
}

// The amount of metric schemata in a single response payload.   The maximal allowed page size is 500.   If not set, 100 is used.   If a value higher than 500 is used, only 500 results per page are returned.
func (r ApiAllMetricsRequest) PageSize(pageSize int64) ApiAllMetricsRequest {
	r.pageSize = &pageSize
	return r
}

// Selects metrics for the query by their keys.   You can specify multiple metric keys separated by commas (for example, &#x60;metrickey1,metrickey2&#x60;). To select multiple metrics belonging to the same parent, list the last part of the required metric keys in parentheses, separated by commas, while keeping the common part untouched. For example, to list the &#x60;builtin:host.cpu.idle&#x60; and &#x60;builtin:host.cpu.user&#x60; metric, write: &#x60;builtin:host.cpu.(idle,user)&#x60;.   You can select a full set of related metrics by using a trailing asterisk (&#x60;*&#x60;) wildcard. For example, &#x60;builtin:host.*&#x60; selects all host-based metrics and &#x60;builtin:*&#x60; selects all Dynatrace-provided metrics.   You can set additional transformation operators, separated by a colon (&#x60;:&#x60;). See [Metrics selector transformations](https://dt-url.net/metricSelector) in Dynatrace Documentation for additional information on available result transformations and syntax.   Only &#x60;aggregation&#x60;, &#x60;merge&#x60;, &#x60;parents&#x60;, and &#x60;splitBy&#x60; transformations are supported by this endpoint.   If the metric key contains any symbols you must quote (&#x60;\&quot;&#x60;) the key. The following characters inside of a quoted metric key must be escaped with a tilde (&#x60;~&#x60;):  * Quotes (&#x60;\&quot;&#x60;) * Tildes (&#x60;~&#x60;)   For example, to query the metric with the key of **ext:selfmonitoring.jmx.Agents: Type \&quot;APACHE\&quot;** you must specify this selector:    &#x60;\&quot;ext:selfmonitoring.jmx.Agents: Type ~\&quot;APACHE~\&quot;\&quot;&#x60;      To find metrics based on a search term, rather than metricId, use the **text** query parameter instead of this one.
func (r ApiAllMetricsRequest) MetricSelector(metricSelector string) ApiAllMetricsRequest {
	r.metricSelector = &metricSelector
	return r
}

// Metric registry search term. Only show metrics that contain the term in their key, display name, or description. Use the &#x60;metricSelector&#x60; parameter instead of this one to select a complete metric hierarchy instead of doing a text-based search.
func (r ApiAllMetricsRequest) Text(text string) ApiAllMetricsRequest {
	r.text = &text
	return r
}

// Defines the list of metric properties included in the response.   &#x60;metricId&#x60; is **always** included in the result. The following additional properties are available:   * &#x60;displayName&#x60;: The name of the metric in the user interface. Enabled by default.  * &#x60;description&#x60;: A short description of the metric. Enabled by default.  * &#x60;unit&#x60;: The unit of the metric. Enabled by default.  * &#x60;tags&#x60;: The tags of the metric.  + &#x60;dduBillable&#x60;:  An indicator whether the usage of metric consumes [Davis data units](https://dt-url.net/ddu). Deprecated and always &#x60;false&#x60; for Dynatrace Platform Subscription. Superseded by &#x60;billable&#x60;.  + &#x60;billable&#x60;:  An indicator whether the usage of metric is billable.  * &#x60;created&#x60;:  The timestamp (UTC milliseconds) when the metrics has been created.  * &#x60;lastWritten&#x60;:  The timestamp (UTC milliseconds) when metric data points have been written for the last time.  * &#x60;aggregationTypes&#x60;: The list of allowed aggregations for the metric. Note that it may be different after a [transformation](https://dt-url.net/metricSelector) is applied.  * &#x60;defaultAggregation&#x60;: The default aggregation of the metric. It is used when no aggregation is specified or the &#x60;:auto&#x60; transformation is set.  * &#x60;dimensionDefinitions&#x60;: The fine metric division (for example, process group and process ID for some process-related metric).  * &#x60;transformations&#x60;: A list of [transformations](https://dt-url.net/metricSelector) that can be applied to the metric. * &#x60;entityType&#x60;: A list of entity types supported by the metric. * &#x60;minimumValue&#x60;: The minimum allowed value of the metric. * &#x60;maximumValue&#x60;: The maximum allowed value of the metric. * &#x60;rootCauseRelevant&#x60;: Whether (true or false) the metric is related to a root cause of a problem. A root-cause relevant metric represents a strong indicator for a faulty component. * &#x60;impactRelevant&#x60;: Whether (true or false) the metric is relevant to a problem&#39;s impact. An impact-relevant metric is highly dependent on other metrics and changes because an underlying root-cause metric has changed. * &#x60;metricValueType&#x60;: The type of the metric&#39;s value. You have these options:   * &#x60;score&#x60;: A score metric is a metric where high values indicate a good situation, while low values indicate trouble. An example of such a metric is a success rate.   * &#x60;error&#x60;: An error metric is a metric where high values indicate trouble, while low values indicate a good situation. An example of such a metric is an error count. * &#x60;latency&#x60;: The latency of the metric, in minutes. The latency is the expected reporting delay (for example, caused by constraints of cloud vendors or other third-party data sources) between the observation of a metric data point and its availability in Dynatrace. The allowed value range is from &#x60;1&#x60; to &#x60;60&#x60; minutes. * &#x60;metricSelector&#x60;: The underlying metric selector used by a func: metric. * &#x60;scalar&#x60;: Indicates whether the metric expression resolves to a scalar (&#x60;true&#x60;) or to a series (&#x60;false&#x60;).  A scalar result always contains one data point. The amount of data points in a series result depends on the resolution you&#39;re using.  * &#x60;resolutionInfSupported&#x60;: If &#x60;true&#x60;, resolution&#x3D;Inf can be applied to the metric query.   To add properties, list them with leading plus &#x60;+&#x60;. To exclude default properties, list them with leading minus &#x60;-&#x60;.  To specify several properties, join them with a comma (for example &#x60;fields&#x3D;+aggregationTypes,-description&#x60;).  If you specify just one property, the response contains the metric key and the specified property. To return metric keys only, specify &#x60;metricId&#x60; here.
func (r ApiAllMetricsRequest) Fields(fields string) ApiAllMetricsRequest {
	r.fields = &fields
	return r
}

// Filters the resulted set of metrics to those that have data points within the specified timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   
func (r ApiAllMetricsRequest) WrittenSince(writtenSince string) ApiAllMetricsRequest {
	r.writtenSince = &writtenSince
	return r
}

// The metadata scope of the query. Only metrics with specified properties are included to the response.   You can set one or more of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used. If several values are specified, the **OR** logic applies.   * &#x60;unit(\&quot;unit-1\&quot;,\&quot;unit-2\&quot;)&#x60;  * &#x60;tags(\&quot;tag-1\&quot;,\&quot;tag-2\&quot;)&#x60;  * &#x60;dimensionKey(\&quot;dimkey-1\&quot;,\&quot;dimkey-2\&quot;)&#x60;. The filtering applies only to dimensions that were written within the last 14 days.  * &#x60;custom(\&quot;true\&quot;)&#x60;. \&quot;true\&quot; to include only user-defined metrics metrics (without namespace or with &#x60;ext:&#x60;, &#x60;calc:&#x60;, &#x60;func:&#x60;, &#x60;appmon:&#x60;), \&quot;false\&quot; to filter them out.   * &#x60;exported(\&quot;true\&quot;)&#x60;. \&quot;true\&quot; to include only exported metrics, \&quot;false\&quot; to filter them out.   To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;tags(\&quot;feature\&quot;,\&quot;cloud\&quot;),unit(\&quot;Percent\&quot;),dimensionKey(\&quot;location\&quot;),custom(\&quot;true\&quot;)&#x60;. Only results matching **all** criteria are included in response.   For example, to list metrics that have the tags **feature** AND **cloud** with a unit of **Percent** OR **MegaByte** AND a dimension with a dimension key **location**, use this **metadataSelector**: &#x60;tags(\&quot;feature\&quot;),unit(\&quot;Percent\&quot;,\&quot;MegaByte\&quot;),tags(\&quot;cloud\&quot;),dimensionKey(\&quot;location\&quot;)&#x60;.
func (r ApiAllMetricsRequest) MetadataSelector(metadataSelector string) ApiAllMetricsRequest {
	r.metadataSelector = &metadataSelector
	return r
}

func (r ApiAllMetricsRequest) Execute() (*MetricDescriptorCollection, *http.Response, error) {
	return r.ApiService.AllMetricsExecute(r)
}

/*
AllMetrics Lists all available metrics

You can narrow down the output by selecting metrics in the **metricSelector** field. 

You can additionally limit the output by using pagination: 

1. Specify the number of results per page in the **pageSize** query parameter. 

2. Then use the cursor from the **nextPageKey** field of the response in the **nextPageKey** query parameter to obtain subsequent pages. All other query parameters must be omitted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAllMetricsRequest
*/
func (a *MetricsAPIService) AllMetrics(ctx context.Context) ApiAllMetricsRequest {
	return ApiAllMetricsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MetricDescriptorCollection
func (a *MetricsAPIService) AllMetricsExecute(r ApiAllMetricsRequest) (*MetricDescriptorCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetricDescriptorCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.AllMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nextPageKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextPageKey", r.nextPageKey, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.metricSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metricSelector", r.metricSelector, "")
	}
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.writtenSince != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "writtenSince", r.writtenSince, "")
	}
	if r.metadataSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSelector", r.metadataSelector, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8", "text/csv; header=absent; charset=utf-8", "text/csv; header=present; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	metricKey string
}

func (r ApiDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Deletes the specified metric

Deletion cannot be undone! You can't delete a metric if it has data points ingested within the last two hours.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param metricKey The key of the required metric.   
 @return ApiDeleteRequest
*/
func (a *MetricsAPIService) Delete(ctx context.Context, metricKey string) ApiDeleteRequest {
	return ApiDeleteRequest{
		ApiService: a,
		ctx: ctx,
		metricKey: metricKey,
	}
}

// Execute executes the request
func (a *MetricsAPIService) DeleteExecute(r ApiDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.Delete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metrics/{metricKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"metricKey"+"}", url.PathEscape(parameterValueToString(r.metricKey, "metricKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIngestRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	body *string
}

// Data points, provided in the [line protocol](https://dt-url.net/5d63ic1). Each line represents a single data point.
func (r ApiIngestRequest) Body(body string) ApiIngestRequest {
	r.body = &body
	return r
}

func (r ApiIngestRequest) Execute() (*ValidationResponse, *http.Response, error) {
	return r.ApiService.IngestExecute(r)
}

/*
Ingest Pushes metric data points to Dynatrace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIngestRequest
*/
func (a *MetricsAPIService) Ingest(ctx context.Context) ApiIngestRequest {
	return ApiIngestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ValidationResponse
func (a *MetricsAPIService) IngestExecute(r ApiIngestRequest) (*ValidationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ValidationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.Ingest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metrics/ingest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/plain; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetricRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	metricKey string
}

func (r ApiMetricRequest) Execute() (*MetricDescriptor, *http.Response, error) {
	return r.ApiService.MetricExecute(r)
}

/*
Metric Gets the descriptor of the specified metric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param metricKey The key of the required metric.   You can set additional transformation operators, separated by a colon (`:`). See [Metrics selector transformations](https://dt-url.net/metricSelector) in Dynatrace Documentation for additional information on available result transformations and syntax.
 @return ApiMetricRequest
*/
func (a *MetricsAPIService) Metric(ctx context.Context, metricKey string) ApiMetricRequest {
	return ApiMetricRequest{
		ApiService: a,
		ctx: ctx,
		metricKey: metricKey,
	}
}

// Execute executes the request
//  @return MetricDescriptor
func (a *MetricsAPIService) MetricExecute(r ApiMetricRequest) (*MetricDescriptor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetricDescriptor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.Metric")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metrics/{metricKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"metricKey"+"}", url.PathEscape(parameterValueToString(r.metricKey, "metricKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8", "text/csv; header=absent; charset=utf-8", "text/csv; header=present; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	metricSelector *string
	resolution *string
	from *string
	to *string
	entitySelector *string
	mzSelector *string
}

// Selects metrics for the query by their keys. You can select up to 10 metrics for one query.   You can specify multiple metric keys separated by commas (for example, &#x60;metrickey1,metrickey2&#x60;). To select multiple metrics belonging to the same parent, list the last part of the required metric keys in parentheses, separated by commas, while keeping the common part untouched. For example, to list the &#x60;builtin:host.cpu.idle&#x60; and &#x60;builtin:host.cpu.user&#x60; metric, write: &#x60;builtin:host.cpu.(idle,user)&#x60;.      If the metric key contains any symbols you must quote (&#x60;\&quot;&#x60;) the key. The following characters inside of a quoted metric key must be escaped with a tilde (&#x60;~&#x60;):  * Quotes (&#x60;\&quot;&#x60;) * Tildes (&#x60;~&#x60;)   For example, to query the metric with the key of **ext:selfmonitoring.jmx.Agents: Type \&quot;APACHE\&quot;** you must specify this selector:    &#x60;\&quot;ext:selfmonitoring.jmx.Agents: Type ~\&quot;APACHE~\&quot;\&quot;&#x60;   You can set additional transformation operators, separated by a colon (&#x60;:&#x60;). See [Metrics selector transformations](https://dt-url.net/metricSelector) in Dynatrace Documentation for additional information on available result transformations and syntax.
func (r ApiQueryRequest) MetricSelector(metricSelector string) ApiQueryRequest {
	r.metricSelector = &metricSelector
	return r
}

// The desired resolution of data points.   You can use one of the following options:  * The desired amount of data points. This is the default option. This is a reference number of points, which is not necessarily equal to the number of the returned data points.  * The desired timespan between data points. This is a reference timespan, which is not necessarily equal to the returned timespan. To use this option, specify the unit of the timespan.   Valid units for the timespan are:  * &#x60;m&#x60;: minutes  * &#x60;h&#x60;: hours  * &#x60;d&#x60;: days  * &#x60;w&#x60;: weeks  * &#x60;M&#x60;: months  * &#x60;q&#x60;: quarters  * &#x60;y&#x60;: years   If not set, the default is **120 data points**.  For example:   * Get data points which are 10 minutes apart: &#x60;resolution&#x3D;10m&#x60;  * Get data points which are 3 weeks apart: &#x60;resolution&#x3D;3w&#x60;
func (r ApiQueryRequest) Resolution(resolution string) ApiQueryRequest {
	r.resolution = &resolution
	return r
}

// The start of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of two hours is used (&#x60;now-2h&#x60;).
func (r ApiQueryRequest) From(from string) ApiQueryRequest {
	r.from = &from
	return r
}

// The end of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used.
func (r ApiQueryRequest) To(to string) ApiQueryRequest {
	r.to = &to
	return r
}

// Specifies the entity scope of the query. Only data points delivered by matched entities are included in response.   You must set one of these criteria:   * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60;  * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). All requested entities must be of the same type.   You can add one or more of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified.   * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;). Otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive.  * Management zone ID: &#x60;mzId(123)&#x60;  * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60; * Entity name:   * &#x60;entityName.equals&#x60;: performs a non-casesensitive &#x60;EQUALS&#x60; query.   * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.   * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.   * &#x60;caseSensitive(entityName.equals(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an argument and makes the value case-sensitive. * Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60; * First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.   The following operators are available:  * &#x60;lte&#x60;: earlier than or at the specified time  * &#x60;lt&#x60;: earlier than the specified time  * &#x60;gte&#x60;: later than or at the specified time  * &#x60;gt&#x60;: later than the specified time * Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET entity type](https://dt-url.net/2ka3ivt) request and check the **properties** field of the response.  * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. This criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET entity type](https://dt-url.net/2ka3ivt) request and check the **fromRelationships** and **toRelationships** fields. * Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**.   For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation.   To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in the response.   The maximum string length is 2,000 characters.   Use the [&#x60;GET /metrics/{metricId}&#x60;](https://dt-url.net/6z23ifk) call to fetch the list of possible entity types for your metric.   To set a universal scope matching all entities, omit this parameter.
func (r ApiQueryRequest) EntitySelector(entitySelector string) ApiQueryRequest {
	r.entitySelector = &entitySelector
	return r
}

// The management zone scope of the query. Only metrics data relating to the specified management zones are included to the response.   You can set one or more of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used. If several values are specified, the **OR** logic applies.   * &#x60;mzId(123,456)&#x60;  * &#x60;mzName(\&quot;name-1\&quot;,\&quot;name-2\&quot;)&#x60;  To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;mzName(\&quot;name-1\&quot;,\&quot;name-2\&quot;),mzId(1234)&#x60;. Only results matching **all** of the criteria are included in the response.For example, to list metrics that have the id **123** OR **234** AND the name **name-1** OR **name-2**, use this **mzSelector**: &#x60;mzId(123,234),mzName(\&quot;name-1\&quot;,\&quot;name-2\&quot;).
func (r ApiQueryRequest) MzSelector(mzSelector string) ApiQueryRequest {
	r.mzSelector = &mzSelector
	return r
}

func (r ApiQueryRequest) Execute() (*MetricData, *http.Response, error) {
	return r.ApiService.QueryExecute(r)
}

/*
Query Gets data points of the specified metrics

The following limits apply: 
* The amount of aggregated data points in the response is limited to 1,000 
* The amount of series in the response is limited to 1,000 
   * The amount of data points per series is limited to 10,080 (minutes of one week) 
   * The overall amount of data points is limited to 100,000 

The **dataPointCountRatio** specifies the ratio of queried data points divided by the maximum number of data points per metric that are allowed in a single query.
The **dimensionCountRatio** specifies the ratio of queried dimension tuples divided by the maximum number of dimension tuples allowed in a single query.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryRequest
*/
func (a *MetricsAPIService) Query(ctx context.Context) ApiQueryRequest {
	return ApiQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MetricData
func (a *MetricsAPIService) QueryExecute(r ApiQueryRequest) (*MetricData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetricData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.Query")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metrics/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metricSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metricSelector", r.metricSelector, "")
	}
	if r.resolution != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolution", r.resolution, "")
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.to != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	}
	if r.entitySelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entitySelector", r.entitySelector, "")
	}
	if r.mzSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mzSelector", r.mzSelector, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8", "text/csv; header=absent; charset=utf-8", "text/csv; header=present; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
