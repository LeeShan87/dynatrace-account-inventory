/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SecurityProblemBulkMutingSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityProblemBulkMutingSummary{}

// SecurityProblemBulkMutingSummary Summary of (un-)muting a security problem.
type SecurityProblemBulkMutingSummary struct {
	// Whether a mute state change for the given security problem was triggered by this request.
	MuteStateChangeTriggered bool `json:"muteStateChangeTriggered"`
	// Contains a reason, in case the requested operation was not executed.
	Reason *string `json:"reason,omitempty"`
	// The id of the security problem that was (un-)muted.
	SecurityProblemId string `json:"securityProblemId"`
}

// NewSecurityProblemBulkMutingSummary instantiates a new SecurityProblemBulkMutingSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityProblemBulkMutingSummary(muteStateChangeTriggered bool, securityProblemId string) *SecurityProblemBulkMutingSummary {
	this := SecurityProblemBulkMutingSummary{}
	this.MuteStateChangeTriggered = muteStateChangeTriggered
	this.SecurityProblemId = securityProblemId
	return &this
}

// NewSecurityProblemBulkMutingSummaryWithDefaults instantiates a new SecurityProblemBulkMutingSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityProblemBulkMutingSummaryWithDefaults() *SecurityProblemBulkMutingSummary {
	this := SecurityProblemBulkMutingSummary{}
	return &this
}

// GetMuteStateChangeTriggered returns the MuteStateChangeTriggered field value
func (o *SecurityProblemBulkMutingSummary) GetMuteStateChangeTriggered() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MuteStateChangeTriggered
}

// GetMuteStateChangeTriggeredOk returns a tuple with the MuteStateChangeTriggered field value
// and a boolean to check if the value has been set.
func (o *SecurityProblemBulkMutingSummary) GetMuteStateChangeTriggeredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MuteStateChangeTriggered, true
}

// SetMuteStateChangeTriggered sets field value
func (o *SecurityProblemBulkMutingSummary) SetMuteStateChangeTriggered(v bool) {
	o.MuteStateChangeTriggered = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *SecurityProblemBulkMutingSummary) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemBulkMutingSummary) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *SecurityProblemBulkMutingSummary) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *SecurityProblemBulkMutingSummary) SetReason(v string) {
	o.Reason = &v
}

// GetSecurityProblemId returns the SecurityProblemId field value
func (o *SecurityProblemBulkMutingSummary) GetSecurityProblemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecurityProblemId
}

// GetSecurityProblemIdOk returns a tuple with the SecurityProblemId field value
// and a boolean to check if the value has been set.
func (o *SecurityProblemBulkMutingSummary) GetSecurityProblemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecurityProblemId, true
}

// SetSecurityProblemId sets field value
func (o *SecurityProblemBulkMutingSummary) SetSecurityProblemId(v string) {
	o.SecurityProblemId = v
}

func (o SecurityProblemBulkMutingSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityProblemBulkMutingSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["muteStateChangeTriggered"] = o.MuteStateChangeTriggered
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	toSerialize["securityProblemId"] = o.SecurityProblemId
	return toSerialize, nil
}

type NullableSecurityProblemBulkMutingSummary struct {
	value *SecurityProblemBulkMutingSummary
	isSet bool
}

func (v NullableSecurityProblemBulkMutingSummary) Get() *SecurityProblemBulkMutingSummary {
	return v.value
}

func (v *NullableSecurityProblemBulkMutingSummary) Set(val *SecurityProblemBulkMutingSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityProblemBulkMutingSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityProblemBulkMutingSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityProblemBulkMutingSummary(val *SecurityProblemBulkMutingSummary) *NullableSecurityProblemBulkMutingSummary {
	return &NullableSecurityProblemBulkMutingSummary{value: val, isSet: true}
}

func (v NullableSecurityProblemBulkMutingSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityProblemBulkMutingSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


