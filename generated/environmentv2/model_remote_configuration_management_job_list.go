/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RemoteConfigurationManagementJobList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteConfigurationManagementJobList{}

// RemoteConfigurationManagementJobList A list of remote configuration management jobs.
type RemoteConfigurationManagementJobList struct {
	// A list of remote configuration management jobs.
	Jobs []RemoteConfigurationManagementJobSummary `json:"jobs,omitempty"`
}

// NewRemoteConfigurationManagementJobList instantiates a new RemoteConfigurationManagementJobList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteConfigurationManagementJobList() *RemoteConfigurationManagementJobList {
	this := RemoteConfigurationManagementJobList{}
	return &this
}

// NewRemoteConfigurationManagementJobListWithDefaults instantiates a new RemoteConfigurationManagementJobList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteConfigurationManagementJobListWithDefaults() *RemoteConfigurationManagementJobList {
	this := RemoteConfigurationManagementJobList{}
	return &this
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *RemoteConfigurationManagementJobList) GetJobs() []RemoteConfigurationManagementJobSummary {
	if o == nil || IsNil(o.Jobs) {
		var ret []RemoteConfigurationManagementJobSummary
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteConfigurationManagementJobList) GetJobsOk() ([]RemoteConfigurationManagementJobSummary, bool) {
	if o == nil || IsNil(o.Jobs) {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *RemoteConfigurationManagementJobList) HasJobs() bool {
	if o != nil && !IsNil(o.Jobs) {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []RemoteConfigurationManagementJobSummary and assigns it to the Jobs field.
func (o *RemoteConfigurationManagementJobList) SetJobs(v []RemoteConfigurationManagementJobSummary) {
	o.Jobs = v
}

func (o RemoteConfigurationManagementJobList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteConfigurationManagementJobList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Jobs) {
		toSerialize["jobs"] = o.Jobs
	}
	return toSerialize, nil
}

type NullableRemoteConfigurationManagementJobList struct {
	value *RemoteConfigurationManagementJobList
	isSet bool
}

func (v NullableRemoteConfigurationManagementJobList) Get() *RemoteConfigurationManagementJobList {
	return v.value
}

func (v *NullableRemoteConfigurationManagementJobList) Set(val *RemoteConfigurationManagementJobList) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteConfigurationManagementJobList) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteConfigurationManagementJobList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteConfigurationManagementJobList(val *RemoteConfigurationManagementJobList) *NullableRemoteConfigurationManagementJobList {
	return &NullableRemoteConfigurationManagementJobList{value: val, isSet: true}
}

func (v NullableRemoteConfigurationManagementJobList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteConfigurationManagementJobList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


