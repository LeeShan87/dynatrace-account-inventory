/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ExecutionSimpleResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionSimpleResults{}

// ExecutionSimpleResults Contains basic results of the monitor's on-demand execution.
type ExecutionSimpleResults struct {
	// Informs whether is Chrome error.
	ChromeError *bool `json:"chromeError,omitempty"`
	// Synthetic engine id on which monitor was executed.
	EngineId *int64 `json:"engineId,omitempty"`
	// Error code.
	ErrorCode *string `json:"errorCode,omitempty"`
	// Number of the executed steps by Synthetic engine
	ExecutedSteps *int32 `json:"executedSteps,omitempty"`
	// Failure message.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// A hostname resolution time measured in milliseconds.
	HostNameResolutionTime *int64 `json:"hostNameResolutionTime,omitempty"`
	// Informs whether is HTTP error.
	Httperror *bool `json:"httperror,omitempty"`
	// An expiry date of the first SSL certificate from the certificate chain.
	// Deprecated
	PeerCertificateExpiryDate *int64 `json:"peerCertificateExpiryDate,omitempty"`
	// Flag informs whether request was executed on public location.
	PublicLocation *bool `json:"publicLocation,omitempty"`
	// Total number of milliseconds spent on handling all redirect requests, measured in milliseconds.
	RedirectionTime *int64 `json:"redirectionTime,omitempty"`
	// Number of redirects.
	RedirectsCount *int32 `json:"redirectsCount,omitempty"`
	// A flag indicating that the response payload size limit of 10MB has been exceeded.
	ResponseBodySizeLimitExceeded *bool `json:"responseBodySizeLimitExceeded,omitempty"`
	// Request's response size in bytes.
	ResponseSize *int64 `json:"responseSize,omitempty"`
	// Response status code.
	ResponseStatusCode *int32 `json:"responseStatusCode,omitempty"`
	// Start timestamp.
	StartTimestamp *int64 `json:"startTimestamp,omitempty"`
	// Execution status.
	Status *string `json:"status,omitempty"`
	// A TCP connect time measured in milliseconds.
	TcpConnectTime *int64 `json:"tcpConnectTime,omitempty"`
	// A time to first byte measured in milliseconds.
	TimeToFirstByte *int64 `json:"timeToFirstByte,omitempty"`
	// A TLS handshake time measured in milliseconds.
	TlsHandshakeTime *int64 `json:"tlsHandshakeTime,omitempty"`
	// A total time measured in milliseconds.
	TotalTime *int64 `json:"totalTime,omitempty"`
}

// NewExecutionSimpleResults instantiates a new ExecutionSimpleResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionSimpleResults() *ExecutionSimpleResults {
	this := ExecutionSimpleResults{}
	return &this
}

// NewExecutionSimpleResultsWithDefaults instantiates a new ExecutionSimpleResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionSimpleResultsWithDefaults() *ExecutionSimpleResults {
	this := ExecutionSimpleResults{}
	return &this
}

// GetChromeError returns the ChromeError field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetChromeError() bool {
	if o == nil || IsNil(o.ChromeError) {
		var ret bool
		return ret
	}
	return *o.ChromeError
}

// GetChromeErrorOk returns a tuple with the ChromeError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetChromeErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.ChromeError) {
		return nil, false
	}
	return o.ChromeError, true
}

// HasChromeError returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasChromeError() bool {
	if o != nil && !IsNil(o.ChromeError) {
		return true
	}

	return false
}

// SetChromeError gets a reference to the given bool and assigns it to the ChromeError field.
func (o *ExecutionSimpleResults) SetChromeError(v bool) {
	o.ChromeError = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetEngineId() int64 {
	if o == nil || IsNil(o.EngineId) {
		var ret int64
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetEngineIdOk() (*int64, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given int64 and assigns it to the EngineId field.
func (o *ExecutionSimpleResults) SetEngineId(v int64) {
	o.EngineId = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *ExecutionSimpleResults) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetExecutedSteps returns the ExecutedSteps field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetExecutedSteps() int32 {
	if o == nil || IsNil(o.ExecutedSteps) {
		var ret int32
		return ret
	}
	return *o.ExecutedSteps
}

// GetExecutedStepsOk returns a tuple with the ExecutedSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetExecutedStepsOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecutedSteps) {
		return nil, false
	}
	return o.ExecutedSteps, true
}

// HasExecutedSteps returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasExecutedSteps() bool {
	if o != nil && !IsNil(o.ExecutedSteps) {
		return true
	}

	return false
}

// SetExecutedSteps gets a reference to the given int32 and assigns it to the ExecutedSteps field.
func (o *ExecutionSimpleResults) SetExecutedSteps(v int32) {
	o.ExecutedSteps = &v
}

// GetFailureMessage returns the FailureMessage field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetFailureMessage() string {
	if o == nil || IsNil(o.FailureMessage) {
		var ret string
		return ret
	}
	return *o.FailureMessage
}

// GetFailureMessageOk returns a tuple with the FailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetFailureMessageOk() (*string, bool) {
	if o == nil || IsNil(o.FailureMessage) {
		return nil, false
	}
	return o.FailureMessage, true
}

// HasFailureMessage returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasFailureMessage() bool {
	if o != nil && !IsNil(o.FailureMessage) {
		return true
	}

	return false
}

// SetFailureMessage gets a reference to the given string and assigns it to the FailureMessage field.
func (o *ExecutionSimpleResults) SetFailureMessage(v string) {
	o.FailureMessage = &v
}

// GetHostNameResolutionTime returns the HostNameResolutionTime field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetHostNameResolutionTime() int64 {
	if o == nil || IsNil(o.HostNameResolutionTime) {
		var ret int64
		return ret
	}
	return *o.HostNameResolutionTime
}

// GetHostNameResolutionTimeOk returns a tuple with the HostNameResolutionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetHostNameResolutionTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.HostNameResolutionTime) {
		return nil, false
	}
	return o.HostNameResolutionTime, true
}

// HasHostNameResolutionTime returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasHostNameResolutionTime() bool {
	if o != nil && !IsNil(o.HostNameResolutionTime) {
		return true
	}

	return false
}

// SetHostNameResolutionTime gets a reference to the given int64 and assigns it to the HostNameResolutionTime field.
func (o *ExecutionSimpleResults) SetHostNameResolutionTime(v int64) {
	o.HostNameResolutionTime = &v
}

// GetHttperror returns the Httperror field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetHttperror() bool {
	if o == nil || IsNil(o.Httperror) {
		var ret bool
		return ret
	}
	return *o.Httperror
}

// GetHttperrorOk returns a tuple with the Httperror field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetHttperrorOk() (*bool, bool) {
	if o == nil || IsNil(o.Httperror) {
		return nil, false
	}
	return o.Httperror, true
}

// HasHttperror returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasHttperror() bool {
	if o != nil && !IsNil(o.Httperror) {
		return true
	}

	return false
}

// SetHttperror gets a reference to the given bool and assigns it to the Httperror field.
func (o *ExecutionSimpleResults) SetHttperror(v bool) {
	o.Httperror = &v
}

// GetPeerCertificateExpiryDate returns the PeerCertificateExpiryDate field value if set, zero value otherwise.
// Deprecated
func (o *ExecutionSimpleResults) GetPeerCertificateExpiryDate() int64 {
	if o == nil || IsNil(o.PeerCertificateExpiryDate) {
		var ret int64
		return ret
	}
	return *o.PeerCertificateExpiryDate
}

// GetPeerCertificateExpiryDateOk returns a tuple with the PeerCertificateExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ExecutionSimpleResults) GetPeerCertificateExpiryDateOk() (*int64, bool) {
	if o == nil || IsNil(o.PeerCertificateExpiryDate) {
		return nil, false
	}
	return o.PeerCertificateExpiryDate, true
}

// HasPeerCertificateExpiryDate returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasPeerCertificateExpiryDate() bool {
	if o != nil && !IsNil(o.PeerCertificateExpiryDate) {
		return true
	}

	return false
}

// SetPeerCertificateExpiryDate gets a reference to the given int64 and assigns it to the PeerCertificateExpiryDate field.
// Deprecated
func (o *ExecutionSimpleResults) SetPeerCertificateExpiryDate(v int64) {
	o.PeerCertificateExpiryDate = &v
}

// GetPublicLocation returns the PublicLocation field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetPublicLocation() bool {
	if o == nil || IsNil(o.PublicLocation) {
		var ret bool
		return ret
	}
	return *o.PublicLocation
}

// GetPublicLocationOk returns a tuple with the PublicLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetPublicLocationOk() (*bool, bool) {
	if o == nil || IsNil(o.PublicLocation) {
		return nil, false
	}
	return o.PublicLocation, true
}

// HasPublicLocation returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasPublicLocation() bool {
	if o != nil && !IsNil(o.PublicLocation) {
		return true
	}

	return false
}

// SetPublicLocation gets a reference to the given bool and assigns it to the PublicLocation field.
func (o *ExecutionSimpleResults) SetPublicLocation(v bool) {
	o.PublicLocation = &v
}

// GetRedirectionTime returns the RedirectionTime field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetRedirectionTime() int64 {
	if o == nil || IsNil(o.RedirectionTime) {
		var ret int64
		return ret
	}
	return *o.RedirectionTime
}

// GetRedirectionTimeOk returns a tuple with the RedirectionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetRedirectionTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.RedirectionTime) {
		return nil, false
	}
	return o.RedirectionTime, true
}

// HasRedirectionTime returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasRedirectionTime() bool {
	if o != nil && !IsNil(o.RedirectionTime) {
		return true
	}

	return false
}

// SetRedirectionTime gets a reference to the given int64 and assigns it to the RedirectionTime field.
func (o *ExecutionSimpleResults) SetRedirectionTime(v int64) {
	o.RedirectionTime = &v
}

// GetRedirectsCount returns the RedirectsCount field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetRedirectsCount() int32 {
	if o == nil || IsNil(o.RedirectsCount) {
		var ret int32
		return ret
	}
	return *o.RedirectsCount
}

// GetRedirectsCountOk returns a tuple with the RedirectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetRedirectsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RedirectsCount) {
		return nil, false
	}
	return o.RedirectsCount, true
}

// HasRedirectsCount returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasRedirectsCount() bool {
	if o != nil && !IsNil(o.RedirectsCount) {
		return true
	}

	return false
}

// SetRedirectsCount gets a reference to the given int32 and assigns it to the RedirectsCount field.
func (o *ExecutionSimpleResults) SetRedirectsCount(v int32) {
	o.RedirectsCount = &v
}

// GetResponseBodySizeLimitExceeded returns the ResponseBodySizeLimitExceeded field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetResponseBodySizeLimitExceeded() bool {
	if o == nil || IsNil(o.ResponseBodySizeLimitExceeded) {
		var ret bool
		return ret
	}
	return *o.ResponseBodySizeLimitExceeded
}

// GetResponseBodySizeLimitExceededOk returns a tuple with the ResponseBodySizeLimitExceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetResponseBodySizeLimitExceededOk() (*bool, bool) {
	if o == nil || IsNil(o.ResponseBodySizeLimitExceeded) {
		return nil, false
	}
	return o.ResponseBodySizeLimitExceeded, true
}

// HasResponseBodySizeLimitExceeded returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasResponseBodySizeLimitExceeded() bool {
	if o != nil && !IsNil(o.ResponseBodySizeLimitExceeded) {
		return true
	}

	return false
}

// SetResponseBodySizeLimitExceeded gets a reference to the given bool and assigns it to the ResponseBodySizeLimitExceeded field.
func (o *ExecutionSimpleResults) SetResponseBodySizeLimitExceeded(v bool) {
	o.ResponseBodySizeLimitExceeded = &v
}

// GetResponseSize returns the ResponseSize field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetResponseSize() int64 {
	if o == nil || IsNil(o.ResponseSize) {
		var ret int64
		return ret
	}
	return *o.ResponseSize
}

// GetResponseSizeOk returns a tuple with the ResponseSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetResponseSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.ResponseSize) {
		return nil, false
	}
	return o.ResponseSize, true
}

// HasResponseSize returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasResponseSize() bool {
	if o != nil && !IsNil(o.ResponseSize) {
		return true
	}

	return false
}

// SetResponseSize gets a reference to the given int64 and assigns it to the ResponseSize field.
func (o *ExecutionSimpleResults) SetResponseSize(v int64) {
	o.ResponseSize = &v
}

// GetResponseStatusCode returns the ResponseStatusCode field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetResponseStatusCode() int32 {
	if o == nil || IsNil(o.ResponseStatusCode) {
		var ret int32
		return ret
	}
	return *o.ResponseStatusCode
}

// GetResponseStatusCodeOk returns a tuple with the ResponseStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetResponseStatusCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ResponseStatusCode) {
		return nil, false
	}
	return o.ResponseStatusCode, true
}

// HasResponseStatusCode returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasResponseStatusCode() bool {
	if o != nil && !IsNil(o.ResponseStatusCode) {
		return true
	}

	return false
}

// SetResponseStatusCode gets a reference to the given int32 and assigns it to the ResponseStatusCode field.
func (o *ExecutionSimpleResults) SetResponseStatusCode(v int32) {
	o.ResponseStatusCode = &v
}

// GetStartTimestamp returns the StartTimestamp field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetStartTimestamp() int64 {
	if o == nil || IsNil(o.StartTimestamp) {
		var ret int64
		return ret
	}
	return *o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetStartTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTimestamp) {
		return nil, false
	}
	return o.StartTimestamp, true
}

// HasStartTimestamp returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasStartTimestamp() bool {
	if o != nil && !IsNil(o.StartTimestamp) {
		return true
	}

	return false
}

// SetStartTimestamp gets a reference to the given int64 and assigns it to the StartTimestamp field.
func (o *ExecutionSimpleResults) SetStartTimestamp(v int64) {
	o.StartTimestamp = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExecutionSimpleResults) SetStatus(v string) {
	o.Status = &v
}

// GetTcpConnectTime returns the TcpConnectTime field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetTcpConnectTime() int64 {
	if o == nil || IsNil(o.TcpConnectTime) {
		var ret int64
		return ret
	}
	return *o.TcpConnectTime
}

// GetTcpConnectTimeOk returns a tuple with the TcpConnectTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetTcpConnectTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.TcpConnectTime) {
		return nil, false
	}
	return o.TcpConnectTime, true
}

// HasTcpConnectTime returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasTcpConnectTime() bool {
	if o != nil && !IsNil(o.TcpConnectTime) {
		return true
	}

	return false
}

// SetTcpConnectTime gets a reference to the given int64 and assigns it to the TcpConnectTime field.
func (o *ExecutionSimpleResults) SetTcpConnectTime(v int64) {
	o.TcpConnectTime = &v
}

// GetTimeToFirstByte returns the TimeToFirstByte field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetTimeToFirstByte() int64 {
	if o == nil || IsNil(o.TimeToFirstByte) {
		var ret int64
		return ret
	}
	return *o.TimeToFirstByte
}

// GetTimeToFirstByteOk returns a tuple with the TimeToFirstByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetTimeToFirstByteOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeToFirstByte) {
		return nil, false
	}
	return o.TimeToFirstByte, true
}

// HasTimeToFirstByte returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasTimeToFirstByte() bool {
	if o != nil && !IsNil(o.TimeToFirstByte) {
		return true
	}

	return false
}

// SetTimeToFirstByte gets a reference to the given int64 and assigns it to the TimeToFirstByte field.
func (o *ExecutionSimpleResults) SetTimeToFirstByte(v int64) {
	o.TimeToFirstByte = &v
}

// GetTlsHandshakeTime returns the TlsHandshakeTime field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetTlsHandshakeTime() int64 {
	if o == nil || IsNil(o.TlsHandshakeTime) {
		var ret int64
		return ret
	}
	return *o.TlsHandshakeTime
}

// GetTlsHandshakeTimeOk returns a tuple with the TlsHandshakeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetTlsHandshakeTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.TlsHandshakeTime) {
		return nil, false
	}
	return o.TlsHandshakeTime, true
}

// HasTlsHandshakeTime returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasTlsHandshakeTime() bool {
	if o != nil && !IsNil(o.TlsHandshakeTime) {
		return true
	}

	return false
}

// SetTlsHandshakeTime gets a reference to the given int64 and assigns it to the TlsHandshakeTime field.
func (o *ExecutionSimpleResults) SetTlsHandshakeTime(v int64) {
	o.TlsHandshakeTime = &v
}

// GetTotalTime returns the TotalTime field value if set, zero value otherwise.
func (o *ExecutionSimpleResults) GetTotalTime() int64 {
	if o == nil || IsNil(o.TotalTime) {
		var ret int64
		return ret
	}
	return *o.TotalTime
}

// GetTotalTimeOk returns a tuple with the TotalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionSimpleResults) GetTotalTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalTime) {
		return nil, false
	}
	return o.TotalTime, true
}

// HasTotalTime returns a boolean if a field has been set.
func (o *ExecutionSimpleResults) HasTotalTime() bool {
	if o != nil && !IsNil(o.TotalTime) {
		return true
	}

	return false
}

// SetTotalTime gets a reference to the given int64 and assigns it to the TotalTime field.
func (o *ExecutionSimpleResults) SetTotalTime(v int64) {
	o.TotalTime = &v
}

func (o ExecutionSimpleResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionSimpleResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChromeError) {
		toSerialize["chromeError"] = o.ChromeError
	}
	if !IsNil(o.EngineId) {
		toSerialize["engineId"] = o.EngineId
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.ExecutedSteps) {
		toSerialize["executedSteps"] = o.ExecutedSteps
	}
	if !IsNil(o.FailureMessage) {
		toSerialize["failureMessage"] = o.FailureMessage
	}
	if !IsNil(o.HostNameResolutionTime) {
		toSerialize["hostNameResolutionTime"] = o.HostNameResolutionTime
	}
	if !IsNil(o.Httperror) {
		toSerialize["httperror"] = o.Httperror
	}
	if !IsNil(o.PeerCertificateExpiryDate) {
		toSerialize["peerCertificateExpiryDate"] = o.PeerCertificateExpiryDate
	}
	if !IsNil(o.PublicLocation) {
		toSerialize["publicLocation"] = o.PublicLocation
	}
	if !IsNil(o.RedirectionTime) {
		toSerialize["redirectionTime"] = o.RedirectionTime
	}
	if !IsNil(o.RedirectsCount) {
		toSerialize["redirectsCount"] = o.RedirectsCount
	}
	if !IsNil(o.ResponseBodySizeLimitExceeded) {
		toSerialize["responseBodySizeLimitExceeded"] = o.ResponseBodySizeLimitExceeded
	}
	if !IsNil(o.ResponseSize) {
		toSerialize["responseSize"] = o.ResponseSize
	}
	if !IsNil(o.ResponseStatusCode) {
		toSerialize["responseStatusCode"] = o.ResponseStatusCode
	}
	if !IsNil(o.StartTimestamp) {
		toSerialize["startTimestamp"] = o.StartTimestamp
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TcpConnectTime) {
		toSerialize["tcpConnectTime"] = o.TcpConnectTime
	}
	if !IsNil(o.TimeToFirstByte) {
		toSerialize["timeToFirstByte"] = o.TimeToFirstByte
	}
	if !IsNil(o.TlsHandshakeTime) {
		toSerialize["tlsHandshakeTime"] = o.TlsHandshakeTime
	}
	if !IsNil(o.TotalTime) {
		toSerialize["totalTime"] = o.TotalTime
	}
	return toSerialize, nil
}

type NullableExecutionSimpleResults struct {
	value *ExecutionSimpleResults
	isSet bool
}

func (v NullableExecutionSimpleResults) Get() *ExecutionSimpleResults {
	return v.value
}

func (v *NullableExecutionSimpleResults) Set(val *ExecutionSimpleResults) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionSimpleResults) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionSimpleResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionSimpleResults(val *ExecutionSimpleResults) *NullableExecutionSimpleResults {
	return &NullableExecutionSimpleResults{value: val, isSet: true}
}

func (v NullableExecutionSimpleResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionSimpleResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


