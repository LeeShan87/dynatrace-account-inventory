/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the MonitoredStates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitoredStates{}

// MonitoredStates A list of entities and their monitoring states.
type MonitoredStates struct {
	// A list of process group instances and their monitoring states.
	MonitoringStates []MonitoredEntityStates `json:"monitoringStates,omitempty"`
	// The total number of entities in the response.
	TotalCount *int64 `json:"totalCount,omitempty"`
}

// NewMonitoredStates instantiates a new MonitoredStates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoredStates() *MonitoredStates {
	this := MonitoredStates{}
	return &this
}

// NewMonitoredStatesWithDefaults instantiates a new MonitoredStates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoredStatesWithDefaults() *MonitoredStates {
	this := MonitoredStates{}
	return &this
}

// GetMonitoringStates returns the MonitoringStates field value if set, zero value otherwise.
func (o *MonitoredStates) GetMonitoringStates() []MonitoredEntityStates {
	if o == nil || IsNil(o.MonitoringStates) {
		var ret []MonitoredEntityStates
		return ret
	}
	return o.MonitoringStates
}

// GetMonitoringStatesOk returns a tuple with the MonitoringStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoredStates) GetMonitoringStatesOk() ([]MonitoredEntityStates, bool) {
	if o == nil || IsNil(o.MonitoringStates) {
		return nil, false
	}
	return o.MonitoringStates, true
}

// HasMonitoringStates returns a boolean if a field has been set.
func (o *MonitoredStates) HasMonitoringStates() bool {
	if o != nil && !IsNil(o.MonitoringStates) {
		return true
	}

	return false
}

// SetMonitoringStates gets a reference to the given []MonitoredEntityStates and assigns it to the MonitoringStates field.
func (o *MonitoredStates) SetMonitoringStates(v []MonitoredEntityStates) {
	o.MonitoringStates = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *MonitoredStates) GetTotalCount() int64 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoredStates) GetTotalCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *MonitoredStates) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *MonitoredStates) SetTotalCount(v int64) {
	o.TotalCount = &v
}

func (o MonitoredStates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitoredStates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MonitoringStates) {
		toSerialize["monitoringStates"] = o.MonitoringStates
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	return toSerialize, nil
}

type NullableMonitoredStates struct {
	value *MonitoredStates
	isSet bool
}

func (v NullableMonitoredStates) Get() *MonitoredStates {
	return v.value
}

func (v *NullableMonitoredStates) Set(val *MonitoredStates) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoredStates) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoredStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoredStates(val *MonitoredStates) *NullableMonitoredStates {
	return &NullableMonitoredStates{value: val, isSet: true}
}

func (v NullableMonitoredStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoredStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


