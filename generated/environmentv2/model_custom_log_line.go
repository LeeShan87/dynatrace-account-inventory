/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the CustomLogLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomLogLine{}

// CustomLogLine A custom script log line
type CustomLogLine struct {
	// Log level of the message
	LogLevel *string `json:"logLevel,omitempty"`
	// The message
	Message *string `json:"message,omitempty"`
	// A timestamp of this log message
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// NewCustomLogLine instantiates a new CustomLogLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomLogLine() *CustomLogLine {
	this := CustomLogLine{}
	return &this
}

// NewCustomLogLineWithDefaults instantiates a new CustomLogLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomLogLineWithDefaults() *CustomLogLine {
	this := CustomLogLine{}
	return &this
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *CustomLogLine) GetLogLevel() string {
	if o == nil || IsNil(o.LogLevel) {
		var ret string
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomLogLine) GetLogLevelOk() (*string, bool) {
	if o == nil || IsNil(o.LogLevel) {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *CustomLogLine) HasLogLevel() bool {
	if o != nil && !IsNil(o.LogLevel) {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given string and assigns it to the LogLevel field.
func (o *CustomLogLine) SetLogLevel(v string) {
	o.LogLevel = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CustomLogLine) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomLogLine) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CustomLogLine) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CustomLogLine) SetMessage(v string) {
	o.Message = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CustomLogLine) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomLogLine) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CustomLogLine) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *CustomLogLine) SetTimestamp(v int64) {
	o.Timestamp = &v
}

func (o CustomLogLine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomLogLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogLevel) {
		toSerialize["logLevel"] = o.LogLevel
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableCustomLogLine struct {
	value *CustomLogLine
	isSet bool
}

func (v NullableCustomLogLine) Get() *CustomLogLine {
	return v.value
}

func (v *NullableCustomLogLine) Set(val *CustomLogLine) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomLogLine) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomLogLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomLogLine(val *CustomLogLine) *NullableCustomLogLine {
	return &NullableCustomLogLine{value: val, isSet: true}
}

func (v NullableCustomLogLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomLogLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


