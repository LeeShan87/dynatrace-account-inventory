/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the CertificateCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateCredentials{}

// CertificateCredentials A credentials set of the `CERTIFICATE` type.
type CertificateCredentials struct {
	// The certificate in the string format.
	Certificate string `json:"certificate"`
	// The certificate format.
	CertificateFormat string `json:"certificateFormat"`
	// The password of the credential (Base64 encoded).
	Password string `json:"password"`
}

// NewCertificateCredentials instantiates a new CertificateCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateCredentials(certificate string, certificateFormat string, password string, name string, scope string, scopes []string) *CertificateCredentials {
	this := CertificateCredentials{}
	this.Name = name
	this.Scope = scope
	this.Scopes = scopes
	this.Certificate = certificate
	this.CertificateFormat = certificateFormat
	this.Password = password
	return &this
}

// NewCertificateCredentialsWithDefaults instantiates a new CertificateCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateCredentialsWithDefaults() *CertificateCredentials {
	this := CertificateCredentials{}
	return &this
}

// GetCertificate returns the Certificate field value
func (o *CertificateCredentials) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *CertificateCredentials) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *CertificateCredentials) SetCertificate(v string) {
	o.Certificate = v
}

// GetCertificateFormat returns the CertificateFormat field value
func (o *CertificateCredentials) GetCertificateFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateFormat
}

// GetCertificateFormatOk returns a tuple with the CertificateFormat field value
// and a boolean to check if the value has been set.
func (o *CertificateCredentials) GetCertificateFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateFormat, true
}

// SetCertificateFormat sets field value
func (o *CertificateCredentials) SetCertificateFormat(v string) {
	o.CertificateFormat = v
}

// GetPassword returns the Password field value
func (o *CertificateCredentials) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CertificateCredentials) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CertificateCredentials) SetPassword(v string) {
	o.Password = v
}

func (o CertificateCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate
	toSerialize["certificateFormat"] = o.CertificateFormat
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullableCertificateCredentials struct {
	value *CertificateCredentials
	isSet bool
}

func (v NullableCertificateCredentials) Get() *CertificateCredentials {
	return v.value
}

func (v *NullableCertificateCredentials) Set(val *CertificateCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateCredentials(val *CertificateCredentials) *NullableCertificateCredentials {
	return &NullableCertificateCredentials{value: val, isSet: true}
}

func (v NullableCertificateCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


