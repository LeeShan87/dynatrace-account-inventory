/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SloBurnRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloBurnRate{}

// SloBurnRate Error budget burn rate evaluation of a service-level objective (SLO).
type SloBurnRate struct {
	// The calculated burn rate type.   Has a value of 'FAST', 'SLOW' or 'NONE'.
	BurnRateType *string `json:"burnRateType,omitempty"`
	// The burn rate of the SLO, calculated for the last hour.
	BurnRateValue *float64 `json:"burnRateValue,omitempty"`
	// The error budget burn rate calculation is enabled (`true`) or disabled (`false`).   In case of `false`, no calculated values will be present here.
	BurnRateVisualizationEnabled bool `json:"burnRateVisualizationEnabled"`
	// The estimated time left to consume the error budget in hours.
	EstimatedTimeToConsumeErrorBudget *float64 `json:"estimatedTimeToConsumeErrorBudget,omitempty"`
	// The threshold between a slow and a fast burn rate.
	FastBurnThreshold *float64 `json:"fastBurnThreshold,omitempty"`
	// The calculated value of the SLO for the timeframe chosen for the burn rate calculation.
	SloValue *float64 `json:"sloValue,omitempty"`
}

// NewSloBurnRate instantiates a new SloBurnRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloBurnRate(burnRateVisualizationEnabled bool) *SloBurnRate {
	this := SloBurnRate{}
	this.BurnRateVisualizationEnabled = burnRateVisualizationEnabled
	return &this
}

// NewSloBurnRateWithDefaults instantiates a new SloBurnRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloBurnRateWithDefaults() *SloBurnRate {
	this := SloBurnRate{}
	return &this
}

// GetBurnRateType returns the BurnRateType field value if set, zero value otherwise.
func (o *SloBurnRate) GetBurnRateType() string {
	if o == nil || IsNil(o.BurnRateType) {
		var ret string
		return ret
	}
	return *o.BurnRateType
}

// GetBurnRateTypeOk returns a tuple with the BurnRateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloBurnRate) GetBurnRateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BurnRateType) {
		return nil, false
	}
	return o.BurnRateType, true
}

// HasBurnRateType returns a boolean if a field has been set.
func (o *SloBurnRate) HasBurnRateType() bool {
	if o != nil && !IsNil(o.BurnRateType) {
		return true
	}

	return false
}

// SetBurnRateType gets a reference to the given string and assigns it to the BurnRateType field.
func (o *SloBurnRate) SetBurnRateType(v string) {
	o.BurnRateType = &v
}

// GetBurnRateValue returns the BurnRateValue field value if set, zero value otherwise.
func (o *SloBurnRate) GetBurnRateValue() float64 {
	if o == nil || IsNil(o.BurnRateValue) {
		var ret float64
		return ret
	}
	return *o.BurnRateValue
}

// GetBurnRateValueOk returns a tuple with the BurnRateValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloBurnRate) GetBurnRateValueOk() (*float64, bool) {
	if o == nil || IsNil(o.BurnRateValue) {
		return nil, false
	}
	return o.BurnRateValue, true
}

// HasBurnRateValue returns a boolean if a field has been set.
func (o *SloBurnRate) HasBurnRateValue() bool {
	if o != nil && !IsNil(o.BurnRateValue) {
		return true
	}

	return false
}

// SetBurnRateValue gets a reference to the given float64 and assigns it to the BurnRateValue field.
func (o *SloBurnRate) SetBurnRateValue(v float64) {
	o.BurnRateValue = &v
}

// GetBurnRateVisualizationEnabled returns the BurnRateVisualizationEnabled field value
func (o *SloBurnRate) GetBurnRateVisualizationEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BurnRateVisualizationEnabled
}

// GetBurnRateVisualizationEnabledOk returns a tuple with the BurnRateVisualizationEnabled field value
// and a boolean to check if the value has been set.
func (o *SloBurnRate) GetBurnRateVisualizationEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BurnRateVisualizationEnabled, true
}

// SetBurnRateVisualizationEnabled sets field value
func (o *SloBurnRate) SetBurnRateVisualizationEnabled(v bool) {
	o.BurnRateVisualizationEnabled = v
}

// GetEstimatedTimeToConsumeErrorBudget returns the EstimatedTimeToConsumeErrorBudget field value if set, zero value otherwise.
func (o *SloBurnRate) GetEstimatedTimeToConsumeErrorBudget() float64 {
	if o == nil || IsNil(o.EstimatedTimeToConsumeErrorBudget) {
		var ret float64
		return ret
	}
	return *o.EstimatedTimeToConsumeErrorBudget
}

// GetEstimatedTimeToConsumeErrorBudgetOk returns a tuple with the EstimatedTimeToConsumeErrorBudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloBurnRate) GetEstimatedTimeToConsumeErrorBudgetOk() (*float64, bool) {
	if o == nil || IsNil(o.EstimatedTimeToConsumeErrorBudget) {
		return nil, false
	}
	return o.EstimatedTimeToConsumeErrorBudget, true
}

// HasEstimatedTimeToConsumeErrorBudget returns a boolean if a field has been set.
func (o *SloBurnRate) HasEstimatedTimeToConsumeErrorBudget() bool {
	if o != nil && !IsNil(o.EstimatedTimeToConsumeErrorBudget) {
		return true
	}

	return false
}

// SetEstimatedTimeToConsumeErrorBudget gets a reference to the given float64 and assigns it to the EstimatedTimeToConsumeErrorBudget field.
func (o *SloBurnRate) SetEstimatedTimeToConsumeErrorBudget(v float64) {
	o.EstimatedTimeToConsumeErrorBudget = &v
}

// GetFastBurnThreshold returns the FastBurnThreshold field value if set, zero value otherwise.
func (o *SloBurnRate) GetFastBurnThreshold() float64 {
	if o == nil || IsNil(o.FastBurnThreshold) {
		var ret float64
		return ret
	}
	return *o.FastBurnThreshold
}

// GetFastBurnThresholdOk returns a tuple with the FastBurnThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloBurnRate) GetFastBurnThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.FastBurnThreshold) {
		return nil, false
	}
	return o.FastBurnThreshold, true
}

// HasFastBurnThreshold returns a boolean if a field has been set.
func (o *SloBurnRate) HasFastBurnThreshold() bool {
	if o != nil && !IsNil(o.FastBurnThreshold) {
		return true
	}

	return false
}

// SetFastBurnThreshold gets a reference to the given float64 and assigns it to the FastBurnThreshold field.
func (o *SloBurnRate) SetFastBurnThreshold(v float64) {
	o.FastBurnThreshold = &v
}

// GetSloValue returns the SloValue field value if set, zero value otherwise.
func (o *SloBurnRate) GetSloValue() float64 {
	if o == nil || IsNil(o.SloValue) {
		var ret float64
		return ret
	}
	return *o.SloValue
}

// GetSloValueOk returns a tuple with the SloValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloBurnRate) GetSloValueOk() (*float64, bool) {
	if o == nil || IsNil(o.SloValue) {
		return nil, false
	}
	return o.SloValue, true
}

// HasSloValue returns a boolean if a field has been set.
func (o *SloBurnRate) HasSloValue() bool {
	if o != nil && !IsNil(o.SloValue) {
		return true
	}

	return false
}

// SetSloValue gets a reference to the given float64 and assigns it to the SloValue field.
func (o *SloBurnRate) SetSloValue(v float64) {
	o.SloValue = &v
}

func (o SloBurnRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloBurnRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BurnRateType) {
		toSerialize["burnRateType"] = o.BurnRateType
	}
	if !IsNil(o.BurnRateValue) {
		toSerialize["burnRateValue"] = o.BurnRateValue
	}
	toSerialize["burnRateVisualizationEnabled"] = o.BurnRateVisualizationEnabled
	if !IsNil(o.EstimatedTimeToConsumeErrorBudget) {
		toSerialize["estimatedTimeToConsumeErrorBudget"] = o.EstimatedTimeToConsumeErrorBudget
	}
	if !IsNil(o.FastBurnThreshold) {
		toSerialize["fastBurnThreshold"] = o.FastBurnThreshold
	}
	if !IsNil(o.SloValue) {
		toSerialize["sloValue"] = o.SloValue
	}
	return toSerialize, nil
}

type NullableSloBurnRate struct {
	value *SloBurnRate
	isSet bool
}

func (v NullableSloBurnRate) Get() *SloBurnRate {
	return v.value
}

func (v *NullableSloBurnRate) Set(val *SloBurnRate) {
	v.value = val
	v.isSet = true
}

func (v NullableSloBurnRate) IsSet() bool {
	return v.isSet
}

func (v *NullableSloBurnRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloBurnRate(val *SloBurnRate) *NullableSloBurnRate {
	return &NullableSloBurnRate{value: val, isSet: true}
}

func (v NullableSloBurnRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloBurnRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


