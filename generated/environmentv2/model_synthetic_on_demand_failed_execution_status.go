/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SyntheticOnDemandFailedExecutionStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntheticOnDemandFailedExecutionStatus{}

// SyntheticOnDemandFailedExecutionStatus Contains information about on-demand executions that failed or failed to be executed.
type SyntheticOnDemandFailedExecutionStatus struct {
	// Error code.
	ErrorCode string `json:"errorCode"`
	// The identifier of the execution.
	ExecutionId string `json:"executionId"`
	// Execution stage.
	ExecutionStage *string `json:"executionStage,omitempty"`
	// The timestamp when execution was finished, in UTC milliseconds.
	ExecutionTimestamp *int64 `json:"executionTimestamp,omitempty"`
	// Failure message.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The identifier of the location from where the monitor is to be executed.
	LocationId string `json:"locationId"`
	// The identifier of the monitor.
	MonitorId string `json:"monitorId"`
}

// NewSyntheticOnDemandFailedExecutionStatus instantiates a new SyntheticOnDemandFailedExecutionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticOnDemandFailedExecutionStatus(errorCode string, executionId string, locationId string, monitorId string) *SyntheticOnDemandFailedExecutionStatus {
	this := SyntheticOnDemandFailedExecutionStatus{}
	this.ErrorCode = errorCode
	this.ExecutionId = executionId
	this.LocationId = locationId
	this.MonitorId = monitorId
	return &this
}

// NewSyntheticOnDemandFailedExecutionStatusWithDefaults instantiates a new SyntheticOnDemandFailedExecutionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticOnDemandFailedExecutionStatusWithDefaults() *SyntheticOnDemandFailedExecutionStatus {
	this := SyntheticOnDemandFailedExecutionStatus{}
	return &this
}

// GetErrorCode returns the ErrorCode field value
func (o *SyntheticOnDemandFailedExecutionStatus) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *SyntheticOnDemandFailedExecutionStatus) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetExecutionId returns the ExecutionId field value
func (o *SyntheticOnDemandFailedExecutionStatus) GetExecutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionId, true
}

// SetExecutionId sets field value
func (o *SyntheticOnDemandFailedExecutionStatus) SetExecutionId(v string) {
	o.ExecutionId = v
}

// GetExecutionStage returns the ExecutionStage field value if set, zero value otherwise.
func (o *SyntheticOnDemandFailedExecutionStatus) GetExecutionStage() string {
	if o == nil || IsNil(o.ExecutionStage) {
		var ret string
		return ret
	}
	return *o.ExecutionStage
}

// GetExecutionStageOk returns a tuple with the ExecutionStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) GetExecutionStageOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionStage) {
		return nil, false
	}
	return o.ExecutionStage, true
}

// HasExecutionStage returns a boolean if a field has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) HasExecutionStage() bool {
	if o != nil && !IsNil(o.ExecutionStage) {
		return true
	}

	return false
}

// SetExecutionStage gets a reference to the given string and assigns it to the ExecutionStage field.
func (o *SyntheticOnDemandFailedExecutionStatus) SetExecutionStage(v string) {
	o.ExecutionStage = &v
}

// GetExecutionTimestamp returns the ExecutionTimestamp field value if set, zero value otherwise.
func (o *SyntheticOnDemandFailedExecutionStatus) GetExecutionTimestamp() int64 {
	if o == nil || IsNil(o.ExecutionTimestamp) {
		var ret int64
		return ret
	}
	return *o.ExecutionTimestamp
}

// GetExecutionTimestampOk returns a tuple with the ExecutionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) GetExecutionTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.ExecutionTimestamp) {
		return nil, false
	}
	return o.ExecutionTimestamp, true
}

// HasExecutionTimestamp returns a boolean if a field has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) HasExecutionTimestamp() bool {
	if o != nil && !IsNil(o.ExecutionTimestamp) {
		return true
	}

	return false
}

// SetExecutionTimestamp gets a reference to the given int64 and assigns it to the ExecutionTimestamp field.
func (o *SyntheticOnDemandFailedExecutionStatus) SetExecutionTimestamp(v int64) {
	o.ExecutionTimestamp = &v
}

// GetFailureMessage returns the FailureMessage field value if set, zero value otherwise.
func (o *SyntheticOnDemandFailedExecutionStatus) GetFailureMessage() string {
	if o == nil || IsNil(o.FailureMessage) {
		var ret string
		return ret
	}
	return *o.FailureMessage
}

// GetFailureMessageOk returns a tuple with the FailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) GetFailureMessageOk() (*string, bool) {
	if o == nil || IsNil(o.FailureMessage) {
		return nil, false
	}
	return o.FailureMessage, true
}

// HasFailureMessage returns a boolean if a field has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) HasFailureMessage() bool {
	if o != nil && !IsNil(o.FailureMessage) {
		return true
	}

	return false
}

// SetFailureMessage gets a reference to the given string and assigns it to the FailureMessage field.
func (o *SyntheticOnDemandFailedExecutionStatus) SetFailureMessage(v string) {
	o.FailureMessage = &v
}

// GetLocationId returns the LocationId field value
func (o *SyntheticOnDemandFailedExecutionStatus) GetLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) GetLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationId, true
}

// SetLocationId sets field value
func (o *SyntheticOnDemandFailedExecutionStatus) SetLocationId(v string) {
	o.LocationId = v
}

// GetMonitorId returns the MonitorId field value
func (o *SyntheticOnDemandFailedExecutionStatus) GetMonitorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonitorId
}

// GetMonitorIdOk returns a tuple with the MonitorId field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandFailedExecutionStatus) GetMonitorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonitorId, true
}

// SetMonitorId sets field value
func (o *SyntheticOnDemandFailedExecutionStatus) SetMonitorId(v string) {
	o.MonitorId = v
}

func (o SyntheticOnDemandFailedExecutionStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntheticOnDemandFailedExecutionStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errorCode"] = o.ErrorCode
	toSerialize["executionId"] = o.ExecutionId
	if !IsNil(o.ExecutionStage) {
		toSerialize["executionStage"] = o.ExecutionStage
	}
	if !IsNil(o.ExecutionTimestamp) {
		toSerialize["executionTimestamp"] = o.ExecutionTimestamp
	}
	if !IsNil(o.FailureMessage) {
		toSerialize["failureMessage"] = o.FailureMessage
	}
	toSerialize["locationId"] = o.LocationId
	toSerialize["monitorId"] = o.MonitorId
	return toSerialize, nil
}

type NullableSyntheticOnDemandFailedExecutionStatus struct {
	value *SyntheticOnDemandFailedExecutionStatus
	isSet bool
}

func (v NullableSyntheticOnDemandFailedExecutionStatus) Get() *SyntheticOnDemandFailedExecutionStatus {
	return v.value
}

func (v *NullableSyntheticOnDemandFailedExecutionStatus) Set(val *SyntheticOnDemandFailedExecutionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticOnDemandFailedExecutionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticOnDemandFailedExecutionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticOnDemandFailedExecutionStatus(val *SyntheticOnDemandFailedExecutionStatus) *NullableSyntheticOnDemandFailedExecutionStatus {
	return &NullableSyntheticOnDemandFailedExecutionStatus{value: val, isSet: true}
}

func (v NullableSyntheticOnDemandFailedExecutionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticOnDemandFailedExecutionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


