/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AttacksAPIService AttacksAPI service
type AttacksAPIService service

type ApiGetAttackRequest struct {
	ctx context.Context
	ApiService *AttacksAPIService
	id string
	fields *string
}

// A list of additional attack properties you can add to the response.  The following properties are available (all other properties are always included and you can&#39;t remove them from the response):  * &#x60;attackTarget&#x60;: The targeted host/database of an attack. * &#x60;request&#x60;: The request that was sent from the attacker. * &#x60;entrypoint&#x60;: The entry point used by an attacker to start a specific attack. * &#x60;vulnerability&#x60;: The vulnerability utilized by the attack. * &#x60;securityProblem&#x60;: The related security problem. * &#x60;attacker&#x60;: The attacker of an attack. * &#x60;managementZones&#x60;: The related management zones.  To add properties, specify them in a comma-separated list and prefix each property with a plus (for example, &#x60;+attackTarget,+securityProblem&#x60;). 
func (r ApiGetAttackRequest) Fields(fields string) ApiGetAttackRequest {
	r.fields = &fields
	return r
}

func (r ApiGetAttackRequest) Execute() (*Attack, *http.Response, error) {
	return r.ApiService.GetAttackExecute(r)
}

/*
GetAttack Gets the specified attack | maturity=EARLY_ADOPTER

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the attack.
 @return ApiGetAttackRequest
*/
func (a *AttacksAPIService) GetAttack(ctx context.Context, id string) ApiGetAttackRequest {
	return ApiGetAttackRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Attack
func (a *AttacksAPIService) GetAttackExecute(r ApiGetAttackRequest) (*Attack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Attack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttacksAPIService.GetAttack")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/attacks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAttacksRequest struct {
	ctx context.Context
	ApiService *AttacksAPIService
	nextPageKey *string
	pageSize *int64
	attackSelector *string
	sort *string
	fields *string
	from *string
	to *string
}

// The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters. 
func (r ApiGetAttacksRequest) NextPageKey(nextPageKey string) ApiGetAttacksRequest {
	r.nextPageKey = &nextPageKey
	return r
}

// The amount of attacks in a single response payload.   The maximal allowed page size is 500.   If not set, 100 is used.
func (r ApiGetAttacksRequest) PageSize(pageSize int64) ApiGetAttacksRequest {
	r.pageSize = &pageSize
	return r
}

// Defines the scope of the query. Only attacks matching the specified criteria are included in the response. You can add one or more of the following criteria. Values are *not* case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified.  * State: &#x60;state(\&quot;value\&quot;)&#x60;. The state of the attack. Possible values are &#x60;EXPLOITED&#x60;, &#x60;BLOCKED&#x60;, and &#x60;ALLOWLISTED&#x60;. * Attack Type: &#x60;attackType(\&quot;value\&quot;)&#x60;. The type of the attack. Find the possible values in the description of the **attackType** field of the response. * Country Code: &#x60;countryCode(\&quot;value\&quot;)&#x60;. The country code of the attacker. Supported values include all ISO-3166-1 alpha-2 country codes (2-letter). Supplying empty filter value &#x60;countryCode()&#x60; will return attacks, where location is not available. * Request path contains: &#x60;requestPathContains(\&quot;value\&quot;)&#x60;. Filters for a substring in the request path. The &#x60;CONTAINS&#x60; operator is used. A maximum of 48 characters are allowed. * Process group name contains: &#x60;processGroupNameContains(\&quot;value\&quot;)&#x60;. Filters for a substring in the targeted process group&#39;s name. The &#x60;CONTAINS&#x60; operator is used. * Vulnerability ID: &#x60;vulnerabilityId(\&quot;123456789\&quot;)&#x60;. The exact ID of the vulnerability. * Source IPs: &#x60;sourceIps(\&quot;93.184.216.34\&quot;, \&quot;63.124.6.12\&quot;)&#x60;. The exact IPv4/IPv6 addresses of the attacker. * Management zone ID: &#x60;managementZoneIds(\&quot;mzId-1\&quot;, \&quot;mzId-2\&quot;)&#x60;. * Management zone name: &#x60;managementZones(\&quot;name-1\&quot;, \&quot;name-2\&quot;)&#x60;. Values are case sensitive. * Technology: &#x60;technology(\&quot;technology-1\&quot;, \&quot;technology-2\&quot;)&#x60;. Find the possible values in the description of the **technology** field of the response. The &#x60;EQUALS&#x60; operator is used.  To set several criteria, separate them with a comma (&#x60;,&#x60;). Only results matching (**all** criteria are included in the response.  Specify the value of a criterion as a quoted string. The following special characters must be escaped with a tilde (&#x60;~&#x60;) inside quotes: * Tilde &#x60;~&#x60;  * Quote &#x60;\&quot;&#x60;
func (r ApiGetAttacksRequest) AttackSelector(attackSelector string) ApiGetAttacksRequest {
	r.attackSelector = &attackSelector
	return r
}

// Specifies one or more fields for sorting the attack list. Multiple fields can be concatenated using a comma (&#x60;,&#x60;) as a separator (e.g. &#x60;+state,-timestamp&#x60;).  You can sort by the following properties with a sign prefix for the sorting order.   * &#x60;displayId&#x60;: The attack&#39;s display ID. * &#x60;displayName&#x60;: The attack&#39;s display name. * &#x60;attackType&#x60;: The type of the attack (e.g. SQL_INJECTION, JNDI_INJECTION, etc.). * &#x60;state&#x60;: The state of the attack. (&#x60;+&#x60; low severity state first &#x60;-&#x60; high severity state first) * &#x60;sourceIp&#x60;: The IP address of the attacker. Sorts by the numerical IP value. * &#x60;requestPath&#x60;: The request path where the attack was started. * &#x60;timestamp&#x60;: When the attack was executed. (&#x60;+&#x60; old attacks first or &#x60;-&#x60; new attacks first) If no prefix is set, &#x60;+&#x60; is used.
func (r ApiGetAttacksRequest) Sort(sort string) ApiGetAttacksRequest {
	r.sort = &sort
	return r
}

// A list of additional attack properties you can add to the response.  The following properties are available (all other properties are always included and you can&#39;t remove them from the response):  * &#x60;attackTarget&#x60;: The targeted host/database of an attack. * &#x60;request&#x60;: The request that was sent from the attacker. * &#x60;entrypoint&#x60;: The entry point used by an attacker to start a specific attack. * &#x60;vulnerability&#x60;: The vulnerability utilized by the attack. * &#x60;securityProblem&#x60;: The related security problem. * &#x60;attacker&#x60;: The attacker of an attack. * &#x60;managementZones&#x60;: The related management zones. * &#x60;affectedEntities&#x60;: The affected entities of an attack.  To add properties, specify them in a comma-separated list and prefix each property with a plus (for example, &#x60;+attackTarget,+securityProblem&#x60;). 
func (r ApiGetAttacksRequest) Fields(fields string) ApiGetAttacksRequest {
	r.fields = &fields
	return r
}

// The start of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of thirty days is used (&#x60;now-30d&#x60;).
func (r ApiGetAttacksRequest) From(from string) ApiGetAttacksRequest {
	r.from = &from
	return r
}

// The end of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used.
func (r ApiGetAttacksRequest) To(to string) ApiGetAttacksRequest {
	r.to = &to
	return r
}

func (r ApiGetAttacksRequest) Execute() (*AttackList, *http.Response, error) {
	return r.ApiService.GetAttacksExecute(r)
}

/*
GetAttacks Lists all attacks | maturity=EARLY_ADOPTER

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAttacksRequest
*/
func (a *AttacksAPIService) GetAttacks(ctx context.Context) ApiGetAttacksRequest {
	return ApiGetAttacksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AttackList
func (a *AttacksAPIService) GetAttacksExecute(r ApiGetAttacksRequest) (*AttackList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttackList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttacksAPIService.GetAttacks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/attacks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nextPageKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextPageKey", r.nextPageKey, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.attackSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attackSelector", r.attackSelector, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.to != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
