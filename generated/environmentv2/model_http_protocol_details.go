/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the HttpProtocolDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpProtocolDetails{}

// HttpProtocolDetails HTTP specific request details.
type HttpProtocolDetails struct {
	Headers *TruncatableListAttackRequestHeader `json:"headers,omitempty"`
	Parameters *TruncatableListHttpRequestParameter `json:"parameters,omitempty"`
	// The HTTP request method.
	RequestMethod *string `json:"requestMethod,omitempty"`
}

// NewHttpProtocolDetails instantiates a new HttpProtocolDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpProtocolDetails() *HttpProtocolDetails {
	this := HttpProtocolDetails{}
	return &this
}

// NewHttpProtocolDetailsWithDefaults instantiates a new HttpProtocolDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpProtocolDetailsWithDefaults() *HttpProtocolDetails {
	this := HttpProtocolDetails{}
	return &this
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *HttpProtocolDetails) GetHeaders() TruncatableListAttackRequestHeader {
	if o == nil || IsNil(o.Headers) {
		var ret TruncatableListAttackRequestHeader
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpProtocolDetails) GetHeadersOk() (*TruncatableListAttackRequestHeader, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *HttpProtocolDetails) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given TruncatableListAttackRequestHeader and assigns it to the Headers field.
func (o *HttpProtocolDetails) SetHeaders(v TruncatableListAttackRequestHeader) {
	o.Headers = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *HttpProtocolDetails) GetParameters() TruncatableListHttpRequestParameter {
	if o == nil || IsNil(o.Parameters) {
		var ret TruncatableListHttpRequestParameter
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpProtocolDetails) GetParametersOk() (*TruncatableListHttpRequestParameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *HttpProtocolDetails) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given TruncatableListHttpRequestParameter and assigns it to the Parameters field.
func (o *HttpProtocolDetails) SetParameters(v TruncatableListHttpRequestParameter) {
	o.Parameters = &v
}

// GetRequestMethod returns the RequestMethod field value if set, zero value otherwise.
func (o *HttpProtocolDetails) GetRequestMethod() string {
	if o == nil || IsNil(o.RequestMethod) {
		var ret string
		return ret
	}
	return *o.RequestMethod
}

// GetRequestMethodOk returns a tuple with the RequestMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpProtocolDetails) GetRequestMethodOk() (*string, bool) {
	if o == nil || IsNil(o.RequestMethod) {
		return nil, false
	}
	return o.RequestMethod, true
}

// HasRequestMethod returns a boolean if a field has been set.
func (o *HttpProtocolDetails) HasRequestMethod() bool {
	if o != nil && !IsNil(o.RequestMethod) {
		return true
	}

	return false
}

// SetRequestMethod gets a reference to the given string and assigns it to the RequestMethod field.
func (o *HttpProtocolDetails) SetRequestMethod(v string) {
	o.RequestMethod = &v
}

func (o HttpProtocolDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpProtocolDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.RequestMethod) {
		toSerialize["requestMethod"] = o.RequestMethod
	}
	return toSerialize, nil
}

type NullableHttpProtocolDetails struct {
	value *HttpProtocolDetails
	isSet bool
}

func (v NullableHttpProtocolDetails) Get() *HttpProtocolDetails {
	return v.value
}

func (v *NullableHttpProtocolDetails) Set(val *HttpProtocolDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpProtocolDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpProtocolDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpProtocolDetails(val *HttpProtocolDetails) *NullableHttpProtocolDetails {
	return &NullableHttpProtocolDetails{value: val, isSet: true}
}

func (v NullableHttpProtocolDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpProtocolDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


