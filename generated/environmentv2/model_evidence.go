/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Evidence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Evidence{}

// Evidence An evidence of a root cause.    The actual set of fields depends on the type of the evidence. Find the list of actual objects in the description of the **evidenceType** field or see [Problems API v2 - JSON models](https://dt-url.net/we03sp2).
type Evidence struct {
	// The display name of the evidence.
	DisplayName string `json:"displayName"`
	Entity EntityStub `json:"entity"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `EVENT` -> EventEvidence  * `METRIC` -> MetricEvidence  * `TRANSACTIONAL` -> TransactionalEvidence  * `MAINTENANCE_WINDOW` -> MaintenanceWindowEvidence  * `AVAILABILITY_EVIDENCE` -> AvailabilityEvidence  
	EvidenceType string `json:"evidenceType"`
	GroupingEntity *EntityStub `json:"groupingEntity,omitempty"`
	// The evidence is (`true`) or is not (`false`) a part of the root cause.
	RootCauseRelevant bool `json:"rootCauseRelevant"`
	// The start time of the evidence, in UTC milliseconds.
	StartTime int64 `json:"startTime"`
}

// NewEvidence instantiates a new Evidence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvidence(displayName string, entity EntityStub, evidenceType string, rootCauseRelevant bool, startTime int64) *Evidence {
	this := Evidence{}
	this.DisplayName = displayName
	this.Entity = entity
	this.EvidenceType = evidenceType
	this.RootCauseRelevant = rootCauseRelevant
	this.StartTime = startTime
	return &this
}

// NewEvidenceWithDefaults instantiates a new Evidence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvidenceWithDefaults() *Evidence {
	this := Evidence{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *Evidence) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Evidence) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *Evidence) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEntity returns the Entity field value
func (o *Evidence) GetEntity() EntityStub {
	if o == nil {
		var ret EntityStub
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *Evidence) GetEntityOk() (*EntityStub, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *Evidence) SetEntity(v EntityStub) {
	o.Entity = v
}

// GetEvidenceType returns the EvidenceType field value
func (o *Evidence) GetEvidenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EvidenceType
}

// GetEvidenceTypeOk returns a tuple with the EvidenceType field value
// and a boolean to check if the value has been set.
func (o *Evidence) GetEvidenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EvidenceType, true
}

// SetEvidenceType sets field value
func (o *Evidence) SetEvidenceType(v string) {
	o.EvidenceType = v
}

// GetGroupingEntity returns the GroupingEntity field value if set, zero value otherwise.
func (o *Evidence) GetGroupingEntity() EntityStub {
	if o == nil || IsNil(o.GroupingEntity) {
		var ret EntityStub
		return ret
	}
	return *o.GroupingEntity
}

// GetGroupingEntityOk returns a tuple with the GroupingEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetGroupingEntityOk() (*EntityStub, bool) {
	if o == nil || IsNil(o.GroupingEntity) {
		return nil, false
	}
	return o.GroupingEntity, true
}

// HasGroupingEntity returns a boolean if a field has been set.
func (o *Evidence) HasGroupingEntity() bool {
	if o != nil && !IsNil(o.GroupingEntity) {
		return true
	}

	return false
}

// SetGroupingEntity gets a reference to the given EntityStub and assigns it to the GroupingEntity field.
func (o *Evidence) SetGroupingEntity(v EntityStub) {
	o.GroupingEntity = &v
}

// GetRootCauseRelevant returns the RootCauseRelevant field value
func (o *Evidence) GetRootCauseRelevant() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RootCauseRelevant
}

// GetRootCauseRelevantOk returns a tuple with the RootCauseRelevant field value
// and a boolean to check if the value has been set.
func (o *Evidence) GetRootCauseRelevantOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootCauseRelevant, true
}

// SetRootCauseRelevant sets field value
func (o *Evidence) SetRootCauseRelevant(v bool) {
	o.RootCauseRelevant = v
}

// GetStartTime returns the StartTime field value
func (o *Evidence) GetStartTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Evidence) GetStartTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Evidence) SetStartTime(v int64) {
	o.StartTime = v
}

func (o Evidence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Evidence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["entity"] = o.Entity
	toSerialize["evidenceType"] = o.EvidenceType
	if !IsNil(o.GroupingEntity) {
		toSerialize["groupingEntity"] = o.GroupingEntity
	}
	toSerialize["rootCauseRelevant"] = o.RootCauseRelevant
	toSerialize["startTime"] = o.StartTime
	return toSerialize, nil
}

type NullableEvidence struct {
	value *Evidence
	isSet bool
}

func (v NullableEvidence) Get() *Evidence {
	return v.value
}

func (v *NullableEvidence) Set(val *Evidence) {
	v.value = val
	v.isSet = true
}

func (v NullableEvidence) IsSet() bool {
	return v.isSet
}

func (v *NullableEvidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvidence(val *Evidence) *NullableEvidence {
	return &NullableEvidence{value: val, isSet: true}
}

func (v NullableEvidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


