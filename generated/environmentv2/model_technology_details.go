/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the TechnologyDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TechnologyDetails{}

// TechnologyDetails Additional details of the technology.
type TechnologyDetails struct {
	// Represents the installation/public navigation link for the technology.
	ActivationLink *string `json:"activationLink,omitempty"`
}

// NewTechnologyDetails instantiates a new TechnologyDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTechnologyDetails() *TechnologyDetails {
	this := TechnologyDetails{}
	return &this
}

// NewTechnologyDetailsWithDefaults instantiates a new TechnologyDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTechnologyDetailsWithDefaults() *TechnologyDetails {
	this := TechnologyDetails{}
	return &this
}

// GetActivationLink returns the ActivationLink field value if set, zero value otherwise.
func (o *TechnologyDetails) GetActivationLink() string {
	if o == nil || IsNil(o.ActivationLink) {
		var ret string
		return ret
	}
	return *o.ActivationLink
}

// GetActivationLinkOk returns a tuple with the ActivationLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnologyDetails) GetActivationLinkOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationLink) {
		return nil, false
	}
	return o.ActivationLink, true
}

// HasActivationLink returns a boolean if a field has been set.
func (o *TechnologyDetails) HasActivationLink() bool {
	if o != nil && !IsNil(o.ActivationLink) {
		return true
	}

	return false
}

// SetActivationLink gets a reference to the given string and assigns it to the ActivationLink field.
func (o *TechnologyDetails) SetActivationLink(v string) {
	o.ActivationLink = &v
}

func (o TechnologyDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TechnologyDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivationLink) {
		toSerialize["activationLink"] = o.ActivationLink
	}
	return toSerialize, nil
}

type NullableTechnologyDetails struct {
	value *TechnologyDetails
	isSet bool
}

func (v NullableTechnologyDetails) Get() *TechnologyDetails {
	return v.value
}

func (v *NullableTechnologyDetails) Set(val *TechnologyDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTechnologyDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTechnologyDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTechnologyDetails(val *TechnologyDetails) *NullableTechnologyDetails {
	return &NullableTechnologyDetails{value: val, isSet: true}
}

func (v NullableTechnologyDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTechnologyDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


