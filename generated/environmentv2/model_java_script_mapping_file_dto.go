/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the JavaScriptMappingFileDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JavaScriptMappingFileDto{}

// JavaScriptMappingFileDto struct for JavaScriptMappingFileDto
type JavaScriptMappingFileDto struct {
	// The name of the file.
	FileName *string `json:"fileName,omitempty"`
	// The type of the file.
	FileType *string `json:"fileType,omitempty"`
	// The minified JavaScript file URL to which the mapping file belongs to.
	MinifiedJsFileUrl *string `json:"minifiedJsFileUrl,omitempty"`
	// The number of files.
	NumberOfFiles *int32 `json:"numberOfFiles,omitempty"`
	// Whether the file is pinned and therefore not automatically deleted.
	Pinned *bool `json:"pinned,omitempty"`
	// The size of the file, in KB.
	Size *int32 `json:"size,omitempty"`
	// The timestamp of the file upload, in UTC milliseconds.
	UploadTimestamp *int64 `json:"uploadTimestamp,omitempty"`
	// Whether several files are zipped into one file.
	Zipped *bool `json:"zipped,omitempty"`
}

// NewJavaScriptMappingFileDto instantiates a new JavaScriptMappingFileDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJavaScriptMappingFileDto() *JavaScriptMappingFileDto {
	this := JavaScriptMappingFileDto{}
	return &this
}

// NewJavaScriptMappingFileDtoWithDefaults instantiates a new JavaScriptMappingFileDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJavaScriptMappingFileDtoWithDefaults() *JavaScriptMappingFileDto {
	this := JavaScriptMappingFileDto{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *JavaScriptMappingFileDto) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaScriptMappingFileDto) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *JavaScriptMappingFileDto) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *JavaScriptMappingFileDto) SetFileName(v string) {
	o.FileName = &v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *JavaScriptMappingFileDto) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaScriptMappingFileDto) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *JavaScriptMappingFileDto) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *JavaScriptMappingFileDto) SetFileType(v string) {
	o.FileType = &v
}

// GetMinifiedJsFileUrl returns the MinifiedJsFileUrl field value if set, zero value otherwise.
func (o *JavaScriptMappingFileDto) GetMinifiedJsFileUrl() string {
	if o == nil || IsNil(o.MinifiedJsFileUrl) {
		var ret string
		return ret
	}
	return *o.MinifiedJsFileUrl
}

// GetMinifiedJsFileUrlOk returns a tuple with the MinifiedJsFileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaScriptMappingFileDto) GetMinifiedJsFileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MinifiedJsFileUrl) {
		return nil, false
	}
	return o.MinifiedJsFileUrl, true
}

// HasMinifiedJsFileUrl returns a boolean if a field has been set.
func (o *JavaScriptMappingFileDto) HasMinifiedJsFileUrl() bool {
	if o != nil && !IsNil(o.MinifiedJsFileUrl) {
		return true
	}

	return false
}

// SetMinifiedJsFileUrl gets a reference to the given string and assigns it to the MinifiedJsFileUrl field.
func (o *JavaScriptMappingFileDto) SetMinifiedJsFileUrl(v string) {
	o.MinifiedJsFileUrl = &v
}

// GetNumberOfFiles returns the NumberOfFiles field value if set, zero value otherwise.
func (o *JavaScriptMappingFileDto) GetNumberOfFiles() int32 {
	if o == nil || IsNil(o.NumberOfFiles) {
		var ret int32
		return ret
	}
	return *o.NumberOfFiles
}

// GetNumberOfFilesOk returns a tuple with the NumberOfFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaScriptMappingFileDto) GetNumberOfFilesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfFiles) {
		return nil, false
	}
	return o.NumberOfFiles, true
}

// HasNumberOfFiles returns a boolean if a field has been set.
func (o *JavaScriptMappingFileDto) HasNumberOfFiles() bool {
	if o != nil && !IsNil(o.NumberOfFiles) {
		return true
	}

	return false
}

// SetNumberOfFiles gets a reference to the given int32 and assigns it to the NumberOfFiles field.
func (o *JavaScriptMappingFileDto) SetNumberOfFiles(v int32) {
	o.NumberOfFiles = &v
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *JavaScriptMappingFileDto) GetPinned() bool {
	if o == nil || IsNil(o.Pinned) {
		var ret bool
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaScriptMappingFileDto) GetPinnedOk() (*bool, bool) {
	if o == nil || IsNil(o.Pinned) {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *JavaScriptMappingFileDto) HasPinned() bool {
	if o != nil && !IsNil(o.Pinned) {
		return true
	}

	return false
}

// SetPinned gets a reference to the given bool and assigns it to the Pinned field.
func (o *JavaScriptMappingFileDto) SetPinned(v bool) {
	o.Pinned = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *JavaScriptMappingFileDto) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaScriptMappingFileDto) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *JavaScriptMappingFileDto) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *JavaScriptMappingFileDto) SetSize(v int32) {
	o.Size = &v
}

// GetUploadTimestamp returns the UploadTimestamp field value if set, zero value otherwise.
func (o *JavaScriptMappingFileDto) GetUploadTimestamp() int64 {
	if o == nil || IsNil(o.UploadTimestamp) {
		var ret int64
		return ret
	}
	return *o.UploadTimestamp
}

// GetUploadTimestampOk returns a tuple with the UploadTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaScriptMappingFileDto) GetUploadTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.UploadTimestamp) {
		return nil, false
	}
	return o.UploadTimestamp, true
}

// HasUploadTimestamp returns a boolean if a field has been set.
func (o *JavaScriptMappingFileDto) HasUploadTimestamp() bool {
	if o != nil && !IsNil(o.UploadTimestamp) {
		return true
	}

	return false
}

// SetUploadTimestamp gets a reference to the given int64 and assigns it to the UploadTimestamp field.
func (o *JavaScriptMappingFileDto) SetUploadTimestamp(v int64) {
	o.UploadTimestamp = &v
}

// GetZipped returns the Zipped field value if set, zero value otherwise.
func (o *JavaScriptMappingFileDto) GetZipped() bool {
	if o == nil || IsNil(o.Zipped) {
		var ret bool
		return ret
	}
	return *o.Zipped
}

// GetZippedOk returns a tuple with the Zipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaScriptMappingFileDto) GetZippedOk() (*bool, bool) {
	if o == nil || IsNil(o.Zipped) {
		return nil, false
	}
	return o.Zipped, true
}

// HasZipped returns a boolean if a field has been set.
func (o *JavaScriptMappingFileDto) HasZipped() bool {
	if o != nil && !IsNil(o.Zipped) {
		return true
	}

	return false
}

// SetZipped gets a reference to the given bool and assigns it to the Zipped field.
func (o *JavaScriptMappingFileDto) SetZipped(v bool) {
	o.Zipped = &v
}

func (o JavaScriptMappingFileDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JavaScriptMappingFileDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FileType) {
		toSerialize["fileType"] = o.FileType
	}
	if !IsNil(o.MinifiedJsFileUrl) {
		toSerialize["minifiedJsFileUrl"] = o.MinifiedJsFileUrl
	}
	if !IsNil(o.NumberOfFiles) {
		toSerialize["numberOfFiles"] = o.NumberOfFiles
	}
	if !IsNil(o.Pinned) {
		toSerialize["pinned"] = o.Pinned
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.UploadTimestamp) {
		toSerialize["uploadTimestamp"] = o.UploadTimestamp
	}
	if !IsNil(o.Zipped) {
		toSerialize["zipped"] = o.Zipped
	}
	return toSerialize, nil
}

type NullableJavaScriptMappingFileDto struct {
	value *JavaScriptMappingFileDto
	isSet bool
}

func (v NullableJavaScriptMappingFileDto) Get() *JavaScriptMappingFileDto {
	return v.value
}

func (v *NullableJavaScriptMappingFileDto) Set(val *JavaScriptMappingFileDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJavaScriptMappingFileDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJavaScriptMappingFileDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJavaScriptMappingFileDto(val *JavaScriptMappingFileDto) *NullableJavaScriptMappingFileDto {
	return &NullableJavaScriptMappingFileDto{value: val, isSet: true}
}

func (v NullableJavaScriptMappingFileDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJavaScriptMappingFileDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


