/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ExecutionFullResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionFullResults{}

// ExecutionFullResults Contains extended monitor's execution details.
type ExecutionFullResults struct {
	// Error code.
	ErrorCode *string `json:"errorCode,omitempty"`
	// Number executed steps.
	ExecutionStepCount *int32 `json:"executionStepCount,omitempty"`
	// Details about the monitor's step execution.
	ExecutionSteps []ExecutionStep `json:"executionSteps,omitempty"`
	// Failed step name.
	FailedStepName *string `json:"failedStepName,omitempty"`
	// Failed step sequence id.
	FailedStepSequenceId *int32 `json:"failedStepSequenceId,omitempty"`
	// Failure message.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// Execution status.
	Status *string `json:"status,omitempty"`
}

// NewExecutionFullResults instantiates a new ExecutionFullResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionFullResults() *ExecutionFullResults {
	this := ExecutionFullResults{}
	return &this
}

// NewExecutionFullResultsWithDefaults instantiates a new ExecutionFullResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionFullResultsWithDefaults() *ExecutionFullResults {
	this := ExecutionFullResults{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ExecutionFullResults) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionFullResults) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ExecutionFullResults) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *ExecutionFullResults) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetExecutionStepCount returns the ExecutionStepCount field value if set, zero value otherwise.
func (o *ExecutionFullResults) GetExecutionStepCount() int32 {
	if o == nil || IsNil(o.ExecutionStepCount) {
		var ret int32
		return ret
	}
	return *o.ExecutionStepCount
}

// GetExecutionStepCountOk returns a tuple with the ExecutionStepCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionFullResults) GetExecutionStepCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecutionStepCount) {
		return nil, false
	}
	return o.ExecutionStepCount, true
}

// HasExecutionStepCount returns a boolean if a field has been set.
func (o *ExecutionFullResults) HasExecutionStepCount() bool {
	if o != nil && !IsNil(o.ExecutionStepCount) {
		return true
	}

	return false
}

// SetExecutionStepCount gets a reference to the given int32 and assigns it to the ExecutionStepCount field.
func (o *ExecutionFullResults) SetExecutionStepCount(v int32) {
	o.ExecutionStepCount = &v
}

// GetExecutionSteps returns the ExecutionSteps field value if set, zero value otherwise.
func (o *ExecutionFullResults) GetExecutionSteps() []ExecutionStep {
	if o == nil || IsNil(o.ExecutionSteps) {
		var ret []ExecutionStep
		return ret
	}
	return o.ExecutionSteps
}

// GetExecutionStepsOk returns a tuple with the ExecutionSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionFullResults) GetExecutionStepsOk() ([]ExecutionStep, bool) {
	if o == nil || IsNil(o.ExecutionSteps) {
		return nil, false
	}
	return o.ExecutionSteps, true
}

// HasExecutionSteps returns a boolean if a field has been set.
func (o *ExecutionFullResults) HasExecutionSteps() bool {
	if o != nil && !IsNil(o.ExecutionSteps) {
		return true
	}

	return false
}

// SetExecutionSteps gets a reference to the given []ExecutionStep and assigns it to the ExecutionSteps field.
func (o *ExecutionFullResults) SetExecutionSteps(v []ExecutionStep) {
	o.ExecutionSteps = v
}

// GetFailedStepName returns the FailedStepName field value if set, zero value otherwise.
func (o *ExecutionFullResults) GetFailedStepName() string {
	if o == nil || IsNil(o.FailedStepName) {
		var ret string
		return ret
	}
	return *o.FailedStepName
}

// GetFailedStepNameOk returns a tuple with the FailedStepName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionFullResults) GetFailedStepNameOk() (*string, bool) {
	if o == nil || IsNil(o.FailedStepName) {
		return nil, false
	}
	return o.FailedStepName, true
}

// HasFailedStepName returns a boolean if a field has been set.
func (o *ExecutionFullResults) HasFailedStepName() bool {
	if o != nil && !IsNil(o.FailedStepName) {
		return true
	}

	return false
}

// SetFailedStepName gets a reference to the given string and assigns it to the FailedStepName field.
func (o *ExecutionFullResults) SetFailedStepName(v string) {
	o.FailedStepName = &v
}

// GetFailedStepSequenceId returns the FailedStepSequenceId field value if set, zero value otherwise.
func (o *ExecutionFullResults) GetFailedStepSequenceId() int32 {
	if o == nil || IsNil(o.FailedStepSequenceId) {
		var ret int32
		return ret
	}
	return *o.FailedStepSequenceId
}

// GetFailedStepSequenceIdOk returns a tuple with the FailedStepSequenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionFullResults) GetFailedStepSequenceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedStepSequenceId) {
		return nil, false
	}
	return o.FailedStepSequenceId, true
}

// HasFailedStepSequenceId returns a boolean if a field has been set.
func (o *ExecutionFullResults) HasFailedStepSequenceId() bool {
	if o != nil && !IsNil(o.FailedStepSequenceId) {
		return true
	}

	return false
}

// SetFailedStepSequenceId gets a reference to the given int32 and assigns it to the FailedStepSequenceId field.
func (o *ExecutionFullResults) SetFailedStepSequenceId(v int32) {
	o.FailedStepSequenceId = &v
}

// GetFailureMessage returns the FailureMessage field value if set, zero value otherwise.
func (o *ExecutionFullResults) GetFailureMessage() string {
	if o == nil || IsNil(o.FailureMessage) {
		var ret string
		return ret
	}
	return *o.FailureMessage
}

// GetFailureMessageOk returns a tuple with the FailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionFullResults) GetFailureMessageOk() (*string, bool) {
	if o == nil || IsNil(o.FailureMessage) {
		return nil, false
	}
	return o.FailureMessage, true
}

// HasFailureMessage returns a boolean if a field has been set.
func (o *ExecutionFullResults) HasFailureMessage() bool {
	if o != nil && !IsNil(o.FailureMessage) {
		return true
	}

	return false
}

// SetFailureMessage gets a reference to the given string and assigns it to the FailureMessage field.
func (o *ExecutionFullResults) SetFailureMessage(v string) {
	o.FailureMessage = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExecutionFullResults) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionFullResults) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExecutionFullResults) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExecutionFullResults) SetStatus(v string) {
	o.Status = &v
}

func (o ExecutionFullResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionFullResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.ExecutionStepCount) {
		toSerialize["executionStepCount"] = o.ExecutionStepCount
	}
	if !IsNil(o.ExecutionSteps) {
		toSerialize["executionSteps"] = o.ExecutionSteps
	}
	if !IsNil(o.FailedStepName) {
		toSerialize["failedStepName"] = o.FailedStepName
	}
	if !IsNil(o.FailedStepSequenceId) {
		toSerialize["failedStepSequenceId"] = o.FailedStepSequenceId
	}
	if !IsNil(o.FailureMessage) {
		toSerialize["failureMessage"] = o.FailureMessage
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableExecutionFullResults struct {
	value *ExecutionFullResults
	isSet bool
}

func (v NullableExecutionFullResults) Get() *ExecutionFullResults {
	return v.value
}

func (v *NullableExecutionFullResults) Set(val *ExecutionFullResults) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionFullResults) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionFullResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionFullResults(val *ExecutionFullResults) *NullableExecutionFullResults {
	return &NullableExecutionFullResults{value: val, isSet: true}
}

func (v NullableExecutionFullResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionFullResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


