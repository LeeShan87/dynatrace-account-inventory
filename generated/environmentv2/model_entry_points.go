/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EntryPoints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntryPoints{}

// EntryPoints A list of entry points and a flag which indicates whether this list was truncated or not.
type EntryPoints struct {
	// A list of entry points.
	Items []EntryPoint `json:"items,omitempty"`
	// Indicates whether the list of entry points was truncated or not.
	Truncated *bool `json:"truncated,omitempty"`
}

// NewEntryPoints instantiates a new EntryPoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryPoints() *EntryPoints {
	this := EntryPoints{}
	return &this
}

// NewEntryPointsWithDefaults instantiates a new EntryPoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryPointsWithDefaults() *EntryPoints {
	this := EntryPoints{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *EntryPoints) GetItems() []EntryPoint {
	if o == nil || IsNil(o.Items) {
		var ret []EntryPoint
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryPoints) GetItemsOk() ([]EntryPoint, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *EntryPoints) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []EntryPoint and assigns it to the Items field.
func (o *EntryPoints) SetItems(v []EntryPoint) {
	o.Items = v
}

// GetTruncated returns the Truncated field value if set, zero value otherwise.
func (o *EntryPoints) GetTruncated() bool {
	if o == nil || IsNil(o.Truncated) {
		var ret bool
		return ret
	}
	return *o.Truncated
}

// GetTruncatedOk returns a tuple with the Truncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryPoints) GetTruncatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Truncated) {
		return nil, false
	}
	return o.Truncated, true
}

// HasTruncated returns a boolean if a field has been set.
func (o *EntryPoints) HasTruncated() bool {
	if o != nil && !IsNil(o.Truncated) {
		return true
	}

	return false
}

// SetTruncated gets a reference to the given bool and assigns it to the Truncated field.
func (o *EntryPoints) SetTruncated(v bool) {
	o.Truncated = &v
}

func (o EntryPoints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntryPoints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Truncated) {
		toSerialize["truncated"] = o.Truncated
	}
	return toSerialize, nil
}

type NullableEntryPoints struct {
	value *EntryPoints
	isSet bool
}

func (v NullableEntryPoints) Get() *EntryPoints {
	return v.value
}

func (v *NullableEntryPoints) Set(val *EntryPoints) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryPoints) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryPoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryPoints(val *EntryPoints) *NullableEntryPoints {
	return &NullableEntryPoints{value: val, isSet: true}
}

func (v NullableEntryPoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryPoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


