/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the UnitConversionResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnitConversionResult{}

// UnitConversionResult The result of a unit conversion.
type UnitConversionResult struct {
	// The result of the unit conversion.
	ResultValue float64 `json:"resultValue"`
	// The ID of the unit of this conversion result.
	UnitId string `json:"unitId"`
}

// NewUnitConversionResult instantiates a new UnitConversionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnitConversionResult(resultValue float64, unitId string) *UnitConversionResult {
	this := UnitConversionResult{}
	this.ResultValue = resultValue
	this.UnitId = unitId
	return &this
}

// NewUnitConversionResultWithDefaults instantiates a new UnitConversionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnitConversionResultWithDefaults() *UnitConversionResult {
	this := UnitConversionResult{}
	return &this
}

// GetResultValue returns the ResultValue field value
func (o *UnitConversionResult) GetResultValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ResultValue
}

// GetResultValueOk returns a tuple with the ResultValue field value
// and a boolean to check if the value has been set.
func (o *UnitConversionResult) GetResultValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultValue, true
}

// SetResultValue sets field value
func (o *UnitConversionResult) SetResultValue(v float64) {
	o.ResultValue = v
}

// GetUnitId returns the UnitId field value
func (o *UnitConversionResult) GetUnitId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitId
}

// GetUnitIdOk returns a tuple with the UnitId field value
// and a boolean to check if the value has been set.
func (o *UnitConversionResult) GetUnitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitId, true
}

// SetUnitId sets field value
func (o *UnitConversionResult) SetUnitId(v string) {
	o.UnitId = v
}

func (o UnitConversionResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnitConversionResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resultValue"] = o.ResultValue
	toSerialize["unitId"] = o.UnitId
	return toSerialize, nil
}

type NullableUnitConversionResult struct {
	value *UnitConversionResult
	isSet bool
}

func (v NullableUnitConversionResult) Get() *UnitConversionResult {
	return v.value
}

func (v *NullableUnitConversionResult) Set(val *UnitConversionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUnitConversionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUnitConversionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnitConversionResult(val *UnitConversionResult) *NullableUnitConversionResult {
	return &NullableUnitConversionResult{value: val, isSet: true}
}

func (v NullableUnitConversionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnitConversionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


