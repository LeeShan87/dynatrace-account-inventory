/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ModificationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModificationInfo{}

// ModificationInfo The modification info for a single updatable setting.
type ModificationInfo struct {
	// If settings value can be deleted
	Deletable *bool `json:"deletable,omitempty"`
	// If non-moveable settings value is in the first group of non-moveable settings, or in the last (start or end of list)
	First *bool `json:"first,omitempty"`
	// If settings value can be modified
	Modifiable *bool `json:"modifiable,omitempty"`
	// Property paths which are modifiable, regardless of the state of `modifiable`
	ModifiablePaths []string `json:"modifiablePaths,omitempty"`
	// If settings value can be moved/reordered. Only applicable for ordered list schema
	Movable *bool `json:"movable,omitempty"`
	// Property paths which are not modifiable, when `modifiable` is true
	NonModifiablePaths []string `json:"nonModifiablePaths,omitempty"`
}

// NewModificationInfo instantiates a new ModificationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModificationInfo() *ModificationInfo {
	this := ModificationInfo{}
	return &this
}

// NewModificationInfoWithDefaults instantiates a new ModificationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModificationInfoWithDefaults() *ModificationInfo {
	this := ModificationInfo{}
	return &this
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *ModificationInfo) GetDeletable() bool {
	if o == nil || IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModificationInfo) GetDeletableOk() (*bool, bool) {
	if o == nil || IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// HasDeletable returns a boolean if a field has been set.
func (o *ModificationInfo) HasDeletable() bool {
	if o != nil && !IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *ModificationInfo) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetFirst returns the First field value if set, zero value otherwise.
func (o *ModificationInfo) GetFirst() bool {
	if o == nil || IsNil(o.First) {
		var ret bool
		return ret
	}
	return *o.First
}

// GetFirstOk returns a tuple with the First field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModificationInfo) GetFirstOk() (*bool, bool) {
	if o == nil || IsNil(o.First) {
		return nil, false
	}
	return o.First, true
}

// HasFirst returns a boolean if a field has been set.
func (o *ModificationInfo) HasFirst() bool {
	if o != nil && !IsNil(o.First) {
		return true
	}

	return false
}

// SetFirst gets a reference to the given bool and assigns it to the First field.
func (o *ModificationInfo) SetFirst(v bool) {
	o.First = &v
}

// GetModifiable returns the Modifiable field value if set, zero value otherwise.
func (o *ModificationInfo) GetModifiable() bool {
	if o == nil || IsNil(o.Modifiable) {
		var ret bool
		return ret
	}
	return *o.Modifiable
}

// GetModifiableOk returns a tuple with the Modifiable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModificationInfo) GetModifiableOk() (*bool, bool) {
	if o == nil || IsNil(o.Modifiable) {
		return nil, false
	}
	return o.Modifiable, true
}

// HasModifiable returns a boolean if a field has been set.
func (o *ModificationInfo) HasModifiable() bool {
	if o != nil && !IsNil(o.Modifiable) {
		return true
	}

	return false
}

// SetModifiable gets a reference to the given bool and assigns it to the Modifiable field.
func (o *ModificationInfo) SetModifiable(v bool) {
	o.Modifiable = &v
}

// GetModifiablePaths returns the ModifiablePaths field value if set, zero value otherwise.
func (o *ModificationInfo) GetModifiablePaths() []string {
	if o == nil || IsNil(o.ModifiablePaths) {
		var ret []string
		return ret
	}
	return o.ModifiablePaths
}

// GetModifiablePathsOk returns a tuple with the ModifiablePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModificationInfo) GetModifiablePathsOk() ([]string, bool) {
	if o == nil || IsNil(o.ModifiablePaths) {
		return nil, false
	}
	return o.ModifiablePaths, true
}

// HasModifiablePaths returns a boolean if a field has been set.
func (o *ModificationInfo) HasModifiablePaths() bool {
	if o != nil && !IsNil(o.ModifiablePaths) {
		return true
	}

	return false
}

// SetModifiablePaths gets a reference to the given []string and assigns it to the ModifiablePaths field.
func (o *ModificationInfo) SetModifiablePaths(v []string) {
	o.ModifiablePaths = v
}

// GetMovable returns the Movable field value if set, zero value otherwise.
func (o *ModificationInfo) GetMovable() bool {
	if o == nil || IsNil(o.Movable) {
		var ret bool
		return ret
	}
	return *o.Movable
}

// GetMovableOk returns a tuple with the Movable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModificationInfo) GetMovableOk() (*bool, bool) {
	if o == nil || IsNil(o.Movable) {
		return nil, false
	}
	return o.Movable, true
}

// HasMovable returns a boolean if a field has been set.
func (o *ModificationInfo) HasMovable() bool {
	if o != nil && !IsNil(o.Movable) {
		return true
	}

	return false
}

// SetMovable gets a reference to the given bool and assigns it to the Movable field.
func (o *ModificationInfo) SetMovable(v bool) {
	o.Movable = &v
}

// GetNonModifiablePaths returns the NonModifiablePaths field value if set, zero value otherwise.
func (o *ModificationInfo) GetNonModifiablePaths() []string {
	if o == nil || IsNil(o.NonModifiablePaths) {
		var ret []string
		return ret
	}
	return o.NonModifiablePaths
}

// GetNonModifiablePathsOk returns a tuple with the NonModifiablePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModificationInfo) GetNonModifiablePathsOk() ([]string, bool) {
	if o == nil || IsNil(o.NonModifiablePaths) {
		return nil, false
	}
	return o.NonModifiablePaths, true
}

// HasNonModifiablePaths returns a boolean if a field has been set.
func (o *ModificationInfo) HasNonModifiablePaths() bool {
	if o != nil && !IsNil(o.NonModifiablePaths) {
		return true
	}

	return false
}

// SetNonModifiablePaths gets a reference to the given []string and assigns it to the NonModifiablePaths field.
func (o *ModificationInfo) SetNonModifiablePaths(v []string) {
	o.NonModifiablePaths = v
}

func (o ModificationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModificationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !IsNil(o.First) {
		toSerialize["first"] = o.First
	}
	if !IsNil(o.Modifiable) {
		toSerialize["modifiable"] = o.Modifiable
	}
	if !IsNil(o.ModifiablePaths) {
		toSerialize["modifiablePaths"] = o.ModifiablePaths
	}
	if !IsNil(o.Movable) {
		toSerialize["movable"] = o.Movable
	}
	if !IsNil(o.NonModifiablePaths) {
		toSerialize["nonModifiablePaths"] = o.NonModifiablePaths
	}
	return toSerialize, nil
}

type NullableModificationInfo struct {
	value *ModificationInfo
	isSet bool
}

func (v NullableModificationInfo) Get() *ModificationInfo {
	return v.value
}

func (v *NullableModificationInfo) Set(val *ModificationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModificationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModificationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModificationInfo(val *ModificationInfo) *NullableModificationInfo {
	return &NullableModificationInfo{value: val, isSet: true}
}

func (v NullableModificationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModificationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


