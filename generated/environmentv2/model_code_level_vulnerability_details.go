/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the CodeLevelVulnerabilityDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CodeLevelVulnerabilityDetails{}

// CodeLevelVulnerabilityDetails The details of a code-level vulnerability.
type CodeLevelVulnerabilityDetails struct {
	// The list of encoded MEIdentifier of the process groups.
	ProcessGroupIds []string `json:"processGroupIds,omitempty"`
	// The list of affected process groups.
	ProcessGroups []string `json:"processGroups,omitempty"`
	// The code location of the vulnerability without package and parameter.
	ShortVulnerabilityLocation *string `json:"shortVulnerabilityLocation,omitempty"`
	// The type of code level vulnerability.
	Type *string `json:"type,omitempty"`
	// The code location of the vulnerability.
	VulnerabilityLocation *string `json:"vulnerabilityLocation,omitempty"`
	// The vulnerable function of the vulnerability.
	VulnerableFunction *string `json:"vulnerableFunction,omitempty"`
	VulnerableFunctionInput *VulnerableFunctionInput `json:"vulnerableFunctionInput,omitempty"`
}

// NewCodeLevelVulnerabilityDetails instantiates a new CodeLevelVulnerabilityDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeLevelVulnerabilityDetails() *CodeLevelVulnerabilityDetails {
	this := CodeLevelVulnerabilityDetails{}
	return &this
}

// NewCodeLevelVulnerabilityDetailsWithDefaults instantiates a new CodeLevelVulnerabilityDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeLevelVulnerabilityDetailsWithDefaults() *CodeLevelVulnerabilityDetails {
	this := CodeLevelVulnerabilityDetails{}
	return &this
}

// GetProcessGroupIds returns the ProcessGroupIds field value if set, zero value otherwise.
func (o *CodeLevelVulnerabilityDetails) GetProcessGroupIds() []string {
	if o == nil || IsNil(o.ProcessGroupIds) {
		var ret []string
		return ret
	}
	return o.ProcessGroupIds
}

// GetProcessGroupIdsOk returns a tuple with the ProcessGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLevelVulnerabilityDetails) GetProcessGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessGroupIds) {
		return nil, false
	}
	return o.ProcessGroupIds, true
}

// HasProcessGroupIds returns a boolean if a field has been set.
func (o *CodeLevelVulnerabilityDetails) HasProcessGroupIds() bool {
	if o != nil && !IsNil(o.ProcessGroupIds) {
		return true
	}

	return false
}

// SetProcessGroupIds gets a reference to the given []string and assigns it to the ProcessGroupIds field.
func (o *CodeLevelVulnerabilityDetails) SetProcessGroupIds(v []string) {
	o.ProcessGroupIds = v
}

// GetProcessGroups returns the ProcessGroups field value if set, zero value otherwise.
func (o *CodeLevelVulnerabilityDetails) GetProcessGroups() []string {
	if o == nil || IsNil(o.ProcessGroups) {
		var ret []string
		return ret
	}
	return o.ProcessGroups
}

// GetProcessGroupsOk returns a tuple with the ProcessGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLevelVulnerabilityDetails) GetProcessGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessGroups) {
		return nil, false
	}
	return o.ProcessGroups, true
}

// HasProcessGroups returns a boolean if a field has been set.
func (o *CodeLevelVulnerabilityDetails) HasProcessGroups() bool {
	if o != nil && !IsNil(o.ProcessGroups) {
		return true
	}

	return false
}

// SetProcessGroups gets a reference to the given []string and assigns it to the ProcessGroups field.
func (o *CodeLevelVulnerabilityDetails) SetProcessGroups(v []string) {
	o.ProcessGroups = v
}

// GetShortVulnerabilityLocation returns the ShortVulnerabilityLocation field value if set, zero value otherwise.
func (o *CodeLevelVulnerabilityDetails) GetShortVulnerabilityLocation() string {
	if o == nil || IsNil(o.ShortVulnerabilityLocation) {
		var ret string
		return ret
	}
	return *o.ShortVulnerabilityLocation
}

// GetShortVulnerabilityLocationOk returns a tuple with the ShortVulnerabilityLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLevelVulnerabilityDetails) GetShortVulnerabilityLocationOk() (*string, bool) {
	if o == nil || IsNil(o.ShortVulnerabilityLocation) {
		return nil, false
	}
	return o.ShortVulnerabilityLocation, true
}

// HasShortVulnerabilityLocation returns a boolean if a field has been set.
func (o *CodeLevelVulnerabilityDetails) HasShortVulnerabilityLocation() bool {
	if o != nil && !IsNil(o.ShortVulnerabilityLocation) {
		return true
	}

	return false
}

// SetShortVulnerabilityLocation gets a reference to the given string and assigns it to the ShortVulnerabilityLocation field.
func (o *CodeLevelVulnerabilityDetails) SetShortVulnerabilityLocation(v string) {
	o.ShortVulnerabilityLocation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CodeLevelVulnerabilityDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLevelVulnerabilityDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CodeLevelVulnerabilityDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CodeLevelVulnerabilityDetails) SetType(v string) {
	o.Type = &v
}

// GetVulnerabilityLocation returns the VulnerabilityLocation field value if set, zero value otherwise.
func (o *CodeLevelVulnerabilityDetails) GetVulnerabilityLocation() string {
	if o == nil || IsNil(o.VulnerabilityLocation) {
		var ret string
		return ret
	}
	return *o.VulnerabilityLocation
}

// GetVulnerabilityLocationOk returns a tuple with the VulnerabilityLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLevelVulnerabilityDetails) GetVulnerabilityLocationOk() (*string, bool) {
	if o == nil || IsNil(o.VulnerabilityLocation) {
		return nil, false
	}
	return o.VulnerabilityLocation, true
}

// HasVulnerabilityLocation returns a boolean if a field has been set.
func (o *CodeLevelVulnerabilityDetails) HasVulnerabilityLocation() bool {
	if o != nil && !IsNil(o.VulnerabilityLocation) {
		return true
	}

	return false
}

// SetVulnerabilityLocation gets a reference to the given string and assigns it to the VulnerabilityLocation field.
func (o *CodeLevelVulnerabilityDetails) SetVulnerabilityLocation(v string) {
	o.VulnerabilityLocation = &v
}

// GetVulnerableFunction returns the VulnerableFunction field value if set, zero value otherwise.
func (o *CodeLevelVulnerabilityDetails) GetVulnerableFunction() string {
	if o == nil || IsNil(o.VulnerableFunction) {
		var ret string
		return ret
	}
	return *o.VulnerableFunction
}

// GetVulnerableFunctionOk returns a tuple with the VulnerableFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLevelVulnerabilityDetails) GetVulnerableFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.VulnerableFunction) {
		return nil, false
	}
	return o.VulnerableFunction, true
}

// HasVulnerableFunction returns a boolean if a field has been set.
func (o *CodeLevelVulnerabilityDetails) HasVulnerableFunction() bool {
	if o != nil && !IsNil(o.VulnerableFunction) {
		return true
	}

	return false
}

// SetVulnerableFunction gets a reference to the given string and assigns it to the VulnerableFunction field.
func (o *CodeLevelVulnerabilityDetails) SetVulnerableFunction(v string) {
	o.VulnerableFunction = &v
}

// GetVulnerableFunctionInput returns the VulnerableFunctionInput field value if set, zero value otherwise.
func (o *CodeLevelVulnerabilityDetails) GetVulnerableFunctionInput() VulnerableFunctionInput {
	if o == nil || IsNil(o.VulnerableFunctionInput) {
		var ret VulnerableFunctionInput
		return ret
	}
	return *o.VulnerableFunctionInput
}

// GetVulnerableFunctionInputOk returns a tuple with the VulnerableFunctionInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLevelVulnerabilityDetails) GetVulnerableFunctionInputOk() (*VulnerableFunctionInput, bool) {
	if o == nil || IsNil(o.VulnerableFunctionInput) {
		return nil, false
	}
	return o.VulnerableFunctionInput, true
}

// HasVulnerableFunctionInput returns a boolean if a field has been set.
func (o *CodeLevelVulnerabilityDetails) HasVulnerableFunctionInput() bool {
	if o != nil && !IsNil(o.VulnerableFunctionInput) {
		return true
	}

	return false
}

// SetVulnerableFunctionInput gets a reference to the given VulnerableFunctionInput and assigns it to the VulnerableFunctionInput field.
func (o *CodeLevelVulnerabilityDetails) SetVulnerableFunctionInput(v VulnerableFunctionInput) {
	o.VulnerableFunctionInput = &v
}

func (o CodeLevelVulnerabilityDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodeLevelVulnerabilityDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProcessGroupIds) {
		toSerialize["processGroupIds"] = o.ProcessGroupIds
	}
	if !IsNil(o.ProcessGroups) {
		toSerialize["processGroups"] = o.ProcessGroups
	}
	if !IsNil(o.ShortVulnerabilityLocation) {
		toSerialize["shortVulnerabilityLocation"] = o.ShortVulnerabilityLocation
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VulnerabilityLocation) {
		toSerialize["vulnerabilityLocation"] = o.VulnerabilityLocation
	}
	if !IsNil(o.VulnerableFunction) {
		toSerialize["vulnerableFunction"] = o.VulnerableFunction
	}
	if !IsNil(o.VulnerableFunctionInput) {
		toSerialize["vulnerableFunctionInput"] = o.VulnerableFunctionInput
	}
	return toSerialize, nil
}

type NullableCodeLevelVulnerabilityDetails struct {
	value *CodeLevelVulnerabilityDetails
	isSet bool
}

func (v NullableCodeLevelVulnerabilityDetails) Get() *CodeLevelVulnerabilityDetails {
	return v.value
}

func (v *NullableCodeLevelVulnerabilityDetails) Set(val *CodeLevelVulnerabilityDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeLevelVulnerabilityDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeLevelVulnerabilityDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeLevelVulnerabilityDetails(val *CodeLevelVulnerabilityDetails) *NullableCodeLevelVulnerabilityDetails {
	return &NullableCodeLevelVulnerabilityDetails{value: val, isSet: true}
}

func (v NullableCodeLevelVulnerabilityDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeLevelVulnerabilityDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


