/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RegionWithCities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionWithCities{}

// RegionWithCities Information about a country's region and its cities.
type RegionWithCities struct {
	// The list of cities in the region.
	Cities []City `json:"cities,omitempty"`
	// The number of cities in a region of a country.
	CityCount *int32 `json:"cityCount,omitempty"`
	// The code of the region.
	Code *string `json:"code,omitempty"`
	// The name of the region.
	Name *string `json:"name,omitempty"`
}

// NewRegionWithCities instantiates a new RegionWithCities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionWithCities() *RegionWithCities {
	this := RegionWithCities{}
	return &this
}

// NewRegionWithCitiesWithDefaults instantiates a new RegionWithCities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionWithCitiesWithDefaults() *RegionWithCities {
	this := RegionWithCities{}
	return &this
}

// GetCities returns the Cities field value if set, zero value otherwise.
func (o *RegionWithCities) GetCities() []City {
	if o == nil || IsNil(o.Cities) {
		var ret []City
		return ret
	}
	return o.Cities
}

// GetCitiesOk returns a tuple with the Cities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionWithCities) GetCitiesOk() ([]City, bool) {
	if o == nil || IsNil(o.Cities) {
		return nil, false
	}
	return o.Cities, true
}

// HasCities returns a boolean if a field has been set.
func (o *RegionWithCities) HasCities() bool {
	if o != nil && !IsNil(o.Cities) {
		return true
	}

	return false
}

// SetCities gets a reference to the given []City and assigns it to the Cities field.
func (o *RegionWithCities) SetCities(v []City) {
	o.Cities = v
}

// GetCityCount returns the CityCount field value if set, zero value otherwise.
func (o *RegionWithCities) GetCityCount() int32 {
	if o == nil || IsNil(o.CityCount) {
		var ret int32
		return ret
	}
	return *o.CityCount
}

// GetCityCountOk returns a tuple with the CityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionWithCities) GetCityCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CityCount) {
		return nil, false
	}
	return o.CityCount, true
}

// HasCityCount returns a boolean if a field has been set.
func (o *RegionWithCities) HasCityCount() bool {
	if o != nil && !IsNil(o.CityCount) {
		return true
	}

	return false
}

// SetCityCount gets a reference to the given int32 and assigns it to the CityCount field.
func (o *RegionWithCities) SetCityCount(v int32) {
	o.CityCount = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RegionWithCities) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionWithCities) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RegionWithCities) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RegionWithCities) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegionWithCities) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionWithCities) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegionWithCities) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegionWithCities) SetName(v string) {
	o.Name = &v
}

func (o RegionWithCities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionWithCities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cities) {
		toSerialize["cities"] = o.Cities
	}
	if !IsNil(o.CityCount) {
		toSerialize["cityCount"] = o.CityCount
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableRegionWithCities struct {
	value *RegionWithCities
	isSet bool
}

func (v NullableRegionWithCities) Get() *RegionWithCities {
	return v.value
}

func (v *NullableRegionWithCities) Set(val *RegionWithCities) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionWithCities) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionWithCities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionWithCities(val *RegionWithCities) *NullableRegionWithCities {
	return &NullableRegionWithCities{value: val, isSet: true}
}

func (v NullableRegionWithCities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionWithCities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


