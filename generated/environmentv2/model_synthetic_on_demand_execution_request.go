/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SyntheticOnDemandExecutionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntheticOnDemandExecutionRequest{}

// SyntheticOnDemandExecutionRequest Contains parameters for the on-demand execution of monitors identified by tags, applications, or services.
type SyntheticOnDemandExecutionRequest struct {
	// If true, the execution will fail in case of performance issue.
	FailOnPerformanceIssue *bool `json:"failOnPerformanceIssue,omitempty"`
	// Applies to HTTP monitors only. If true, the execution will fail in case of an SSL certificate expiration warning or if the certificate is missing.
	FailOnSslWarning *bool `json:"failOnSslWarning,omitempty"`
	Group *SyntheticOnDemandExecutionRequestGroup `json:"group,omitempty"`
	// String to string map of metadata properties for execution
	Metadata *map[string]string `json:"metadata,omitempty"`
	// List of monitors to be triggered.
	Monitors []SyntheticOnDemandExecutionRequestMonitor `json:"monitors,omitempty"`
	// The execution's processing mode
	ProcessingMode *string `json:"processingMode,omitempty"`
	// If true, no executions will be scheduled if a problem occurs.
	StopOnProblem *bool `json:"stopOnProblem,omitempty"`
	// If true, the screenshots will be taken during the execution of a browser monitor.
	TakeScreenshotsOnSuccess *bool `json:"takeScreenshotsOnSuccess,omitempty"`
}

// NewSyntheticOnDemandExecutionRequest instantiates a new SyntheticOnDemandExecutionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticOnDemandExecutionRequest() *SyntheticOnDemandExecutionRequest {
	this := SyntheticOnDemandExecutionRequest{}
	var failOnPerformanceIssue bool = true
	this.FailOnPerformanceIssue = &failOnPerformanceIssue
	var failOnSslWarning bool = true
	this.FailOnSslWarning = &failOnSslWarning
	var processingMode string = "STANDARD"
	this.ProcessingMode = &processingMode
	var stopOnProblem bool = false
	this.StopOnProblem = &stopOnProblem
	var takeScreenshotsOnSuccess bool = false
	this.TakeScreenshotsOnSuccess = &takeScreenshotsOnSuccess
	return &this
}

// NewSyntheticOnDemandExecutionRequestWithDefaults instantiates a new SyntheticOnDemandExecutionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticOnDemandExecutionRequestWithDefaults() *SyntheticOnDemandExecutionRequest {
	this := SyntheticOnDemandExecutionRequest{}
	var failOnPerformanceIssue bool = true
	this.FailOnPerformanceIssue = &failOnPerformanceIssue
	var failOnSslWarning bool = true
	this.FailOnSslWarning = &failOnSslWarning
	var processingMode string = "STANDARD"
	this.ProcessingMode = &processingMode
	var stopOnProblem bool = false
	this.StopOnProblem = &stopOnProblem
	var takeScreenshotsOnSuccess bool = false
	this.TakeScreenshotsOnSuccess = &takeScreenshotsOnSuccess
	return &this
}

// GetFailOnPerformanceIssue returns the FailOnPerformanceIssue field value if set, zero value otherwise.
func (o *SyntheticOnDemandExecutionRequest) GetFailOnPerformanceIssue() bool {
	if o == nil || IsNil(o.FailOnPerformanceIssue) {
		var ret bool
		return ret
	}
	return *o.FailOnPerformanceIssue
}

// GetFailOnPerformanceIssueOk returns a tuple with the FailOnPerformanceIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandExecutionRequest) GetFailOnPerformanceIssueOk() (*bool, bool) {
	if o == nil || IsNil(o.FailOnPerformanceIssue) {
		return nil, false
	}
	return o.FailOnPerformanceIssue, true
}

// HasFailOnPerformanceIssue returns a boolean if a field has been set.
func (o *SyntheticOnDemandExecutionRequest) HasFailOnPerformanceIssue() bool {
	if o != nil && !IsNil(o.FailOnPerformanceIssue) {
		return true
	}

	return false
}

// SetFailOnPerformanceIssue gets a reference to the given bool and assigns it to the FailOnPerformanceIssue field.
func (o *SyntheticOnDemandExecutionRequest) SetFailOnPerformanceIssue(v bool) {
	o.FailOnPerformanceIssue = &v
}

// GetFailOnSslWarning returns the FailOnSslWarning field value if set, zero value otherwise.
func (o *SyntheticOnDemandExecutionRequest) GetFailOnSslWarning() bool {
	if o == nil || IsNil(o.FailOnSslWarning) {
		var ret bool
		return ret
	}
	return *o.FailOnSslWarning
}

// GetFailOnSslWarningOk returns a tuple with the FailOnSslWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandExecutionRequest) GetFailOnSslWarningOk() (*bool, bool) {
	if o == nil || IsNil(o.FailOnSslWarning) {
		return nil, false
	}
	return o.FailOnSslWarning, true
}

// HasFailOnSslWarning returns a boolean if a field has been set.
func (o *SyntheticOnDemandExecutionRequest) HasFailOnSslWarning() bool {
	if o != nil && !IsNil(o.FailOnSslWarning) {
		return true
	}

	return false
}

// SetFailOnSslWarning gets a reference to the given bool and assigns it to the FailOnSslWarning field.
func (o *SyntheticOnDemandExecutionRequest) SetFailOnSslWarning(v bool) {
	o.FailOnSslWarning = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *SyntheticOnDemandExecutionRequest) GetGroup() SyntheticOnDemandExecutionRequestGroup {
	if o == nil || IsNil(o.Group) {
		var ret SyntheticOnDemandExecutionRequestGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandExecutionRequest) GetGroupOk() (*SyntheticOnDemandExecutionRequestGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *SyntheticOnDemandExecutionRequest) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given SyntheticOnDemandExecutionRequestGroup and assigns it to the Group field.
func (o *SyntheticOnDemandExecutionRequest) SetGroup(v SyntheticOnDemandExecutionRequestGroup) {
	o.Group = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SyntheticOnDemandExecutionRequest) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandExecutionRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SyntheticOnDemandExecutionRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *SyntheticOnDemandExecutionRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetMonitors returns the Monitors field value if set, zero value otherwise.
func (o *SyntheticOnDemandExecutionRequest) GetMonitors() []SyntheticOnDemandExecutionRequestMonitor {
	if o == nil || IsNil(o.Monitors) {
		var ret []SyntheticOnDemandExecutionRequestMonitor
		return ret
	}
	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandExecutionRequest) GetMonitorsOk() ([]SyntheticOnDemandExecutionRequestMonitor, bool) {
	if o == nil || IsNil(o.Monitors) {
		return nil, false
	}
	return o.Monitors, true
}

// HasMonitors returns a boolean if a field has been set.
func (o *SyntheticOnDemandExecutionRequest) HasMonitors() bool {
	if o != nil && !IsNil(o.Monitors) {
		return true
	}

	return false
}

// SetMonitors gets a reference to the given []SyntheticOnDemandExecutionRequestMonitor and assigns it to the Monitors field.
func (o *SyntheticOnDemandExecutionRequest) SetMonitors(v []SyntheticOnDemandExecutionRequestMonitor) {
	o.Monitors = v
}

// GetProcessingMode returns the ProcessingMode field value if set, zero value otherwise.
func (o *SyntheticOnDemandExecutionRequest) GetProcessingMode() string {
	if o == nil || IsNil(o.ProcessingMode) {
		var ret string
		return ret
	}
	return *o.ProcessingMode
}

// GetProcessingModeOk returns a tuple with the ProcessingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandExecutionRequest) GetProcessingModeOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingMode) {
		return nil, false
	}
	return o.ProcessingMode, true
}

// HasProcessingMode returns a boolean if a field has been set.
func (o *SyntheticOnDemandExecutionRequest) HasProcessingMode() bool {
	if o != nil && !IsNil(o.ProcessingMode) {
		return true
	}

	return false
}

// SetProcessingMode gets a reference to the given string and assigns it to the ProcessingMode field.
func (o *SyntheticOnDemandExecutionRequest) SetProcessingMode(v string) {
	o.ProcessingMode = &v
}

// GetStopOnProblem returns the StopOnProblem field value if set, zero value otherwise.
func (o *SyntheticOnDemandExecutionRequest) GetStopOnProblem() bool {
	if o == nil || IsNil(o.StopOnProblem) {
		var ret bool
		return ret
	}
	return *o.StopOnProblem
}

// GetStopOnProblemOk returns a tuple with the StopOnProblem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandExecutionRequest) GetStopOnProblemOk() (*bool, bool) {
	if o == nil || IsNil(o.StopOnProblem) {
		return nil, false
	}
	return o.StopOnProblem, true
}

// HasStopOnProblem returns a boolean if a field has been set.
func (o *SyntheticOnDemandExecutionRequest) HasStopOnProblem() bool {
	if o != nil && !IsNil(o.StopOnProblem) {
		return true
	}

	return false
}

// SetStopOnProblem gets a reference to the given bool and assigns it to the StopOnProblem field.
func (o *SyntheticOnDemandExecutionRequest) SetStopOnProblem(v bool) {
	o.StopOnProblem = &v
}

// GetTakeScreenshotsOnSuccess returns the TakeScreenshotsOnSuccess field value if set, zero value otherwise.
func (o *SyntheticOnDemandExecutionRequest) GetTakeScreenshotsOnSuccess() bool {
	if o == nil || IsNil(o.TakeScreenshotsOnSuccess) {
		var ret bool
		return ret
	}
	return *o.TakeScreenshotsOnSuccess
}

// GetTakeScreenshotsOnSuccessOk returns a tuple with the TakeScreenshotsOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandExecutionRequest) GetTakeScreenshotsOnSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.TakeScreenshotsOnSuccess) {
		return nil, false
	}
	return o.TakeScreenshotsOnSuccess, true
}

// HasTakeScreenshotsOnSuccess returns a boolean if a field has been set.
func (o *SyntheticOnDemandExecutionRequest) HasTakeScreenshotsOnSuccess() bool {
	if o != nil && !IsNil(o.TakeScreenshotsOnSuccess) {
		return true
	}

	return false
}

// SetTakeScreenshotsOnSuccess gets a reference to the given bool and assigns it to the TakeScreenshotsOnSuccess field.
func (o *SyntheticOnDemandExecutionRequest) SetTakeScreenshotsOnSuccess(v bool) {
	o.TakeScreenshotsOnSuccess = &v
}

func (o SyntheticOnDemandExecutionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntheticOnDemandExecutionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FailOnPerformanceIssue) {
		toSerialize["failOnPerformanceIssue"] = o.FailOnPerformanceIssue
	}
	if !IsNil(o.FailOnSslWarning) {
		toSerialize["failOnSslWarning"] = o.FailOnSslWarning
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Monitors) {
		toSerialize["monitors"] = o.Monitors
	}
	if !IsNil(o.ProcessingMode) {
		toSerialize["processingMode"] = o.ProcessingMode
	}
	if !IsNil(o.StopOnProblem) {
		toSerialize["stopOnProblem"] = o.StopOnProblem
	}
	if !IsNil(o.TakeScreenshotsOnSuccess) {
		toSerialize["takeScreenshotsOnSuccess"] = o.TakeScreenshotsOnSuccess
	}
	return toSerialize, nil
}

type NullableSyntheticOnDemandExecutionRequest struct {
	value *SyntheticOnDemandExecutionRequest
	isSet bool
}

func (v NullableSyntheticOnDemandExecutionRequest) Get() *SyntheticOnDemandExecutionRequest {
	return v.value
}

func (v *NullableSyntheticOnDemandExecutionRequest) Set(val *SyntheticOnDemandExecutionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticOnDemandExecutionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticOnDemandExecutionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticOnDemandExecutionRequest(val *SyntheticOnDemandExecutionRequest) *NullableSyntheticOnDemandExecutionRequest {
	return &NullableSyntheticOnDemandExecutionRequest{value: val, isSet: true}
}

func (v NullableSyntheticOnDemandExecutionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticOnDemandExecutionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


