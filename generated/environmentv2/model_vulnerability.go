/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Vulnerability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vulnerability{}

// Vulnerability Describes the exploited vulnerability.
type Vulnerability struct {
	CodeLocation *CodeLocation `json:"codeLocation,omitempty"`
	// The display name of the vulnerability.
	DisplayName *string `json:"displayName,omitempty"`
	// The id of the vulnerability.
	VulnerabilityId *string `json:"vulnerabilityId,omitempty"`
	VulnerableFunction *FunctionDefinition `json:"vulnerableFunction,omitempty"`
	VulnerableFunctionInput *VulnerableFunctionInput `json:"vulnerableFunctionInput,omitempty"`
}

// NewVulnerability instantiates a new Vulnerability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerability() *Vulnerability {
	this := Vulnerability{}
	return &this
}

// NewVulnerabilityWithDefaults instantiates a new Vulnerability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityWithDefaults() *Vulnerability {
	this := Vulnerability{}
	return &this
}

// GetCodeLocation returns the CodeLocation field value if set, zero value otherwise.
func (o *Vulnerability) GetCodeLocation() CodeLocation {
	if o == nil || IsNil(o.CodeLocation) {
		var ret CodeLocation
		return ret
	}
	return *o.CodeLocation
}

// GetCodeLocationOk returns a tuple with the CodeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetCodeLocationOk() (*CodeLocation, bool) {
	if o == nil || IsNil(o.CodeLocation) {
		return nil, false
	}
	return o.CodeLocation, true
}

// HasCodeLocation returns a boolean if a field has been set.
func (o *Vulnerability) HasCodeLocation() bool {
	if o != nil && !IsNil(o.CodeLocation) {
		return true
	}

	return false
}

// SetCodeLocation gets a reference to the given CodeLocation and assigns it to the CodeLocation field.
func (o *Vulnerability) SetCodeLocation(v CodeLocation) {
	o.CodeLocation = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Vulnerability) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Vulnerability) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Vulnerability) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetVulnerabilityId returns the VulnerabilityId field value if set, zero value otherwise.
func (o *Vulnerability) GetVulnerabilityId() string {
	if o == nil || IsNil(o.VulnerabilityId) {
		var ret string
		return ret
	}
	return *o.VulnerabilityId
}

// GetVulnerabilityIdOk returns a tuple with the VulnerabilityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetVulnerabilityIdOk() (*string, bool) {
	if o == nil || IsNil(o.VulnerabilityId) {
		return nil, false
	}
	return o.VulnerabilityId, true
}

// HasVulnerabilityId returns a boolean if a field has been set.
func (o *Vulnerability) HasVulnerabilityId() bool {
	if o != nil && !IsNil(o.VulnerabilityId) {
		return true
	}

	return false
}

// SetVulnerabilityId gets a reference to the given string and assigns it to the VulnerabilityId field.
func (o *Vulnerability) SetVulnerabilityId(v string) {
	o.VulnerabilityId = &v
}

// GetVulnerableFunction returns the VulnerableFunction field value if set, zero value otherwise.
func (o *Vulnerability) GetVulnerableFunction() FunctionDefinition {
	if o == nil || IsNil(o.VulnerableFunction) {
		var ret FunctionDefinition
		return ret
	}
	return *o.VulnerableFunction
}

// GetVulnerableFunctionOk returns a tuple with the VulnerableFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetVulnerableFunctionOk() (*FunctionDefinition, bool) {
	if o == nil || IsNil(o.VulnerableFunction) {
		return nil, false
	}
	return o.VulnerableFunction, true
}

// HasVulnerableFunction returns a boolean if a field has been set.
func (o *Vulnerability) HasVulnerableFunction() bool {
	if o != nil && !IsNil(o.VulnerableFunction) {
		return true
	}

	return false
}

// SetVulnerableFunction gets a reference to the given FunctionDefinition and assigns it to the VulnerableFunction field.
func (o *Vulnerability) SetVulnerableFunction(v FunctionDefinition) {
	o.VulnerableFunction = &v
}

// GetVulnerableFunctionInput returns the VulnerableFunctionInput field value if set, zero value otherwise.
func (o *Vulnerability) GetVulnerableFunctionInput() VulnerableFunctionInput {
	if o == nil || IsNil(o.VulnerableFunctionInput) {
		var ret VulnerableFunctionInput
		return ret
	}
	return *o.VulnerableFunctionInput
}

// GetVulnerableFunctionInputOk returns a tuple with the VulnerableFunctionInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetVulnerableFunctionInputOk() (*VulnerableFunctionInput, bool) {
	if o == nil || IsNil(o.VulnerableFunctionInput) {
		return nil, false
	}
	return o.VulnerableFunctionInput, true
}

// HasVulnerableFunctionInput returns a boolean if a field has been set.
func (o *Vulnerability) HasVulnerableFunctionInput() bool {
	if o != nil && !IsNil(o.VulnerableFunctionInput) {
		return true
	}

	return false
}

// SetVulnerableFunctionInput gets a reference to the given VulnerableFunctionInput and assigns it to the VulnerableFunctionInput field.
func (o *Vulnerability) SetVulnerableFunctionInput(v VulnerableFunctionInput) {
	o.VulnerableFunctionInput = &v
}

func (o Vulnerability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vulnerability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeLocation) {
		toSerialize["codeLocation"] = o.CodeLocation
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.VulnerabilityId) {
		toSerialize["vulnerabilityId"] = o.VulnerabilityId
	}
	if !IsNil(o.VulnerableFunction) {
		toSerialize["vulnerableFunction"] = o.VulnerableFunction
	}
	if !IsNil(o.VulnerableFunctionInput) {
		toSerialize["vulnerableFunctionInput"] = o.VulnerableFunctionInput
	}
	return toSerialize, nil
}

type NullableVulnerability struct {
	value *Vulnerability
	isSet bool
}

func (v NullableVulnerability) Get() *Vulnerability {
	return v.value
}

func (v *NullableVulnerability) Set(val *Vulnerability) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerability) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerability(val *Vulnerability) *NullableVulnerability {
	return &NullableVulnerability{value: val, isSet: true}
}

func (v NullableVulnerability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


