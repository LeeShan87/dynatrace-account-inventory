/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the AttackSecurityProblem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttackSecurityProblem{}

// AttackSecurityProblem Assessment information and the ID of a security problem related to an attack.
type AttackSecurityProblem struct {
	Assessment *AttackSecurityProblemAssessmentDto `json:"assessment,omitempty"`
	// The security problem ID.
	SecurityProblemId *string `json:"securityProblemId,omitempty"`
}

// NewAttackSecurityProblem instantiates a new AttackSecurityProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttackSecurityProblem() *AttackSecurityProblem {
	this := AttackSecurityProblem{}
	return &this
}

// NewAttackSecurityProblemWithDefaults instantiates a new AttackSecurityProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttackSecurityProblemWithDefaults() *AttackSecurityProblem {
	this := AttackSecurityProblem{}
	return &this
}

// GetAssessment returns the Assessment field value if set, zero value otherwise.
func (o *AttackSecurityProblem) GetAssessment() AttackSecurityProblemAssessmentDto {
	if o == nil || IsNil(o.Assessment) {
		var ret AttackSecurityProblemAssessmentDto
		return ret
	}
	return *o.Assessment
}

// GetAssessmentOk returns a tuple with the Assessment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttackSecurityProblem) GetAssessmentOk() (*AttackSecurityProblemAssessmentDto, bool) {
	if o == nil || IsNil(o.Assessment) {
		return nil, false
	}
	return o.Assessment, true
}

// HasAssessment returns a boolean if a field has been set.
func (o *AttackSecurityProblem) HasAssessment() bool {
	if o != nil && !IsNil(o.Assessment) {
		return true
	}

	return false
}

// SetAssessment gets a reference to the given AttackSecurityProblemAssessmentDto and assigns it to the Assessment field.
func (o *AttackSecurityProblem) SetAssessment(v AttackSecurityProblemAssessmentDto) {
	o.Assessment = &v
}

// GetSecurityProblemId returns the SecurityProblemId field value if set, zero value otherwise.
func (o *AttackSecurityProblem) GetSecurityProblemId() string {
	if o == nil || IsNil(o.SecurityProblemId) {
		var ret string
		return ret
	}
	return *o.SecurityProblemId
}

// GetSecurityProblemIdOk returns a tuple with the SecurityProblemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttackSecurityProblem) GetSecurityProblemIdOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityProblemId) {
		return nil, false
	}
	return o.SecurityProblemId, true
}

// HasSecurityProblemId returns a boolean if a field has been set.
func (o *AttackSecurityProblem) HasSecurityProblemId() bool {
	if o != nil && !IsNil(o.SecurityProblemId) {
		return true
	}

	return false
}

// SetSecurityProblemId gets a reference to the given string and assigns it to the SecurityProblemId field.
func (o *AttackSecurityProblem) SetSecurityProblemId(v string) {
	o.SecurityProblemId = &v
}

func (o AttackSecurityProblem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttackSecurityProblem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assessment) {
		toSerialize["assessment"] = o.Assessment
	}
	if !IsNil(o.SecurityProblemId) {
		toSerialize["securityProblemId"] = o.SecurityProblemId
	}
	return toSerialize, nil
}

type NullableAttackSecurityProblem struct {
	value *AttackSecurityProblem
	isSet bool
}

func (v NullableAttackSecurityProblem) Get() *AttackSecurityProblem {
	return v.value
}

func (v *NullableAttackSecurityProblem) Set(val *AttackSecurityProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableAttackSecurityProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableAttackSecurityProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttackSecurityProblem(val *AttackSecurityProblem) *NullableAttackSecurityProblem {
	return &NullableAttackSecurityProblem{value: val, isSet: true}
}

func (v NullableAttackSecurityProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttackSecurityProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


