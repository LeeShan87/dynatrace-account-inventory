/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ProblemCloseRequestDtoImpl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemCloseRequestDtoImpl{}

// ProblemCloseRequestDtoImpl struct for ProblemCloseRequestDtoImpl
type ProblemCloseRequestDtoImpl struct {
	// The text of the closing comment.
	Message string `json:"message"`
}

// NewProblemCloseRequestDtoImpl instantiates a new ProblemCloseRequestDtoImpl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemCloseRequestDtoImpl(message string) *ProblemCloseRequestDtoImpl {
	this := ProblemCloseRequestDtoImpl{}
	this.Message = message
	return &this
}

// NewProblemCloseRequestDtoImplWithDefaults instantiates a new ProblemCloseRequestDtoImpl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemCloseRequestDtoImplWithDefaults() *ProblemCloseRequestDtoImpl {
	this := ProblemCloseRequestDtoImpl{}
	return &this
}

// GetMessage returns the Message field value
func (o *ProblemCloseRequestDtoImpl) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ProblemCloseRequestDtoImpl) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ProblemCloseRequestDtoImpl) SetMessage(v string) {
	o.Message = v
}

func (o ProblemCloseRequestDtoImpl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemCloseRequestDtoImpl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

type NullableProblemCloseRequestDtoImpl struct {
	value *ProblemCloseRequestDtoImpl
	isSet bool
}

func (v NullableProblemCloseRequestDtoImpl) Get() *ProblemCloseRequestDtoImpl {
	return v.value
}

func (v *NullableProblemCloseRequestDtoImpl) Set(val *ProblemCloseRequestDtoImpl) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemCloseRequestDtoImpl) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemCloseRequestDtoImpl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemCloseRequestDtoImpl(val *ProblemCloseRequestDtoImpl) *NullableProblemCloseRequestDtoImpl {
	return &NullableProblemCloseRequestDtoImpl{value: val, isSet: true}
}

func (v NullableProblemCloseRequestDtoImpl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemCloseRequestDtoImpl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


