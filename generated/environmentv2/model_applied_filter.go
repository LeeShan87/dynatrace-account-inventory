/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the AppliedFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppliedFilter{}

// AppliedFilter Optional filters that took effect.
type AppliedFilter struct {
	// The keys of all metrics that this filter has been applied to.   Can contain multiple metrics for complex expressions and always at least one key.
	AppliedTo []string `json:"appliedTo"`
	Filter *Filter `json:"filter,omitempty"`
}

// NewAppliedFilter instantiates a new AppliedFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppliedFilter(appliedTo []string) *AppliedFilter {
	this := AppliedFilter{}
	this.AppliedTo = appliedTo
	return &this
}

// NewAppliedFilterWithDefaults instantiates a new AppliedFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppliedFilterWithDefaults() *AppliedFilter {
	this := AppliedFilter{}
	return &this
}

// GetAppliedTo returns the AppliedTo field value
func (o *AppliedFilter) GetAppliedTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AppliedTo
}

// GetAppliedToOk returns a tuple with the AppliedTo field value
// and a boolean to check if the value has been set.
func (o *AppliedFilter) GetAppliedToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppliedTo, true
}

// SetAppliedTo sets field value
func (o *AppliedFilter) SetAppliedTo(v []string) {
	o.AppliedTo = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *AppliedFilter) GetFilter() Filter {
	if o == nil || IsNil(o.Filter) {
		var ret Filter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedFilter) GetFilterOk() (*Filter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *AppliedFilter) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given Filter and assigns it to the Filter field.
func (o *AppliedFilter) SetFilter(v Filter) {
	o.Filter = &v
}

func (o AppliedFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppliedFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appliedTo"] = o.AppliedTo
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	return toSerialize, nil
}

type NullableAppliedFilter struct {
	value *AppliedFilter
	isSet bool
}

func (v NullableAppliedFilter) Get() *AppliedFilter {
	return v.value
}

func (v *NullableAppliedFilter) Set(val *AppliedFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAppliedFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAppliedFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppliedFilter(val *AppliedFilter) *NullableAppliedFilter {
	return &NullableAppliedFilter{value: val, isSet: true}
}

func (v NullableAppliedFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppliedFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


