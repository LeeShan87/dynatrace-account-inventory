/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ReleaseInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseInstance{}

// ReleaseInstance Contains data related to a single instance of a release. An instance is a Process Group Instance and has an optional build version.
type ReleaseInstance struct {
	// The build version
	BuildVersion *string `json:"buildVersion,omitempty"`
	// The entity id of the instance.
	EntityId *string `json:"entityId,omitempty"`
	// List of event Ids of open problems
	Problems []string `json:"problems,omitempty"`
	// List of Security vulnerabilities Ids
	SecurityVulnerabilities []string `json:"securityVulnerabilities,omitempty"`
}

// NewReleaseInstance instantiates a new ReleaseInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseInstance() *ReleaseInstance {
	this := ReleaseInstance{}
	return &this
}

// NewReleaseInstanceWithDefaults instantiates a new ReleaseInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseInstanceWithDefaults() *ReleaseInstance {
	this := ReleaseInstance{}
	return &this
}

// GetBuildVersion returns the BuildVersion field value if set, zero value otherwise.
func (o *ReleaseInstance) GetBuildVersion() string {
	if o == nil || IsNil(o.BuildVersion) {
		var ret string
		return ret
	}
	return *o.BuildVersion
}

// GetBuildVersionOk returns a tuple with the BuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseInstance) GetBuildVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BuildVersion) {
		return nil, false
	}
	return o.BuildVersion, true
}

// HasBuildVersion returns a boolean if a field has been set.
func (o *ReleaseInstance) HasBuildVersion() bool {
	if o != nil && !IsNil(o.BuildVersion) {
		return true
	}

	return false
}

// SetBuildVersion gets a reference to the given string and assigns it to the BuildVersion field.
func (o *ReleaseInstance) SetBuildVersion(v string) {
	o.BuildVersion = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *ReleaseInstance) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseInstance) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *ReleaseInstance) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *ReleaseInstance) SetEntityId(v string) {
	o.EntityId = &v
}

// GetProblems returns the Problems field value if set, zero value otherwise.
func (o *ReleaseInstance) GetProblems() []string {
	if o == nil || IsNil(o.Problems) {
		var ret []string
		return ret
	}
	return o.Problems
}

// GetProblemsOk returns a tuple with the Problems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseInstance) GetProblemsOk() ([]string, bool) {
	if o == nil || IsNil(o.Problems) {
		return nil, false
	}
	return o.Problems, true
}

// HasProblems returns a boolean if a field has been set.
func (o *ReleaseInstance) HasProblems() bool {
	if o != nil && !IsNil(o.Problems) {
		return true
	}

	return false
}

// SetProblems gets a reference to the given []string and assigns it to the Problems field.
func (o *ReleaseInstance) SetProblems(v []string) {
	o.Problems = v
}

// GetSecurityVulnerabilities returns the SecurityVulnerabilities field value if set, zero value otherwise.
func (o *ReleaseInstance) GetSecurityVulnerabilities() []string {
	if o == nil || IsNil(o.SecurityVulnerabilities) {
		var ret []string
		return ret
	}
	return o.SecurityVulnerabilities
}

// GetSecurityVulnerabilitiesOk returns a tuple with the SecurityVulnerabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseInstance) GetSecurityVulnerabilitiesOk() ([]string, bool) {
	if o == nil || IsNil(o.SecurityVulnerabilities) {
		return nil, false
	}
	return o.SecurityVulnerabilities, true
}

// HasSecurityVulnerabilities returns a boolean if a field has been set.
func (o *ReleaseInstance) HasSecurityVulnerabilities() bool {
	if o != nil && !IsNil(o.SecurityVulnerabilities) {
		return true
	}

	return false
}

// SetSecurityVulnerabilities gets a reference to the given []string and assigns it to the SecurityVulnerabilities field.
func (o *ReleaseInstance) SetSecurityVulnerabilities(v []string) {
	o.SecurityVulnerabilities = v
}

func (o ReleaseInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildVersion) {
		toSerialize["buildVersion"] = o.BuildVersion
	}
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.Problems) {
		toSerialize["problems"] = o.Problems
	}
	if !IsNil(o.SecurityVulnerabilities) {
		toSerialize["securityVulnerabilities"] = o.SecurityVulnerabilities
	}
	return toSerialize, nil
}

type NullableReleaseInstance struct {
	value *ReleaseInstance
	isSet bool
}

func (v NullableReleaseInstance) Get() *ReleaseInstance {
	return v.value
}

func (v *NullableReleaseInstance) Set(val *ReleaseInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseInstance(val *ReleaseInstance) *NullableReleaseInstance {
	return &NullableReleaseInstance{value: val, isSet: true}
}

func (v NullableReleaseInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


