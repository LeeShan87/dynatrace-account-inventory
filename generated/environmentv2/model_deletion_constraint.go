/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the DeletionConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletionConstraint{}

// DeletionConstraint A constraint on the values that are going to be deleted.
type DeletionConstraint struct {
	// A custom message for invalid values.
	CustomMessage *string `json:"customMessage,omitempty"`
	// The ID of a custom validator.
	CustomValidatorId *string `json:"customValidatorId,omitempty"`
}

// NewDeletionConstraint instantiates a new DeletionConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletionConstraint() *DeletionConstraint {
	this := DeletionConstraint{}
	return &this
}

// NewDeletionConstraintWithDefaults instantiates a new DeletionConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletionConstraintWithDefaults() *DeletionConstraint {
	this := DeletionConstraint{}
	return &this
}

// GetCustomMessage returns the CustomMessage field value if set, zero value otherwise.
func (o *DeletionConstraint) GetCustomMessage() string {
	if o == nil || IsNil(o.CustomMessage) {
		var ret string
		return ret
	}
	return *o.CustomMessage
}

// GetCustomMessageOk returns a tuple with the CustomMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletionConstraint) GetCustomMessageOk() (*string, bool) {
	if o == nil || IsNil(o.CustomMessage) {
		return nil, false
	}
	return o.CustomMessage, true
}

// HasCustomMessage returns a boolean if a field has been set.
func (o *DeletionConstraint) HasCustomMessage() bool {
	if o != nil && !IsNil(o.CustomMessage) {
		return true
	}

	return false
}

// SetCustomMessage gets a reference to the given string and assigns it to the CustomMessage field.
func (o *DeletionConstraint) SetCustomMessage(v string) {
	o.CustomMessage = &v
}

// GetCustomValidatorId returns the CustomValidatorId field value if set, zero value otherwise.
func (o *DeletionConstraint) GetCustomValidatorId() string {
	if o == nil || IsNil(o.CustomValidatorId) {
		var ret string
		return ret
	}
	return *o.CustomValidatorId
}

// GetCustomValidatorIdOk returns a tuple with the CustomValidatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletionConstraint) GetCustomValidatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomValidatorId) {
		return nil, false
	}
	return o.CustomValidatorId, true
}

// HasCustomValidatorId returns a boolean if a field has been set.
func (o *DeletionConstraint) HasCustomValidatorId() bool {
	if o != nil && !IsNil(o.CustomValidatorId) {
		return true
	}

	return false
}

// SetCustomValidatorId gets a reference to the given string and assigns it to the CustomValidatorId field.
func (o *DeletionConstraint) SetCustomValidatorId(v string) {
	o.CustomValidatorId = &v
}

func (o DeletionConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletionConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomMessage) {
		toSerialize["customMessage"] = o.CustomMessage
	}
	if !IsNil(o.CustomValidatorId) {
		toSerialize["customValidatorId"] = o.CustomValidatorId
	}
	return toSerialize, nil
}

type NullableDeletionConstraint struct {
	value *DeletionConstraint
	isSet bool
}

func (v NullableDeletionConstraint) Get() *DeletionConstraint {
	return v.value
}

func (v *NullableDeletionConstraint) Set(val *DeletionConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletionConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletionConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletionConstraint(val *DeletionConstraint) *NullableDeletionConstraint {
	return &NullableDeletionConstraint{value: val, isSet: true}
}

func (v NullableDeletionConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletionConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


