/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ConfigurationMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationMetadata{}

// ConfigurationMetadata Metadata useful for debugging
type ConfigurationMetadata struct {
	// Dynatrace version.
	ClusterVersion *string `json:"clusterVersion,omitempty"`
	// A sorted list of the version numbers of the configuration.
	ConfigurationVersions []int64 `json:"configurationVersions,omitempty"`
	// A sorted list of version numbers of the configuration.
	CurrentConfigurationVersions []string `json:"currentConfigurationVersions,omitempty"`
}

// NewConfigurationMetadata instantiates a new ConfigurationMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationMetadata() *ConfigurationMetadata {
	this := ConfigurationMetadata{}
	return &this
}

// NewConfigurationMetadataWithDefaults instantiates a new ConfigurationMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationMetadataWithDefaults() *ConfigurationMetadata {
	this := ConfigurationMetadata{}
	return &this
}

// GetClusterVersion returns the ClusterVersion field value if set, zero value otherwise.
func (o *ConfigurationMetadata) GetClusterVersion() string {
	if o == nil || IsNil(o.ClusterVersion) {
		var ret string
		return ret
	}
	return *o.ClusterVersion
}

// GetClusterVersionOk returns a tuple with the ClusterVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationMetadata) GetClusterVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterVersion) {
		return nil, false
	}
	return o.ClusterVersion, true
}

// HasClusterVersion returns a boolean if a field has been set.
func (o *ConfigurationMetadata) HasClusterVersion() bool {
	if o != nil && !IsNil(o.ClusterVersion) {
		return true
	}

	return false
}

// SetClusterVersion gets a reference to the given string and assigns it to the ClusterVersion field.
func (o *ConfigurationMetadata) SetClusterVersion(v string) {
	o.ClusterVersion = &v
}

// GetConfigurationVersions returns the ConfigurationVersions field value if set, zero value otherwise.
func (o *ConfigurationMetadata) GetConfigurationVersions() []int64 {
	if o == nil || IsNil(o.ConfigurationVersions) {
		var ret []int64
		return ret
	}
	return o.ConfigurationVersions
}

// GetConfigurationVersionsOk returns a tuple with the ConfigurationVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationMetadata) GetConfigurationVersionsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ConfigurationVersions) {
		return nil, false
	}
	return o.ConfigurationVersions, true
}

// HasConfigurationVersions returns a boolean if a field has been set.
func (o *ConfigurationMetadata) HasConfigurationVersions() bool {
	if o != nil && !IsNil(o.ConfigurationVersions) {
		return true
	}

	return false
}

// SetConfigurationVersions gets a reference to the given []int64 and assigns it to the ConfigurationVersions field.
func (o *ConfigurationMetadata) SetConfigurationVersions(v []int64) {
	o.ConfigurationVersions = v
}

// GetCurrentConfigurationVersions returns the CurrentConfigurationVersions field value if set, zero value otherwise.
func (o *ConfigurationMetadata) GetCurrentConfigurationVersions() []string {
	if o == nil || IsNil(o.CurrentConfigurationVersions) {
		var ret []string
		return ret
	}
	return o.CurrentConfigurationVersions
}

// GetCurrentConfigurationVersionsOk returns a tuple with the CurrentConfigurationVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationMetadata) GetCurrentConfigurationVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.CurrentConfigurationVersions) {
		return nil, false
	}
	return o.CurrentConfigurationVersions, true
}

// HasCurrentConfigurationVersions returns a boolean if a field has been set.
func (o *ConfigurationMetadata) HasCurrentConfigurationVersions() bool {
	if o != nil && !IsNil(o.CurrentConfigurationVersions) {
		return true
	}

	return false
}

// SetCurrentConfigurationVersions gets a reference to the given []string and assigns it to the CurrentConfigurationVersions field.
func (o *ConfigurationMetadata) SetCurrentConfigurationVersions(v []string) {
	o.CurrentConfigurationVersions = v
}

func (o ConfigurationMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterVersion) {
		toSerialize["clusterVersion"] = o.ClusterVersion
	}
	if !IsNil(o.ConfigurationVersions) {
		toSerialize["configurationVersions"] = o.ConfigurationVersions
	}
	if !IsNil(o.CurrentConfigurationVersions) {
		toSerialize["currentConfigurationVersions"] = o.CurrentConfigurationVersions
	}
	return toSerialize, nil
}

type NullableConfigurationMetadata struct {
	value *ConfigurationMetadata
	isSet bool
}

func (v NullableConfigurationMetadata) Get() *ConfigurationMetadata {
	return v.value
}

func (v *NullableConfigurationMetadata) Set(val *ConfigurationMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationMetadata(val *ConfigurationMetadata) *NullableConfigurationMetadata {
	return &NullableConfigurationMetadata{value: val, isSet: true}
}

func (v NullableConfigurationMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


