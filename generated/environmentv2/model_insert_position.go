/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the InsertPosition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsertPosition{}

// InsertPosition The position where the button should be shown relative to a property in the UI
type InsertPosition struct {
	// The path of a property after which the button should be shown in the UI
	After string `json:"after"`
}

// NewInsertPosition instantiates a new InsertPosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsertPosition(after string) *InsertPosition {
	this := InsertPosition{}
	this.After = after
	return &this
}

// NewInsertPositionWithDefaults instantiates a new InsertPosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsertPositionWithDefaults() *InsertPosition {
	this := InsertPosition{}
	return &this
}

// GetAfter returns the After field value
func (o *InsertPosition) GetAfter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.After
}

// GetAfterOk returns a tuple with the After field value
// and a boolean to check if the value has been set.
func (o *InsertPosition) GetAfterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.After, true
}

// SetAfter sets field value
func (o *InsertPosition) SetAfter(v string) {
	o.After = v
}

func (o InsertPosition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsertPosition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["after"] = o.After
	return toSerialize, nil
}

type NullableInsertPosition struct {
	value *InsertPosition
	isSet bool
}

func (v NullableInsertPosition) Get() *InsertPosition {
	return v.value
}

func (v *NullableInsertPosition) Set(val *InsertPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableInsertPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableInsertPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsertPosition(val *InsertPosition) *NullableInsertPosition {
	return &NullableInsertPosition{value: val, isSet: true}
}

func (v NullableInsertPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsertPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


