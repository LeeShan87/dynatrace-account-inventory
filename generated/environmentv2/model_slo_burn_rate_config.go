/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SloBurnRateConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloBurnRateConfig{}

// SloBurnRateConfig Error budget burn rate configuration of a service-level objective (SLO).
type SloBurnRateConfig struct {
	// The error budget burn rate calculation is enabled (`true`) or disabled (`false`).   In case of `false`, no calculated values will be present here.   If not defined, the error budget burn rate calculation is disabled by default.
	BurnRateVisualizationEnabled *bool `json:"burnRateVisualizationEnabled,omitempty"`
	// The threshold between a slow and a fast burn rate.
	FastBurnThreshold *float64 `json:"fastBurnThreshold,omitempty"`
}

// NewSloBurnRateConfig instantiates a new SloBurnRateConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloBurnRateConfig() *SloBurnRateConfig {
	this := SloBurnRateConfig{}
	return &this
}

// NewSloBurnRateConfigWithDefaults instantiates a new SloBurnRateConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloBurnRateConfigWithDefaults() *SloBurnRateConfig {
	this := SloBurnRateConfig{}
	return &this
}

// GetBurnRateVisualizationEnabled returns the BurnRateVisualizationEnabled field value if set, zero value otherwise.
func (o *SloBurnRateConfig) GetBurnRateVisualizationEnabled() bool {
	if o == nil || IsNil(o.BurnRateVisualizationEnabled) {
		var ret bool
		return ret
	}
	return *o.BurnRateVisualizationEnabled
}

// GetBurnRateVisualizationEnabledOk returns a tuple with the BurnRateVisualizationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloBurnRateConfig) GetBurnRateVisualizationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BurnRateVisualizationEnabled) {
		return nil, false
	}
	return o.BurnRateVisualizationEnabled, true
}

// HasBurnRateVisualizationEnabled returns a boolean if a field has been set.
func (o *SloBurnRateConfig) HasBurnRateVisualizationEnabled() bool {
	if o != nil && !IsNil(o.BurnRateVisualizationEnabled) {
		return true
	}

	return false
}

// SetBurnRateVisualizationEnabled gets a reference to the given bool and assigns it to the BurnRateVisualizationEnabled field.
func (o *SloBurnRateConfig) SetBurnRateVisualizationEnabled(v bool) {
	o.BurnRateVisualizationEnabled = &v
}

// GetFastBurnThreshold returns the FastBurnThreshold field value if set, zero value otherwise.
func (o *SloBurnRateConfig) GetFastBurnThreshold() float64 {
	if o == nil || IsNil(o.FastBurnThreshold) {
		var ret float64
		return ret
	}
	return *o.FastBurnThreshold
}

// GetFastBurnThresholdOk returns a tuple with the FastBurnThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloBurnRateConfig) GetFastBurnThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.FastBurnThreshold) {
		return nil, false
	}
	return o.FastBurnThreshold, true
}

// HasFastBurnThreshold returns a boolean if a field has been set.
func (o *SloBurnRateConfig) HasFastBurnThreshold() bool {
	if o != nil && !IsNil(o.FastBurnThreshold) {
		return true
	}

	return false
}

// SetFastBurnThreshold gets a reference to the given float64 and assigns it to the FastBurnThreshold field.
func (o *SloBurnRateConfig) SetFastBurnThreshold(v float64) {
	o.FastBurnThreshold = &v
}

func (o SloBurnRateConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloBurnRateConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BurnRateVisualizationEnabled) {
		toSerialize["burnRateVisualizationEnabled"] = o.BurnRateVisualizationEnabled
	}
	if !IsNil(o.FastBurnThreshold) {
		toSerialize["fastBurnThreshold"] = o.FastBurnThreshold
	}
	return toSerialize, nil
}

type NullableSloBurnRateConfig struct {
	value *SloBurnRateConfig
	isSet bool
}

func (v NullableSloBurnRateConfig) Get() *SloBurnRateConfig {
	return v.value
}

func (v *NullableSloBurnRateConfig) Set(val *SloBurnRateConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSloBurnRateConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSloBurnRateConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloBurnRateConfig(val *SloBurnRateConfig) *NullableSloBurnRateConfig {
	return &NullableSloBurnRateConfig{value: val, isSet: true}
}

func (v NullableSloBurnRateConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloBurnRateConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


