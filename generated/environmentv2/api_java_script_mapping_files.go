/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// JavaScriptMappingFilesAPIService JavaScriptMappingFilesAPI service
type JavaScriptMappingFilesAPIService service

type ApiDeleteJavaScriptMappingFileRequest struct {
	ctx context.Context
	ApiService *JavaScriptMappingFilesAPIService
	minifiedJsFileUrl string
	fileType string
}

func (r ApiDeleteJavaScriptMappingFileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteJavaScriptMappingFileExecute(r)
}

/*
DeleteJavaScriptMappingFile Deletes the specified JavaScript mapping file | maturity=EARLY_ADOPTER

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param minifiedJsFileUrl The URL of the minified JavaScript file.
 @param fileType The type of the JavaScript mapping file.
 @return ApiDeleteJavaScriptMappingFileRequest
*/
func (a *JavaScriptMappingFilesAPIService) DeleteJavaScriptMappingFile(ctx context.Context, minifiedJsFileUrl string, fileType string) ApiDeleteJavaScriptMappingFileRequest {
	return ApiDeleteJavaScriptMappingFileRequest{
		ApiService: a,
		ctx: ctx,
		minifiedJsFileUrl: minifiedJsFileUrl,
		fileType: fileType,
	}
}

// Execute executes the request
func (a *JavaScriptMappingFilesAPIService) DeleteJavaScriptMappingFileExecute(r ApiDeleteJavaScriptMappingFileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JavaScriptMappingFilesAPIService.DeleteJavaScriptMappingFile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jsMappingFiles/{minifiedJsFileUrl}/{fileType}"
	localVarPath = strings.Replace(localVarPath, "{"+"minifiedJsFileUrl"+"}", url.PathEscape(parameterValueToString(r.minifiedJsFileUrl, "minifiedJsFileUrl")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fileType"+"}", url.PathEscape(parameterValueToString(r.fileType, "fileType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetJavaScriptMappingFilesMetadataRequest struct {
	ctx context.Context
	ApiService *JavaScriptMappingFilesAPIService
	nextPageKey *string
	pageSize *int64
	minifiedJsFileUrl *string
	fileType *string
}

// The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters. 
func (r ApiGetJavaScriptMappingFilesMetadataRequest) NextPageKey(nextPageKey string) ApiGetJavaScriptMappingFilesMetadataRequest {
	r.nextPageKey = &nextPageKey
	return r
}

// The amount of JavaScript mapping files in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used.
func (r ApiGetJavaScriptMappingFilesMetadataRequest) PageSize(pageSize int64) ApiGetJavaScriptMappingFilesMetadataRequest {
	r.pageSize = &pageSize
	return r
}

// Filters the resulting set of JavaScript mapping files by the minified JavaScript file URL. Only equals are taken into account.
func (r ApiGetJavaScriptMappingFilesMetadataRequest) MinifiedJsFileUrl(minifiedJsFileUrl string) ApiGetJavaScriptMappingFilesMetadataRequest {
	r.minifiedJsFileUrl = &minifiedJsFileUrl
	return r
}

// Filters the resulting set of JavaScript mapping files by file type.
func (r ApiGetJavaScriptMappingFilesMetadataRequest) FileType(fileType string) ApiGetJavaScriptMappingFilesMetadataRequest {
	r.fileType = &fileType
	return r
}

func (r ApiGetJavaScriptMappingFilesMetadataRequest) Execute() (*JavaScriptMappingFileListDto, *http.Response, error) {
	return r.ApiService.GetJavaScriptMappingFilesMetadataExecute(r)
}

/*
GetJavaScriptMappingFilesMetadata Lists metadata of JavaScript mapping files | maturity=EARLY_ADOPTER

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetJavaScriptMappingFilesMetadataRequest
*/
func (a *JavaScriptMappingFilesAPIService) GetJavaScriptMappingFilesMetadata(ctx context.Context) ApiGetJavaScriptMappingFilesMetadataRequest {
	return ApiGetJavaScriptMappingFilesMetadataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JavaScriptMappingFileListDto
func (a *JavaScriptMappingFilesAPIService) GetJavaScriptMappingFilesMetadataExecute(r ApiGetJavaScriptMappingFilesMetadataRequest) (*JavaScriptMappingFileListDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JavaScriptMappingFileListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JavaScriptMappingFilesAPIService.GetJavaScriptMappingFilesMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jsMappingFiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nextPageKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextPageKey", r.nextPageKey, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.minifiedJsFileUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minifiedJsFileUrl", r.minifiedJsFileUrl, "")
	}
	if r.fileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fileType", r.fileType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateJavaScriptMappingFileMetadataRequest struct {
	ctx context.Context
	ApiService *JavaScriptMappingFilesAPIService
	minifiedJsFileUrl string
	fileType string
	javaScriptMappingFileMetadataDto *JavaScriptMappingFileMetadataDto
}

// The JSON body of the request. Contains updated metadata of the file.
func (r ApiUpdateJavaScriptMappingFileMetadataRequest) JavaScriptMappingFileMetadataDto(javaScriptMappingFileMetadataDto JavaScriptMappingFileMetadataDto) ApiUpdateJavaScriptMappingFileMetadataRequest {
	r.javaScriptMappingFileMetadataDto = &javaScriptMappingFileMetadataDto
	return r
}

func (r ApiUpdateJavaScriptMappingFileMetadataRequest) Execute() (*JavaScriptMappingFileDto, *http.Response, error) {
	return r.ApiService.UpdateJavaScriptMappingFileMetadataExecute(r)
}

/*
UpdateJavaScriptMappingFileMetadata Updates metadata of the specified JavaScript mapping file | maturity=EARLY_ADOPTER

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param minifiedJsFileUrl The URL of the minified JavaScript file.
 @param fileType The type of the JavaScript mapping file.
 @return ApiUpdateJavaScriptMappingFileMetadataRequest
*/
func (a *JavaScriptMappingFilesAPIService) UpdateJavaScriptMappingFileMetadata(ctx context.Context, minifiedJsFileUrl string, fileType string) ApiUpdateJavaScriptMappingFileMetadataRequest {
	return ApiUpdateJavaScriptMappingFileMetadataRequest{
		ApiService: a,
		ctx: ctx,
		minifiedJsFileUrl: minifiedJsFileUrl,
		fileType: fileType,
	}
}

// Execute executes the request
//  @return JavaScriptMappingFileDto
func (a *JavaScriptMappingFilesAPIService) UpdateJavaScriptMappingFileMetadataExecute(r ApiUpdateJavaScriptMappingFileMetadataRequest) (*JavaScriptMappingFileDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JavaScriptMappingFileDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JavaScriptMappingFilesAPIService.UpdateJavaScriptMappingFileMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jsMappingFiles/{minifiedJsFileUrl}/{fileType}/metadata"
	localVarPath = strings.Replace(localVarPath, "{"+"minifiedJsFileUrl"+"}", url.PathEscape(parameterValueToString(r.minifiedJsFileUrl, "minifiedJsFileUrl")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fileType"+"}", url.PathEscape(parameterValueToString(r.fileType, "fileType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.javaScriptMappingFileMetadataDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadJavaScriptMappingFileRequest struct {
	ctx context.Context
	ApiService *JavaScriptMappingFilesAPIService
	minifiedJsFileUrl string
	fileType string
	file *os.File
}

// JavaScript mapping file to upload.
func (r ApiUploadJavaScriptMappingFileRequest) File(file *os.File) ApiUploadJavaScriptMappingFileRequest {
	r.file = file
	return r
}

func (r ApiUploadJavaScriptMappingFileRequest) Execute() (*http.Response, error) {
	return r.ApiService.UploadJavaScriptMappingFileExecute(r)
}

/*
UploadJavaScriptMappingFile Uploads new or updates existing JavaScript mapping file | maturity=EARLY_ADOPTER

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param minifiedJsFileUrl The URL of the minified JavaScript file.
 @param fileType The type of the JavaScript mapping file.
 @return ApiUploadJavaScriptMappingFileRequest
*/
func (a *JavaScriptMappingFilesAPIService) UploadJavaScriptMappingFile(ctx context.Context, minifiedJsFileUrl string, fileType string) ApiUploadJavaScriptMappingFileRequest {
	return ApiUploadJavaScriptMappingFileRequest{
		ApiService: a,
		ctx: ctx,
		minifiedJsFileUrl: minifiedJsFileUrl,
		fileType: fileType,
	}
}

// Execute executes the request
func (a *JavaScriptMappingFilesAPIService) UploadJavaScriptMappingFileExecute(r ApiUploadJavaScriptMappingFileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JavaScriptMappingFilesAPIService.UploadJavaScriptMappingFile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jsMappingFiles/{minifiedJsFileUrl}/{fileType}"
	localVarPath = strings.Replace(localVarPath, "{"+"minifiedJsFileUrl"+"}", url.PathEscape(parameterValueToString(r.minifiedJsFileUrl, "minifiedJsFileUrl")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fileType"+"}", url.PathEscape(parameterValueToString(r.fileType, "fileType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"


	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
