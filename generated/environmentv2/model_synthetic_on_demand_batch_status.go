/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SyntheticOnDemandBatchStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntheticOnDemandBatchStatus{}

// SyntheticOnDemandBatchStatus Contains information about on-demand executions triggered within the batch.
type SyntheticOnDemandBatchStatus struct {
	// The identifier of the batch.
	BatchId string `json:"batchId"`
	// The status of the batch.
	BatchStatus string `json:"batchStatus"`
	// The number of triggered executions with the result SUCCESS or FAILED.
	ExecutedCount int32 `json:"executedCount"`
	// The number of triggered executions with the result FAILED.
	FailedCount int32 `json:"failedCount"`
	FailedExecutions []SyntheticOnDemandFailedExecutionStatus `json:"failedExecutions,omitempty"`
	FailedToExecute []SyntheticOnDemandFailedExecutionStatus `json:"failedToExecute,omitempty"`
	// The number of executions that were triggered and timed out because of a problem with the Synthetic engine.
	FailedToExecuteCount int32 `json:"failedToExecuteCount"`
	// String to string map of metadata properties for batch
	Metadata *map[string]string `json:"metadata,omitempty"`
	// The number of triggered executions within the batch.
	TriggeredCount int32 `json:"triggeredCount"`
	TriggeringProblems []SyntheticOnDemandTriggeringProblemDetails `json:"triggeringProblems,omitempty"`
	// The number of executions that were not triggered due to some problems.
	TriggeringProblemsCount *int32 `json:"triggeringProblemsCount,omitempty"`
	// The name of the user who triggered execution of the batch.
	UserId string `json:"userId"`
}

// NewSyntheticOnDemandBatchStatus instantiates a new SyntheticOnDemandBatchStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticOnDemandBatchStatus(batchId string, batchStatus string, executedCount int32, failedCount int32, failedToExecuteCount int32, triggeredCount int32, userId string) *SyntheticOnDemandBatchStatus {
	this := SyntheticOnDemandBatchStatus{}
	this.BatchId = batchId
	this.BatchStatus = batchStatus
	this.ExecutedCount = executedCount
	this.FailedCount = failedCount
	this.FailedToExecuteCount = failedToExecuteCount
	this.TriggeredCount = triggeredCount
	this.UserId = userId
	return &this
}

// NewSyntheticOnDemandBatchStatusWithDefaults instantiates a new SyntheticOnDemandBatchStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticOnDemandBatchStatusWithDefaults() *SyntheticOnDemandBatchStatus {
	this := SyntheticOnDemandBatchStatus{}
	return &this
}

// GetBatchId returns the BatchId field value
func (o *SyntheticOnDemandBatchStatus) GetBatchId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetBatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatchId, true
}

// SetBatchId sets field value
func (o *SyntheticOnDemandBatchStatus) SetBatchId(v string) {
	o.BatchId = v
}

// GetBatchStatus returns the BatchStatus field value
func (o *SyntheticOnDemandBatchStatus) GetBatchStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BatchStatus
}

// GetBatchStatusOk returns a tuple with the BatchStatus field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetBatchStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatchStatus, true
}

// SetBatchStatus sets field value
func (o *SyntheticOnDemandBatchStatus) SetBatchStatus(v string) {
	o.BatchStatus = v
}

// GetExecutedCount returns the ExecutedCount field value
func (o *SyntheticOnDemandBatchStatus) GetExecutedCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExecutedCount
}

// GetExecutedCountOk returns a tuple with the ExecutedCount field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetExecutedCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutedCount, true
}

// SetExecutedCount sets field value
func (o *SyntheticOnDemandBatchStatus) SetExecutedCount(v int32) {
	o.ExecutedCount = v
}

// GetFailedCount returns the FailedCount field value
func (o *SyntheticOnDemandBatchStatus) GetFailedCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FailedCount
}

// GetFailedCountOk returns a tuple with the FailedCount field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetFailedCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedCount, true
}

// SetFailedCount sets field value
func (o *SyntheticOnDemandBatchStatus) SetFailedCount(v int32) {
	o.FailedCount = v
}

// GetFailedExecutions returns the FailedExecutions field value if set, zero value otherwise.
func (o *SyntheticOnDemandBatchStatus) GetFailedExecutions() []SyntheticOnDemandFailedExecutionStatus {
	if o == nil || IsNil(o.FailedExecutions) {
		var ret []SyntheticOnDemandFailedExecutionStatus
		return ret
	}
	return o.FailedExecutions
}

// GetFailedExecutionsOk returns a tuple with the FailedExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetFailedExecutionsOk() ([]SyntheticOnDemandFailedExecutionStatus, bool) {
	if o == nil || IsNil(o.FailedExecutions) {
		return nil, false
	}
	return o.FailedExecutions, true
}

// HasFailedExecutions returns a boolean if a field has been set.
func (o *SyntheticOnDemandBatchStatus) HasFailedExecutions() bool {
	if o != nil && !IsNil(o.FailedExecutions) {
		return true
	}

	return false
}

// SetFailedExecutions gets a reference to the given []SyntheticOnDemandFailedExecutionStatus and assigns it to the FailedExecutions field.
func (o *SyntheticOnDemandBatchStatus) SetFailedExecutions(v []SyntheticOnDemandFailedExecutionStatus) {
	o.FailedExecutions = v
}

// GetFailedToExecute returns the FailedToExecute field value if set, zero value otherwise.
func (o *SyntheticOnDemandBatchStatus) GetFailedToExecute() []SyntheticOnDemandFailedExecutionStatus {
	if o == nil || IsNil(o.FailedToExecute) {
		var ret []SyntheticOnDemandFailedExecutionStatus
		return ret
	}
	return o.FailedToExecute
}

// GetFailedToExecuteOk returns a tuple with the FailedToExecute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetFailedToExecuteOk() ([]SyntheticOnDemandFailedExecutionStatus, bool) {
	if o == nil || IsNil(o.FailedToExecute) {
		return nil, false
	}
	return o.FailedToExecute, true
}

// HasFailedToExecute returns a boolean if a field has been set.
func (o *SyntheticOnDemandBatchStatus) HasFailedToExecute() bool {
	if o != nil && !IsNil(o.FailedToExecute) {
		return true
	}

	return false
}

// SetFailedToExecute gets a reference to the given []SyntheticOnDemandFailedExecutionStatus and assigns it to the FailedToExecute field.
func (o *SyntheticOnDemandBatchStatus) SetFailedToExecute(v []SyntheticOnDemandFailedExecutionStatus) {
	o.FailedToExecute = v
}

// GetFailedToExecuteCount returns the FailedToExecuteCount field value
func (o *SyntheticOnDemandBatchStatus) GetFailedToExecuteCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FailedToExecuteCount
}

// GetFailedToExecuteCountOk returns a tuple with the FailedToExecuteCount field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetFailedToExecuteCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedToExecuteCount, true
}

// SetFailedToExecuteCount sets field value
func (o *SyntheticOnDemandBatchStatus) SetFailedToExecuteCount(v int32) {
	o.FailedToExecuteCount = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SyntheticOnDemandBatchStatus) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SyntheticOnDemandBatchStatus) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *SyntheticOnDemandBatchStatus) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetTriggeredCount returns the TriggeredCount field value
func (o *SyntheticOnDemandBatchStatus) GetTriggeredCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TriggeredCount
}

// GetTriggeredCountOk returns a tuple with the TriggeredCount field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetTriggeredCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggeredCount, true
}

// SetTriggeredCount sets field value
func (o *SyntheticOnDemandBatchStatus) SetTriggeredCount(v int32) {
	o.TriggeredCount = v
}

// GetTriggeringProblems returns the TriggeringProblems field value if set, zero value otherwise.
func (o *SyntheticOnDemandBatchStatus) GetTriggeringProblems() []SyntheticOnDemandTriggeringProblemDetails {
	if o == nil || IsNil(o.TriggeringProblems) {
		var ret []SyntheticOnDemandTriggeringProblemDetails
		return ret
	}
	return o.TriggeringProblems
}

// GetTriggeringProblemsOk returns a tuple with the TriggeringProblems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetTriggeringProblemsOk() ([]SyntheticOnDemandTriggeringProblemDetails, bool) {
	if o == nil || IsNil(o.TriggeringProblems) {
		return nil, false
	}
	return o.TriggeringProblems, true
}

// HasTriggeringProblems returns a boolean if a field has been set.
func (o *SyntheticOnDemandBatchStatus) HasTriggeringProblems() bool {
	if o != nil && !IsNil(o.TriggeringProblems) {
		return true
	}

	return false
}

// SetTriggeringProblems gets a reference to the given []SyntheticOnDemandTriggeringProblemDetails and assigns it to the TriggeringProblems field.
func (o *SyntheticOnDemandBatchStatus) SetTriggeringProblems(v []SyntheticOnDemandTriggeringProblemDetails) {
	o.TriggeringProblems = v
}

// GetTriggeringProblemsCount returns the TriggeringProblemsCount field value if set, zero value otherwise.
func (o *SyntheticOnDemandBatchStatus) GetTriggeringProblemsCount() int32 {
	if o == nil || IsNil(o.TriggeringProblemsCount) {
		var ret int32
		return ret
	}
	return *o.TriggeringProblemsCount
}

// GetTriggeringProblemsCountOk returns a tuple with the TriggeringProblemsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetTriggeringProblemsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TriggeringProblemsCount) {
		return nil, false
	}
	return o.TriggeringProblemsCount, true
}

// HasTriggeringProblemsCount returns a boolean if a field has been set.
func (o *SyntheticOnDemandBatchStatus) HasTriggeringProblemsCount() bool {
	if o != nil && !IsNil(o.TriggeringProblemsCount) {
		return true
	}

	return false
}

// SetTriggeringProblemsCount gets a reference to the given int32 and assigns it to the TriggeringProblemsCount field.
func (o *SyntheticOnDemandBatchStatus) SetTriggeringProblemsCount(v int32) {
	o.TriggeringProblemsCount = &v
}

// GetUserId returns the UserId field value
func (o *SyntheticOnDemandBatchStatus) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *SyntheticOnDemandBatchStatus) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *SyntheticOnDemandBatchStatus) SetUserId(v string) {
	o.UserId = v
}

func (o SyntheticOnDemandBatchStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntheticOnDemandBatchStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["batchId"] = o.BatchId
	toSerialize["batchStatus"] = o.BatchStatus
	toSerialize["executedCount"] = o.ExecutedCount
	toSerialize["failedCount"] = o.FailedCount
	if !IsNil(o.FailedExecutions) {
		toSerialize["failedExecutions"] = o.FailedExecutions
	}
	if !IsNil(o.FailedToExecute) {
		toSerialize["failedToExecute"] = o.FailedToExecute
	}
	toSerialize["failedToExecuteCount"] = o.FailedToExecuteCount
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["triggeredCount"] = o.TriggeredCount
	if !IsNil(o.TriggeringProblems) {
		toSerialize["triggeringProblems"] = o.TriggeringProblems
	}
	if !IsNil(o.TriggeringProblemsCount) {
		toSerialize["triggeringProblemsCount"] = o.TriggeringProblemsCount
	}
	toSerialize["userId"] = o.UserId
	return toSerialize, nil
}

type NullableSyntheticOnDemandBatchStatus struct {
	value *SyntheticOnDemandBatchStatus
	isSet bool
}

func (v NullableSyntheticOnDemandBatchStatus) Get() *SyntheticOnDemandBatchStatus {
	return v.value
}

func (v *NullableSyntheticOnDemandBatchStatus) Set(val *SyntheticOnDemandBatchStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticOnDemandBatchStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticOnDemandBatchStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticOnDemandBatchStatus(val *SyntheticOnDemandBatchStatus) *NullableSyntheticOnDemandBatchStatus {
	return &NullableSyntheticOnDemandBatchStatus{value: val, isSet: true}
}

func (v NullableSyntheticOnDemandBatchStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticOnDemandBatchStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


