/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the FunctionDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionDefinition{}

// FunctionDefinition Information about a function definition.
type FunctionDefinition struct {
	// The fully qualified class name of the class that includes the function.
	ClassName *string `json:"className,omitempty"`
	// A human readable string representation of the function definition.
	DisplayName *string `json:"displayName,omitempty"`
	// The function/method name.
	FunctionName *string `json:"functionName,omitempty"`
	ParameterTypes *TruncatableListString `json:"parameterTypes,omitempty"`
	// The return type of the function.
	ReturnType *string `json:"returnType,omitempty"`
}

// NewFunctionDefinition instantiates a new FunctionDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionDefinition() *FunctionDefinition {
	this := FunctionDefinition{}
	return &this
}

// NewFunctionDefinitionWithDefaults instantiates a new FunctionDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionDefinitionWithDefaults() *FunctionDefinition {
	this := FunctionDefinition{}
	return &this
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *FunctionDefinition) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionDefinition) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *FunctionDefinition) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *FunctionDefinition) SetClassName(v string) {
	o.ClassName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FunctionDefinition) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionDefinition) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FunctionDefinition) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FunctionDefinition) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFunctionName returns the FunctionName field value if set, zero value otherwise.
func (o *FunctionDefinition) GetFunctionName() string {
	if o == nil || IsNil(o.FunctionName) {
		var ret string
		return ret
	}
	return *o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionDefinition) GetFunctionNameOk() (*string, bool) {
	if o == nil || IsNil(o.FunctionName) {
		return nil, false
	}
	return o.FunctionName, true
}

// HasFunctionName returns a boolean if a field has been set.
func (o *FunctionDefinition) HasFunctionName() bool {
	if o != nil && !IsNil(o.FunctionName) {
		return true
	}

	return false
}

// SetFunctionName gets a reference to the given string and assigns it to the FunctionName field.
func (o *FunctionDefinition) SetFunctionName(v string) {
	o.FunctionName = &v
}

// GetParameterTypes returns the ParameterTypes field value if set, zero value otherwise.
func (o *FunctionDefinition) GetParameterTypes() TruncatableListString {
	if o == nil || IsNil(o.ParameterTypes) {
		var ret TruncatableListString
		return ret
	}
	return *o.ParameterTypes
}

// GetParameterTypesOk returns a tuple with the ParameterTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionDefinition) GetParameterTypesOk() (*TruncatableListString, bool) {
	if o == nil || IsNil(o.ParameterTypes) {
		return nil, false
	}
	return o.ParameterTypes, true
}

// HasParameterTypes returns a boolean if a field has been set.
func (o *FunctionDefinition) HasParameterTypes() bool {
	if o != nil && !IsNil(o.ParameterTypes) {
		return true
	}

	return false
}

// SetParameterTypes gets a reference to the given TruncatableListString and assigns it to the ParameterTypes field.
func (o *FunctionDefinition) SetParameterTypes(v TruncatableListString) {
	o.ParameterTypes = &v
}

// GetReturnType returns the ReturnType field value if set, zero value otherwise.
func (o *FunctionDefinition) GetReturnType() string {
	if o == nil || IsNil(o.ReturnType) {
		var ret string
		return ret
	}
	return *o.ReturnType
}

// GetReturnTypeOk returns a tuple with the ReturnType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionDefinition) GetReturnTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnType) {
		return nil, false
	}
	return o.ReturnType, true
}

// HasReturnType returns a boolean if a field has been set.
func (o *FunctionDefinition) HasReturnType() bool {
	if o != nil && !IsNil(o.ReturnType) {
		return true
	}

	return false
}

// SetReturnType gets a reference to the given string and assigns it to the ReturnType field.
func (o *FunctionDefinition) SetReturnType(v string) {
	o.ReturnType = &v
}

func (o FunctionDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.FunctionName) {
		toSerialize["functionName"] = o.FunctionName
	}
	if !IsNil(o.ParameterTypes) {
		toSerialize["parameterTypes"] = o.ParameterTypes
	}
	if !IsNil(o.ReturnType) {
		toSerialize["returnType"] = o.ReturnType
	}
	return toSerialize, nil
}

type NullableFunctionDefinition struct {
	value *FunctionDefinition
	isSet bool
}

func (v NullableFunctionDefinition) Get() *FunctionDefinition {
	return v.value
}

func (v *NullableFunctionDefinition) Set(val *FunctionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionDefinition(val *FunctionDefinition) *NullableFunctionDefinition {
	return &NullableFunctionDefinition{value: val, isSet: true}
}

func (v NullableFunctionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


