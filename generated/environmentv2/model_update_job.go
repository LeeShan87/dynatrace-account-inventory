/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the UpdateJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateJob{}

// UpdateJob Configuration of the ActiveGate update job.
type UpdateJob struct {
	// The type of the ActiveGate.
	AgType *string `json:"agType,omitempty"`
	// The job can (`true`) or can't (`false`) be cancelled at the moment.
	Cancelable *bool `json:"cancelable,omitempty"`
	// The duration of the update, in milliseconds.
	Duration *int64 `json:"duration,omitempty"`
	// A list of environments (specified by IDs) the ActiveGate can connect to.
	Environments []string `json:"environments,omitempty"`
	// The information about update error.
	Error *string `json:"error,omitempty"`
	// The ID of the update job.
	JobId *string `json:"jobId,omitempty"`
	// The status of the update job.
	JobState *string `json:"jobState,omitempty"`
	// The initial version of the ActiveGate.
	StartVersion *string `json:"startVersion,omitempty"`
	// The target version of the update.   Specify the version in the `<major>.<minor>.<revision>.<timestamp>` format.   To update to the latest available version, use the `latest` value.
	TargetVersion string `json:"targetVersion"`
	// The timestamp of the update job completion.    The `null` value means the job is still running.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// The method of updating the ActiveGate or its component.
	UpdateMethod *string `json:"updateMethod,omitempty"`
	// The component to be updated.
	UpdateType *string `json:"updateType,omitempty"`
}

// NewUpdateJob instantiates a new UpdateJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateJob(targetVersion string) *UpdateJob {
	this := UpdateJob{}
	this.TargetVersion = targetVersion
	return &this
}

// NewUpdateJobWithDefaults instantiates a new UpdateJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateJobWithDefaults() *UpdateJob {
	this := UpdateJob{}
	return &this
}

// GetAgType returns the AgType field value if set, zero value otherwise.
func (o *UpdateJob) GetAgType() string {
	if o == nil || IsNil(o.AgType) {
		var ret string
		return ret
	}
	return *o.AgType
}

// GetAgTypeOk returns a tuple with the AgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetAgTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AgType) {
		return nil, false
	}
	return o.AgType, true
}

// HasAgType returns a boolean if a field has been set.
func (o *UpdateJob) HasAgType() bool {
	if o != nil && !IsNil(o.AgType) {
		return true
	}

	return false
}

// SetAgType gets a reference to the given string and assigns it to the AgType field.
func (o *UpdateJob) SetAgType(v string) {
	o.AgType = &v
}

// GetCancelable returns the Cancelable field value if set, zero value otherwise.
func (o *UpdateJob) GetCancelable() bool {
	if o == nil || IsNil(o.Cancelable) {
		var ret bool
		return ret
	}
	return *o.Cancelable
}

// GetCancelableOk returns a tuple with the Cancelable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetCancelableOk() (*bool, bool) {
	if o == nil || IsNil(o.Cancelable) {
		return nil, false
	}
	return o.Cancelable, true
}

// HasCancelable returns a boolean if a field has been set.
func (o *UpdateJob) HasCancelable() bool {
	if o != nil && !IsNil(o.Cancelable) {
		return true
	}

	return false
}

// SetCancelable gets a reference to the given bool and assigns it to the Cancelable field.
func (o *UpdateJob) SetCancelable(v bool) {
	o.Cancelable = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *UpdateJob) GetDuration() int64 {
	if o == nil || IsNil(o.Duration) {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *UpdateJob) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *UpdateJob) SetDuration(v int64) {
	o.Duration = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *UpdateJob) GetEnvironments() []string {
	if o == nil || IsNil(o.Environments) {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *UpdateJob) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *UpdateJob) SetEnvironments(v []string) {
	o.Environments = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *UpdateJob) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *UpdateJob) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *UpdateJob) SetError(v string) {
	o.Error = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *UpdateJob) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *UpdateJob) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *UpdateJob) SetJobId(v string) {
	o.JobId = &v
}

// GetJobState returns the JobState field value if set, zero value otherwise.
func (o *UpdateJob) GetJobState() string {
	if o == nil || IsNil(o.JobState) {
		var ret string
		return ret
	}
	return *o.JobState
}

// GetJobStateOk returns a tuple with the JobState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetJobStateOk() (*string, bool) {
	if o == nil || IsNil(o.JobState) {
		return nil, false
	}
	return o.JobState, true
}

// HasJobState returns a boolean if a field has been set.
func (o *UpdateJob) HasJobState() bool {
	if o != nil && !IsNil(o.JobState) {
		return true
	}

	return false
}

// SetJobState gets a reference to the given string and assigns it to the JobState field.
func (o *UpdateJob) SetJobState(v string) {
	o.JobState = &v
}

// GetStartVersion returns the StartVersion field value if set, zero value otherwise.
func (o *UpdateJob) GetStartVersion() string {
	if o == nil || IsNil(o.StartVersion) {
		var ret string
		return ret
	}
	return *o.StartVersion
}

// GetStartVersionOk returns a tuple with the StartVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetStartVersionOk() (*string, bool) {
	if o == nil || IsNil(o.StartVersion) {
		return nil, false
	}
	return o.StartVersion, true
}

// HasStartVersion returns a boolean if a field has been set.
func (o *UpdateJob) HasStartVersion() bool {
	if o != nil && !IsNil(o.StartVersion) {
		return true
	}

	return false
}

// SetStartVersion gets a reference to the given string and assigns it to the StartVersion field.
func (o *UpdateJob) SetStartVersion(v string) {
	o.StartVersion = &v
}

// GetTargetVersion returns the TargetVersion field value
func (o *UpdateJob) GetTargetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetVersion
}

// GetTargetVersionOk returns a tuple with the TargetVersion field value
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetTargetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetVersion, true
}

// SetTargetVersion sets field value
func (o *UpdateJob) SetTargetVersion(v string) {
	o.TargetVersion = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *UpdateJob) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UpdateJob) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *UpdateJob) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetUpdateMethod returns the UpdateMethod field value if set, zero value otherwise.
func (o *UpdateJob) GetUpdateMethod() string {
	if o == nil || IsNil(o.UpdateMethod) {
		var ret string
		return ret
	}
	return *o.UpdateMethod
}

// GetUpdateMethodOk returns a tuple with the UpdateMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetUpdateMethodOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateMethod) {
		return nil, false
	}
	return o.UpdateMethod, true
}

// HasUpdateMethod returns a boolean if a field has been set.
func (o *UpdateJob) HasUpdateMethod() bool {
	if o != nil && !IsNil(o.UpdateMethod) {
		return true
	}

	return false
}

// SetUpdateMethod gets a reference to the given string and assigns it to the UpdateMethod field.
func (o *UpdateJob) SetUpdateMethod(v string) {
	o.UpdateMethod = &v
}

// GetUpdateType returns the UpdateType field value if set, zero value otherwise.
func (o *UpdateJob) GetUpdateType() string {
	if o == nil || IsNil(o.UpdateType) {
		var ret string
		return ret
	}
	return *o.UpdateType
}

// GetUpdateTypeOk returns a tuple with the UpdateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJob) GetUpdateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateType) {
		return nil, false
	}
	return o.UpdateType, true
}

// HasUpdateType returns a boolean if a field has been set.
func (o *UpdateJob) HasUpdateType() bool {
	if o != nil && !IsNil(o.UpdateType) {
		return true
	}

	return false
}

// SetUpdateType gets a reference to the given string and assigns it to the UpdateType field.
func (o *UpdateJob) SetUpdateType(v string) {
	o.UpdateType = &v
}

func (o UpdateJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AgType) {
		toSerialize["agType"] = o.AgType
	}
	if !IsNil(o.Cancelable) {
		toSerialize["cancelable"] = o.Cancelable
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !IsNil(o.JobState) {
		toSerialize["jobState"] = o.JobState
	}
	if !IsNil(o.StartVersion) {
		toSerialize["startVersion"] = o.StartVersion
	}
	toSerialize["targetVersion"] = o.TargetVersion
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.UpdateMethod) {
		toSerialize["updateMethod"] = o.UpdateMethod
	}
	if !IsNil(o.UpdateType) {
		toSerialize["updateType"] = o.UpdateType
	}
	return toSerialize, nil
}

type NullableUpdateJob struct {
	value *UpdateJob
	isSet bool
}

func (v NullableUpdateJob) Get() *UpdateJob {
	return v.value
}

func (v *NullableUpdateJob) Set(val *UpdateJob) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateJob) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateJob(val *UpdateJob) *NullableUpdateJob {
	return &NullableUpdateJob{value: val, isSet: true}
}

func (v NullableUpdateJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


