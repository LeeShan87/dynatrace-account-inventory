/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ProtocolDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtocolDetails{}

// ProtocolDetails Details that are specific to the used protocol.
type ProtocolDetails struct {
	Http *HttpProtocolDetails `json:"http,omitempty"`
}

// NewProtocolDetails instantiates a new ProtocolDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtocolDetails() *ProtocolDetails {
	this := ProtocolDetails{}
	return &this
}

// NewProtocolDetailsWithDefaults instantiates a new ProtocolDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtocolDetailsWithDefaults() *ProtocolDetails {
	this := ProtocolDetails{}
	return &this
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *ProtocolDetails) GetHttp() HttpProtocolDetails {
	if o == nil || IsNil(o.Http) {
		var ret HttpProtocolDetails
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolDetails) GetHttpOk() (*HttpProtocolDetails, bool) {
	if o == nil || IsNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *ProtocolDetails) HasHttp() bool {
	if o != nil && !IsNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given HttpProtocolDetails and assigns it to the Http field.
func (o *ProtocolDetails) SetHttp(v HttpProtocolDetails) {
	o.Http = &v
}

func (o ProtocolDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtocolDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	return toSerialize, nil
}

type NullableProtocolDetails struct {
	value *ProtocolDetails
	isSet bool
}

func (v NullableProtocolDetails) Get() *ProtocolDetails {
	return v.value
}

func (v *NullableProtocolDetails) Set(val *ProtocolDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolDetails(val *ProtocolDetails) *NullableProtocolDetails {
	return &NullableProtocolDetails{value: val, isSet: true}
}

func (v NullableProtocolDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


