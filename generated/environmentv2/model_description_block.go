/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the DescriptionBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescriptionBlock{}

// DescriptionBlock Represents a section of data describing the given capability.
type DescriptionBlock struct {
	// Collection of images (in case of gallery).
	Images []Image `json:"images,omitempty"`
	// Source of the description block (in case of markdown).
	Source NullableString `json:"source,omitempty"`
	// Optional identifier of special description blocks.
	SourceId NullableString `json:"sourceId,omitempty"`
	// Title of the description block.
	Title *string `json:"title,omitempty"`
	// Type of the data, either markdown or gallery.
	Type *string `json:"type,omitempty"`
}

// NewDescriptionBlock instantiates a new DescriptionBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescriptionBlock() *DescriptionBlock {
	this := DescriptionBlock{}
	return &this
}

// NewDescriptionBlockWithDefaults instantiates a new DescriptionBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescriptionBlockWithDefaults() *DescriptionBlock {
	this := DescriptionBlock{}
	return &this
}

// GetImages returns the Images field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DescriptionBlock) GetImages() []Image {
	if o == nil {
		var ret []Image
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DescriptionBlock) GetImagesOk() ([]Image, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *DescriptionBlock) HasImages() bool {
	if o != nil && IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []Image and assigns it to the Images field.
func (o *DescriptionBlock) SetImages(v []Image) {
	o.Images = v
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DescriptionBlock) GetSource() string {
	if o == nil || IsNil(o.Source.Get()) {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DescriptionBlock) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *DescriptionBlock) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *DescriptionBlock) SetSource(v string) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *DescriptionBlock) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *DescriptionBlock) UnsetSource() {
	o.Source.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DescriptionBlock) GetSourceId() string {
	if o == nil || IsNil(o.SourceId.Get()) {
		var ret string
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DescriptionBlock) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *DescriptionBlock) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableString and assigns it to the SourceId field.
func (o *DescriptionBlock) SetSourceId(v string) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *DescriptionBlock) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *DescriptionBlock) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *DescriptionBlock) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescriptionBlock) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *DescriptionBlock) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *DescriptionBlock) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DescriptionBlock) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescriptionBlock) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DescriptionBlock) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DescriptionBlock) SetType(v string) {
	o.Type = &v
}

func (o DescriptionBlock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescriptionBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDescriptionBlock struct {
	value *DescriptionBlock
	isSet bool
}

func (v NullableDescriptionBlock) Get() *DescriptionBlock {
	return v.value
}

func (v *NullableDescriptionBlock) Set(val *DescriptionBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableDescriptionBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableDescriptionBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescriptionBlock(val *DescriptionBlock) *NullableDescriptionBlock {
	return &NullableDescriptionBlock{value: val, isSet: true}
}

func (v NullableDescriptionBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescriptionBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


