/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EnumType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnumType{}

// EnumType Definition of an enum property.
type EnumType struct {
	// A short description of the property.
	Description string `json:"description"`
	// The display name of the property.
	DisplayName *string `json:"displayName,omitempty"`
	// An extended description and/or links to documentation.
	Documentation string `json:"documentation"`
	// An existing Java enum class that holds the allowed values of the enum.
	EnumClass *string `json:"enumClass,omitempty"`
	// A list of allowed values of the enum.
	Items []EnumValue `json:"items"`
	// The type of the property.
	Type string `json:"type"`
}

// NewEnumType instantiates a new EnumType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnumType(description string, documentation string, items []EnumValue, type_ string) *EnumType {
	this := EnumType{}
	this.Description = description
	this.Documentation = documentation
	this.Items = items
	this.Type = type_
	return &this
}

// NewEnumTypeWithDefaults instantiates a new EnumType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnumTypeWithDefaults() *EnumType {
	this := EnumType{}
	return &this
}

// GetDescription returns the Description field value
func (o *EnumType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EnumType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EnumType) SetDescription(v string) {
	o.Description = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EnumType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EnumType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EnumType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDocumentation returns the Documentation field value
func (o *EnumType) GetDocumentation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value
// and a boolean to check if the value has been set.
func (o *EnumType) GetDocumentationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Documentation, true
}

// SetDocumentation sets field value
func (o *EnumType) SetDocumentation(v string) {
	o.Documentation = v
}

// GetEnumClass returns the EnumClass field value if set, zero value otherwise.
func (o *EnumType) GetEnumClass() string {
	if o == nil || IsNil(o.EnumClass) {
		var ret string
		return ret
	}
	return *o.EnumClass
}

// GetEnumClassOk returns a tuple with the EnumClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumType) GetEnumClassOk() (*string, bool) {
	if o == nil || IsNil(o.EnumClass) {
		return nil, false
	}
	return o.EnumClass, true
}

// HasEnumClass returns a boolean if a field has been set.
func (o *EnumType) HasEnumClass() bool {
	if o != nil && !IsNil(o.EnumClass) {
		return true
	}

	return false
}

// SetEnumClass gets a reference to the given string and assigns it to the EnumClass field.
func (o *EnumType) SetEnumClass(v string) {
	o.EnumClass = &v
}

// GetItems returns the Items field value
func (o *EnumType) GetItems() []EnumValue {
	if o == nil {
		var ret []EnumValue
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *EnumType) GetItemsOk() ([]EnumValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *EnumType) SetItems(v []EnumValue) {
	o.Items = v
}

// GetType returns the Type field value
func (o *EnumType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EnumType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EnumType) SetType(v string) {
	o.Type = v
}

func (o EnumType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnumType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["documentation"] = o.Documentation
	if !IsNil(o.EnumClass) {
		toSerialize["enumClass"] = o.EnumClass
	}
	toSerialize["items"] = o.Items
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableEnumType struct {
	value *EnumType
	isSet bool
}

func (v NullableEnumType) Get() *EnumType {
	return v.value
}

func (v *NullableEnumType) Set(val *EnumType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumType(val *EnumType) *NullableEnumType {
	return &NullableEnumType{value: val, isSet: true}
}

func (v NullableEnumType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


