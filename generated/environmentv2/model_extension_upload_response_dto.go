/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ExtensionUploadResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionUploadResponseDto{}

// ExtensionUploadResponseDto struct for ExtensionUploadResponseDto
type ExtensionUploadResponseDto struct {
	// Information about extension assets included
	AssetsInfo []AssetInfo `json:"assetsInfo,omitempty"`
	Author *AuthorDto `json:"author,omitempty"`
	// Data sources that extension uses to gather data
	DataSources []string `json:"dataSources,omitempty"`
	// Extension name
	ExtensionName *string `json:"extensionName,omitempty"`
	// Available feature sets
	FeatureSets []string `json:"featureSets,omitempty"`
	// Details of feature sets
	FeatureSetsDetails *map[string]FeatureSetDetails `json:"featureSetsDetails,omitempty"`
	// SHA-256 hash of uploaded Extension file
	FileHash *string `json:"fileHash,omitempty"`
	// Minimal Dynatrace version that works with the extension
	MinDynatraceVersion *string `json:"minDynatraceVersion,omitempty"`
	// Minimal Extension Execution Controller version that works with the extension
	MinEECVersion *string `json:"minEECVersion,omitempty"`
	// Custom variables used in extension configuration
	Variables []string `json:"variables,omitempty"`
	// Extension version
	Version *string `json:"version,omitempty"`
}

// NewExtensionUploadResponseDto instantiates a new ExtensionUploadResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionUploadResponseDto() *ExtensionUploadResponseDto {
	this := ExtensionUploadResponseDto{}
	return &this
}

// NewExtensionUploadResponseDtoWithDefaults instantiates a new ExtensionUploadResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionUploadResponseDtoWithDefaults() *ExtensionUploadResponseDto {
	this := ExtensionUploadResponseDto{}
	return &this
}

// GetAssetsInfo returns the AssetsInfo field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetAssetsInfo() []AssetInfo {
	if o == nil || IsNil(o.AssetsInfo) {
		var ret []AssetInfo
		return ret
	}
	return o.AssetsInfo
}

// GetAssetsInfoOk returns a tuple with the AssetsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetAssetsInfoOk() ([]AssetInfo, bool) {
	if o == nil || IsNil(o.AssetsInfo) {
		return nil, false
	}
	return o.AssetsInfo, true
}

// HasAssetsInfo returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasAssetsInfo() bool {
	if o != nil && !IsNil(o.AssetsInfo) {
		return true
	}

	return false
}

// SetAssetsInfo gets a reference to the given []AssetInfo and assigns it to the AssetsInfo field.
func (o *ExtensionUploadResponseDto) SetAssetsInfo(v []AssetInfo) {
	o.AssetsInfo = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetAuthor() AuthorDto {
	if o == nil || IsNil(o.Author) {
		var ret AuthorDto
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetAuthorOk() (*AuthorDto, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given AuthorDto and assigns it to the Author field.
func (o *ExtensionUploadResponseDto) SetAuthor(v AuthorDto) {
	o.Author = &v
}

// GetDataSources returns the DataSources field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetDataSources() []string {
	if o == nil || IsNil(o.DataSources) {
		var ret []string
		return ret
	}
	return o.DataSources
}

// GetDataSourcesOk returns a tuple with the DataSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetDataSourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.DataSources) {
		return nil, false
	}
	return o.DataSources, true
}

// HasDataSources returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasDataSources() bool {
	if o != nil && !IsNil(o.DataSources) {
		return true
	}

	return false
}

// SetDataSources gets a reference to the given []string and assigns it to the DataSources field.
func (o *ExtensionUploadResponseDto) SetDataSources(v []string) {
	o.DataSources = v
}

// GetExtensionName returns the ExtensionName field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetExtensionName() string {
	if o == nil || IsNil(o.ExtensionName) {
		var ret string
		return ret
	}
	return *o.ExtensionName
}

// GetExtensionNameOk returns a tuple with the ExtensionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetExtensionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExtensionName) {
		return nil, false
	}
	return o.ExtensionName, true
}

// HasExtensionName returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasExtensionName() bool {
	if o != nil && !IsNil(o.ExtensionName) {
		return true
	}

	return false
}

// SetExtensionName gets a reference to the given string and assigns it to the ExtensionName field.
func (o *ExtensionUploadResponseDto) SetExtensionName(v string) {
	o.ExtensionName = &v
}

// GetFeatureSets returns the FeatureSets field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetFeatureSets() []string {
	if o == nil || IsNil(o.FeatureSets) {
		var ret []string
		return ret
	}
	return o.FeatureSets
}

// GetFeatureSetsOk returns a tuple with the FeatureSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetFeatureSetsOk() ([]string, bool) {
	if o == nil || IsNil(o.FeatureSets) {
		return nil, false
	}
	return o.FeatureSets, true
}

// HasFeatureSets returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasFeatureSets() bool {
	if o != nil && !IsNil(o.FeatureSets) {
		return true
	}

	return false
}

// SetFeatureSets gets a reference to the given []string and assigns it to the FeatureSets field.
func (o *ExtensionUploadResponseDto) SetFeatureSets(v []string) {
	o.FeatureSets = v
}

// GetFeatureSetsDetails returns the FeatureSetsDetails field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetFeatureSetsDetails() map[string]FeatureSetDetails {
	if o == nil || IsNil(o.FeatureSetsDetails) {
		var ret map[string]FeatureSetDetails
		return ret
	}
	return *o.FeatureSetsDetails
}

// GetFeatureSetsDetailsOk returns a tuple with the FeatureSetsDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetFeatureSetsDetailsOk() (*map[string]FeatureSetDetails, bool) {
	if o == nil || IsNil(o.FeatureSetsDetails) {
		return nil, false
	}
	return o.FeatureSetsDetails, true
}

// HasFeatureSetsDetails returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasFeatureSetsDetails() bool {
	if o != nil && !IsNil(o.FeatureSetsDetails) {
		return true
	}

	return false
}

// SetFeatureSetsDetails gets a reference to the given map[string]FeatureSetDetails and assigns it to the FeatureSetsDetails field.
func (o *ExtensionUploadResponseDto) SetFeatureSetsDetails(v map[string]FeatureSetDetails) {
	o.FeatureSetsDetails = &v
}

// GetFileHash returns the FileHash field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetFileHash() string {
	if o == nil || IsNil(o.FileHash) {
		var ret string
		return ret
	}
	return *o.FileHash
}

// GetFileHashOk returns a tuple with the FileHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetFileHashOk() (*string, bool) {
	if o == nil || IsNil(o.FileHash) {
		return nil, false
	}
	return o.FileHash, true
}

// HasFileHash returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasFileHash() bool {
	if o != nil && !IsNil(o.FileHash) {
		return true
	}

	return false
}

// SetFileHash gets a reference to the given string and assigns it to the FileHash field.
func (o *ExtensionUploadResponseDto) SetFileHash(v string) {
	o.FileHash = &v
}

// GetMinDynatraceVersion returns the MinDynatraceVersion field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetMinDynatraceVersion() string {
	if o == nil || IsNil(o.MinDynatraceVersion) {
		var ret string
		return ret
	}
	return *o.MinDynatraceVersion
}

// GetMinDynatraceVersionOk returns a tuple with the MinDynatraceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetMinDynatraceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MinDynatraceVersion) {
		return nil, false
	}
	return o.MinDynatraceVersion, true
}

// HasMinDynatraceVersion returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasMinDynatraceVersion() bool {
	if o != nil && !IsNil(o.MinDynatraceVersion) {
		return true
	}

	return false
}

// SetMinDynatraceVersion gets a reference to the given string and assigns it to the MinDynatraceVersion field.
func (o *ExtensionUploadResponseDto) SetMinDynatraceVersion(v string) {
	o.MinDynatraceVersion = &v
}

// GetMinEECVersion returns the MinEECVersion field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetMinEECVersion() string {
	if o == nil || IsNil(o.MinEECVersion) {
		var ret string
		return ret
	}
	return *o.MinEECVersion
}

// GetMinEECVersionOk returns a tuple with the MinEECVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetMinEECVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MinEECVersion) {
		return nil, false
	}
	return o.MinEECVersion, true
}

// HasMinEECVersion returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasMinEECVersion() bool {
	if o != nil && !IsNil(o.MinEECVersion) {
		return true
	}

	return false
}

// SetMinEECVersion gets a reference to the given string and assigns it to the MinEECVersion field.
func (o *ExtensionUploadResponseDto) SetMinEECVersion(v string) {
	o.MinEECVersion = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetVariables() []string {
	if o == nil || IsNil(o.Variables) {
		var ret []string
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetVariablesOk() ([]string, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []string and assigns it to the Variables field.
func (o *ExtensionUploadResponseDto) SetVariables(v []string) {
	o.Variables = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExtensionUploadResponseDto) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionUploadResponseDto) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExtensionUploadResponseDto) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExtensionUploadResponseDto) SetVersion(v string) {
	o.Version = &v
}

func (o ExtensionUploadResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionUploadResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetsInfo) {
		toSerialize["assetsInfo"] = o.AssetsInfo
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.DataSources) {
		toSerialize["dataSources"] = o.DataSources
	}
	if !IsNil(o.ExtensionName) {
		toSerialize["extensionName"] = o.ExtensionName
	}
	if !IsNil(o.FeatureSets) {
		toSerialize["featureSets"] = o.FeatureSets
	}
	if !IsNil(o.FeatureSetsDetails) {
		toSerialize["featureSetsDetails"] = o.FeatureSetsDetails
	}
	if !IsNil(o.FileHash) {
		toSerialize["fileHash"] = o.FileHash
	}
	if !IsNil(o.MinDynatraceVersion) {
		toSerialize["minDynatraceVersion"] = o.MinDynatraceVersion
	}
	if !IsNil(o.MinEECVersion) {
		toSerialize["minEECVersion"] = o.MinEECVersion
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableExtensionUploadResponseDto struct {
	value *ExtensionUploadResponseDto
	isSet bool
}

func (v NullableExtensionUploadResponseDto) Get() *ExtensionUploadResponseDto {
	return v.value
}

func (v *NullableExtensionUploadResponseDto) Set(val *ExtensionUploadResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionUploadResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionUploadResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionUploadResponseDto(val *ExtensionUploadResponseDto) *NullableExtensionUploadResponseDto {
	return &NullableExtensionUploadResponseDto{value: val, isSet: true}
}

func (v NullableExtensionUploadResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionUploadResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


