/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Problem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Problem{}

// Problem The properties of a problem.
type Problem struct {
	// A list of all entities that are affected by the problem.
	AffectedEntities []EntityStub `json:"affectedEntities"`
	// The display ID of the problem.
	DisplayId string `json:"displayId"`
	// The end timestamp of the problem, in UTC milliseconds.    Has `-1` value, if the problem is still open.
	EndTime int64 `json:"endTime"`
	// A list of all entity tags of the problem.
	EntityTags []METag `json:"entityTags,omitempty"`
	EvidenceDetails *EvidenceDetails `json:"evidenceDetails,omitempty"`
	ImpactAnalysis *ImpactAnalysis `json:"impactAnalysis,omitempty"`
	// The impact level of the problem. It shows what is affected by the problem.
	ImpactLevel string `json:"impactLevel"`
	// A list of all entities that are impacted by the problem.
	ImpactedEntities []EntityStub `json:"impactedEntities"`
	LinkedProblemInfo *LinkedProblem `json:"linkedProblemInfo,omitempty"`
	// A list of all management zones that the problem belongs to.
	ManagementZones []ManagementZone `json:"managementZones"`
	// A list of alerting profiles that match the problem.
	ProblemFilters []AlertingProfileStub `json:"problemFilters"`
	// The ID of the problem.
	ProblemId string `json:"problemId"`
	RecentComments *CommentsList `json:"recentComments,omitempty"`
	RootCauseEntity *EntityStub `json:"rootCauseEntity,omitempty"`
	// The severity of the problem.
	SeverityLevel string `json:"severityLevel"`
	// The start timestamp of the problem, in UTC milliseconds.
	StartTime int64 `json:"startTime"`
	// The status of the problem.
	Status string `json:"status"`
	// The name of the problem, displayed in the UI.
	Title string `json:"title"`
}

// NewProblem instantiates a new Problem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblem(affectedEntities []EntityStub, displayId string, endTime int64, impactLevel string, impactedEntities []EntityStub, managementZones []ManagementZone, problemFilters []AlertingProfileStub, problemId string, severityLevel string, startTime int64, status string, title string) *Problem {
	this := Problem{}
	this.AffectedEntities = affectedEntities
	this.DisplayId = displayId
	this.EndTime = endTime
	this.ImpactLevel = impactLevel
	this.ImpactedEntities = impactedEntities
	this.ManagementZones = managementZones
	this.ProblemFilters = problemFilters
	this.ProblemId = problemId
	this.SeverityLevel = severityLevel
	this.StartTime = startTime
	this.Status = status
	this.Title = title
	return &this
}

// NewProblemWithDefaults instantiates a new Problem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemWithDefaults() *Problem {
	this := Problem{}
	return &this
}

// GetAffectedEntities returns the AffectedEntities field value
func (o *Problem) GetAffectedEntities() []EntityStub {
	if o == nil {
		var ret []EntityStub
		return ret
	}

	return o.AffectedEntities
}

// GetAffectedEntitiesOk returns a tuple with the AffectedEntities field value
// and a boolean to check if the value has been set.
func (o *Problem) GetAffectedEntitiesOk() ([]EntityStub, bool) {
	if o == nil {
		return nil, false
	}
	return o.AffectedEntities, true
}

// SetAffectedEntities sets field value
func (o *Problem) SetAffectedEntities(v []EntityStub) {
	o.AffectedEntities = v
}

// GetDisplayId returns the DisplayId field value
func (o *Problem) GetDisplayId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value
// and a boolean to check if the value has been set.
func (o *Problem) GetDisplayIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayId, true
}

// SetDisplayId sets field value
func (o *Problem) SetDisplayId(v string) {
	o.DisplayId = v
}

// GetEndTime returns the EndTime field value
func (o *Problem) GetEndTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *Problem) GetEndTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *Problem) SetEndTime(v int64) {
	o.EndTime = v
}

// GetEntityTags returns the EntityTags field value if set, zero value otherwise.
func (o *Problem) GetEntityTags() []METag {
	if o == nil || IsNil(o.EntityTags) {
		var ret []METag
		return ret
	}
	return o.EntityTags
}

// GetEntityTagsOk returns a tuple with the EntityTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetEntityTagsOk() ([]METag, bool) {
	if o == nil || IsNil(o.EntityTags) {
		return nil, false
	}
	return o.EntityTags, true
}

// HasEntityTags returns a boolean if a field has been set.
func (o *Problem) HasEntityTags() bool {
	if o != nil && !IsNil(o.EntityTags) {
		return true
	}

	return false
}

// SetEntityTags gets a reference to the given []METag and assigns it to the EntityTags field.
func (o *Problem) SetEntityTags(v []METag) {
	o.EntityTags = v
}

// GetEvidenceDetails returns the EvidenceDetails field value if set, zero value otherwise.
func (o *Problem) GetEvidenceDetails() EvidenceDetails {
	if o == nil || IsNil(o.EvidenceDetails) {
		var ret EvidenceDetails
		return ret
	}
	return *o.EvidenceDetails
}

// GetEvidenceDetailsOk returns a tuple with the EvidenceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetEvidenceDetailsOk() (*EvidenceDetails, bool) {
	if o == nil || IsNil(o.EvidenceDetails) {
		return nil, false
	}
	return o.EvidenceDetails, true
}

// HasEvidenceDetails returns a boolean if a field has been set.
func (o *Problem) HasEvidenceDetails() bool {
	if o != nil && !IsNil(o.EvidenceDetails) {
		return true
	}

	return false
}

// SetEvidenceDetails gets a reference to the given EvidenceDetails and assigns it to the EvidenceDetails field.
func (o *Problem) SetEvidenceDetails(v EvidenceDetails) {
	o.EvidenceDetails = &v
}

// GetImpactAnalysis returns the ImpactAnalysis field value if set, zero value otherwise.
func (o *Problem) GetImpactAnalysis() ImpactAnalysis {
	if o == nil || IsNil(o.ImpactAnalysis) {
		var ret ImpactAnalysis
		return ret
	}
	return *o.ImpactAnalysis
}

// GetImpactAnalysisOk returns a tuple with the ImpactAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetImpactAnalysisOk() (*ImpactAnalysis, bool) {
	if o == nil || IsNil(o.ImpactAnalysis) {
		return nil, false
	}
	return o.ImpactAnalysis, true
}

// HasImpactAnalysis returns a boolean if a field has been set.
func (o *Problem) HasImpactAnalysis() bool {
	if o != nil && !IsNil(o.ImpactAnalysis) {
		return true
	}

	return false
}

// SetImpactAnalysis gets a reference to the given ImpactAnalysis and assigns it to the ImpactAnalysis field.
func (o *Problem) SetImpactAnalysis(v ImpactAnalysis) {
	o.ImpactAnalysis = &v
}

// GetImpactLevel returns the ImpactLevel field value
func (o *Problem) GetImpactLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImpactLevel
}

// GetImpactLevelOk returns a tuple with the ImpactLevel field value
// and a boolean to check if the value has been set.
func (o *Problem) GetImpactLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImpactLevel, true
}

// SetImpactLevel sets field value
func (o *Problem) SetImpactLevel(v string) {
	o.ImpactLevel = v
}

// GetImpactedEntities returns the ImpactedEntities field value
func (o *Problem) GetImpactedEntities() []EntityStub {
	if o == nil {
		var ret []EntityStub
		return ret
	}

	return o.ImpactedEntities
}

// GetImpactedEntitiesOk returns a tuple with the ImpactedEntities field value
// and a boolean to check if the value has been set.
func (o *Problem) GetImpactedEntitiesOk() ([]EntityStub, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImpactedEntities, true
}

// SetImpactedEntities sets field value
func (o *Problem) SetImpactedEntities(v []EntityStub) {
	o.ImpactedEntities = v
}

// GetLinkedProblemInfo returns the LinkedProblemInfo field value if set, zero value otherwise.
func (o *Problem) GetLinkedProblemInfo() LinkedProblem {
	if o == nil || IsNil(o.LinkedProblemInfo) {
		var ret LinkedProblem
		return ret
	}
	return *o.LinkedProblemInfo
}

// GetLinkedProblemInfoOk returns a tuple with the LinkedProblemInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetLinkedProblemInfoOk() (*LinkedProblem, bool) {
	if o == nil || IsNil(o.LinkedProblemInfo) {
		return nil, false
	}
	return o.LinkedProblemInfo, true
}

// HasLinkedProblemInfo returns a boolean if a field has been set.
func (o *Problem) HasLinkedProblemInfo() bool {
	if o != nil && !IsNil(o.LinkedProblemInfo) {
		return true
	}

	return false
}

// SetLinkedProblemInfo gets a reference to the given LinkedProblem and assigns it to the LinkedProblemInfo field.
func (o *Problem) SetLinkedProblemInfo(v LinkedProblem) {
	o.LinkedProblemInfo = &v
}

// GetManagementZones returns the ManagementZones field value
func (o *Problem) GetManagementZones() []ManagementZone {
	if o == nil {
		var ret []ManagementZone
		return ret
	}

	return o.ManagementZones
}

// GetManagementZonesOk returns a tuple with the ManagementZones field value
// and a boolean to check if the value has been set.
func (o *Problem) GetManagementZonesOk() ([]ManagementZone, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementZones, true
}

// SetManagementZones sets field value
func (o *Problem) SetManagementZones(v []ManagementZone) {
	o.ManagementZones = v
}

// GetProblemFilters returns the ProblemFilters field value
func (o *Problem) GetProblemFilters() []AlertingProfileStub {
	if o == nil {
		var ret []AlertingProfileStub
		return ret
	}

	return o.ProblemFilters
}

// GetProblemFiltersOk returns a tuple with the ProblemFilters field value
// and a boolean to check if the value has been set.
func (o *Problem) GetProblemFiltersOk() ([]AlertingProfileStub, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProblemFilters, true
}

// SetProblemFilters sets field value
func (o *Problem) SetProblemFilters(v []AlertingProfileStub) {
	o.ProblemFilters = v
}

// GetProblemId returns the ProblemId field value
func (o *Problem) GetProblemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProblemId
}

// GetProblemIdOk returns a tuple with the ProblemId field value
// and a boolean to check if the value has been set.
func (o *Problem) GetProblemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProblemId, true
}

// SetProblemId sets field value
func (o *Problem) SetProblemId(v string) {
	o.ProblemId = v
}

// GetRecentComments returns the RecentComments field value if set, zero value otherwise.
func (o *Problem) GetRecentComments() CommentsList {
	if o == nil || IsNil(o.RecentComments) {
		var ret CommentsList
		return ret
	}
	return *o.RecentComments
}

// GetRecentCommentsOk returns a tuple with the RecentComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetRecentCommentsOk() (*CommentsList, bool) {
	if o == nil || IsNil(o.RecentComments) {
		return nil, false
	}
	return o.RecentComments, true
}

// HasRecentComments returns a boolean if a field has been set.
func (o *Problem) HasRecentComments() bool {
	if o != nil && !IsNil(o.RecentComments) {
		return true
	}

	return false
}

// SetRecentComments gets a reference to the given CommentsList and assigns it to the RecentComments field.
func (o *Problem) SetRecentComments(v CommentsList) {
	o.RecentComments = &v
}

// GetRootCauseEntity returns the RootCauseEntity field value if set, zero value otherwise.
func (o *Problem) GetRootCauseEntity() EntityStub {
	if o == nil || IsNil(o.RootCauseEntity) {
		var ret EntityStub
		return ret
	}
	return *o.RootCauseEntity
}

// GetRootCauseEntityOk returns a tuple with the RootCauseEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetRootCauseEntityOk() (*EntityStub, bool) {
	if o == nil || IsNil(o.RootCauseEntity) {
		return nil, false
	}
	return o.RootCauseEntity, true
}

// HasRootCauseEntity returns a boolean if a field has been set.
func (o *Problem) HasRootCauseEntity() bool {
	if o != nil && !IsNil(o.RootCauseEntity) {
		return true
	}

	return false
}

// SetRootCauseEntity gets a reference to the given EntityStub and assigns it to the RootCauseEntity field.
func (o *Problem) SetRootCauseEntity(v EntityStub) {
	o.RootCauseEntity = &v
}

// GetSeverityLevel returns the SeverityLevel field value
func (o *Problem) GetSeverityLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeverityLevel
}

// GetSeverityLevelOk returns a tuple with the SeverityLevel field value
// and a boolean to check if the value has been set.
func (o *Problem) GetSeverityLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeverityLevel, true
}

// SetSeverityLevel sets field value
func (o *Problem) SetSeverityLevel(v string) {
	o.SeverityLevel = v
}

// GetStartTime returns the StartTime field value
func (o *Problem) GetStartTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Problem) GetStartTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Problem) SetStartTime(v int64) {
	o.StartTime = v
}

// GetStatus returns the Status field value
func (o *Problem) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Problem) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Problem) SetStatus(v string) {
	o.Status = v
}

// GetTitle returns the Title field value
func (o *Problem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Problem) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Problem) SetTitle(v string) {
	o.Title = v
}

func (o Problem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Problem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["affectedEntities"] = o.AffectedEntities
	toSerialize["displayId"] = o.DisplayId
	toSerialize["endTime"] = o.EndTime
	if !IsNil(o.EntityTags) {
		toSerialize["entityTags"] = o.EntityTags
	}
	if !IsNil(o.EvidenceDetails) {
		toSerialize["evidenceDetails"] = o.EvidenceDetails
	}
	if !IsNil(o.ImpactAnalysis) {
		toSerialize["impactAnalysis"] = o.ImpactAnalysis
	}
	toSerialize["impactLevel"] = o.ImpactLevel
	toSerialize["impactedEntities"] = o.ImpactedEntities
	if !IsNil(o.LinkedProblemInfo) {
		toSerialize["linkedProblemInfo"] = o.LinkedProblemInfo
	}
	toSerialize["managementZones"] = o.ManagementZones
	toSerialize["problemFilters"] = o.ProblemFilters
	toSerialize["problemId"] = o.ProblemId
	if !IsNil(o.RecentComments) {
		toSerialize["recentComments"] = o.RecentComments
	}
	if !IsNil(o.RootCauseEntity) {
		toSerialize["rootCauseEntity"] = o.RootCauseEntity
	}
	toSerialize["severityLevel"] = o.SeverityLevel
	toSerialize["startTime"] = o.StartTime
	toSerialize["status"] = o.Status
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

type NullableProblem struct {
	value *Problem
	isSet bool
}

func (v NullableProblem) Get() *Problem {
	return v.value
}

func (v *NullableProblem) Set(val *Problem) {
	v.value = val
	v.isSet = true
}

func (v NullableProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblem(val *Problem) *NullableProblem {
	return &NullableProblem{value: val, isSet: true}
}

func (v NullableProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


