/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SyntheticPrivateLocationUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntheticPrivateLocationUpdate{}

// SyntheticPrivateLocationUpdate Configuration of a private synthetic location
type SyntheticPrivateLocationUpdate struct {
	// Auto upgrade of Chromium is enabled (`true`) or disabled (`false`).
	AutoUpdateChromium *bool `json:"autoUpdateChromium,omitempty"`
	// Alerting for location outage is enabled (`true`) or disabled (`false`). Supported only for private Synthetic locations.
	AvailabilityLocationOutage *bool `json:"availabilityLocationOutage,omitempty"`
	// Alerting for node outage is enabled (`true`) or disabled (`false`). \\n\\n If enabled, the outage of *any* node in the location triggers an alert. Supported only for private Synthetic locations.
	AvailabilityNodeOutage *bool `json:"availabilityNodeOutage,omitempty"`
	// Notifications for location and node outage are enabled (`true`) or disabled (`false`). Supported only for private Synthetic locations.
	AvailabilityNotificationsEnabled *bool `json:"availabilityNotificationsEnabled,omitempty"`
	// The city of the location.
	City *string `json:"city,omitempty"`
	// The country code of the location.    To fetch the list of available country codes, use the [GET all countries](https://dt-url.net/37030go) request.
	CountryCode *string `json:"countryCode,omitempty"`
	// The deployment type of the location:   * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The location is deployed on Kubernetes.
	DeploymentType *string `json:"deploymentType,omitempty"`
	// The latitude of the location in `DDD.dddd` format.
	Latitude float64 `json:"latitude"`
	// Alert if location or node outage lasts longer than *X* minutes. \\n\\n Only applicable when `availabilityLocationOutage` or `availabilityNodeOutage` is set to `true`. Supported only for private Synthetic locations.
	LocationNodeOutageDelayInMinutes *int32 `json:"locationNodeOutageDelayInMinutes,omitempty"`
	// The longitude of the location in `DDD.dddd` format.
	Longitude float64 `json:"longitude"`
	// The name of the location.
	Name string `json:"name"`
	// A list of synthetic nodes belonging to the location.    You can retrieve the list of available nodes with the [GET all nodes](https://dt-url.net/miy3rpl) call.
	Nodes []string `json:"nodes"`
	// The region code of the location.    To fetch the list of available region codes, use the [GET regions of the country](https://dt-url.net/az230x0) request.
	RegionCode *string `json:"regionCode,omitempty"`
	// The status of the location:   * `ENABLED`: The location is displayed as active in the UI. You can assign monitors to the location.  * `DISABLED`: The location is displayed as inactive in the UI. You can't assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location.  * `HIDDEN`: The location is not displayed in the UI. You can't assign monitors to the location. You can only set location as `HIDDEN` when no monitor is assigned to it.
	Status *string `json:"status,omitempty"`
	// Boolean value describes which kubernetes version will be used:  * `false`: Version 1.23+ that is older than 1.26 * `true`: Version 1.26+.
	UseNewKubernetesVersion *bool `json:"useNewKubernetesVersion,omitempty"`
}

// NewSyntheticPrivateLocationUpdate instantiates a new SyntheticPrivateLocationUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticPrivateLocationUpdate(latitude float64, longitude float64, name string, nodes []string, type_ string) *SyntheticPrivateLocationUpdate {
	this := SyntheticPrivateLocationUpdate{}
	this.Type = type_
	this.Latitude = latitude
	this.Longitude = longitude
	this.Name = name
	this.Nodes = nodes
	return &this
}

// NewSyntheticPrivateLocationUpdateWithDefaults instantiates a new SyntheticPrivateLocationUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticPrivateLocationUpdateWithDefaults() *SyntheticPrivateLocationUpdate {
	this := SyntheticPrivateLocationUpdate{}
	return &this
}

// GetAutoUpdateChromium returns the AutoUpdateChromium field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetAutoUpdateChromium() bool {
	if o == nil || IsNil(o.AutoUpdateChromium) {
		var ret bool
		return ret
	}
	return *o.AutoUpdateChromium
}

// GetAutoUpdateChromiumOk returns a tuple with the AutoUpdateChromium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetAutoUpdateChromiumOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoUpdateChromium) {
		return nil, false
	}
	return o.AutoUpdateChromium, true
}

// HasAutoUpdateChromium returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasAutoUpdateChromium() bool {
	if o != nil && !IsNil(o.AutoUpdateChromium) {
		return true
	}

	return false
}

// SetAutoUpdateChromium gets a reference to the given bool and assigns it to the AutoUpdateChromium field.
func (o *SyntheticPrivateLocationUpdate) SetAutoUpdateChromium(v bool) {
	o.AutoUpdateChromium = &v
}

// GetAvailabilityLocationOutage returns the AvailabilityLocationOutage field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetAvailabilityLocationOutage() bool {
	if o == nil || IsNil(o.AvailabilityLocationOutage) {
		var ret bool
		return ret
	}
	return *o.AvailabilityLocationOutage
}

// GetAvailabilityLocationOutageOk returns a tuple with the AvailabilityLocationOutage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetAvailabilityLocationOutageOk() (*bool, bool) {
	if o == nil || IsNil(o.AvailabilityLocationOutage) {
		return nil, false
	}
	return o.AvailabilityLocationOutage, true
}

// HasAvailabilityLocationOutage returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasAvailabilityLocationOutage() bool {
	if o != nil && !IsNil(o.AvailabilityLocationOutage) {
		return true
	}

	return false
}

// SetAvailabilityLocationOutage gets a reference to the given bool and assigns it to the AvailabilityLocationOutage field.
func (o *SyntheticPrivateLocationUpdate) SetAvailabilityLocationOutage(v bool) {
	o.AvailabilityLocationOutage = &v
}

// GetAvailabilityNodeOutage returns the AvailabilityNodeOutage field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetAvailabilityNodeOutage() bool {
	if o == nil || IsNil(o.AvailabilityNodeOutage) {
		var ret bool
		return ret
	}
	return *o.AvailabilityNodeOutage
}

// GetAvailabilityNodeOutageOk returns a tuple with the AvailabilityNodeOutage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetAvailabilityNodeOutageOk() (*bool, bool) {
	if o == nil || IsNil(o.AvailabilityNodeOutage) {
		return nil, false
	}
	return o.AvailabilityNodeOutage, true
}

// HasAvailabilityNodeOutage returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasAvailabilityNodeOutage() bool {
	if o != nil && !IsNil(o.AvailabilityNodeOutage) {
		return true
	}

	return false
}

// SetAvailabilityNodeOutage gets a reference to the given bool and assigns it to the AvailabilityNodeOutage field.
func (o *SyntheticPrivateLocationUpdate) SetAvailabilityNodeOutage(v bool) {
	o.AvailabilityNodeOutage = &v
}

// GetAvailabilityNotificationsEnabled returns the AvailabilityNotificationsEnabled field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetAvailabilityNotificationsEnabled() bool {
	if o == nil || IsNil(o.AvailabilityNotificationsEnabled) {
		var ret bool
		return ret
	}
	return *o.AvailabilityNotificationsEnabled
}

// GetAvailabilityNotificationsEnabledOk returns a tuple with the AvailabilityNotificationsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetAvailabilityNotificationsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AvailabilityNotificationsEnabled) {
		return nil, false
	}
	return o.AvailabilityNotificationsEnabled, true
}

// HasAvailabilityNotificationsEnabled returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasAvailabilityNotificationsEnabled() bool {
	if o != nil && !IsNil(o.AvailabilityNotificationsEnabled) {
		return true
	}

	return false
}

// SetAvailabilityNotificationsEnabled gets a reference to the given bool and assigns it to the AvailabilityNotificationsEnabled field.
func (o *SyntheticPrivateLocationUpdate) SetAvailabilityNotificationsEnabled(v bool) {
	o.AvailabilityNotificationsEnabled = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *SyntheticPrivateLocationUpdate) SetCity(v string) {
	o.City = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *SyntheticPrivateLocationUpdate) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetDeploymentType returns the DeploymentType field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetDeploymentType() string {
	if o == nil || IsNil(o.DeploymentType) {
		var ret string
		return ret
	}
	return *o.DeploymentType
}

// GetDeploymentTypeOk returns a tuple with the DeploymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetDeploymentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentType) {
		return nil, false
	}
	return o.DeploymentType, true
}

// HasDeploymentType returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasDeploymentType() bool {
	if o != nil && !IsNil(o.DeploymentType) {
		return true
	}

	return false
}

// SetDeploymentType gets a reference to the given string and assigns it to the DeploymentType field.
func (o *SyntheticPrivateLocationUpdate) SetDeploymentType(v string) {
	o.DeploymentType = &v
}

// GetLatitude returns the Latitude field value
func (o *SyntheticPrivateLocationUpdate) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *SyntheticPrivateLocationUpdate) SetLatitude(v float64) {
	o.Latitude = v
}

// GetLocationNodeOutageDelayInMinutes returns the LocationNodeOutageDelayInMinutes field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetLocationNodeOutageDelayInMinutes() int32 {
	if o == nil || IsNil(o.LocationNodeOutageDelayInMinutes) {
		var ret int32
		return ret
	}
	return *o.LocationNodeOutageDelayInMinutes
}

// GetLocationNodeOutageDelayInMinutesOk returns a tuple with the LocationNodeOutageDelayInMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetLocationNodeOutageDelayInMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.LocationNodeOutageDelayInMinutes) {
		return nil, false
	}
	return o.LocationNodeOutageDelayInMinutes, true
}

// HasLocationNodeOutageDelayInMinutes returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasLocationNodeOutageDelayInMinutes() bool {
	if o != nil && !IsNil(o.LocationNodeOutageDelayInMinutes) {
		return true
	}

	return false
}

// SetLocationNodeOutageDelayInMinutes gets a reference to the given int32 and assigns it to the LocationNodeOutageDelayInMinutes field.
func (o *SyntheticPrivateLocationUpdate) SetLocationNodeOutageDelayInMinutes(v int32) {
	o.LocationNodeOutageDelayInMinutes = &v
}

// GetLongitude returns the Longitude field value
func (o *SyntheticPrivateLocationUpdate) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *SyntheticPrivateLocationUpdate) SetLongitude(v float64) {
	o.Longitude = v
}

// GetName returns the Name field value
func (o *SyntheticPrivateLocationUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SyntheticPrivateLocationUpdate) SetName(v string) {
	o.Name = v
}

// GetNodes returns the Nodes field value
func (o *SyntheticPrivateLocationUpdate) GetNodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetNodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nodes, true
}

// SetNodes sets field value
func (o *SyntheticPrivateLocationUpdate) SetNodes(v []string) {
	o.Nodes = v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *SyntheticPrivateLocationUpdate) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SyntheticPrivateLocationUpdate) SetStatus(v string) {
	o.Status = &v
}

// GetUseNewKubernetesVersion returns the UseNewKubernetesVersion field value if set, zero value otherwise.
func (o *SyntheticPrivateLocationUpdate) GetUseNewKubernetesVersion() bool {
	if o == nil || IsNil(o.UseNewKubernetesVersion) {
		var ret bool
		return ret
	}
	return *o.UseNewKubernetesVersion
}

// GetUseNewKubernetesVersionOk returns a tuple with the UseNewKubernetesVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticPrivateLocationUpdate) GetUseNewKubernetesVersionOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNewKubernetesVersion) {
		return nil, false
	}
	return o.UseNewKubernetesVersion, true
}

// HasUseNewKubernetesVersion returns a boolean if a field has been set.
func (o *SyntheticPrivateLocationUpdate) HasUseNewKubernetesVersion() bool {
	if o != nil && !IsNil(o.UseNewKubernetesVersion) {
		return true
	}

	return false
}

// SetUseNewKubernetesVersion gets a reference to the given bool and assigns it to the UseNewKubernetesVersion field.
func (o *SyntheticPrivateLocationUpdate) SetUseNewKubernetesVersion(v bool) {
	o.UseNewKubernetesVersion = &v
}

func (o SyntheticPrivateLocationUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntheticPrivateLocationUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoUpdateChromium) {
		toSerialize["autoUpdateChromium"] = o.AutoUpdateChromium
	}
	if !IsNil(o.AvailabilityLocationOutage) {
		toSerialize["availabilityLocationOutage"] = o.AvailabilityLocationOutage
	}
	if !IsNil(o.AvailabilityNodeOutage) {
		toSerialize["availabilityNodeOutage"] = o.AvailabilityNodeOutage
	}
	if !IsNil(o.AvailabilityNotificationsEnabled) {
		toSerialize["availabilityNotificationsEnabled"] = o.AvailabilityNotificationsEnabled
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.DeploymentType) {
		toSerialize["deploymentType"] = o.DeploymentType
	}
	toSerialize["latitude"] = o.Latitude
	if !IsNil(o.LocationNodeOutageDelayInMinutes) {
		toSerialize["locationNodeOutageDelayInMinutes"] = o.LocationNodeOutageDelayInMinutes
	}
	toSerialize["longitude"] = o.Longitude
	toSerialize["name"] = o.Name
	toSerialize["nodes"] = o.Nodes
	if !IsNil(o.RegionCode) {
		toSerialize["regionCode"] = o.RegionCode
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UseNewKubernetesVersion) {
		toSerialize["useNewKubernetesVersion"] = o.UseNewKubernetesVersion
	}
	return toSerialize, nil
}

type NullableSyntheticPrivateLocationUpdate struct {
	value *SyntheticPrivateLocationUpdate
	isSet bool
}

func (v NullableSyntheticPrivateLocationUpdate) Get() *SyntheticPrivateLocationUpdate {
	return v.value
}

func (v *NullableSyntheticPrivateLocationUpdate) Set(val *SyntheticPrivateLocationUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticPrivateLocationUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticPrivateLocationUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticPrivateLocationUpdate(val *SyntheticPrivateLocationUpdate) *NullableSyntheticPrivateLocationUpdate {
	return &NullableSyntheticPrivateLocationUpdate{value: val, isSet: true}
}

func (v NullableSyntheticPrivateLocationUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticPrivateLocationUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


