/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the CredentialsDetailsCertificateResponseElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialsDetailsCertificateResponseElement{}

// CredentialsDetailsCertificateResponseElement Details of certificate credentials set.
type CredentialsDetailsCertificateResponseElement struct {
	// Base64 encoded certificate bytes
	Certificate *string `json:"certificate,omitempty"`
	// Certificate type: PEM, PKCS12 or UNKNOWN
	CertificateType *string `json:"certificateType,omitempty"`
	// Base64 encoded password
	Password *string `json:"password,omitempty"`
}

// NewCredentialsDetailsCertificateResponseElement instantiates a new CredentialsDetailsCertificateResponseElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialsDetailsCertificateResponseElement(credentialUsageSummary []CredentialUsageHandler, description string, name string, owner string, ownerAccessOnly bool, type_ string) *CredentialsDetailsCertificateResponseElement {
	this := CredentialsDetailsCertificateResponseElement{}
	this.CredentialUsageSummary = credentialUsageSummary
	this.Description = description
	this.Name = name
	this.Owner = owner
	this.OwnerAccessOnly = ownerAccessOnly
	this.Type = type_
	return &this
}

// NewCredentialsDetailsCertificateResponseElementWithDefaults instantiates a new CredentialsDetailsCertificateResponseElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialsDetailsCertificateResponseElementWithDefaults() *CredentialsDetailsCertificateResponseElement {
	this := CredentialsDetailsCertificateResponseElement{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CredentialsDetailsCertificateResponseElement) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsDetailsCertificateResponseElement) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CredentialsDetailsCertificateResponseElement) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CredentialsDetailsCertificateResponseElement) SetCertificate(v string) {
	o.Certificate = &v
}

// GetCertificateType returns the CertificateType field value if set, zero value otherwise.
func (o *CredentialsDetailsCertificateResponseElement) GetCertificateType() string {
	if o == nil || IsNil(o.CertificateType) {
		var ret string
		return ret
	}
	return *o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsDetailsCertificateResponseElement) GetCertificateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateType) {
		return nil, false
	}
	return o.CertificateType, true
}

// HasCertificateType returns a boolean if a field has been set.
func (o *CredentialsDetailsCertificateResponseElement) HasCertificateType() bool {
	if o != nil && !IsNil(o.CertificateType) {
		return true
	}

	return false
}

// SetCertificateType gets a reference to the given string and assigns it to the CertificateType field.
func (o *CredentialsDetailsCertificateResponseElement) SetCertificateType(v string) {
	o.CertificateType = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CredentialsDetailsCertificateResponseElement) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsDetailsCertificateResponseElement) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CredentialsDetailsCertificateResponseElement) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *CredentialsDetailsCertificateResponseElement) SetPassword(v string) {
	o.Password = &v
}

func (o CredentialsDetailsCertificateResponseElement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialsDetailsCertificateResponseElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.CertificateType) {
		toSerialize["certificateType"] = o.CertificateType
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableCredentialsDetailsCertificateResponseElement struct {
	value *CredentialsDetailsCertificateResponseElement
	isSet bool
}

func (v NullableCredentialsDetailsCertificateResponseElement) Get() *CredentialsDetailsCertificateResponseElement {
	return v.value
}

func (v *NullableCredentialsDetailsCertificateResponseElement) Set(val *CredentialsDetailsCertificateResponseElement) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialsDetailsCertificateResponseElement) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialsDetailsCertificateResponseElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialsDetailsCertificateResponseElement(val *CredentialsDetailsCertificateResponseElement) *NullableCredentialsDetailsCertificateResponseElement {
	return &NullableCredentialsDetailsCertificateResponseElement{value: val, isSet: true}
}

func (v NullableCredentialsDetailsCertificateResponseElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialsDetailsCertificateResponseElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


