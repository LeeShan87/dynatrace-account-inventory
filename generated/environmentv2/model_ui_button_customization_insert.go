/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
	"fmt"
)

// UiButtonCustomizationInsert - The position where the button should be shown in the UI
type UiButtonCustomizationInsert struct {
	InsertPosition *InsertPosition
	String *string
}

// InsertPositionAsUiButtonCustomizationInsert is a convenience function that returns InsertPosition wrapped in UiButtonCustomizationInsert
func InsertPositionAsUiButtonCustomizationInsert(v *InsertPosition) UiButtonCustomizationInsert {
	return UiButtonCustomizationInsert{
		InsertPosition: v,
	}
}

// stringAsUiButtonCustomizationInsert is a convenience function that returns string wrapped in UiButtonCustomizationInsert
func StringAsUiButtonCustomizationInsert(v *string) UiButtonCustomizationInsert {
	return UiButtonCustomizationInsert{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UiButtonCustomizationInsert) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InsertPosition
	err = newStrictDecoder(data).Decode(&dst.InsertPosition)
	if err == nil {
		jsonInsertPosition, _ := json.Marshal(dst.InsertPosition)
		if string(jsonInsertPosition) == "{}" { // empty struct
			dst.InsertPosition = nil
		} else {
			match++
		}
	} else {
		dst.InsertPosition = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InsertPosition = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UiButtonCustomizationInsert)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UiButtonCustomizationInsert)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UiButtonCustomizationInsert) MarshalJSON() ([]byte, error) {
	if src.InsertPosition != nil {
		return json.Marshal(&src.InsertPosition)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UiButtonCustomizationInsert) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InsertPosition != nil {
		return obj.InsertPosition
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUiButtonCustomizationInsert struct {
	value *UiButtonCustomizationInsert
	isSet bool
}

func (v NullableUiButtonCustomizationInsert) Get() *UiButtonCustomizationInsert {
	return v.value
}

func (v *NullableUiButtonCustomizationInsert) Set(val *UiButtonCustomizationInsert) {
	v.value = val
	v.isSet = true
}

func (v NullableUiButtonCustomizationInsert) IsSet() bool {
	return v.isSet
}

func (v *NullableUiButtonCustomizationInsert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUiButtonCustomizationInsert(val *UiButtonCustomizationInsert) *NullableUiButtonCustomizationInsert {
	return &NullableUiButtonCustomizationInsert{value: val, isSet: true}
}

func (v NullableUiButtonCustomizationInsert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUiButtonCustomizationInsert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


