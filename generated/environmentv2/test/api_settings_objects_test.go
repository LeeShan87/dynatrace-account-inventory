/*
Dynatrace Environment API

Testing SettingsObjectsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package environmentv2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_environmentv2_SettingsObjectsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SettingsObjectsAPIService DeleteSettingsObjectByObjectId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		httpRes, err := apiClient.SettingsObjectsAPI.DeleteSettingsObjectByObjectId(context.Background(), objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsObjectsAPIService GetEffectiveSettingsValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SettingsObjectsAPI.GetEffectiveSettingsValues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsObjectsAPIService GetSettingsObjectByObjectId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.SettingsObjectsAPI.GetSettingsObjectByObjectId(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsObjectsAPIService GetSettingsObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SettingsObjectsAPI.GetSettingsObjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsObjectsAPIService PostSettingsObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SettingsObjectsAPI.PostSettingsObjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsObjectsAPIService PutSettingsObjectByObjectId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.SettingsObjectsAPI.PutSettingsObjectByObjectId(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
