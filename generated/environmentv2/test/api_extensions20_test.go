/*
Dynatrace Environment API

Testing Extensions20APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package environmentv2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_environmentv2_Extensions20APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test Extensions20APIService ActivateExtensionEnvironmentConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string

		resp, httpRes, err := apiClient.Extensions20API.ActivateExtensionEnvironmentConfiguration(context.Background(), extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService CreateMonitoringConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string

		resp, httpRes, err := apiClient.Extensions20API.CreateMonitoringConfiguration(context.Background(), extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService DeleteEnvironmentConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string

		resp, httpRes, err := apiClient.Extensions20API.DeleteEnvironmentConfiguration(context.Background(), extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService ExtensionConfigurationSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string
		var extensionVersion string

		resp, httpRes, err := apiClient.Extensions20API.ExtensionConfigurationSchema(context.Background(), extensionName, extensionVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService ExtensionDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string
		var extensionVersion string

		resp, httpRes, err := apiClient.Extensions20API.ExtensionDetails(context.Background(), extensionName, extensionVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService ExtensionMonitoringConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string

		resp, httpRes, err := apiClient.Extensions20API.ExtensionMonitoringConfigurations(context.Background(), extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService GetActiveEnvironmentConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string

		resp, httpRes, err := apiClient.Extensions20API.GetActiveEnvironmentConfiguration(context.Background(), extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService GetEnvironmentConfigurationAssetsInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string

		resp, httpRes, err := apiClient.Extensions20API.GetEnvironmentConfigurationAssetsInfo(context.Background(), extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService GetEnvironmentConfigurationEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string

		resp, httpRes, err := apiClient.Extensions20API.GetEnvironmentConfigurationEvents(context.Background(), extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService GetExtensionMonitoringConfigurationEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string
		var configurationId string

		resp, httpRes, err := apiClient.Extensions20API.GetExtensionMonitoringConfigurationEvents(context.Background(), extensionName, configurationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService GetExtensionMonitoringConfigurationStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string
		var configurationId string

		resp, httpRes, err := apiClient.Extensions20API.GetExtensionMonitoringConfigurationStatus(context.Background(), extensionName, configurationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService GetSchemaFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var schemaVersion string
		var fileName string

		resp, httpRes, err := apiClient.Extensions20API.GetSchemaFile(context.Background(), schemaVersion, fileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService ListExtensionVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string

		resp, httpRes, err := apiClient.Extensions20API.ListExtensionVersions(context.Background(), extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService ListExtensions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.Extensions20API.ListExtensions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService ListSchemaFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var schemaVersion string

		resp, httpRes, err := apiClient.Extensions20API.ListSchemaFiles(context.Background(), schemaVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService ListSchemas", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.Extensions20API.ListSchemas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService MonitoringConfigurationDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string
		var configurationId string

		resp, httpRes, err := apiClient.Extensions20API.MonitoringConfigurationDetails(context.Background(), extensionName, configurationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService RemoveExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string
		var extensionVersion string

		resp, httpRes, err := apiClient.Extensions20API.RemoveExtension(context.Background(), extensionName, extensionVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService RemoveMonitoringConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string
		var configurationId string

		httpRes, err := apiClient.Extensions20API.RemoveMonitoringConfiguration(context.Background(), extensionName, configurationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService UpdateExtensionEnvironmentConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string

		resp, httpRes, err := apiClient.Extensions20API.UpdateExtensionEnvironmentConfiguration(context.Background(), extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService UpdateMonitoringConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionName string
		var configurationId string

		resp, httpRes, err := apiClient.Extensions20API.UpdateMonitoringConfiguration(context.Background(), extensionName, configurationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Extensions20APIService UploadExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.Extensions20API.UploadExtension(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
