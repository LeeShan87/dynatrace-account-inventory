/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Extension1Details type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Extension1Details{}

// Extension1Details Additional details of the extension version 1.
type Extension1Details struct {
	// A list of versions for the extension version 1.
	Releases []Extension1Release `json:"releases,omitempty"`
}

// NewExtension1Details instantiates a new Extension1Details object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtension1Details() *Extension1Details {
	this := Extension1Details{}
	return &this
}

// NewExtension1DetailsWithDefaults instantiates a new Extension1Details object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtension1DetailsWithDefaults() *Extension1Details {
	this := Extension1Details{}
	return &this
}

// GetReleases returns the Releases field value if set, zero value otherwise.
func (o *Extension1Details) GetReleases() []Extension1Release {
	if o == nil || IsNil(o.Releases) {
		var ret []Extension1Release
		return ret
	}
	return o.Releases
}

// GetReleasesOk returns a tuple with the Releases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension1Details) GetReleasesOk() ([]Extension1Release, bool) {
	if o == nil || IsNil(o.Releases) {
		return nil, false
	}
	return o.Releases, true
}

// HasReleases returns a boolean if a field has been set.
func (o *Extension1Details) HasReleases() bool {
	if o != nil && !IsNil(o.Releases) {
		return true
	}

	return false
}

// SetReleases gets a reference to the given []Extension1Release and assigns it to the Releases field.
func (o *Extension1Details) SetReleases(v []Extension1Release) {
	o.Releases = v
}

func (o Extension1Details) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Extension1Details) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Releases) {
		toSerialize["releases"] = o.Releases
	}
	return toSerialize, nil
}

type NullableExtension1Details struct {
	value *Extension1Details
	isSet bool
}

func (v NullableExtension1Details) Get() *Extension1Details {
	return v.value
}

func (v *NullableExtension1Details) Set(val *Extension1Details) {
	v.value = val
	v.isSet = true
}

func (v NullableExtension1Details) IsSet() bool {
	return v.isSet
}

func (v *NullableExtension1Details) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtension1Details(val *Extension1Details) *NullableExtension1Details {
	return &NullableExtension1Details{value: val, isSet: true}
}

func (v NullableExtension1Details) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtension1Details) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


