/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EventPropertyDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventPropertyDetails{}

// EventPropertyDetails Configuration of an event property.
type EventPropertyDetails struct {
	// A short description of the event property.
	Description *string `json:"description,omitempty"`
	// The display name of the event property.
	DisplayName *string `json:"displayName,omitempty"`
	// The key of the event property.
	Key *string `json:"key,omitempty"`
	// The property can (`true`) or cannot (`false`) be set during event ingestion.
	Writable *bool `json:"writable,omitempty"`
}

// NewEventPropertyDetails instantiates a new EventPropertyDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventPropertyDetails() *EventPropertyDetails {
	this := EventPropertyDetails{}
	return &this
}

// NewEventPropertyDetailsWithDefaults instantiates a new EventPropertyDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventPropertyDetailsWithDefaults() *EventPropertyDetails {
	this := EventPropertyDetails{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventPropertyDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPropertyDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventPropertyDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventPropertyDetails) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EventPropertyDetails) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPropertyDetails) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EventPropertyDetails) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EventPropertyDetails) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *EventPropertyDetails) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPropertyDetails) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *EventPropertyDetails) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *EventPropertyDetails) SetKey(v string) {
	o.Key = &v
}

// GetWritable returns the Writable field value if set, zero value otherwise.
func (o *EventPropertyDetails) GetWritable() bool {
	if o == nil || IsNil(o.Writable) {
		var ret bool
		return ret
	}
	return *o.Writable
}

// GetWritableOk returns a tuple with the Writable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPropertyDetails) GetWritableOk() (*bool, bool) {
	if o == nil || IsNil(o.Writable) {
		return nil, false
	}
	return o.Writable, true
}

// HasWritable returns a boolean if a field has been set.
func (o *EventPropertyDetails) HasWritable() bool {
	if o != nil && !IsNil(o.Writable) {
		return true
	}

	return false
}

// SetWritable gets a reference to the given bool and assigns it to the Writable field.
func (o *EventPropertyDetails) SetWritable(v bool) {
	o.Writable = &v
}

func (o EventPropertyDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventPropertyDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Writable) {
		toSerialize["writable"] = o.Writable
	}
	return toSerialize, nil
}

type NullableEventPropertyDetails struct {
	value *EventPropertyDetails
	isSet bool
}

func (v NullableEventPropertyDetails) Get() *EventPropertyDetails {
	return v.value
}

func (v *NullableEventPropertyDetails) Set(val *EventPropertyDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEventPropertyDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEventPropertyDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventPropertyDetails(val *EventPropertyDetails) *NullableEventPropertyDetails {
	return &NullableEventPropertyDetails{value: val, isSet: true}
}

func (v NullableEventPropertyDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventPropertyDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


