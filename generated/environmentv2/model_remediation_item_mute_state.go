/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the RemediationItemMuteState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemediationItemMuteState{}

// RemediationItemMuteState The mute state of a remediation item of a security problem.
type RemediationItemMuteState struct {
	// A short comment about the most recent mute state change.
	Comment *string `json:"comment,omitempty"`
	// The timestamp (UTC milliseconds) of the last update of the mute state.
	LastUpdatedTimestamp *int64 `json:"lastUpdatedTimestamp,omitempty"`
	// The remediation is (`true`) or is not (`false`) muted.
	Muted *bool `json:"muted,omitempty"`
	// The reason for the most recent mute state change.
	Reason *string `json:"reason,omitempty"`
	// The user who last changed the mute state.
	User *string `json:"user,omitempty"`
}

// NewRemediationItemMuteState instantiates a new RemediationItemMuteState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemediationItemMuteState() *RemediationItemMuteState {
	this := RemediationItemMuteState{}
	return &this
}

// NewRemediationItemMuteStateWithDefaults instantiates a new RemediationItemMuteState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemediationItemMuteStateWithDefaults() *RemediationItemMuteState {
	this := RemediationItemMuteState{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RemediationItemMuteState) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationItemMuteState) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RemediationItemMuteState) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RemediationItemMuteState) SetComment(v string) {
	o.Comment = &v
}

// GetLastUpdatedTimestamp returns the LastUpdatedTimestamp field value if set, zero value otherwise.
func (o *RemediationItemMuteState) GetLastUpdatedTimestamp() int64 {
	if o == nil || IsNil(o.LastUpdatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimestamp
}

// GetLastUpdatedTimestampOk returns a tuple with the LastUpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationItemMuteState) GetLastUpdatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.LastUpdatedTimestamp) {
		return nil, false
	}
	return o.LastUpdatedTimestamp, true
}

// HasLastUpdatedTimestamp returns a boolean if a field has been set.
func (o *RemediationItemMuteState) HasLastUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.LastUpdatedTimestamp) {
		return true
	}

	return false
}

// SetLastUpdatedTimestamp gets a reference to the given int64 and assigns it to the LastUpdatedTimestamp field.
func (o *RemediationItemMuteState) SetLastUpdatedTimestamp(v int64) {
	o.LastUpdatedTimestamp = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *RemediationItemMuteState) GetMuted() bool {
	if o == nil || IsNil(o.Muted) {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationItemMuteState) GetMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.Muted) {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *RemediationItemMuteState) HasMuted() bool {
	if o != nil && !IsNil(o.Muted) {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *RemediationItemMuteState) SetMuted(v bool) {
	o.Muted = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *RemediationItemMuteState) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationItemMuteState) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *RemediationItemMuteState) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *RemediationItemMuteState) SetReason(v string) {
	o.Reason = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RemediationItemMuteState) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemediationItemMuteState) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RemediationItemMuteState) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RemediationItemMuteState) SetUser(v string) {
	o.User = &v
}

func (o RemediationItemMuteState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemediationItemMuteState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.LastUpdatedTimestamp) {
		toSerialize["lastUpdatedTimestamp"] = o.LastUpdatedTimestamp
	}
	if !IsNil(o.Muted) {
		toSerialize["muted"] = o.Muted
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableRemediationItemMuteState struct {
	value *RemediationItemMuteState
	isSet bool
}

func (v NullableRemediationItemMuteState) Get() *RemediationItemMuteState {
	return v.value
}

func (v *NullableRemediationItemMuteState) Set(val *RemediationItemMuteState) {
	v.value = val
	v.isSet = true
}

func (v NullableRemediationItemMuteState) IsSet() bool {
	return v.isSet
}

func (v *NullableRemediationItemMuteState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemediationItemMuteState(val *RemediationItemMuteState) *NullableRemediationItemMuteState {
	return &NullableRemediationItemMuteState{value: val, isSet: true}
}

func (v NullableRemediationItemMuteState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemediationItemMuteState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


