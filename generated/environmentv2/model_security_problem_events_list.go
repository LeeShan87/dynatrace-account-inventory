/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SecurityProblemEventsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityProblemEventsList{}

// SecurityProblemEventsList A list of events for a security problem.
type SecurityProblemEventsList struct {
	// A list of events for a security problem.
	Events []SecurityProblemEvent `json:"events,omitempty"`
	// The cursor for the next page of results. Has the value of `null` on the last page.   Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result.
	NextPageKey *string `json:"nextPageKey,omitempty"`
	// The number of entries per page.
	PageSize *int32 `json:"pageSize,omitempty"`
	// The total number of entries in the result.
	TotalCount int64 `json:"totalCount"`
}

// NewSecurityProblemEventsList instantiates a new SecurityProblemEventsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityProblemEventsList(totalCount int64) *SecurityProblemEventsList {
	this := SecurityProblemEventsList{}
	this.TotalCount = totalCount
	return &this
}

// NewSecurityProblemEventsListWithDefaults instantiates a new SecurityProblemEventsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityProblemEventsListWithDefaults() *SecurityProblemEventsList {
	this := SecurityProblemEventsList{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *SecurityProblemEventsList) GetEvents() []SecurityProblemEvent {
	if o == nil || IsNil(o.Events) {
		var ret []SecurityProblemEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemEventsList) GetEventsOk() ([]SecurityProblemEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *SecurityProblemEventsList) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []SecurityProblemEvent and assigns it to the Events field.
func (o *SecurityProblemEventsList) SetEvents(v []SecurityProblemEvent) {
	o.Events = v
}

// GetNextPageKey returns the NextPageKey field value if set, zero value otherwise.
func (o *SecurityProblemEventsList) GetNextPageKey() string {
	if o == nil || IsNil(o.NextPageKey) {
		var ret string
		return ret
	}
	return *o.NextPageKey
}

// GetNextPageKeyOk returns a tuple with the NextPageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemEventsList) GetNextPageKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageKey) {
		return nil, false
	}
	return o.NextPageKey, true
}

// HasNextPageKey returns a boolean if a field has been set.
func (o *SecurityProblemEventsList) HasNextPageKey() bool {
	if o != nil && !IsNil(o.NextPageKey) {
		return true
	}

	return false
}

// SetNextPageKey gets a reference to the given string and assigns it to the NextPageKey field.
func (o *SecurityProblemEventsList) SetNextPageKey(v string) {
	o.NextPageKey = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *SecurityProblemEventsList) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemEventsList) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *SecurityProblemEventsList) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *SecurityProblemEventsList) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetTotalCount returns the TotalCount field value
func (o *SecurityProblemEventsList) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *SecurityProblemEventsList) GetTotalCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *SecurityProblemEventsList) SetTotalCount(v int64) {
	o.TotalCount = v
}

func (o SecurityProblemEventsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityProblemEventsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.NextPageKey) {
		toSerialize["nextPageKey"] = o.NextPageKey
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	toSerialize["totalCount"] = o.TotalCount
	return toSerialize, nil
}

type NullableSecurityProblemEventsList struct {
	value *SecurityProblemEventsList
	isSet bool
}

func (v NullableSecurityProblemEventsList) Get() *SecurityProblemEventsList {
	return v.value
}

func (v *NullableSecurityProblemEventsList) Set(val *SecurityProblemEventsList) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityProblemEventsList) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityProblemEventsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityProblemEventsList(val *SecurityProblemEventsList) *NullableSecurityProblemEventsList {
	return &NullableSecurityProblemEventsList{value: val, isSet: true}
}

func (v NullableSecurityProblemEventsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityProblemEventsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


