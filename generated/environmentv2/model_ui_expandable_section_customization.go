/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the UiExpandableSectionCustomization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UiExpandableSectionCustomization{}

// UiExpandableSectionCustomization Expandable section customization for UI
type UiExpandableSectionCustomization struct {
	// The description
	Description *string `json:"description,omitempty"`
	// The display name
	DisplayName string `json:"displayName"`
	// Defines if the section should be expanded by default
	Expanded *bool `json:"expanded,omitempty"`
	// A list of properties
	Properties []string `json:"properties"`
}

// NewUiExpandableSectionCustomization instantiates a new UiExpandableSectionCustomization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUiExpandableSectionCustomization(displayName string, properties []string) *UiExpandableSectionCustomization {
	this := UiExpandableSectionCustomization{}
	this.DisplayName = displayName
	this.Properties = properties
	return &this
}

// NewUiExpandableSectionCustomizationWithDefaults instantiates a new UiExpandableSectionCustomization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUiExpandableSectionCustomizationWithDefaults() *UiExpandableSectionCustomization {
	this := UiExpandableSectionCustomization{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UiExpandableSectionCustomization) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiExpandableSectionCustomization) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UiExpandableSectionCustomization) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UiExpandableSectionCustomization) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value
func (o *UiExpandableSectionCustomization) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *UiExpandableSectionCustomization) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *UiExpandableSectionCustomization) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetExpanded returns the Expanded field value if set, zero value otherwise.
func (o *UiExpandableSectionCustomization) GetExpanded() bool {
	if o == nil || IsNil(o.Expanded) {
		var ret bool
		return ret
	}
	return *o.Expanded
}

// GetExpandedOk returns a tuple with the Expanded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiExpandableSectionCustomization) GetExpandedOk() (*bool, bool) {
	if o == nil || IsNil(o.Expanded) {
		return nil, false
	}
	return o.Expanded, true
}

// HasExpanded returns a boolean if a field has been set.
func (o *UiExpandableSectionCustomization) HasExpanded() bool {
	if o != nil && !IsNil(o.Expanded) {
		return true
	}

	return false
}

// SetExpanded gets a reference to the given bool and assigns it to the Expanded field.
func (o *UiExpandableSectionCustomization) SetExpanded(v bool) {
	o.Expanded = &v
}

// GetProperties returns the Properties field value
func (o *UiExpandableSectionCustomization) GetProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *UiExpandableSectionCustomization) GetPropertiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *UiExpandableSectionCustomization) SetProperties(v []string) {
	o.Properties = v
}

func (o UiExpandableSectionCustomization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UiExpandableSectionCustomization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.Expanded) {
		toSerialize["expanded"] = o.Expanded
	}
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

type NullableUiExpandableSectionCustomization struct {
	value *UiExpandableSectionCustomization
	isSet bool
}

func (v NullableUiExpandableSectionCustomization) Get() *UiExpandableSectionCustomization {
	return v.value
}

func (v *NullableUiExpandableSectionCustomization) Set(val *UiExpandableSectionCustomization) {
	v.value = val
	v.isSet = true
}

func (v NullableUiExpandableSectionCustomization) IsSet() bool {
	return v.isSet
}

func (v *NullableUiExpandableSectionCustomization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUiExpandableSectionCustomization(val *UiExpandableSectionCustomization) *NullableUiExpandableSectionCustomization {
	return &NullableUiExpandableSectionCustomization{value: val, isSet: true}
}

func (v NullableUiExpandableSectionCustomization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUiExpandableSectionCustomization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


