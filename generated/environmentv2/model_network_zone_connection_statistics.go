/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the NetworkZoneConnectionStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkZoneConnectionStatistics{}

// NetworkZoneConnectionStatistics Runtime information about host connections.
type NetworkZoneConnectionStatistics struct {
	// Hosts from the network zone that use other zones.
	HostsConfiguredButNotConnected []string `json:"hostsConfiguredButNotConnected,omitempty"`
	// Hosts that use the network zone as an alternative.
	HostsConnectedAsAlternative []string `json:"hostsConnectedAsAlternative,omitempty"`
	// Hosts from other zones that use the zone (not configured as an alternative) even though ActiveGates of higher priority are available.
	HostsConnectedAsFailover []string `json:"hostsConnectedAsFailover,omitempty"`
	// Hosts from other zones that use the zone (not configured as an alternative) and **no** ActiveGates of higher priority are available.
	HostsConnectedAsFailoverWithoutActiveGates []string `json:"hostsConnectedAsFailoverWithoutActiveGates,omitempty"`
}

// NewNetworkZoneConnectionStatistics instantiates a new NetworkZoneConnectionStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkZoneConnectionStatistics() *NetworkZoneConnectionStatistics {
	this := NetworkZoneConnectionStatistics{}
	return &this
}

// NewNetworkZoneConnectionStatisticsWithDefaults instantiates a new NetworkZoneConnectionStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkZoneConnectionStatisticsWithDefaults() *NetworkZoneConnectionStatistics {
	this := NetworkZoneConnectionStatistics{}
	return &this
}

// GetHostsConfiguredButNotConnected returns the HostsConfiguredButNotConnected field value if set, zero value otherwise.
func (o *NetworkZoneConnectionStatistics) GetHostsConfiguredButNotConnected() []string {
	if o == nil || IsNil(o.HostsConfiguredButNotConnected) {
		var ret []string
		return ret
	}
	return o.HostsConfiguredButNotConnected
}

// GetHostsConfiguredButNotConnectedOk returns a tuple with the HostsConfiguredButNotConnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZoneConnectionStatistics) GetHostsConfiguredButNotConnectedOk() ([]string, bool) {
	if o == nil || IsNil(o.HostsConfiguredButNotConnected) {
		return nil, false
	}
	return o.HostsConfiguredButNotConnected, true
}

// HasHostsConfiguredButNotConnected returns a boolean if a field has been set.
func (o *NetworkZoneConnectionStatistics) HasHostsConfiguredButNotConnected() bool {
	if o != nil && !IsNil(o.HostsConfiguredButNotConnected) {
		return true
	}

	return false
}

// SetHostsConfiguredButNotConnected gets a reference to the given []string and assigns it to the HostsConfiguredButNotConnected field.
func (o *NetworkZoneConnectionStatistics) SetHostsConfiguredButNotConnected(v []string) {
	o.HostsConfiguredButNotConnected = v
}

// GetHostsConnectedAsAlternative returns the HostsConnectedAsAlternative field value if set, zero value otherwise.
func (o *NetworkZoneConnectionStatistics) GetHostsConnectedAsAlternative() []string {
	if o == nil || IsNil(o.HostsConnectedAsAlternative) {
		var ret []string
		return ret
	}
	return o.HostsConnectedAsAlternative
}

// GetHostsConnectedAsAlternativeOk returns a tuple with the HostsConnectedAsAlternative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZoneConnectionStatistics) GetHostsConnectedAsAlternativeOk() ([]string, bool) {
	if o == nil || IsNil(o.HostsConnectedAsAlternative) {
		return nil, false
	}
	return o.HostsConnectedAsAlternative, true
}

// HasHostsConnectedAsAlternative returns a boolean if a field has been set.
func (o *NetworkZoneConnectionStatistics) HasHostsConnectedAsAlternative() bool {
	if o != nil && !IsNil(o.HostsConnectedAsAlternative) {
		return true
	}

	return false
}

// SetHostsConnectedAsAlternative gets a reference to the given []string and assigns it to the HostsConnectedAsAlternative field.
func (o *NetworkZoneConnectionStatistics) SetHostsConnectedAsAlternative(v []string) {
	o.HostsConnectedAsAlternative = v
}

// GetHostsConnectedAsFailover returns the HostsConnectedAsFailover field value if set, zero value otherwise.
func (o *NetworkZoneConnectionStatistics) GetHostsConnectedAsFailover() []string {
	if o == nil || IsNil(o.HostsConnectedAsFailover) {
		var ret []string
		return ret
	}
	return o.HostsConnectedAsFailover
}

// GetHostsConnectedAsFailoverOk returns a tuple with the HostsConnectedAsFailover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZoneConnectionStatistics) GetHostsConnectedAsFailoverOk() ([]string, bool) {
	if o == nil || IsNil(o.HostsConnectedAsFailover) {
		return nil, false
	}
	return o.HostsConnectedAsFailover, true
}

// HasHostsConnectedAsFailover returns a boolean if a field has been set.
func (o *NetworkZoneConnectionStatistics) HasHostsConnectedAsFailover() bool {
	if o != nil && !IsNil(o.HostsConnectedAsFailover) {
		return true
	}

	return false
}

// SetHostsConnectedAsFailover gets a reference to the given []string and assigns it to the HostsConnectedAsFailover field.
func (o *NetworkZoneConnectionStatistics) SetHostsConnectedAsFailover(v []string) {
	o.HostsConnectedAsFailover = v
}

// GetHostsConnectedAsFailoverWithoutActiveGates returns the HostsConnectedAsFailoverWithoutActiveGates field value if set, zero value otherwise.
func (o *NetworkZoneConnectionStatistics) GetHostsConnectedAsFailoverWithoutActiveGates() []string {
	if o == nil || IsNil(o.HostsConnectedAsFailoverWithoutActiveGates) {
		var ret []string
		return ret
	}
	return o.HostsConnectedAsFailoverWithoutActiveGates
}

// GetHostsConnectedAsFailoverWithoutActiveGatesOk returns a tuple with the HostsConnectedAsFailoverWithoutActiveGates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZoneConnectionStatistics) GetHostsConnectedAsFailoverWithoutActiveGatesOk() ([]string, bool) {
	if o == nil || IsNil(o.HostsConnectedAsFailoverWithoutActiveGates) {
		return nil, false
	}
	return o.HostsConnectedAsFailoverWithoutActiveGates, true
}

// HasHostsConnectedAsFailoverWithoutActiveGates returns a boolean if a field has been set.
func (o *NetworkZoneConnectionStatistics) HasHostsConnectedAsFailoverWithoutActiveGates() bool {
	if o != nil && !IsNil(o.HostsConnectedAsFailoverWithoutActiveGates) {
		return true
	}

	return false
}

// SetHostsConnectedAsFailoverWithoutActiveGates gets a reference to the given []string and assigns it to the HostsConnectedAsFailoverWithoutActiveGates field.
func (o *NetworkZoneConnectionStatistics) SetHostsConnectedAsFailoverWithoutActiveGates(v []string) {
	o.HostsConnectedAsFailoverWithoutActiveGates = v
}

func (o NetworkZoneConnectionStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkZoneConnectionStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HostsConfiguredButNotConnected) {
		toSerialize["hostsConfiguredButNotConnected"] = o.HostsConfiguredButNotConnected
	}
	if !IsNil(o.HostsConnectedAsAlternative) {
		toSerialize["hostsConnectedAsAlternative"] = o.HostsConnectedAsAlternative
	}
	if !IsNil(o.HostsConnectedAsFailover) {
		toSerialize["hostsConnectedAsFailover"] = o.HostsConnectedAsFailover
	}
	if !IsNil(o.HostsConnectedAsFailoverWithoutActiveGates) {
		toSerialize["hostsConnectedAsFailoverWithoutActiveGates"] = o.HostsConnectedAsFailoverWithoutActiveGates
	}
	return toSerialize, nil
}

type NullableNetworkZoneConnectionStatistics struct {
	value *NetworkZoneConnectionStatistics
	isSet bool
}

func (v NullableNetworkZoneConnectionStatistics) Get() *NetworkZoneConnectionStatistics {
	return v.value
}

func (v *NullableNetworkZoneConnectionStatistics) Set(val *NetworkZoneConnectionStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkZoneConnectionStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkZoneConnectionStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkZoneConnectionStatistics(val *NetworkZoneConnectionStatistics) *NullableNetworkZoneConnectionStatistics {
	return &NullableNetworkZoneConnectionStatistics{value: val, isSet: true}
}

func (v NullableNetworkZoneConnectionStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkZoneConnectionStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


