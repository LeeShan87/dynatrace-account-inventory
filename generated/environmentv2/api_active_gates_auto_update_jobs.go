/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ActiveGatesAutoUpdateJobsAPIService ActiveGatesAutoUpdateJobsAPI service
type ActiveGatesAutoUpdateJobsAPIService service

type ApiCreateUpdateJobForAgRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateJobsAPIService
	agId string
	updateJob *UpdateJob
}

// JSON body of the request, containing update-job parameters.
func (r ApiCreateUpdateJobForAgRequest) UpdateJob(updateJob UpdateJob) ApiCreateUpdateJobForAgRequest {
	r.updateJob = &updateJob
	return r
}

func (r ApiCreateUpdateJobForAgRequest) Execute() (*UpdateJob, *http.Response, error) {
	return r.ApiService.CreateUpdateJobForAgExecute(r)
}

/*
CreateUpdateJobForAg Creates a new update job for the specified ActiveGate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agId The ID of the required ActiveGate.
 @return ApiCreateUpdateJobForAgRequest
*/
func (a *ActiveGatesAutoUpdateJobsAPIService) CreateUpdateJobForAg(ctx context.Context, agId string) ApiCreateUpdateJobForAgRequest {
	return ApiCreateUpdateJobForAgRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

// Execute executes the request
//  @return UpdateJob
func (a *ActiveGatesAutoUpdateJobsAPIService) CreateUpdateJobForAgExecute(r ApiCreateUpdateJobForAgRequest) (*UpdateJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsAPIService.CreateUpdateJobForAg")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", url.PathEscape(parameterValueToString(r.agId, "agId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateJob == nil {
		return localVarReturnValue, nil, reportError("updateJob is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateJob
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUpdateJobByJobIdForAgRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateJobsAPIService
	agId string
	jobId string
}

func (r ApiDeleteUpdateJobByJobIdForAgRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUpdateJobByJobIdForAgExecute(r)
}

/*
DeleteUpdateJobByJobIdForAg Deletes the specified update job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agId The ID of the required ActiveGate.
 @param jobId A unique identifier for a update-job of ActiveGate.
 @return ApiDeleteUpdateJobByJobIdForAgRequest
*/
func (a *ActiveGatesAutoUpdateJobsAPIService) DeleteUpdateJobByJobIdForAg(ctx context.Context, agId string, jobId string) ApiDeleteUpdateJobByJobIdForAgRequest {
	return ApiDeleteUpdateJobByJobIdForAgRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
		jobId: jobId,
	}
}

// Execute executes the request
func (a *ActiveGatesAutoUpdateJobsAPIService) DeleteUpdateJobByJobIdForAgExecute(r ApiDeleteUpdateJobByJobIdForAgRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsAPIService.DeleteUpdateJobByJobIdForAg")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", url.PathEscape(parameterValueToString(r.agId, "agId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllUpdateJobListRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateJobsAPIService
	from *string
	to *string
	startVersionCompareType *string
	startVersion *string
	updateType *string
	targetVersionCompareType *string
	targetVersion *string
	lastUpdates *bool
}

// The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days.
func (r ApiGetAllUpdateJobListRequest) From(from string) ApiGetAllUpdateJobListRequest {
	r.from = &from
	return r
}

// The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used.
func (r ApiGetAllUpdateJobListRequest) To(to string) ApiGetAllUpdateJobListRequest {
	r.to = &to
	return r
}

// Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here.
func (r ApiGetAllUpdateJobListRequest) StartVersionCompareType(startVersionCompareType string) ApiGetAllUpdateJobListRequest {
	r.startVersionCompareType = &startVersionCompareType
	return r
}

// Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;).
func (r ApiGetAllUpdateJobListRequest) StartVersion(startVersion string) ApiGetAllUpdateJobListRequest {
	r.startVersion = &startVersion
	return r
}

// Filters the resulting set of update-jobs by the update type.
func (r ApiGetAllUpdateJobListRequest) UpdateType(updateType string) ApiGetAllUpdateJobListRequest {
	r.updateType = &updateType
	return r
}

// Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here.
func (r ApiGetAllUpdateJobListRequest) TargetVersionCompareType(targetVersionCompareType string) ApiGetAllUpdateJobListRequest {
	r.targetVersionCompareType = &targetVersionCompareType
	return r
}

// Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;).
func (r ApiGetAllUpdateJobListRequest) TargetVersion(targetVersion string) ApiGetAllUpdateJobListRequest {
	r.targetVersion = &targetVersion
	return r
}

// If &#x60;true&#x60;, filters the resulting set of update jobs to the most recent update of each type.
func (r ApiGetAllUpdateJobListRequest) LastUpdates(lastUpdates bool) ApiGetAllUpdateJobListRequest {
	r.lastUpdates = &lastUpdates
	return r
}

func (r ApiGetAllUpdateJobListRequest) Execute() (*UpdateJobsAll, *http.Response, error) {
	return r.ApiService.GetAllUpdateJobListExecute(r)
}

/*
GetAllUpdateJobList List ActiveGates with update jobs

The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllUpdateJobListRequest
*/
func (a *ActiveGatesAutoUpdateJobsAPIService) GetAllUpdateJobList(ctx context.Context) ApiGetAllUpdateJobListRequest {
	return ApiGetAllUpdateJobListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateJobsAll
func (a *ActiveGatesAutoUpdateJobsAPIService) GetAllUpdateJobListExecute(r ApiGetAllUpdateJobListRequest) (*UpdateJobsAll, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateJobsAll
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsAPIService.GetAllUpdateJobList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/updateJobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.to != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	}
	if r.startVersionCompareType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startVersionCompareType", r.startVersionCompareType, "")
	}
	if r.startVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startVersion", r.startVersion, "")
	}
	if r.updateType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateType", r.updateType, "")
	}
	if r.targetVersionCompareType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "targetVersionCompareType", r.targetVersionCompareType, "")
	}
	if r.targetVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "targetVersion", r.targetVersion, "")
	}
	if r.lastUpdates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdates", r.lastUpdates, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUpdateJobByJobIdForAgRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateJobsAPIService
	agId string
	jobId string
}

func (r ApiGetUpdateJobByJobIdForAgRequest) Execute() (*UpdateJob, *http.Response, error) {
	return r.ApiService.GetUpdateJobByJobIdForAgExecute(r)
}

/*
GetUpdateJobByJobIdForAg Gets the parameters of the specified update job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agId The ID of the required ActiveGate.
 @param jobId A unique identifier for a update-job of ActiveGate.
 @return ApiGetUpdateJobByJobIdForAgRequest
*/
func (a *ActiveGatesAutoUpdateJobsAPIService) GetUpdateJobByJobIdForAg(ctx context.Context, agId string, jobId string) ApiGetUpdateJobByJobIdForAgRequest {
	return ApiGetUpdateJobByJobIdForAgRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return UpdateJob
func (a *ActiveGatesAutoUpdateJobsAPIService) GetUpdateJobByJobIdForAgExecute(r ApiGetUpdateJobByJobIdForAgRequest) (*UpdateJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsAPIService.GetUpdateJobByJobIdForAg")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", url.PathEscape(parameterValueToString(r.agId, "agId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUpdateJobListByAgIdRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateJobsAPIService
	agId string
	from *string
	to *string
	startVersionCompareType *string
	startVersion *string
	updateType *string
	targetVersionCompareType *string
	targetVersion *string
	lastUpdates *bool
}

// The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days.
func (r ApiGetUpdateJobListByAgIdRequest) From(from string) ApiGetUpdateJobListByAgIdRequest {
	r.from = &from
	return r
}

// The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used.
func (r ApiGetUpdateJobListByAgIdRequest) To(to string) ApiGetUpdateJobListByAgIdRequest {
	r.to = &to
	return r
}

// Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here.
func (r ApiGetUpdateJobListByAgIdRequest) StartVersionCompareType(startVersionCompareType string) ApiGetUpdateJobListByAgIdRequest {
	r.startVersionCompareType = &startVersionCompareType
	return r
}

// Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;).
func (r ApiGetUpdateJobListByAgIdRequest) StartVersion(startVersion string) ApiGetUpdateJobListByAgIdRequest {
	r.startVersion = &startVersion
	return r
}

// Filters the resulting set of update-jobs by the update type.
func (r ApiGetUpdateJobListByAgIdRequest) UpdateType(updateType string) ApiGetUpdateJobListByAgIdRequest {
	r.updateType = &updateType
	return r
}

// Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here.
func (r ApiGetUpdateJobListByAgIdRequest) TargetVersionCompareType(targetVersionCompareType string) ApiGetUpdateJobListByAgIdRequest {
	r.targetVersionCompareType = &targetVersionCompareType
	return r
}

// Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;).
func (r ApiGetUpdateJobListByAgIdRequest) TargetVersion(targetVersion string) ApiGetUpdateJobListByAgIdRequest {
	r.targetVersion = &targetVersion
	return r
}

// If &#x60;true&#x60;, filters the resulting set of update jobs to the most recent update of each type.
func (r ApiGetUpdateJobListByAgIdRequest) LastUpdates(lastUpdates bool) ApiGetUpdateJobListByAgIdRequest {
	r.lastUpdates = &lastUpdates
	return r
}

func (r ApiGetUpdateJobListByAgIdRequest) Execute() (*UpdateJobList, *http.Response, error) {
	return r.ApiService.GetUpdateJobListByAgIdExecute(r)
}

/*
GetUpdateJobListByAgId Lists update jobs for the specified ActiveGate

The job can update the ActiveGate to the specified version or the latest available one.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agId The ID of the required ActiveGate.
 @return ApiGetUpdateJobListByAgIdRequest
*/
func (a *ActiveGatesAutoUpdateJobsAPIService) GetUpdateJobListByAgId(ctx context.Context, agId string) ApiGetUpdateJobListByAgIdRequest {
	return ApiGetUpdateJobListByAgIdRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

// Execute executes the request
//  @return UpdateJobList
func (a *ActiveGatesAutoUpdateJobsAPIService) GetUpdateJobListByAgIdExecute(r ApiGetUpdateJobListByAgIdRequest) (*UpdateJobList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateJobList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsAPIService.GetUpdateJobListByAgId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", url.PathEscape(parameterValueToString(r.agId, "agId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.to != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	}
	if r.startVersionCompareType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startVersionCompareType", r.startVersionCompareType, "")
	}
	if r.startVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startVersion", r.startVersion, "")
	}
	if r.updateType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateType", r.updateType, "")
	}
	if r.targetVersionCompareType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "targetVersionCompareType", r.targetVersionCompareType, "")
	}
	if r.targetVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "targetVersion", r.targetVersion, "")
	}
	if r.lastUpdates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdates", r.lastUpdates, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiValidateUpdateJobForAgRequest struct {
	ctx context.Context
	ApiService *ActiveGatesAutoUpdateJobsAPIService
	agId string
	updateJob *UpdateJob
}

// JSON body of the request, containing update-job parameters.
func (r ApiValidateUpdateJobForAgRequest) UpdateJob(updateJob UpdateJob) ApiValidateUpdateJobForAgRequest {
	r.updateJob = &updateJob
	return r
}

func (r ApiValidateUpdateJobForAgRequest) Execute() (*http.Response, error) {
	return r.ApiService.ValidateUpdateJobForAgExecute(r)
}

/*
ValidateUpdateJobForAg Validates the payload for the `POST /activeGates/{agId}/updateJobs` request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agId The ID of the required ActiveGate.
 @return ApiValidateUpdateJobForAgRequest
*/
func (a *ActiveGatesAutoUpdateJobsAPIService) ValidateUpdateJobForAg(ctx context.Context, agId string) ApiValidateUpdateJobForAgRequest {
	return ApiValidateUpdateJobForAgRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

// Execute executes the request
func (a *ActiveGatesAutoUpdateJobsAPIService) ValidateUpdateJobForAgExecute(r ApiValidateUpdateJobForAgRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsAPIService.ValidateUpdateJobForAg")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs/validator"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", url.PathEscape(parameterValueToString(r.agId, "agId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateJob == nil {
		return nil, reportError("updateJob is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateJob
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
