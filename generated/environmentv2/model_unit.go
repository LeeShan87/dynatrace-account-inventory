/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Unit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Unit{}

// Unit The metadata of a unit.
type Unit struct {
	// A short description of the unit.
	Description *string `json:"description,omitempty"`
	// The display name of the unit.
	DisplayName *string `json:"displayName,omitempty"`
	// The plural display name of the unit.
	DisplayNamePlural *string `json:"displayNamePlural,omitempty"`
	// The symbol of the unit.
	Symbol *string `json:"symbol,omitempty"`
	// The ID of the unit.
	UnitId string `json:"unitId"`
}

// NewUnit instantiates a new Unit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnit(unitId string) *Unit {
	this := Unit{}
	this.UnitId = unitId
	return &this
}

// NewUnitWithDefaults instantiates a new Unit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnitWithDefaults() *Unit {
	this := Unit{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Unit) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Unit) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Unit) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Unit) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Unit) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Unit) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Unit) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Unit) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayNamePlural returns the DisplayNamePlural field value if set, zero value otherwise.
func (o *Unit) GetDisplayNamePlural() string {
	if o == nil || IsNil(o.DisplayNamePlural) {
		var ret string
		return ret
	}
	return *o.DisplayNamePlural
}

// GetDisplayNamePluralOk returns a tuple with the DisplayNamePlural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Unit) GetDisplayNamePluralOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayNamePlural) {
		return nil, false
	}
	return o.DisplayNamePlural, true
}

// HasDisplayNamePlural returns a boolean if a field has been set.
func (o *Unit) HasDisplayNamePlural() bool {
	if o != nil && !IsNil(o.DisplayNamePlural) {
		return true
	}

	return false
}

// SetDisplayNamePlural gets a reference to the given string and assigns it to the DisplayNamePlural field.
func (o *Unit) SetDisplayNamePlural(v string) {
	o.DisplayNamePlural = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Unit) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Unit) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Unit) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Unit) SetSymbol(v string) {
	o.Symbol = &v
}

// GetUnitId returns the UnitId field value
func (o *Unit) GetUnitId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitId
}

// GetUnitIdOk returns a tuple with the UnitId field value
// and a boolean to check if the value has been set.
func (o *Unit) GetUnitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitId, true
}

// SetUnitId sets field value
func (o *Unit) SetUnitId(v string) {
	o.UnitId = v
}

func (o Unit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Unit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayNamePlural) {
		toSerialize["displayNamePlural"] = o.DisplayNamePlural
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	toSerialize["unitId"] = o.UnitId
	return toSerialize, nil
}

type NullableUnit struct {
	value *Unit
	isSet bool
}

func (v NullableUnit) Get() *Unit {
	return v.value
}

func (v *NullableUnit) Set(val *Unit) {
	v.value = val
	v.isSet = true
}

func (v NullableUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnit(val *Unit) *NullableUnit {
	return &NullableUnit{value: val, isSet: true}
}

func (v NullableUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


