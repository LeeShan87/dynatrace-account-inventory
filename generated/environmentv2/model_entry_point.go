/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EntryPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntryPoint{}

// EntryPoint Information about an entry point of a code-level vulnerability.
type EntryPoint struct {
	// Source HTTP path of entry points.
	SourceHttpPath *string `json:"sourceHttpPath,omitempty"`
	// List of entry point usage segments.
	UsageSegments []EntryPointUsageSegment `json:"usageSegments,omitempty"`
}

// NewEntryPoint instantiates a new EntryPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryPoint() *EntryPoint {
	this := EntryPoint{}
	return &this
}

// NewEntryPointWithDefaults instantiates a new EntryPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryPointWithDefaults() *EntryPoint {
	this := EntryPoint{}
	return &this
}

// GetSourceHttpPath returns the SourceHttpPath field value if set, zero value otherwise.
func (o *EntryPoint) GetSourceHttpPath() string {
	if o == nil || IsNil(o.SourceHttpPath) {
		var ret string
		return ret
	}
	return *o.SourceHttpPath
}

// GetSourceHttpPathOk returns a tuple with the SourceHttpPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryPoint) GetSourceHttpPathOk() (*string, bool) {
	if o == nil || IsNil(o.SourceHttpPath) {
		return nil, false
	}
	return o.SourceHttpPath, true
}

// HasSourceHttpPath returns a boolean if a field has been set.
func (o *EntryPoint) HasSourceHttpPath() bool {
	if o != nil && !IsNil(o.SourceHttpPath) {
		return true
	}

	return false
}

// SetSourceHttpPath gets a reference to the given string and assigns it to the SourceHttpPath field.
func (o *EntryPoint) SetSourceHttpPath(v string) {
	o.SourceHttpPath = &v
}

// GetUsageSegments returns the UsageSegments field value if set, zero value otherwise.
func (o *EntryPoint) GetUsageSegments() []EntryPointUsageSegment {
	if o == nil || IsNil(o.UsageSegments) {
		var ret []EntryPointUsageSegment
		return ret
	}
	return o.UsageSegments
}

// GetUsageSegmentsOk returns a tuple with the UsageSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryPoint) GetUsageSegmentsOk() ([]EntryPointUsageSegment, bool) {
	if o == nil || IsNil(o.UsageSegments) {
		return nil, false
	}
	return o.UsageSegments, true
}

// HasUsageSegments returns a boolean if a field has been set.
func (o *EntryPoint) HasUsageSegments() bool {
	if o != nil && !IsNil(o.UsageSegments) {
		return true
	}

	return false
}

// SetUsageSegments gets a reference to the given []EntryPointUsageSegment and assigns it to the UsageSegments field.
func (o *EntryPoint) SetUsageSegments(v []EntryPointUsageSegment) {
	o.UsageSegments = v
}

func (o EntryPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntryPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceHttpPath) {
		toSerialize["sourceHttpPath"] = o.SourceHttpPath
	}
	if !IsNil(o.UsageSegments) {
		toSerialize["usageSegments"] = o.UsageSegments
	}
	return toSerialize, nil
}

type NullableEntryPoint struct {
	value *EntryPoint
	isSet bool
}

func (v NullableEntryPoint) Get() *EntryPoint {
	return v.value
}

func (v *NullableEntryPoint) Set(val *EntryPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryPoint(val *EntryPoint) *NullableEntryPoint {
	return &NullableEntryPoint{value: val, isSet: true}
}

func (v NullableEntryPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


