/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SyntheticOnDemandMonitorExecutionsAPIService SyntheticOnDemandMonitorExecutionsAPI service
type SyntheticOnDemandMonitorExecutionsAPIService service

type ApiExecuteRequest struct {
	ctx context.Context
	ApiService *SyntheticOnDemandMonitorExecutionsAPIService
	syntheticOnDemandExecutionRequest *SyntheticOnDemandExecutionRequest
}

// The JSON body of the request. Contains the parameters of the triggered on-demand execution.
func (r ApiExecuteRequest) SyntheticOnDemandExecutionRequest(syntheticOnDemandExecutionRequest SyntheticOnDemandExecutionRequest) ApiExecuteRequest {
	r.syntheticOnDemandExecutionRequest = &syntheticOnDemandExecutionRequest
	return r
}

func (r ApiExecuteRequest) Execute() (*SyntheticOnDemandExecutionResult, *http.Response, error) {
	return r.ApiService.ExecuteExecute(r)
}

/*
Execute Triggers on-demand executions for synthetic monitors

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExecuteRequest
*/
func (a *SyntheticOnDemandMonitorExecutionsAPIService) Execute(ctx context.Context) ApiExecuteRequest {
	return ApiExecuteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SyntheticOnDemandExecutionResult
func (a *SyntheticOnDemandMonitorExecutionsAPIService) ExecuteExecute(r ApiExecuteRequest) (*SyntheticOnDemandExecutionResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SyntheticOnDemandExecutionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyntheticOnDemandMonitorExecutionsAPIService.Execute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synthetic/executions/batch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.syntheticOnDemandExecutionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBatchRequest struct {
	ctx context.Context
	ApiService *SyntheticOnDemandMonitorExecutionsAPIService
	batchId int64
}

func (r ApiGetBatchRequest) Execute() (*SyntheticOnDemandBatchStatus, *http.Response, error) {
	return r.ApiService.GetBatchExecute(r)
}

/*
GetBatch Gets summary information and the list of failed executions for the given batch ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param batchId The batch identifier of the executions.
 @return ApiGetBatchRequest
*/
func (a *SyntheticOnDemandMonitorExecutionsAPIService) GetBatch(ctx context.Context, batchId int64) ApiGetBatchRequest {
	return ApiGetBatchRequest{
		ApiService: a,
		ctx: ctx,
		batchId: batchId,
	}
}

// Execute executes the request
//  @return SyntheticOnDemandBatchStatus
func (a *SyntheticOnDemandMonitorExecutionsAPIService) GetBatchExecute(r ApiGetBatchRequest) (*SyntheticOnDemandBatchStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SyntheticOnDemandBatchStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyntheticOnDemandMonitorExecutionsAPIService.GetBatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synthetic/executions/batch/{batchId}"
	localVarPath = strings.Replace(localVarPath, "{"+"batchId"+"}", url.PathEscape(parameterValueToString(r.batchId, "batchId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionRequest struct {
	ctx context.Context
	ApiService *SyntheticOnDemandMonitorExecutionsAPIService
	executionId int64
}

func (r ApiGetExecutionRequest) Execute() (*SyntheticOnDemandExecution, *http.Response, error) {
	return r.ApiService.GetExecutionExecute(r)
}

/*
GetExecution Gets basic results of the specified on-demand execution

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param executionId The identifier of the on-demand execution.
 @return ApiGetExecutionRequest
*/
func (a *SyntheticOnDemandMonitorExecutionsAPIService) GetExecution(ctx context.Context, executionId int64) ApiGetExecutionRequest {
	return ApiGetExecutionRequest{
		ApiService: a,
		ctx: ctx,
		executionId: executionId,
	}
}

// Execute executes the request
//  @return SyntheticOnDemandExecution
func (a *SyntheticOnDemandMonitorExecutionsAPIService) GetExecutionExecute(r ApiGetExecutionRequest) (*SyntheticOnDemandExecution, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SyntheticOnDemandExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyntheticOnDemandMonitorExecutionsAPIService.GetExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synthetic/executions/{executionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionFullReportRequest struct {
	ctx context.Context
	ApiService *SyntheticOnDemandMonitorExecutionsAPIService
	executionId int64
}

func (r ApiGetExecutionFullReportRequest) Execute() (*SyntheticOnDemandExecution, *http.Response, error) {
	return r.ApiService.GetExecutionFullReportExecute(r)
}

/*
GetExecutionFullReport Gets detailed results of the specified on-demand execution

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param executionId The identifier of the on-demand execution.
 @return ApiGetExecutionFullReportRequest
*/
func (a *SyntheticOnDemandMonitorExecutionsAPIService) GetExecutionFullReport(ctx context.Context, executionId int64) ApiGetExecutionFullReportRequest {
	return ApiGetExecutionFullReportRequest{
		ApiService: a,
		ctx: ctx,
		executionId: executionId,
	}
}

// Execute executes the request
//  @return SyntheticOnDemandExecution
func (a *SyntheticOnDemandMonitorExecutionsAPIService) GetExecutionFullReportExecute(r ApiGetExecutionFullReportRequest) (*SyntheticOnDemandExecution, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SyntheticOnDemandExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyntheticOnDemandMonitorExecutionsAPIService.GetExecutionFullReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synthetic/executions/{executionId}/fullReport"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionsRequest struct {
	ctx context.Context
	ApiService *SyntheticOnDemandMonitorExecutionsAPIService
	executionStage *string
	schedulingFrom *string
	schedulingTo *string
	executionFrom *string
	executionTo *string
	dataDeliveryFrom *string
	dataDeliveryTo *string
	batchId *int64
	monitorId *string
	locationId *string
	userId *string
	source *string
}

// Filters the resulting set of executions by their stage.
func (r ApiGetExecutionsRequest) ExecutionStage(executionStage string) ApiGetExecutionsRequest {
	r.executionStage = &executionStage
	return r
}

// The start of the requested timeframe for scheduling timestamps.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the maximum relative timeframe of six hours is used (&#x60;now-6h&#x60;).
func (r ApiGetExecutionsRequest) SchedulingFrom(schedulingFrom string) ApiGetExecutionsRequest {
	r.schedulingFrom = &schedulingFrom
	return r
}

// The end of the requested timeframe for scheduling timestamps.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used.
func (r ApiGetExecutionsRequest) SchedulingTo(schedulingTo string) ApiGetExecutionsRequest {
	r.schedulingTo = &schedulingTo
	return r
}

// The start of the requested timeframe for execution timestamps.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the maximum relative timeframe of six hours is used (&#x60;now-6h&#x60;).
func (r ApiGetExecutionsRequest) ExecutionFrom(executionFrom string) ApiGetExecutionsRequest {
	r.executionFrom = &executionFrom
	return r
}

// The end of the requested timeframe for execution timestamps.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used.
func (r ApiGetExecutionsRequest) ExecutionTo(executionTo string) ApiGetExecutionsRequest {
	r.executionTo = &executionTo
	return r
}

// The start of the requested timeframe for data delivering timestamps.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the maximum relative timeframe of six hours is used (&#x60;now-6h&#x60;).
func (r ApiGetExecutionsRequest) DataDeliveryFrom(dataDeliveryFrom string) ApiGetExecutionsRequest {
	r.dataDeliveryFrom = &dataDeliveryFrom
	return r
}

// The end of the requested timeframe for data delivering timestamps.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used.
func (r ApiGetExecutionsRequest) DataDeliveryTo(dataDeliveryTo string) ApiGetExecutionsRequest {
	r.dataDeliveryTo = &dataDeliveryTo
	return r
}

// Filters the resulting set of the executions by batch. Specify the ID of the batch.
func (r ApiGetExecutionsRequest) BatchId(batchId int64) ApiGetExecutionsRequest {
	r.batchId = &batchId
	return r
}

// Filters the resulting set of the executions by monitor synthetic monitor. Specify the ID of the monitor.
func (r ApiGetExecutionsRequest) MonitorId(monitorId string) ApiGetExecutionsRequest {
	r.monitorId = &monitorId
	return r
}

// Filters the resulting set of the executions by Synthetic location. Specify the ID of the location.
func (r ApiGetExecutionsRequest) LocationId(locationId string) ApiGetExecutionsRequest {
	r.locationId = &locationId
	return r
}

// Filters the resulting set of executions by scheduled user.
func (r ApiGetExecutionsRequest) UserId(userId string) ApiGetExecutionsRequest {
	r.userId = &userId
	return r
}

// Filters the resulting set of the executions by the source of the triggering request.
func (r ApiGetExecutionsRequest) Source(source string) ApiGetExecutionsRequest {
	r.source = &source
	return r
}

func (r ApiGetExecutionsRequest) Execute() (*SyntheticOnDemandExecutions, *http.Response, error) {
	return r.ApiService.GetExecutionsExecute(r)
}

/*
GetExecutions Gets the list of all on-demand executions of synthetic monitors

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetExecutionsRequest
*/
func (a *SyntheticOnDemandMonitorExecutionsAPIService) GetExecutions(ctx context.Context) ApiGetExecutionsRequest {
	return ApiGetExecutionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SyntheticOnDemandExecutions
func (a *SyntheticOnDemandMonitorExecutionsAPIService) GetExecutionsExecute(r ApiGetExecutionsRequest) (*SyntheticOnDemandExecutions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SyntheticOnDemandExecutions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyntheticOnDemandMonitorExecutionsAPIService.GetExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synthetic/executions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.executionStage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionStage", r.executionStage, "")
	}
	if r.schedulingFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "schedulingFrom", r.schedulingFrom, "")
	}
	if r.schedulingTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "schedulingTo", r.schedulingTo, "")
	}
	if r.executionFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionFrom", r.executionFrom, "")
	}
	if r.executionTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionTo", r.executionTo, "")
	}
	if r.dataDeliveryFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataDeliveryFrom", r.dataDeliveryFrom, "")
	}
	if r.dataDeliveryTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataDeliveryTo", r.dataDeliveryTo, "")
	}
	if r.batchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchId", r.batchId, "")
	}
	if r.monitorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monitorId", r.monitorId, "")
	}
	if r.locationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locationId", r.locationId, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.source != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source", r.source, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
