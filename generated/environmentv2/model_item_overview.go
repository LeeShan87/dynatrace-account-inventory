/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the ItemOverview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemOverview{}

// ItemOverview Overview of an item.
type ItemOverview struct {
	// The activation link for a technology
	ActivationLink *string `json:"activationLink,omitempty"`
	// The unique ID used by the artifacts contained in releases.
	ArtifactId *string `json:"artifactId,omitempty"`
	// Url for the author's logo.
	AuthorLogo *string `json:"authorLogo,omitempty"`
	// Name of the author of the item.
	AuthorName *string `json:"authorName,omitempty"`
	// Checks if the item is compatible with the cluster version.
	ClusterCompatible *bool `json:"clusterCompatible,omitempty"`
	// Whether or not the item is planned to be released soon
	ComingSoon *bool `json:"comingSoon,omitempty"`
	// Description of the item.
	Description *string `json:"description,omitempty"`
	// An absolute link to the documentation page of this item.
	DocumentationLink *string `json:"documentationLink,omitempty"`
	// Whether or not the details call will contain description blocks.
	HasDescriptionBlocks *bool `json:"hasDescriptionBlocks,omitempty"`
	// Unique Id of the item.
	ItemId *string `json:"itemId,omitempty"`
	// The logo of the item. Can be a URL or Base64 encoded. Intended for <image> html tags
	Logo *string `json:"logo,omitempty"`
	// An absolute link to the marketing page of this item.
	MarketingLink *string `json:"marketingLink,omitempty"`
	// Name of the item.
	Name *string `json:"name,omitempty"`
	// The reason why the item is not compatible with the cluster version.
	NotCompatibleReason *string `json:"notCompatibleReason,omitempty"`
	// Grouping of items with keywords.
	Tags []string `json:"tags,omitempty"`
	// Represents the type of item. It can be TECHNOLOGY, EXTENSION1 or EXTENSION2.
	Type *string `json:"type,omitempty"`
}

// NewItemOverview instantiates a new ItemOverview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemOverview() *ItemOverview {
	this := ItemOverview{}
	return &this
}

// NewItemOverviewWithDefaults instantiates a new ItemOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemOverviewWithDefaults() *ItemOverview {
	this := ItemOverview{}
	return &this
}

// GetActivationLink returns the ActivationLink field value if set, zero value otherwise.
func (o *ItemOverview) GetActivationLink() string {
	if o == nil || IsNil(o.ActivationLink) {
		var ret string
		return ret
	}
	return *o.ActivationLink
}

// GetActivationLinkOk returns a tuple with the ActivationLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetActivationLinkOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationLink) {
		return nil, false
	}
	return o.ActivationLink, true
}

// HasActivationLink returns a boolean if a field has been set.
func (o *ItemOverview) HasActivationLink() bool {
	if o != nil && !IsNil(o.ActivationLink) {
		return true
	}

	return false
}

// SetActivationLink gets a reference to the given string and assigns it to the ActivationLink field.
func (o *ItemOverview) SetActivationLink(v string) {
	o.ActivationLink = &v
}

// GetArtifactId returns the ArtifactId field value if set, zero value otherwise.
func (o *ItemOverview) GetArtifactId() string {
	if o == nil || IsNil(o.ArtifactId) {
		var ret string
		return ret
	}
	return *o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetArtifactIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArtifactId) {
		return nil, false
	}
	return o.ArtifactId, true
}

// HasArtifactId returns a boolean if a field has been set.
func (o *ItemOverview) HasArtifactId() bool {
	if o != nil && !IsNil(o.ArtifactId) {
		return true
	}

	return false
}

// SetArtifactId gets a reference to the given string and assigns it to the ArtifactId field.
func (o *ItemOverview) SetArtifactId(v string) {
	o.ArtifactId = &v
}

// GetAuthorLogo returns the AuthorLogo field value if set, zero value otherwise.
func (o *ItemOverview) GetAuthorLogo() string {
	if o == nil || IsNil(o.AuthorLogo) {
		var ret string
		return ret
	}
	return *o.AuthorLogo
}

// GetAuthorLogoOk returns a tuple with the AuthorLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetAuthorLogoOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorLogo) {
		return nil, false
	}
	return o.AuthorLogo, true
}

// HasAuthorLogo returns a boolean if a field has been set.
func (o *ItemOverview) HasAuthorLogo() bool {
	if o != nil && !IsNil(o.AuthorLogo) {
		return true
	}

	return false
}

// SetAuthorLogo gets a reference to the given string and assigns it to the AuthorLogo field.
func (o *ItemOverview) SetAuthorLogo(v string) {
	o.AuthorLogo = &v
}

// GetAuthorName returns the AuthorName field value if set, zero value otherwise.
func (o *ItemOverview) GetAuthorName() string {
	if o == nil || IsNil(o.AuthorName) {
		var ret string
		return ret
	}
	return *o.AuthorName
}

// GetAuthorNameOk returns a tuple with the AuthorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetAuthorNameOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorName) {
		return nil, false
	}
	return o.AuthorName, true
}

// HasAuthorName returns a boolean if a field has been set.
func (o *ItemOverview) HasAuthorName() bool {
	if o != nil && !IsNil(o.AuthorName) {
		return true
	}

	return false
}

// SetAuthorName gets a reference to the given string and assigns it to the AuthorName field.
func (o *ItemOverview) SetAuthorName(v string) {
	o.AuthorName = &v
}

// GetClusterCompatible returns the ClusterCompatible field value if set, zero value otherwise.
func (o *ItemOverview) GetClusterCompatible() bool {
	if o == nil || IsNil(o.ClusterCompatible) {
		var ret bool
		return ret
	}
	return *o.ClusterCompatible
}

// GetClusterCompatibleOk returns a tuple with the ClusterCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetClusterCompatibleOk() (*bool, bool) {
	if o == nil || IsNil(o.ClusterCompatible) {
		return nil, false
	}
	return o.ClusterCompatible, true
}

// HasClusterCompatible returns a boolean if a field has been set.
func (o *ItemOverview) HasClusterCompatible() bool {
	if o != nil && !IsNil(o.ClusterCompatible) {
		return true
	}

	return false
}

// SetClusterCompatible gets a reference to the given bool and assigns it to the ClusterCompatible field.
func (o *ItemOverview) SetClusterCompatible(v bool) {
	o.ClusterCompatible = &v
}

// GetComingSoon returns the ComingSoon field value if set, zero value otherwise.
func (o *ItemOverview) GetComingSoon() bool {
	if o == nil || IsNil(o.ComingSoon) {
		var ret bool
		return ret
	}
	return *o.ComingSoon
}

// GetComingSoonOk returns a tuple with the ComingSoon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetComingSoonOk() (*bool, bool) {
	if o == nil || IsNil(o.ComingSoon) {
		return nil, false
	}
	return o.ComingSoon, true
}

// HasComingSoon returns a boolean if a field has been set.
func (o *ItemOverview) HasComingSoon() bool {
	if o != nil && !IsNil(o.ComingSoon) {
		return true
	}

	return false
}

// SetComingSoon gets a reference to the given bool and assigns it to the ComingSoon field.
func (o *ItemOverview) SetComingSoon(v bool) {
	o.ComingSoon = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ItemOverview) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ItemOverview) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ItemOverview) SetDescription(v string) {
	o.Description = &v
}

// GetDocumentationLink returns the DocumentationLink field value if set, zero value otherwise.
func (o *ItemOverview) GetDocumentationLink() string {
	if o == nil || IsNil(o.DocumentationLink) {
		var ret string
		return ret
	}
	return *o.DocumentationLink
}

// GetDocumentationLinkOk returns a tuple with the DocumentationLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetDocumentationLinkOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentationLink) {
		return nil, false
	}
	return o.DocumentationLink, true
}

// HasDocumentationLink returns a boolean if a field has been set.
func (o *ItemOverview) HasDocumentationLink() bool {
	if o != nil && !IsNil(o.DocumentationLink) {
		return true
	}

	return false
}

// SetDocumentationLink gets a reference to the given string and assigns it to the DocumentationLink field.
func (o *ItemOverview) SetDocumentationLink(v string) {
	o.DocumentationLink = &v
}

// GetHasDescriptionBlocks returns the HasDescriptionBlocks field value if set, zero value otherwise.
func (o *ItemOverview) GetHasDescriptionBlocks() bool {
	if o == nil || IsNil(o.HasDescriptionBlocks) {
		var ret bool
		return ret
	}
	return *o.HasDescriptionBlocks
}

// GetHasDescriptionBlocksOk returns a tuple with the HasDescriptionBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetHasDescriptionBlocksOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDescriptionBlocks) {
		return nil, false
	}
	return o.HasDescriptionBlocks, true
}

// HasHasDescriptionBlocks returns a boolean if a field has been set.
func (o *ItemOverview) HasHasDescriptionBlocks() bool {
	if o != nil && !IsNil(o.HasDescriptionBlocks) {
		return true
	}

	return false
}

// SetHasDescriptionBlocks gets a reference to the given bool and assigns it to the HasDescriptionBlocks field.
func (o *ItemOverview) SetHasDescriptionBlocks(v bool) {
	o.HasDescriptionBlocks = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *ItemOverview) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *ItemOverview) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *ItemOverview) SetItemId(v string) {
	o.ItemId = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *ItemOverview) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *ItemOverview) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *ItemOverview) SetLogo(v string) {
	o.Logo = &v
}

// GetMarketingLink returns the MarketingLink field value if set, zero value otherwise.
func (o *ItemOverview) GetMarketingLink() string {
	if o == nil || IsNil(o.MarketingLink) {
		var ret string
		return ret
	}
	return *o.MarketingLink
}

// GetMarketingLinkOk returns a tuple with the MarketingLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetMarketingLinkOk() (*string, bool) {
	if o == nil || IsNil(o.MarketingLink) {
		return nil, false
	}
	return o.MarketingLink, true
}

// HasMarketingLink returns a boolean if a field has been set.
func (o *ItemOverview) HasMarketingLink() bool {
	if o != nil && !IsNil(o.MarketingLink) {
		return true
	}

	return false
}

// SetMarketingLink gets a reference to the given string and assigns it to the MarketingLink field.
func (o *ItemOverview) SetMarketingLink(v string) {
	o.MarketingLink = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ItemOverview) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ItemOverview) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ItemOverview) SetName(v string) {
	o.Name = &v
}

// GetNotCompatibleReason returns the NotCompatibleReason field value if set, zero value otherwise.
func (o *ItemOverview) GetNotCompatibleReason() string {
	if o == nil || IsNil(o.NotCompatibleReason) {
		var ret string
		return ret
	}
	return *o.NotCompatibleReason
}

// GetNotCompatibleReasonOk returns a tuple with the NotCompatibleReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetNotCompatibleReasonOk() (*string, bool) {
	if o == nil || IsNil(o.NotCompatibleReason) {
		return nil, false
	}
	return o.NotCompatibleReason, true
}

// HasNotCompatibleReason returns a boolean if a field has been set.
func (o *ItemOverview) HasNotCompatibleReason() bool {
	if o != nil && !IsNil(o.NotCompatibleReason) {
		return true
	}

	return false
}

// SetNotCompatibleReason gets a reference to the given string and assigns it to the NotCompatibleReason field.
func (o *ItemOverview) SetNotCompatibleReason(v string) {
	o.NotCompatibleReason = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ItemOverview) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ItemOverview) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ItemOverview) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ItemOverview) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemOverview) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ItemOverview) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ItemOverview) SetType(v string) {
	o.Type = &v
}

func (o ItemOverview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemOverview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivationLink) {
		toSerialize["activationLink"] = o.ActivationLink
	}
	if !IsNil(o.ArtifactId) {
		toSerialize["artifactId"] = o.ArtifactId
	}
	if !IsNil(o.AuthorLogo) {
		toSerialize["authorLogo"] = o.AuthorLogo
	}
	if !IsNil(o.AuthorName) {
		toSerialize["authorName"] = o.AuthorName
	}
	if !IsNil(o.ClusterCompatible) {
		toSerialize["clusterCompatible"] = o.ClusterCompatible
	}
	if !IsNil(o.ComingSoon) {
		toSerialize["comingSoon"] = o.ComingSoon
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DocumentationLink) {
		toSerialize["documentationLink"] = o.DocumentationLink
	}
	if !IsNil(o.HasDescriptionBlocks) {
		toSerialize["hasDescriptionBlocks"] = o.HasDescriptionBlocks
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.MarketingLink) {
		toSerialize["marketingLink"] = o.MarketingLink
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotCompatibleReason) {
		toSerialize["notCompatibleReason"] = o.NotCompatibleReason
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableItemOverview struct {
	value *ItemOverview
	isSet bool
}

func (v NullableItemOverview) Get() *ItemOverview {
	return v.value
}

func (v *NullableItemOverview) Set(val *ItemOverview) {
	v.value = val
	v.isSet = true
}

func (v NullableItemOverview) IsSet() bool {
	return v.isSet
}

func (v *NullableItemOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemOverview(val *ItemOverview) *NullableItemOverview {
	return &NullableItemOverview{value: val, isSet: true}
}

func (v NullableItemOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


