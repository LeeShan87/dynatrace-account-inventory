/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the SchemaConstraintRestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaConstraintRestDto{}

// SchemaConstraintRestDto struct for SchemaConstraintRestDto
type SchemaConstraintRestDto struct {
	// A custom message for invalid values.
	CustomMessage *string `json:"customMessage,omitempty"`
	// The ID of a custom validator.
	CustomValidatorId *string `json:"customValidatorId,omitempty"`
	// The type of the schema constraint.
	Type string `json:"type"`
	// The list of properties for which the combination of values needs to be unique
	UniqueProperties []string `json:"uniqueProperties,omitempty"`
}

// NewSchemaConstraintRestDto instantiates a new SchemaConstraintRestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaConstraintRestDto(type_ string) *SchemaConstraintRestDto {
	this := SchemaConstraintRestDto{}
	this.Type = type_
	return &this
}

// NewSchemaConstraintRestDtoWithDefaults instantiates a new SchemaConstraintRestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaConstraintRestDtoWithDefaults() *SchemaConstraintRestDto {
	this := SchemaConstraintRestDto{}
	return &this
}

// GetCustomMessage returns the CustomMessage field value if set, zero value otherwise.
func (o *SchemaConstraintRestDto) GetCustomMessage() string {
	if o == nil || IsNil(o.CustomMessage) {
		var ret string
		return ret
	}
	return *o.CustomMessage
}

// GetCustomMessageOk returns a tuple with the CustomMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaConstraintRestDto) GetCustomMessageOk() (*string, bool) {
	if o == nil || IsNil(o.CustomMessage) {
		return nil, false
	}
	return o.CustomMessage, true
}

// HasCustomMessage returns a boolean if a field has been set.
func (o *SchemaConstraintRestDto) HasCustomMessage() bool {
	if o != nil && !IsNil(o.CustomMessage) {
		return true
	}

	return false
}

// SetCustomMessage gets a reference to the given string and assigns it to the CustomMessage field.
func (o *SchemaConstraintRestDto) SetCustomMessage(v string) {
	o.CustomMessage = &v
}

// GetCustomValidatorId returns the CustomValidatorId field value if set, zero value otherwise.
func (o *SchemaConstraintRestDto) GetCustomValidatorId() string {
	if o == nil || IsNil(o.CustomValidatorId) {
		var ret string
		return ret
	}
	return *o.CustomValidatorId
}

// GetCustomValidatorIdOk returns a tuple with the CustomValidatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaConstraintRestDto) GetCustomValidatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomValidatorId) {
		return nil, false
	}
	return o.CustomValidatorId, true
}

// HasCustomValidatorId returns a boolean if a field has been set.
func (o *SchemaConstraintRestDto) HasCustomValidatorId() bool {
	if o != nil && !IsNil(o.CustomValidatorId) {
		return true
	}

	return false
}

// SetCustomValidatorId gets a reference to the given string and assigns it to the CustomValidatorId field.
func (o *SchemaConstraintRestDto) SetCustomValidatorId(v string) {
	o.CustomValidatorId = &v
}

// GetType returns the Type field value
func (o *SchemaConstraintRestDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SchemaConstraintRestDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SchemaConstraintRestDto) SetType(v string) {
	o.Type = v
}

// GetUniqueProperties returns the UniqueProperties field value if set, zero value otherwise.
func (o *SchemaConstraintRestDto) GetUniqueProperties() []string {
	if o == nil || IsNil(o.UniqueProperties) {
		var ret []string
		return ret
	}
	return o.UniqueProperties
}

// GetUniquePropertiesOk returns a tuple with the UniqueProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaConstraintRestDto) GetUniquePropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.UniqueProperties) {
		return nil, false
	}
	return o.UniqueProperties, true
}

// HasUniqueProperties returns a boolean if a field has been set.
func (o *SchemaConstraintRestDto) HasUniqueProperties() bool {
	if o != nil && !IsNil(o.UniqueProperties) {
		return true
	}

	return false
}

// SetUniqueProperties gets a reference to the given []string and assigns it to the UniqueProperties field.
func (o *SchemaConstraintRestDto) SetUniqueProperties(v []string) {
	o.UniqueProperties = v
}

func (o SchemaConstraintRestDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaConstraintRestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomMessage) {
		toSerialize["customMessage"] = o.CustomMessage
	}
	if !IsNil(o.CustomValidatorId) {
		toSerialize["customValidatorId"] = o.CustomValidatorId
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UniqueProperties) {
		toSerialize["uniqueProperties"] = o.UniqueProperties
	}
	return toSerialize, nil
}

type NullableSchemaConstraintRestDto struct {
	value *SchemaConstraintRestDto
	isSet bool
}

func (v NullableSchemaConstraintRestDto) Get() *SchemaConstraintRestDto {
	return v.value
}

func (v *NullableSchemaConstraintRestDto) Set(val *SchemaConstraintRestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaConstraintRestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaConstraintRestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaConstraintRestDto(val *SchemaConstraintRestDto) *NullableSchemaConstraintRestDto {
	return &NullableSchemaConstraintRestDto{value: val, isSet: true}
}

func (v NullableSchemaConstraintRestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaConstraintRestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


