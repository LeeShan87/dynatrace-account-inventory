/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the EventEvidence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventEvidence{}

// EventEvidence The event evidence of the problem.   An event that occurred during the problem lifespan that might be related to the root cause.
type EventEvidence struct {
	Data *Event `json:"data,omitempty"`
	// The end timestamp of the event, in UTC milliseconds.    Has `-1` value, if the event is still active.
	EndTime int64 `json:"endTime"`
	// The ID of the event.
	EventId string `json:"eventId"`
	// The type of the event.
	EventType string `json:"eventType"`
}

// NewEventEvidence instantiates a new EventEvidence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventEvidence(endTime int64, eventId string, eventType string, displayName string, entity EntityStub, evidenceType string, rootCauseRelevant bool, startTime int64) *EventEvidence {
	this := EventEvidence{}
	this.DisplayName = displayName
	this.Entity = entity
	this.EvidenceType = evidenceType
	this.RootCauseRelevant = rootCauseRelevant
	this.StartTime = startTime
	this.EndTime = endTime
	this.EventId = eventId
	this.EventType = eventType
	return &this
}

// NewEventEvidenceWithDefaults instantiates a new EventEvidence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventEvidenceWithDefaults() *EventEvidence {
	this := EventEvidence{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventEvidence) GetData() Event {
	if o == nil || IsNil(o.Data) {
		var ret Event
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventEvidence) GetDataOk() (*Event, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventEvidence) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given Event and assigns it to the Data field.
func (o *EventEvidence) SetData(v Event) {
	o.Data = &v
}

// GetEndTime returns the EndTime field value
func (o *EventEvidence) GetEndTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *EventEvidence) GetEndTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *EventEvidence) SetEndTime(v int64) {
	o.EndTime = v
}

// GetEventId returns the EventId field value
func (o *EventEvidence) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *EventEvidence) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *EventEvidence) SetEventId(v string) {
	o.EventId = v
}

// GetEventType returns the EventType field value
func (o *EventEvidence) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *EventEvidence) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *EventEvidence) SetEventType(v string) {
	o.EventType = v
}

func (o EventEvidence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventEvidence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	toSerialize["endTime"] = o.EndTime
	toSerialize["eventId"] = o.EventId
	toSerialize["eventType"] = o.EventType
	return toSerialize, nil
}

type NullableEventEvidence struct {
	value *EventEvidence
	isSet bool
}

func (v NullableEventEvidence) Get() *EventEvidence {
	return v.value
}

func (v *NullableEventEvidence) Set(val *EventEvidence) {
	v.value = val
	v.isSet = true
}

func (v NullableEventEvidence) IsSet() bool {
	return v.isSet
}

func (v *NullableEventEvidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventEvidence(val *EventEvidence) *NullableEventEvidence {
	return &NullableEventEvidence{value: val, isSet: true}
}

func (v NullableEventEvidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventEvidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


