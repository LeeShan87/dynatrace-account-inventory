/*
Dynatrace Environment API

 Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environmentv2

import (
	"encoding/json"
)

// checks if the Extension1Release type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Extension1Release{}

// Extension1Release Extension version 1 release details.
type Extension1Release struct {
	// SHA-256 hash of the extension version 1.
	ArtifactSha256 NullableString `json:"artifactSha256,omitempty"`
	// The title of the extension version 1.
	ArtifactTitle NullableString `json:"artifactTitle,omitempty"`
	// The associated release notes.
	ReleaseNotes NullableString `json:"releaseNotes,omitempty"`
	// The version number of the extension version 1 release.
	Version *string `json:"version,omitempty"`
}

// NewExtension1Release instantiates a new Extension1Release object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtension1Release() *Extension1Release {
	this := Extension1Release{}
	return &this
}

// NewExtension1ReleaseWithDefaults instantiates a new Extension1Release object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtension1ReleaseWithDefaults() *Extension1Release {
	this := Extension1Release{}
	return &this
}

// GetArtifactSha256 returns the ArtifactSha256 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Extension1Release) GetArtifactSha256() string {
	if o == nil || IsNil(o.ArtifactSha256.Get()) {
		var ret string
		return ret
	}
	return *o.ArtifactSha256.Get()
}

// GetArtifactSha256Ok returns a tuple with the ArtifactSha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Extension1Release) GetArtifactSha256Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArtifactSha256.Get(), o.ArtifactSha256.IsSet()
}

// HasArtifactSha256 returns a boolean if a field has been set.
func (o *Extension1Release) HasArtifactSha256() bool {
	if o != nil && o.ArtifactSha256.IsSet() {
		return true
	}

	return false
}

// SetArtifactSha256 gets a reference to the given NullableString and assigns it to the ArtifactSha256 field.
func (o *Extension1Release) SetArtifactSha256(v string) {
	o.ArtifactSha256.Set(&v)
}
// SetArtifactSha256Nil sets the value for ArtifactSha256 to be an explicit nil
func (o *Extension1Release) SetArtifactSha256Nil() {
	o.ArtifactSha256.Set(nil)
}

// UnsetArtifactSha256 ensures that no value is present for ArtifactSha256, not even an explicit nil
func (o *Extension1Release) UnsetArtifactSha256() {
	o.ArtifactSha256.Unset()
}

// GetArtifactTitle returns the ArtifactTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Extension1Release) GetArtifactTitle() string {
	if o == nil || IsNil(o.ArtifactTitle.Get()) {
		var ret string
		return ret
	}
	return *o.ArtifactTitle.Get()
}

// GetArtifactTitleOk returns a tuple with the ArtifactTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Extension1Release) GetArtifactTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArtifactTitle.Get(), o.ArtifactTitle.IsSet()
}

// HasArtifactTitle returns a boolean if a field has been set.
func (o *Extension1Release) HasArtifactTitle() bool {
	if o != nil && o.ArtifactTitle.IsSet() {
		return true
	}

	return false
}

// SetArtifactTitle gets a reference to the given NullableString and assigns it to the ArtifactTitle field.
func (o *Extension1Release) SetArtifactTitle(v string) {
	o.ArtifactTitle.Set(&v)
}
// SetArtifactTitleNil sets the value for ArtifactTitle to be an explicit nil
func (o *Extension1Release) SetArtifactTitleNil() {
	o.ArtifactTitle.Set(nil)
}

// UnsetArtifactTitle ensures that no value is present for ArtifactTitle, not even an explicit nil
func (o *Extension1Release) UnsetArtifactTitle() {
	o.ArtifactTitle.Unset()
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Extension1Release) GetReleaseNotes() string {
	if o == nil || IsNil(o.ReleaseNotes.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseNotes.Get()
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Extension1Release) GetReleaseNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseNotes.Get(), o.ReleaseNotes.IsSet()
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *Extension1Release) HasReleaseNotes() bool {
	if o != nil && o.ReleaseNotes.IsSet() {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given NullableString and assigns it to the ReleaseNotes field.
func (o *Extension1Release) SetReleaseNotes(v string) {
	o.ReleaseNotes.Set(&v)
}
// SetReleaseNotesNil sets the value for ReleaseNotes to be an explicit nil
func (o *Extension1Release) SetReleaseNotesNil() {
	o.ReleaseNotes.Set(nil)
}

// UnsetReleaseNotes ensures that no value is present for ReleaseNotes, not even an explicit nil
func (o *Extension1Release) UnsetReleaseNotes() {
	o.ReleaseNotes.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Extension1Release) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension1Release) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Extension1Release) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Extension1Release) SetVersion(v string) {
	o.Version = &v
}

func (o Extension1Release) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Extension1Release) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ArtifactSha256.IsSet() {
		toSerialize["artifactSha256"] = o.ArtifactSha256.Get()
	}
	if o.ArtifactTitle.IsSet() {
		toSerialize["artifactTitle"] = o.ArtifactTitle.Get()
	}
	if o.ReleaseNotes.IsSet() {
		toSerialize["releaseNotes"] = o.ReleaseNotes.Get()
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableExtension1Release struct {
	value *Extension1Release
	isSet bool
}

func (v NullableExtension1Release) Get() *Extension1Release {
	return v.value
}

func (v *NullableExtension1Release) Set(val *Extension1Release) {
	v.value = val
	v.isSet = true
}

func (v NullableExtension1Release) IsSet() bool {
	return v.isSet
}

func (v *NullableExtension1Release) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtension1Release(val *Extension1Release) *NullableExtension1Release {
	return &NullableExtension1Release{value: val, isSet: true}
}

func (v NullableExtension1Release) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtension1Release) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


